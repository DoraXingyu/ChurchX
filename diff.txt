diff --git a/CMakeLists.txt b/CMakeLists.txt
index e768945..095f2dd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -49,7 +49,6 @@ if(GLUT_FOUND AND OPENGL_FOUND)
     #VHit.cu
     #VInit.cu
     ParticipatingMedium.cu
-    HitRecordInitialize.cu
     )
 
 else()
diff --git a/HitRecordInitialize.cu b/HitRecordInitialize.cu
deleted file mode 100644
index 26d04b0..0000000
--- a/HitRecordInitialize.cu
+++ /dev/null
@@ -1,24 +0,0 @@
-#include <optix.h>
-#include <optix_cuda.h>
-#include <optixu/optixu_math_namespace.h>
-#include "ppm.h"
-
-using namespace optix;
-
-rtBuffer<HitRecord, 2>           rtpass_output_buffer;
-rtDeclareVariable(float,         rtpass_default_radius2, , );
-
-rtDeclareVariable(uint2, launchIndex, rtLaunchIndex, );
-
-RT_PROGRAM void kernel()
-{
-    HitRecord rec;
-    rec.normal=rec.position=make_float3(0.0f);
-
-    rec.flags = PPM_HIT;
-    rec.radius2 = rtpass_default_radius2;
-    rec.photon_count = 0;
-    rec.accum_atten = 0.0f;
-    rec.flux = make_float3(0.0f, 0.0f, 0.0f);
-    rtpass_output_buffer[launchIndex] = rec;
-}
\ No newline at end of file
diff --git a/ParticipatingMedium.cu b/ParticipatingMedium.cu
index cb551dc..bf7514a 100755
--- a/ParticipatingMedium.cu
+++ b/ParticipatingMedium.cu
@@ -21,6 +21,7 @@ rtDeclareVariable(rtObject,      top_object, , );
 
 rtDeclareVariable(float, sigma_a, , );
 rtDeclareVariable(float, sigma_s, , );
+rtDeclareVariable(uint, max_photon_count, , );
 
 rtDeclareVariable(uint2, launchIndex, rtLaunchIndex, );
 rtDeclareVariable(optix::Ray, ray, rtCurrentRay, );
@@ -119,7 +120,6 @@ RT_PROGRAM void closestHitPhoton()
     }
 
     float sample = rnd_float_from_uint2(photonPrd.sample);
-
     float scatterLocationT = - logf(1-sample)/sigma_t;
     float3 scatterPosition = hitPoint + scatterLocationT*ray.direction;
     int depth = photonPrd.ray_depth;
@@ -138,10 +138,11 @@ RT_PROGRAM void closestHitPhoton()
     {
         const float scatterAlbedo = sigma_s/sigma_t;
 
-        if (sample >= scatterAlbedo)
+        if (photonPrd.sample.x + photonPrd.sample.y >= scatterAlbedo)
         {
             return;
         }
+
         //photonPrd.power *= scatterAlbedo;
 
         // Store photon at scatter location
diff --git a/ppm.cpp b/ppm.cpp
index 1d0b4d5..b27d3ee 100644
--- a/ppm.cpp
+++ b/ppm.cpp
@@ -146,7 +146,6 @@ private:
     ppass,
     gather,
     clear_radiance_photon,
-    clear_hitRecord,
     numPrograms
   };
   unsigned int  m_frame_number;
@@ -179,16 +178,12 @@ private:
   const static unsigned int MAX_PHOTON_COUNT;
   const static float PPMRadius;
 
-  const static float m_sigma_a;
-  const static float m_sigma_s;
 };
 
 const unsigned int ProgressivePhotonScene::WIDTH  = 768u;
 const unsigned int ProgressivePhotonScene::HEIGHT = 768u;
 const unsigned int ProgressivePhotonScene::MAX_PHOTON_COUNT = 2u;
 const float ProgressivePhotonScene::PPMRadius = 0.04f;
-const float ProgressivePhotonScene::m_sigma_a = 0.05f;
-const float ProgressivePhotonScene::m_sigma_s = 0.01f;
 
 bool ProgressivePhotonScene::keyPressed(unsigned char key, int x, int y)
 {
@@ -232,7 +227,6 @@ bool ProgressivePhotonScene::keyPressed(unsigned char key, int x, int y)
 
 void ProgressivePhotonScene::initScene( InitialCameraData& camera_data )
 {
-  rtContextSetPrintEnabled(m_context->get(), true);
   // There's a performance advantage to using a device that isn't being used as a display.
   // We'll take a guess and pick the second GPU if the second one has the same compute
   // capability as the first.
@@ -302,13 +296,6 @@ void ProgressivePhotonScene::initScene( InitialCameraData& camera_data )
     m_context["rtpass_bg_color"]->setFloat( make_float3( 0.34f, 0.55f, 0.85f ) );
   }
 
-  // clear hit record
-  {
-    std::string ptx_path = ptxpath("progressivePhotonMap", "HitRecordInitialize.cu");
-    Program program = m_context->createProgramFromPTXFile( ptx_path, "kernel" );
-    m_context->setRayGenerationProgram(clear_hitRecord, program );
-  }
-
   // Set up camera
   camera_data = InitialCameraData( make_float3( 278.0f, 273.0f, -800.0f ), // eye
                                    make_float3( 278.0f, 273.0f, 0.0f ),    // lookat
@@ -426,16 +413,15 @@ void ProgressivePhotonScene::initScene( InitialCameraData& camera_data )
       optix::Material ptM = partmedium.getOptixMaterial(m_context, partmedium_ptxpath);
 
       GeometryInstance gi = m_context->createGeometryInstance(geometry, &ptM, &ptM + 1);
-      gi["sigma_a"]->setFloat(m_sigma_a);
-      gi["sigma_s"]->setFloat(m_sigma_s);
+
       optix::GeometryGroup group = m_context->createGeometryGroup();
       group->setChildCount(1);
       group->setChild(0, gi);
       optix::Acceleration a = m_context->createAcceleration("NoAccel", "NoAccel");
       group->setAcceleration(a);
 
-      //geometry_group->setChildCount(geometry_group->getChildCount() + 1);
-      //geometry_group->setChild(geometry_group->getChildCount() - 1, gi);
+      geometry_group->setChildCount(geometry_group->getChildCount() + 1);
+      geometry_group->setChild(geometry_group->getChildCount() - 1, gi);
     }
 
 
@@ -682,20 +668,24 @@ void ProgressivePhotonScene::trace( const RayGenCameraData& camera_data )
     m_context["rtpass_U"]->setFloat(camera_data.U);
     m_context["rtpass_V"]->setFloat(camera_data.V);
     m_context["rtpass_W"]->setFloat(camera_data.W);
-    m_context->launch(clear_hitRecord,
+
+    // Trace viewing rays
+    if (m_print_timings) std::cerr << "Starting RT pass ... ";
+    std::cerr.flush();
+    double t0, t1;
+    sutilCurrentTime(&t0);
+    m_context->launch(rtpass,
                       static_cast<unsigned int>(buffer_width),
                       static_cast<unsigned int>(buffer_height));
-    m_iteration_count = 1;
+    sutilCurrentTime(&t1);
+    if (m_print_timings) std::cerr << "finished. " << t1 - t0 << std::endl;
     m_context["total_emitted"]->setFloat(0.0f);
+    m_iteration_count = 1;
   }
-  if (0)
-  {
-    Photon *debug_buffer = reinterpret_cast<Photon *>(m_volumetricPhotonsBuffer->map());
-    for (int i = 0; i < 100; ++i)
-      std::cout << i << " " << debug_buffer[i].position.x << " " << debug_buffer[i].position.y << " " <<
-      debug_buffer[i].position.z << std::endl;
-    m_volumetricPhotonsBuffer->unmap();
-  }
+  Photon* debug_buffer = reinterpret_cast<Photon*>(m_volumetricPhotonsBuffer->map());
+  for (int i=0; i<100; ++i)
+    std::cout<<i<<" "<<debug_buffer[i].position.x<<" "<<debug_buffer[i].position.y<<" "<<debug_buffer[i].position.z<<std::endl;
+  m_volumetricPhotonsBuffer->unmap();
   // Clear volume photons
   m_context["volumetricRadius"]->setFloat(0.033/0.033*PPMRadius);
   {
@@ -705,7 +695,7 @@ void ProgressivePhotonScene::trace( const RayGenCameraData& camera_data )
 
   if (0)
   {
-    Photon *debug_buffer = reinterpret_cast<Photon *>(m_volumetricPhotonsBuffer->map());
+    debug_buffer = reinterpret_cast<Photon *>(m_volumetricPhotonsBuffer->map());
     for (int i = 0; i < 100; ++i)
       std::cout << i << " " << debug_buffer[i].position.x << " " << debug_buffer[i].position.y << " " <<
       debug_buffer[i].position.z << std::endl;
@@ -723,8 +713,6 @@ void ProgressivePhotonScene::trace( const RayGenCameraData& camera_data )
   m_context->launch( ppass,
                     static_cast<unsigned int>(m_photon_launch_width),
                     static_cast<unsigned int>(m_photon_launch_height) );
-
-  m_volumetricPhotonsRoot->getAcceleration()->markDirty();
   // By computing the total number of photons as an unsigned long long we avoid 32 bit
   // floating point addition errors when the number of photons gets sufficiently large
   // (the error of adding two floating point numbers when the mantissa bits no longer
@@ -741,19 +729,6 @@ void ProgressivePhotonScene::trace( const RayGenCameraData& camera_data )
   sutilCurrentTime( &t1 );
   if (m_print_timings) std::cerr << "finished. " << t1 - t0 << std::endl;
 
-  // Trace viewing rays
-  {
-    if (m_print_timings) std::cerr << "Starting RT pass ... ";
-    std::cerr.flush();
-    double t0, t1;
-    sutilCurrentTime(&t0);
-    //m_context->launch(rtpass,
-      //                static_cast<unsigned int>(buffer_width),
-        //              static_cast<unsigned int>(buffer_height));
-    sutilCurrentTime(&t1);
-    if (m_print_timings) std::cerr << "finished. " << t1 - t0 << std::endl;
-  }
-
   // Shade view rays by gathering photons
   if (m_print_timings) std::cerr << "Starting gather pass   ... ";
   sutilCurrentTime( &t0 );
diff --git a/ppm_gather.cu b/ppm_gather.cu
index 267e873..bd8acbe 100644
--- a/ppm_gather.cu
+++ b/ppm_gather.cu
@@ -175,7 +175,7 @@ RT_PROGRAM void gather()
   float3 new_flux = ( rec_flux + flux_M ) * reduction_factor2;
   rec.d = make_float4( new_flux ); // set rec.flux
   float3 indirect_flux = 1.0f / ( M_PIf * new_R2 ) * new_flux / total_emitted;
-  //rtPrintf("%f\n", new_flux.x);
+
   // Compute direct
   float3 point_on_light;
   float dist_scale;
@@ -219,10 +219,7 @@ RT_PROGRAM void gather()
   float3 direct_flux = light.power * avg_atten *rec_atten_Kd;
   
   rtpass_output_buffer[launch_index] = rec;
-  float3 final_color = direct_flux + indirect_flux + ambient_light*rec_atten_Kd ;//+ rec_volumetricRadiance/total_emitted;
-  float3 tmp = rec_volumetricRadiance/total_emitted;
-  //rtPrintf("Final color: (%f, %f, %f), VolRadiance: (%f, %f, %f)\n", final_color.x, final_color.y, final_color.z,
-    //      tmp.x, tmp.y, tmp.z);
+  float3 final_color = direct_flux + indirect_flux + ambient_light*rec_atten_Kd + rec_volumetricRadiance/total_emitted;
   output_buffer[launch_index] = make_float4(final_color);
   if(use_debug_buffer == 1)
     debug_buffer[launch_index] = make_float4( loop_iter, new_R2, new_N, M );
diff --git a/ppm_rtpass.cu b/ppm_rtpass.cu
index 8a22704..6ce6079 100644
--- a/ppm_rtpass.cu
+++ b/ppm_rtpass.cu
@@ -105,7 +105,7 @@ RT_PROGRAM void rtpass_closest_hit()
 
   if( fmaxf( Kd ) > 0.0f ) { 
     // We hit a diffuse surface; record hit and return
-    HitRecord rec = rtpass_output_buffer[ launch_index ];;
+    HitRecord rec;
     rec.position = hit_point; 
     rec.normal = ffnormal;
     if( !use_grid ) {
@@ -123,6 +123,13 @@ RT_PROGRAM void rtpass_closest_hit()
         rec.attenuated_Kd = Kd * hit_prd.attenuation;
     }
     rec.flags = PPM_HIT;
+
+    rec.radius2 = rtpass_default_radius2;
+    rec.photon_count = 0;
+    rec.accum_atten = 0.0f;
+    rec.flux = make_float3(0.0f, 0.0f, 0.0f);
+    rec.volumetricRadiance = hit_prd.volumetricRadiance;
+
     rtpass_output_buffer[launch_index] = rec;
   } else {
     // Make reflection ray

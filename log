diff --git a/.idea/ChurchX.iml b/.idea/ChurchX.iml
index b3cdb22..a645cdc 100644
--- a/.idea/ChurchX.iml
+++ b/.idea/ChurchX.iml
@@ -12,13 +12,11 @@
       <sourceFolder url="file://$MODULE_DIR$/cuda/phong.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ABB.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm_ppass.cu" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/HitRecordInitialize.cu" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/select.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/parallelogram.cu" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/CMakeLists.txt" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ParticipatingMedium.cpp" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/PpmObjLoader.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonInitialize.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/helpers.h" isTestSource="false" />
@@ -27,38 +25,38 @@
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonSphere.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm_rtpass.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/model.cpp" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/model.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ParticipatingMedium.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/glass.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ParticipatingMedium.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm_gather.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/sphere.cu" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/random.h" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/model.h" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/PpmObjLoader.h" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/HitRecordInitialize.cu" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/select.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sampleConfig.h.in" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/SunSky.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/Mouse.cpp" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/sutil/ImageLoader.h" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMeshImpl.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMesh.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/GLUTDisplay.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshScene.h" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMesh.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/rply-1.01/rply.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/rply-1.01/rply.c" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/PPMLoader.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/AccelDescriptor.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/sutil.c" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/sutil/PPMLoader.h" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/sutil/SampleScene.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/SampleScene.cpp" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshImpl.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/HostMeshImpl.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshBase.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/glm.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/sutil.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/glm.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshScene.cpp" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMeshImpl.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/HostMesh.cpp" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/sutil/SampleScene.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/DeviceMemoryLogger.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/ImageLoader.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/CMakeLists.txt" isTestSource="false" />
@@ -66,17 +64,17 @@
       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshClasses.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/GLUTDisplay.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/DeviceMemoryLogger.h" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMesh.h" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/sutil/MeshBase.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/HDRLoader.h" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/sutil/MeshBase.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/ImageDisplay.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMesh.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/Mouse.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/ImageDisplay.h" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/sutil/PPMLoader.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/sutilapi.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshImpl.cpp" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/HDRLoader.cpp" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshImpl.h" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/sutil/ImageLoader.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshException.h" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/CMakeLists.txt" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/CMake/CompilerInfo.cmake" isTestSource="false" />
@@ -107,11 +105,12 @@
           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/Ink.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/SpeechRecognition.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/ImageCapture.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/Intents.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreImage.framework/Headers" />
           <root url="file:///System/Library/Frameworks/InstantMessage.framework/Headers" />
           <root url="file:///System/Library/Frameworks/MapKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/DirectoryService.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/SafariServices.framework/Headers" />
           <root url="file:///System/Library/Frameworks/InstallerPlugins.framework/Headers" />
           <root url="file:///System/Library/Frameworks/ForceFeedback.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreMediaIO.framework/Headers" />
@@ -144,9 +143,10 @@
           <root url="file:///System/Library/Frameworks/vmnet.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreMedia.framework/Headers" />
           <root url="file:///System/Library/Frameworks/GSS.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Tcl.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Tcl.framework/PrivateHeaders" />
+          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Contacts.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Cocoa.framework/Headers" />
           <root url="file:///System/Library/Frameworks/OpenCL.framework/Headers" />
@@ -167,25 +167,17 @@
           <root url="file:///System/Library/Frameworks/Accounts.framework/Headers" />
           <root url="file:///System/Library/Frameworks/SyncServices.framework/Headers" />
           <root url="file:///System/Library/Frameworks/AVFoundation.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Kernel.framework/Headers" />
           <root url="file:///System/Library/Frameworks/AppKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/InputMethodKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/SecurityInterface.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
           <root url="file:///System/Library/Frameworks/DVComponentGlue.framework/Headers" />
           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Headers" />
           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Frameworks/CFOpenDirectory.framework/Headers" />
           <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Frameworks/CoreBluetooth.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreAudio.framework/Headers" />
           <root url="file:///System/Library/Frameworks/DiskArbitration.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreBluetooth.framework/Headers" />
@@ -215,7 +207,6 @@
           <root url="file:///System/Library/Frameworks/CoreText.framework/Headers" />
           <root url="file:///System/Library/Frameworks/NetworkExtension.framework/Headers" />
           <root url="file:///System/Library/Frameworks/SceneKit.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
           <root url="file:///System/Library/Frameworks/PhotosUI.framework/Headers" />
           <root url="file:///System/Library/Frameworks/QuickLook.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Tk.framework/PrivateHeaders" />
@@ -254,11 +245,20 @@
           <root url="file:///System/Library/Frameworks/DiscRecording.framework/Headers" />
           <root url="file:///System/Library/Frameworks/PCSC.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CloudKit.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
           <root url="file:///System/Library/Frameworks/AppleScriptKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/MultipeerConnectivity.framework/Headers" />
           <root url="file:///System/Library/Frameworks/LDAP.framework/Headers" />
           <root url="file:///System/Library/Frameworks/JavaFrameEmbedding.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
           <root url="file:///System/Library/Frameworks/ServiceManagement.framework/Headers" />
           <root url="file:///System/Library/Frameworks/ICADevices.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Scripting.framework/Headers" />
@@ -294,11 +294,12 @@
           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/Ink.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/SpeechRecognition.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/ImageCapture.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/Intents.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreImage.framework/Headers" />
           <root url="file:///System/Library/Frameworks/InstantMessage.framework/Headers" />
           <root url="file:///System/Library/Frameworks/MapKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/DirectoryService.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/SafariServices.framework/Headers" />
           <root url="file:///System/Library/Frameworks/InstallerPlugins.framework/Headers" />
           <root url="file:///System/Library/Frameworks/ForceFeedback.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreMediaIO.framework/Headers" />
@@ -331,9 +332,10 @@
           <root url="file:///System/Library/Frameworks/vmnet.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreMedia.framework/Headers" />
           <root url="file:///System/Library/Frameworks/GSS.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Tcl.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Tcl.framework/PrivateHeaders" />
+          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Contacts.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Cocoa.framework/Headers" />
           <root url="file:///System/Library/Frameworks/OpenCL.framework/Headers" />
@@ -354,25 +356,17 @@
           <root url="file:///System/Library/Frameworks/Accounts.framework/Headers" />
           <root url="file:///System/Library/Frameworks/SyncServices.framework/Headers" />
           <root url="file:///System/Library/Frameworks/AVFoundation.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Kernel.framework/Headers" />
           <root url="file:///System/Library/Frameworks/AppKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/InputMethodKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/SecurityInterface.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
           <root url="file:///System/Library/Frameworks/DVComponentGlue.framework/Headers" />
           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Headers" />
           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Frameworks/CFOpenDirectory.framework/Headers" />
           <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Frameworks/CoreBluetooth.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreAudio.framework/Headers" />
           <root url="file:///System/Library/Frameworks/DiskArbitration.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CoreBluetooth.framework/Headers" />
@@ -402,7 +396,6 @@
           <root url="file:///System/Library/Frameworks/CoreText.framework/Headers" />
           <root url="file:///System/Library/Frameworks/NetworkExtension.framework/Headers" />
           <root url="file:///System/Library/Frameworks/SceneKit.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
           <root url="file:///System/Library/Frameworks/PhotosUI.framework/Headers" />
           <root url="file:///System/Library/Frameworks/QuickLook.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Tk.framework/PrivateHeaders" />
@@ -441,11 +434,20 @@
           <root url="file:///System/Library/Frameworks/DiscRecording.framework/Headers" />
           <root url="file:///System/Library/Frameworks/PCSC.framework/Headers" />
           <root url="file:///System/Library/Frameworks/CloudKit.framework/Headers" />
-          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
           <root url="file:///System/Library/Frameworks/AppleScriptKit.framework/Headers" />
           <root url="file:///System/Library/Frameworks/MultipeerConnectivity.framework/Headers" />
           <root url="file:///System/Library/Frameworks/LDAP.framework/Headers" />
           <root url="file:///System/Library/Frameworks/JavaFrameEmbedding.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
+          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
           <root url="file:///System/Library/Frameworks/ServiceManagement.framework/Headers" />
           <root url="file:///System/Library/Frameworks/ICADevices.framework/Headers" />
           <root url="file:///System/Library/Frameworks/Scripting.framework/Headers" />
diff --git a/.idea/dictionaries/Dora.xml b/.idea/dictionaries/Dora.xml
deleted file mode 100644
index ae1b052..0000000
--- a/.idea/dictionaries/Dora.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<component name="ProjectDictionaryState">
-  <dictionary name="Dora" />
-</component>
\ No newline at end of file
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
deleted file mode 100644
index 97626ba..0000000
--- a/.idea/encodings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding">
-    <file url="PROJECT" charset="UTF-8" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
index 620283c..bae0554 100644
--- a/.idea/misc.xml
+++ b/.idea/misc.xml
@@ -6,45 +6,4 @@
     <libraryRoots />
     <excludeRoots />
   </component>
-  <component name="ProjectInspectionProfilesVisibleTreeState">
-    <entry key="Project Default">
-      <profile-state>
-        <expanded-state>
-          <State>
-            <id />
-          </State>
-        </expanded-state>
-        <selected-state>
-          <State>
-            <id>C/C++</id>
-          </State>
-        </selected-state>
-      </profile-state>
-    </entry>
-  </component>
-  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
-    <OptionsSetting value="true" id="Add" />
-    <OptionsSetting value="true" id="Remove" />
-    <OptionsSetting value="true" id="Checkout" />
-    <OptionsSetting value="true" id="Update" />
-    <OptionsSetting value="true" id="Status" />
-    <OptionsSetting value="true" id="Edit" />
-    <ConfirmationsSetting value="0" id="Add" />
-    <ConfirmationsSetting value="0" id="Remove" />
-  </component>
-  <component name="masterDetails">
-    <states>
-      <state key="ScopeChooserConfigurable.UI">
-        <settings>
-          <splitter-proportions>
-            <option name="proportions">
-              <list>
-                <option value="0.2" />
-              </list>
-            </option>
-          </splitter-proportions>
-        </settings>
-      </state>
-    </states>
-  </component>
 </project>
\ No newline at end of file
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
index 7af4acf..d8b5948 100644
--- a/.idea/workspace.xml
+++ b/.idea/workspace.xml
@@ -13,9 +13,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="ffd72111-33df-499a-bff8-29ed087b3ffb" name="Default" comment="">
-      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/dictionaries/Dora.xml" />
-      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/vcs.xml" />
-      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/README.md" afterPath="$PROJECT_DIR$/README.md" />
+      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/ChurchX.iml" />
+      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/modules.xml" />
+      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/progressivePhotonMap/ppm_rtpass.cu" afterPath="$PROJECT_DIR$/progressivePhotonMap/ppm_rtpass.cu" />
     </list>
     <ignored path="ChurchX.iws" />
     <ignored path=".idea/workspace.xml" />
@@ -35,12 +35,22 @@
     <favorites_list name="ChurchX" />
   </component>
   <component name="FileEditorManager">
-    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
-      <file leaf-file-name="CMakeLists.txt" pinned="false" current-in-tab="true">
-        <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+    <leaf>
+      <file leaf-file-name="ppm.cpp" pinned="false" current-in-tab="false">
+        <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm.cpp">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="285">
-              <caret line="19" column="1" selection-start-line="19" selection-start-column="1" selection-end-line="19" selection-end-column="1" />
+            <state relative-caret-position="175">
+              <caret line="746" column="17" selection-start-line="746" selection-start-column="7" selection-end-line="746" selection-end-column="17" />
+              <folding />
+            </state>
+          </provider>
+        </entry>
+      </file>
+      <file leaf-file-name="ppm_rtpass.cu" pinned="false" current-in-tab="true">
+        <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm_rtpass.cu">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="210">
+              <caret line="69" column="14" selection-start-line="69" selection-start-column="14" selection-end-line="69" selection-end-column="14" />
               <folding />
             </state>
           </provider>
@@ -51,6 +61,19 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="IdeDocumentHistory">
+    <option name="CHANGED_PATHS">
+      <list>
+        <option value="$PROJECT_DIR$/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu" />
+        <option value="$PROJECT_DIR$/progressivePhotonMap/ppm_ppass.cu" />
+        <option value="$PROJECT_DIR$/progressivePhotonMap/ppm_gather.cu" />
+        <option value="$PROJECT_DIR$/progressivePhotonMap/ppm.cpp" />
+        <option value="$PROJECT_DIR$/progressivePhotonMap/ppm.h" />
+        <option value="$PROJECT_DIR$/progressivePhotonMap/HitRecordInitialize.cu" />
+        <option value="$PROJECT_DIR$/progressivePhotonMap/ppm_rtpass.cu" />
+      </list>
+    </option>
+  </component>
   <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
   <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
   <component name="JsGulpfileManager">
@@ -58,9 +81,9 @@
     <sorting>DEFINITION_ORDER</sorting>
   </component>
   <component name="ProjectFrameBounds">
-    <option name="x" value="47" />
+    <option name="x" value="51" />
     <option name="y" value="23" />
-    <option name="width" value="1393" />
+    <option name="width" value="1389" />
     <option name="height" value="877" />
   </component>
   <component name="ProjectLevelVcsManager" settingsEditedManually="false">
@@ -73,6 +96,9 @@
     <ConfirmationsSetting value="2" id="Add" />
     <ConfirmationsSetting value="0" id="Remove" />
   </component>
+  <component name="ProjectReloadState">
+    <option name="STATE" value="1" />
+  </component>
   <component name="ProjectView">
     <navigator currentView="ProjectPane" proportions="" version="1">
       <flattenPackages />
@@ -106,6 +132,20 @@
               <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
             </PATH_ELEMENT>
           </PATH>
+          <PATH>
+            <PATH_ELEMENT>
+              <option name="myItemId" value="ChurchX" />
+              <option name="myItemType" value="com.jetbrains.cidr.projectView.CidrFilesViewHelper$MyProjectTreeStructure$1" />
+            </PATH_ELEMENT>
+            <PATH_ELEMENT>
+              <option name="myItemId" value="ChurchX" />
+              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
+            </PATH_ELEMENT>
+            <PATH_ELEMENT>
+              <option name="myItemId" value="progressivePhotonMap" />
+              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
+            </PATH_ELEMENT>
+          </PATH>
         </subPane>
       </pane>
     </panes>
@@ -115,8 +155,9 @@
     <property name="settings.editor.selected.configurable" value="preferences.sourceCode.C/C++" />
     <property name="settings.editor.splitter.proportion" value="0.2" />
     <property name="WebServerToolWindowFactoryState" value="false" />
+    <property name="js-jscs-nodeInterpreter" value="/usr/local/bin/node" />
   </component>
-  <component name="RunManager" selected="Application.Build All">
+  <component name="RunManager" selected="Application.progressivePhotonMap">
     <configuration default="true" type="CMakeGoogleTestRunConfigurationType" factoryName="Google Test" PASS_PARENT_ENVS_2="true" TEST_MODE="SUITE_TEST">
       <envs />
       <method />
@@ -309,29 +350,58 @@
     </task>
     <servers />
   </component>
+  <component name="TodoView">
+    <todo-panel id="selected-file">
+      <is-autoscroll-to-source value="true" />
+    </todo-panel>
+    <todo-panel id="all">
+      <are-packages-shown value="true" />
+      <is-autoscroll-to-source value="true" />
+    </todo-panel>
+  </component>
   <component name="ToolWindowManager">
-    <frame x="47" y="23" width="1393" height="877" extended-state="6" />
+    <frame x="51" y="23" width="1389" height="877" extended-state="6" />
     <editor active="true" />
     <layout>
-      <window_info id="Project" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.24944486" sideWeight="0.5" order="3" side_tool="false" content_ui="combo" />
-      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
-      <window_info id="CMake" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+      <window_info id="Project" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.2746845" sideWeight="0.5" order="3" side_tool="false" content_ui="combo" />
+      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
+      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3227446" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+      <window_info id="CMake" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32655653" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
-      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
-      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="true" content_ui="tabs" />
+      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
       <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
-      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
       <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
       <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
       <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
-      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
       <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
       <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
       <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
-      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
     </layout>
+    <layout-to-restore>
+      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
+      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
+      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32528588" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
+      <window_info id="CMake" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32738853" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
+      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
+      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="true" content_ui="tabs" />
+      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
+      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
+      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
+      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="11" side_tool="false" content_ui="tabs" />
+      <window_info id="Project" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.26800296" sideWeight="0.5" order="3" side_tool="false" content_ui="combo" />
+      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
+      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
+      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
+      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
+      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="true" content_ui="tabs" />
+      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
+    </layout-to-restore>
   </component>
   <component name="Vcs.Log.UiProperties">
     <option name="RECENTLY_FILTERED_USER_GROUPS">
@@ -345,11 +415,29 @@
     <option name="myLimit" value="2678400000" />
   </component>
   <component name="XDebuggerManager">
-    <breakpoint-manager />
+    <breakpoint-manager>
+      <option name="time" value="1" />
+    </breakpoint-manager>
     <watches-manager />
   </component>
   <component name="editorHistoryManager">
-    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm.cpp">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm_ppass.cu">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="0">
           <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
@@ -357,6 +445,63 @@
         </state>
       </provider>
     </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm_gather.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="3585">
+          <caret line="239" column="16" selection-start-line="239" selection-start-column="16" selection-end-line="239" selection-end-column="16" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/glass.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="390">
+          <caret line="26" column="23" selection-start-line="26" selection-start-column="23" selection-end-line="26" selection-end-column="23" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="420">
+          <caret line="28" column="0" selection-start-line="28" selection-start-column="0" selection-end-line="28" selection-end-column="0" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/glass.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+        </state>
+      </provider>
+    </entry>
     <entry file="file://$PROJECT_DIR$/CMake/FindOptiX.cmake">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="361">
@@ -366,8 +511,114 @@
     </entry>
     <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
       <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="285">
-          <caret line="19" column="1" selection-start-line="19" selection-start-column="1" selection-end-line="19" selection-end-column="1" />
+        <state relative-caret-position="90">
+          <caret line="33" column="1" selection-start-line="33" selection-start-column="1" selection-end-line="33" selection-end-column="1" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/glass.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="330">
+          <caret line="26" column="23" selection-start-line="26" selection-start-column="23" selection-end-line="26" selection-end-column="23" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/PpmObjLoader.cpp" />
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="435">
+          <caret line="29" column="24" selection-start-line="29" selection-start-column="24" selection-end-line="29" selection-end-column="24" />
+          <folding>
+            <element signature="e#1#19#0" expanded="false" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm_ppass.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="1785">
+          <caret line="123" column="14" selection-start-line="123" selection-start-column="14" selection-end-line="123" selection-end-column="14" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ParticipatingMedium.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="-777">
+          <caret line="27" column="30" selection-start-line="27" selection-start-column="20" selection-end-line="27" selection-end-column="30" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/VolumetricPhotonInitialize.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="0">
+          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+          <folding>
+            <element signature="e#0#18#0" expanded="false" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ParticipatingMedium.cpp">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="345">
+          <caret line="23" column="88" selection-start-line="23" selection-start-column="56" selection-end-line="23" selection-end-column="88" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/VolumetricPhotonSphere.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="210">
+          <caret line="16" column="38" selection-start-line="16" selection-start-column="12" selection-end-line="16" selection-end-column="38" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file:///Developer/OptiX/include/internal/optix_declarations.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="318">
+          <caret line="222" column="26" selection-start-line="222" selection-start-column="26" selection-end-line="222" selection-end-column="26" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/HitRecordInitialize.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="345">
+          <caret line="23" column="47" selection-start-line="23" selection-start-column="47" selection-end-line="23" selection-end-column="47" />
+          <folding>
+            <element signature="e#0#18#0" expanded="false" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm.h">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="183">
+          <caret line="24" column="33" selection-start-line="24" selection-start-column="33" selection-end-line="24" selection-end-column="33" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm_gather.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="138">
+          <caret line="224" column="0" selection-start-line="224" selection-start-column="0" selection-end-line="224" selection-end-column="0" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm.cpp">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="175">
+          <caret line="746" column="17" selection-start-line="746" selection-start-column="7" selection-end-line="746" selection-end-column="17" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/progressivePhotonMap/ppm_rtpass.cu">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="210">
+          <caret line="69" column="14" selection-start-line="69" selection-start-column="14" selection-end-line="69" selection-end-column="14" />
           <folding />
         </state>
       </provider>
diff --git a/README.md b/README.md
index 2d2b8d2..53b4339 100644
--- a/README.md
+++ b/README.md
@@ -5,6 +5,8 @@ ChurchX is a Computer Graphics Course Project for rendering a real-life church s
 
 > And God saw the light, and it was good; and God divided the light from the darkness.
 
+![Through the light](https://raw.githubusercontent.com/DoraXingyu/ChurchX_new/master/demo/Sample101.png)
+
 ## Building Instructions
 
 ### System Requirements (for running binaries referencing OptiX)
@@ -41,11 +43,11 @@ Most OptiX samples use the GLUT toolkit. Freeglut ships with the Windows OptiX d
 10. Run
 
 ### Building Tutorial for Linux/MacOS
-1. cd into the main folder and "makedir build"
-2. cd ./build
-3. cmake ../
+1. cd into the main folder and "makedir build"
+2. cd ./build
+3. cmake ../
 4. make
-Note: configure the OptiX, OptiX_primary include directory and library directory in the cmake cache if necessary.
+Note: configure the OptiX, OptiX_primary include directory and library directory in the cmake cache if necessary.
 
 ## Running Instructions
 ### How to Tweak the Scene
diff --git a/log b/log
new file mode 100644
index 0000000..a157057
--- /dev/null
+++ b/log
@@ -0,0 +1,31738 @@
+diff --git a/.idea/ChurchX.iml b/.idea/ChurchX.iml
+index b3cdb22..a645cdc 100644
+--- a/.idea/ChurchX.iml
++++ b/.idea/ChurchX.iml
+@@ -12,13 +12,11 @@
+       <sourceFolder url="file://$MODULE_DIR$/cuda/phong.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ABB.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm_ppass.cu" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/HitRecordInitialize.cu" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/select.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/parallelogram.cu" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/CMakeLists.txt" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ParticipatingMedium.cpp" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/PpmObjLoader.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonInitialize.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/helpers.h" isTestSource="false" />
+@@ -27,38 +25,38 @@
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonSphere.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm_rtpass.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/model.cpp" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/model.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ParticipatingMedium.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/glass.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ParticipatingMedium.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/ppm_gather.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/sphere.cu" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/random.h" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/model.h" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/PpmObjLoader.h" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/HitRecordInitialize.cu" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/progressivePhotonMap/select.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sampleConfig.h.in" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/SunSky.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/Mouse.cpp" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/sutil/ImageLoader.h" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMeshImpl.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMesh.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/GLUTDisplay.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshScene.h" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMesh.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/rply-1.01/rply.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/rply-1.01/rply.c" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/PPMLoader.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/AccelDescriptor.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/sutil.c" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/sutil/PPMLoader.h" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/sutil/SampleScene.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/SampleScene.cpp" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshImpl.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/HostMeshImpl.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshBase.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/glm.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/sutil.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/glm.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshScene.cpp" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMeshImpl.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/HostMesh.cpp" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/sutil/SampleScene.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/DeviceMemoryLogger.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/ImageLoader.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/CMakeLists.txt" isTestSource="false" />
+@@ -66,17 +64,17 @@
+       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshClasses.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/GLUTDisplay.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/DeviceMemoryLogger.h" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/sutil/HostMesh.h" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/sutil/MeshBase.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/HDRLoader.h" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/sutil/MeshBase.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/ImageDisplay.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMesh.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/Mouse.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/ImageDisplay.h" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/sutil/PPMLoader.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/sutilapi.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshImpl.cpp" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/HDRLoader.cpp" isTestSource="false" />
+-      <sourceFolder url="file://$MODULE_DIR$/sutil/OptiXMeshImpl.h" isTestSource="false" />
++      <sourceFolder url="file://$MODULE_DIR$/sutil/ImageLoader.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/sutil/MeshException.h" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/CMakeLists.txt" isTestSource="false" />
+       <sourceFolder url="file://$MODULE_DIR$/CMake/CompilerInfo.cmake" isTestSource="false" />
+@@ -107,11 +105,12 @@
+           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/Ink.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/SpeechRecognition.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/ImageCapture.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/Intents.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreImage.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/InstantMessage.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/MapKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/DirectoryService.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/SafariServices.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/InstallerPlugins.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/ForceFeedback.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreMediaIO.framework/Headers" />
+@@ -144,9 +143,10 @@
+           <root url="file:///System/Library/Frameworks/vmnet.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreMedia.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/GSS.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Tcl.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Tcl.framework/PrivateHeaders" />
++          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Contacts.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Cocoa.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/OpenCL.framework/Headers" />
+@@ -167,25 +167,17 @@
+           <root url="file:///System/Library/Frameworks/Accounts.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/SyncServices.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/AVFoundation.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Kernel.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/AppKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/InputMethodKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/SecurityInterface.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/DVComponentGlue.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Frameworks/CFOpenDirectory.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Frameworks/CoreBluetooth.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreAudio.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/DiskArbitration.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreBluetooth.framework/Headers" />
+@@ -215,7 +207,6 @@
+           <root url="file:///System/Library/Frameworks/CoreText.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/NetworkExtension.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/SceneKit.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/PhotosUI.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/QuickLook.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Tk.framework/PrivateHeaders" />
+@@ -254,11 +245,20 @@
+           <root url="file:///System/Library/Frameworks/DiscRecording.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/PCSC.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CloudKit.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/AppleScriptKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/MultipeerConnectivity.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/LDAP.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/JavaFrameEmbedding.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/ServiceManagement.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/ICADevices.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Scripting.framework/Headers" />
+@@ -294,11 +294,12 @@
+           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/Ink.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/SpeechRecognition.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Carbon.framework/Frameworks/ImageCapture.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/Intents.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreImage.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/InstantMessage.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/MapKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/DirectoryService.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/SafariServices.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/InstallerPlugins.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/ForceFeedback.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreMediaIO.framework/Headers" />
+@@ -331,9 +332,10 @@
+           <root url="file:///System/Library/Frameworks/vmnet.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreMedia.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/GSS.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Tcl.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Tcl.framework/PrivateHeaders" />
++          <root url="file:///System/Library/Frameworks/SystemConfiguration.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Contacts.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Cocoa.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/OpenCL.framework/Headers" />
+@@ -354,25 +356,17 @@
+           <root url="file:///System/Library/Frameworks/Accounts.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/SyncServices.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/AVFoundation.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Kernel.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/AppKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/InputMethodKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/SecurityInterface.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/DVComponentGlue.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/OpenDirectory.framework/Frameworks/CFOpenDirectory.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/IOBluetooth.framework/Frameworks/CoreBluetooth.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/ScriptingBridge.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreAudio.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/DiskArbitration.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CoreBluetooth.framework/Headers" />
+@@ -402,7 +396,6 @@
+           <root url="file:///System/Library/Frameworks/CoreText.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/NetworkExtension.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/SceneKit.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/DrawSprocket.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/PhotosUI.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/QuickLook.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Tk.framework/PrivateHeaders" />
+@@ -441,11 +434,20 @@
+           <root url="file:///System/Library/Frameworks/DiscRecording.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/PCSC.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/CloudKit.framework/Headers" />
+-          <root url="file:///System/Library/Frameworks/LatentSemanticMapping.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/AppleScriptKit.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/MultipeerConnectivity.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/LDAP.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/JavaFrameEmbedding.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/DictionaryServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SharedFileList.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/SearchKit.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/FSEvents.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/OSServices.framework/Headers" />
++          <root url="file:///System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/ServiceManagement.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/ICADevices.framework/Headers" />
+           <root url="file:///System/Library/Frameworks/Scripting.framework/Headers" />
+diff --git a/.idea/dictionaries/Dora.xml b/.idea/dictionaries/Dora.xml
+deleted file mode 100644
+index ae1b052..0000000
+--- a/.idea/dictionaries/Dora.xml
++++ /dev/null
+@@ -1,3 +0,0 @@
+-<component name="ProjectDictionaryState">
+-  <dictionary name="Dora" />
+-</component>
+\ No newline at end of file
+diff --git a/.idea/encodings.xml b/.idea/encodings.xml
+deleted file mode 100644
+index 97626ba..0000000
+--- a/.idea/encodings.xml
++++ /dev/null
+@@ -1,6 +0,0 @@
+-<?xml version="1.0" encoding="UTF-8"?>
+-<project version="4">
+-  <component name="Encoding">
+-    <file url="PROJECT" charset="UTF-8" />
+-  </component>
+-</project>
+\ No newline at end of file
+diff --git a/.idea/vcs.xml b/.idea/vcs.xml
+deleted file mode 100644
+index 94a25f7..0000000
+--- a/.idea/vcs.xml
++++ /dev/null
+@@ -1,6 +0,0 @@
+-<?xml version="1.0" encoding="UTF-8"?>
+-<project version="4">
+-  <component name="VcsDirectoryMappings">
+-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+-  </component>
+-</project>
+\ No newline at end of file
+diff --git a/.idea/workspace.xml b/.idea/workspace.xml
+deleted file mode 100644
+index 7af4acf..0000000
+--- a/.idea/workspace.xml
++++ /dev/null
+@@ -1,376 +0,0 @@
+-<?xml version="1.0" encoding="UTF-8"?>
+-<project version="4">
+-  <component name="CMakeRunConfigurationManager" shouldGenerate="true" assignedExecutableTargets="true" buildAllGenerated="true">
+-    <generated>
+-      <config projectName="OptiX-Samples" targetName="progressivePhotonMap" />
+-      <config projectName="OptiX-Samples" targetName="sutil" />
+-    </generated>
+-  </component>
+-  <component name="CMakeSettings" AUTO_RELOAD="false" GENERATION_PASS_SYSTEM_ENVIRONMENT="true">
+-    <ADDITIONAL_GENERATION_ENVIRONMENT>
+-      <envs />
+-    </ADDITIONAL_GENERATION_ENVIRONMENT>
+-  </component>
+-  <component name="ChangeListManager">
+-    <list default="true" id="ffd72111-33df-499a-bff8-29ed087b3ffb" name="Default" comment="">
+-      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/dictionaries/Dora.xml" />
+-      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/vcs.xml" />
+-      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/README.md" afterPath="$PROJECT_DIR$/README.md" />
+-    </list>
+-    <ignored path="ChurchX.iws" />
+-    <ignored path=".idea/workspace.xml" />
+-    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
+-    <option name="TRACKING_ENABLED" value="true" />
+-    <option name="SHOW_DIALOG" value="false" />
+-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+-    <option name="LAST_RESOLUTION" value="IGNORE" />
+-  </component>
+-  <component name="ChangesViewManager" flattened_view="true" show_ignored="false" />
+-  <component name="CreatePatchCommitExecutor">
+-    <option name="PATCH_PATH" value="" />
+-  </component>
+-  <component name="ExecutionTargetManager" SELECTED_TARGET="default_target" />
+-  <component name="FavoritesManager">
+-    <favorites_list name="ChurchX" />
+-  </component>
+-  <component name="FileEditorManager">
+-    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
+-      <file leaf-file-name="CMakeLists.txt" pinned="false" current-in-tab="true">
+-        <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+-          <provider selected="true" editor-type-id="text-editor">
+-            <state relative-caret-position="285">
+-              <caret line="19" column="1" selection-start-line="19" selection-start-column="1" selection-end-line="19" selection-end-column="1" />
+-              <folding />
+-            </state>
+-          </provider>
+-        </entry>
+-      </file>
+-    </leaf>
+-  </component>
+-  <component name="Git.Settings">
+-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+-  </component>
+-  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
+-  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
+-  <component name="JsGulpfileManager">
+-    <detection-done>true</detection-done>
+-    <sorting>DEFINITION_ORDER</sorting>
+-  </component>
+-  <component name="ProjectFrameBounds">
+-    <option name="x" value="47" />
+-    <option name="y" value="23" />
+-    <option name="width" value="1393" />
+-    <option name="height" value="877" />
+-  </component>
+-  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
+-    <OptionsSetting value="true" id="Add" />
+-    <OptionsSetting value="true" id="Remove" />
+-    <OptionsSetting value="true" id="Checkout" />
+-    <OptionsSetting value="true" id="Update" />
+-    <OptionsSetting value="true" id="Status" />
+-    <OptionsSetting value="true" id="Edit" />
+-    <ConfirmationsSetting value="2" id="Add" />
+-    <ConfirmationsSetting value="0" id="Remove" />
+-  </component>
+-  <component name="ProjectView">
+-    <navigator currentView="ProjectPane" proportions="" version="1">
+-      <flattenPackages />
+-      <showMembers />
+-      <showModules />
+-      <showLibraryContents />
+-      <hideEmptyPackages />
+-      <abbreviatePackageNames />
+-      <autoscrollToSource />
+-      <autoscrollFromSource />
+-      <sortByType />
+-      <manualOrder />
+-      <foldersAlwaysOnTop value="true" />
+-    </navigator>
+-    <panes>
+-      <pane id="ProjectPane">
+-        <subPane>
+-          <PATH>
+-            <PATH_ELEMENT>
+-              <option name="myItemId" value="ChurchX" />
+-              <option name="myItemType" value="com.jetbrains.cidr.projectView.CidrFilesViewHelper$MyProjectTreeStructure$1" />
+-            </PATH_ELEMENT>
+-          </PATH>
+-          <PATH>
+-            <PATH_ELEMENT>
+-              <option name="myItemId" value="ChurchX" />
+-              <option name="myItemType" value="com.jetbrains.cidr.projectView.CidrFilesViewHelper$MyProjectTreeStructure$1" />
+-            </PATH_ELEMENT>
+-            <PATH_ELEMENT>
+-              <option name="myItemId" value="ChurchX" />
+-              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
+-            </PATH_ELEMENT>
+-          </PATH>
+-        </subPane>
+-      </pane>
+-    </panes>
+-  </component>
+-  <component name="PropertiesComponent">
+-    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
+-    <property name="settings.editor.selected.configurable" value="preferences.sourceCode.C/C++" />
+-    <property name="settings.editor.splitter.proportion" value="0.2" />
+-    <property name="WebServerToolWindowFactoryState" value="false" />
+-  </component>
+-  <component name="RunManager" selected="Application.Build All">
+-    <configuration default="true" type="CMakeGoogleTestRunConfigurationType" factoryName="Google Test" PASS_PARENT_ENVS_2="true" TEST_MODE="SUITE_TEST">
+-      <envs />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="CMakeRunConfiguration" factoryName="Application" PASS_PARENT_ENVS_2="true" PROJECT_NAME="OptiX-Samples" TARGET_NAME="progressivePhotonMap" CONFIG_NAME="Debug">
+-      <envs />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="JavascriptDebugType" factoryName="JavaScript Debug">
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="PythonConfigurationType" factoryName="Python">
+-      <option name="INTERPRETER_OPTIONS" value="" />
+-      <option name="PARENT_ENVS" value="true" />
+-      <envs>
+-        <env name="PYTHONUNBUFFERED" value="1" />
+-      </envs>
+-      <option name="SDK_HOME" value="" />
+-      <option name="WORKING_DIRECTORY" value="" />
+-      <option name="IS_MODULE_SDK" value="false" />
+-      <option name="ADD_CONTENT_ROOTS" value="true" />
+-      <option name="ADD_SOURCE_ROOTS" value="true" />
+-      <module name="ChurchX" />
+-      <option name="SCRIPT_NAME" value="" />
+-      <option name="PARAMETERS" value="" />
+-      <option name="SHOW_COMMAND_LINE" value="false" />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="Tox" factoryName="Tox">
+-      <option name="INTERPRETER_OPTIONS" value="" />
+-      <option name="PARENT_ENVS" value="true" />
+-      <envs />
+-      <option name="SDK_HOME" value="" />
+-      <option name="WORKING_DIRECTORY" value="" />
+-      <option name="IS_MODULE_SDK" value="false" />
+-      <option name="ADD_CONTENT_ROOTS" value="true" />
+-      <option name="ADD_SOURCE_ROOTS" value="true" />
+-      <module name="ChurchX" />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="js.build_tools.gulp" factoryName="Gulp.js">
+-      <node-interpreter>project</node-interpreter>
+-      <node-options />
+-      <gulpfile />
+-      <tasks />
+-      <arguments />
+-      <envs />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="js.build_tools.npm" factoryName="npm">
+-      <command value="run-script" />
+-      <scripts />
+-      <node-interpreter value="project" />
+-      <envs />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="tests" factoryName="Attests">
+-      <option name="INTERPRETER_OPTIONS" value="" />
+-      <option name="PARENT_ENVS" value="true" />
+-      <envs />
+-      <option name="SDK_HOME" value="" />
+-      <option name="WORKING_DIRECTORY" value="" />
+-      <option name="IS_MODULE_SDK" value="false" />
+-      <option name="ADD_CONTENT_ROOTS" value="true" />
+-      <option name="ADD_SOURCE_ROOTS" value="true" />
+-      <module name="ChurchX" />
+-      <option name="SCRIPT_NAME" value="" />
+-      <option name="CLASS_NAME" value="" />
+-      <option name="METHOD_NAME" value="" />
+-      <option name="FOLDER_NAME" value="" />
+-      <option name="TEST_TYPE" value="TEST_SCRIPT" />
+-      <option name="PATTERN" value="" />
+-      <option name="USE_PATTERN" value="false" />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="tests" factoryName="Doctests">
+-      <option name="INTERPRETER_OPTIONS" value="" />
+-      <option name="PARENT_ENVS" value="true" />
+-      <envs />
+-      <option name="SDK_HOME" value="" />
+-      <option name="WORKING_DIRECTORY" value="" />
+-      <option name="IS_MODULE_SDK" value="false" />
+-      <option name="ADD_CONTENT_ROOTS" value="true" />
+-      <option name="ADD_SOURCE_ROOTS" value="true" />
+-      <module name="ChurchX" />
+-      <option name="SCRIPT_NAME" value="" />
+-      <option name="CLASS_NAME" value="" />
+-      <option name="METHOD_NAME" value="" />
+-      <option name="FOLDER_NAME" value="" />
+-      <option name="TEST_TYPE" value="TEST_SCRIPT" />
+-      <option name="PATTERN" value="" />
+-      <option name="USE_PATTERN" value="false" />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="tests" factoryName="Nosetests">
+-      <option name="INTERPRETER_OPTIONS" value="" />
+-      <option name="PARENT_ENVS" value="true" />
+-      <envs />
+-      <option name="SDK_HOME" value="" />
+-      <option name="WORKING_DIRECTORY" value="" />
+-      <option name="IS_MODULE_SDK" value="false" />
+-      <option name="ADD_CONTENT_ROOTS" value="true" />
+-      <option name="ADD_SOURCE_ROOTS" value="true" />
+-      <module name="ChurchX" />
+-      <option name="SCRIPT_NAME" value="" />
+-      <option name="CLASS_NAME" value="" />
+-      <option name="METHOD_NAME" value="" />
+-      <option name="FOLDER_NAME" value="" />
+-      <option name="TEST_TYPE" value="TEST_SCRIPT" />
+-      <option name="PATTERN" value="" />
+-      <option name="USE_PATTERN" value="false" />
+-      <option name="PARAMS" value="" />
+-      <option name="USE_PARAM" value="false" />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="tests" factoryName="Unittests">
+-      <option name="INTERPRETER_OPTIONS" value="" />
+-      <option name="PARENT_ENVS" value="true" />
+-      <envs />
+-      <option name="SDK_HOME" value="" />
+-      <option name="WORKING_DIRECTORY" value="" />
+-      <option name="IS_MODULE_SDK" value="false" />
+-      <option name="ADD_CONTENT_ROOTS" value="true" />
+-      <option name="ADD_SOURCE_ROOTS" value="true" />
+-      <module name="ChurchX" />
+-      <option name="SCRIPT_NAME" value="" />
+-      <option name="CLASS_NAME" value="" />
+-      <option name="METHOD_NAME" value="" />
+-      <option name="FOLDER_NAME" value="" />
+-      <option name="TEST_TYPE" value="TEST_SCRIPT" />
+-      <option name="PATTERN" value="" />
+-      <option name="USE_PATTERN" value="false" />
+-      <option name="PUREUNITTEST" value="true" />
+-      <option name="PARAMS" value="" />
+-      <option name="USE_PARAM" value="false" />
+-      <method />
+-    </configuration>
+-    <configuration default="true" type="tests" factoryName="py.test">
+-      <option name="INTERPRETER_OPTIONS" value="" />
+-      <option name="PARENT_ENVS" value="true" />
+-      <envs />
+-      <option name="SDK_HOME" value="" />
+-      <option name="WORKING_DIRECTORY" value="" />
+-      <option name="IS_MODULE_SDK" value="false" />
+-      <option name="ADD_CONTENT_ROOTS" value="true" />
+-      <option name="ADD_SOURCE_ROOTS" value="true" />
+-      <module name="ChurchX" />
+-      <option name="SCRIPT_NAME" value="" />
+-      <option name="CLASS_NAME" value="" />
+-      <option name="METHOD_NAME" value="" />
+-      <option name="FOLDER_NAME" value="" />
+-      <option name="TEST_TYPE" value="TEST_SCRIPT" />
+-      <option name="PATTERN" value="" />
+-      <option name="USE_PATTERN" value="false" />
+-      <option name="testToRun" value="" />
+-      <option name="keywords" value="" />
+-      <option name="params" value="" />
+-      <option name="USE_PARAM" value="false" />
+-      <option name="USE_KEYWORD" value="false" />
+-      <method />
+-    </configuration>
+-    <configuration default="false" name="progressivePhotonMap" type="CMakeRunConfiguration" factoryName="Application" PASS_PARENT_ENVS_2="true" PROJECT_NAME="OptiX-Samples" TARGET_NAME="progressivePhotonMap" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="OptiX-Samples" RUN_TARGET_NAME="progressivePhotonMap">
+-      <envs />
+-      <method />
+-    </configuration>
+-    <configuration default="false" name="sutil" type="CMakeRunConfiguration" factoryName="Application" PASS_PARENT_ENVS_2="true" PROJECT_NAME="OptiX-Samples" TARGET_NAME="sutil" CONFIG_NAME="Debug">
+-      <envs />
+-      <method />
+-    </configuration>
+-    <configuration default="false" name="Build All" type="CMakeRunConfiguration" factoryName="Application" WORKING_DIR="" PASS_PARENT_ENVS_2="true" CONFIG_NAME="Release" RUN_TARGET_PROJECT_NAME="OptiX-Samples" RUN_TARGET_NAME="progressivePhotonMap" EXPLICIT_BUILD_TARGET_NAME="all">
+-      <envs />
+-      <method />
+-    </configuration>
+-    <list size="3">
+-      <item index="0" class="java.lang.String" itemvalue="Application.progressivePhotonMap" />
+-      <item index="1" class="java.lang.String" itemvalue="Application.sutil" />
+-      <item index="2" class="java.lang.String" itemvalue="Application.Build All" />
+-    </list>
+-  </component>
+-  <component name="ShelveChangesManager" show_recycled="false">
+-    <option name="remove_strategy" value="false" />
+-  </component>
+-  <component name="TaskManager">
+-    <task active="true" id="Default" summary="Default task">
+-      <changelist id="ffd72111-33df-499a-bff8-29ed087b3ffb" name="Default" comment="" />
+-      <created>1467001985763</created>
+-      <option name="number" value="Default" />
+-      <option name="presentableId" value="Default" />
+-      <updated>1467001985763</updated>
+-    </task>
+-    <servers />
+-  </component>
+-  <component name="ToolWindowManager">
+-    <frame x="47" y="23" width="1393" height="877" extended-state="6" />
+-    <editor active="true" />
+-    <layout>
+-      <window_info id="Project" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.24944486" sideWeight="0.5" order="3" side_tool="false" content_ui="combo" />
+-      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
+-      <window_info id="CMake" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+-      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
+-      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+-      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
+-      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+-      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="true" content_ui="tabs" />
+-      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
+-      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
+-      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
+-      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
+-      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
+-      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3299363" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
+-      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
+-      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
+-      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
+-      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
+-    </layout>
+-  </component>
+-  <component name="Vcs.Log.UiProperties">
+-    <option name="RECENTLY_FILTERED_USER_GROUPS">
+-      <collection />
+-    </option>
+-    <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
+-      <collection />
+-    </option>
+-  </component>
+-  <component name="VcsContentAnnotationSettings">
+-    <option name="myLimit" value="2678400000" />
+-  </component>
+-  <component name="XDebuggerManager">
+-    <breakpoint-manager />
+-    <watches-manager />
+-  </component>
+-  <component name="editorHistoryManager">
+-    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+-      <provider selected="true" editor-type-id="text-editor">
+-        <state relative-caret-position="0">
+-          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
+-          <folding />
+-        </state>
+-      </provider>
+-    </entry>
+-    <entry file="file://$PROJECT_DIR$/CMake/FindOptiX.cmake">
+-      <provider selected="true" editor-type-id="text-editor">
+-        <state relative-caret-position="361">
+-          <caret line="88" column="20" selection-start-line="88" selection-start-column="20" selection-end-line="88" selection-end-column="20" />
+-        </state>
+-      </provider>
+-    </entry>
+-    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+-      <provider selected="true" editor-type-id="text-editor">
+-        <state relative-caret-position="285">
+-          <caret line="19" column="1" selection-start-line="19" selection-start-column="1" selection-end-line="19" selection-end-column="1" />
+-          <folding />
+-        </state>
+-      </provider>
+-    </entry>
+-  </component>
+-</project>
+\ No newline at end of file
+diff --git a/README.md b/README.md
+index 2d2b8d2..53b4339 100644
+--- a/README.md
++++ b/README.md
+@@ -5,6 +5,8 @@ ChurchX is a Computer Graphics Course Project for rendering a real-life church s
+ 
+ > And God saw the light, and it was good; and God divided the light from the darkness.
+ 
++![Through the light](https://raw.githubusercontent.com/DoraXingyu/ChurchX_new/master/demo/Sample101.png)
++
+ ## Building Instructions
+ 
+ ### System Requirements (for running binaries referencing OptiX)
+@@ -41,11 +43,11 @@ Most OptiX samples use the GLUT toolkit. Freeglut ships with the Windows OptiX d
+ 10. Run
+ 
+ ### Building Tutorial for Linux/MacOS
+-1. cd into the main folder and "makedir build"
+-2. cd ./build
+-3. cmake ../
++1. cd into the main folder and "makedir build"
++2. cd ./build
++3. cmake ../
+ 4. make
+-Note: configure the OptiX, OptiX_primary include directory and library directory in the cmake cache if necessary.
++Note: configure the OptiX, OptiX_primary include directory and library directory in the cmake cache if necessary.
+ 
+ ## Running Instructions
+ ### How to Tweak the Scene
+diff --git a/nvcommon/CMakeLists.txt b/nvcommon/CMakeLists.txt
+deleted file mode 100644
+index b6cb28e..0000000
+--- a/nvcommon/CMakeLists.txt
++++ /dev/null
+@@ -1,45 +0,0 @@
+-
+-#
+-#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+-#
+-#  NVIDIA Corporation and its licensors retain all intellectual property and proprietary
+-#  rights in and to this software, related documentation and any modifications thereto.
+-#  Any use, reproduction, disclosure or distribution of this software and related
+-#  documentation without an express license agreement from NVIDIA Corporation is strictly
+-#  prohibited.
+-#
+-#  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
+-#  AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
+-#  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+-#  PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
+-#  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
+-#  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
+-#  BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
+-#  INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
+-#  SUCH DAMAGES
+-#
+-
+-include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
+-
+-add_subdirectory(nvModel)
+-
+-add_library(nvCommon STATIC
+-  src/nvTime.cpp
+-  src/framebufferObject.cpp
+-  include/framebufferObject.h
+-  include/nvArray.h
+-  include/nvGlutManipulators.h
+-  include/nvManipulators.h
+-  include/nvMath.h
+-  include/nvMatrix.h
+-  include/nvQuaternion.h
+-  include/nvSDKPath.h
+-  include/nvShaderUtils.h
+-  include/nvShape.h
+-  include/nvTime.h
+-  include/nvVector.h
+-  include/nvVertexBuffer.h
+-  include/renderVertexArray.h
+-  include/renderbuffer.h
+-  )
+-set_property(TARGET nvCommon PROPERTY FOLDER "${OPTIX_IDE_FOLDER}")
+diff --git a/nvcommon/GLEW/include/GL/glew.h b/nvcommon/GLEW/include/GL/glew.h
+deleted file mode 100644
+index 48debd2..0000000
+--- a/nvcommon/GLEW/include/GL/glew.h
++++ /dev/null
+@@ -1,10787 +0,0 @@
+-/*
+-** The OpenGL Extension Wrangler Library
+-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
+-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
+-** Copyright (C) 2002, Lev Povalahev
+-** All rights reserved.
+-** 
+-** Redistribution and use in source and binary forms, with or without 
+-** modification, are permitted provided that the following conditions are met:
+-** 
+-** * Redistributions of source code must retain the above copyright notice, 
+-**   this list of conditions and the following disclaimer.
+-** * Redistributions in binary form must reproduce the above copyright notice, 
+-**   this list of conditions and the following disclaimer in the documentation 
+-**   and/or other materials provided with the distribution.
+-** * The name of the author may be used to endorse or promote products 
+-**   derived from this software without specific prior written permission.
+-**
+-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
+-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
+-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+-** THE POSSIBILITY OF SUCH DAMAGE.
+-*/
+-
+-/*
+- * Mesa 3-D graphics library
+- * Version:  7.0
+- *
+- * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
+- *
+- * Permission is hereby granted, free of charge, to any person obtaining a
+- * copy of this software and associated documentation files (the "Software"),
+- * to deal in the Software without restriction, including without limitation
+- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+- * and/or sell copies of the Software, and to permit persons to whom the
+- * Software is furnished to do so, subject to the following conditions:
+- *
+- * The above copyright notice and this permission notice shall be included
+- * in all copies or substantial portions of the Software.
+- *
+- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+- * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+- * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
+- * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+- */
+-
+-/*
+-** Copyright (c) 2007 The Khronos Group Inc.
+-** 
+-** Permission is hereby granted, free of charge, to any person obtaining a
+-** copy of this software and/or associated documentation files (the
+-** "Materials"), to deal in the Materials without restriction, including
+-** without limitation the rights to use, copy, modify, merge, publish,
+-** distribute, sublicense, and/or sell copies of the Materials, and to
+-** permit persons to whom the Materials are furnished to do so, subject to
+-** the following conditions:
+-** 
+-** The above copyright notice and this permission notice shall be included
+-** in all copies or substantial portions of the Materials.
+-** 
+-** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+-** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+-** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+-** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+-** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+-** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+-** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
+-*/
+-
+-#ifndef __glew_h__
+-#define __glew_h__
+-#define __GLEW_H__
+-
+-#if defined(__gl_h_) || defined(__GL_H__)
+-#error gl.h included before glew.h
+-#endif
+-#if defined(__glext_h_) || defined(__GLEXT_H_)
+-#error glext.h included before glew.h
+-#endif
+-#if defined(__gl_ATI_h_)
+-#error glATI.h included before glew.h
+-#endif
+-
+-#define __gl_h_
+-#define __GL_H__
+-#define __glext_h_
+-#define __GLEXT_H_
+-#define __gl_ATI_h_
+-
+-#if defined(_WIN32)
+-
+-/*
+- * GLEW does not include <windows.h> to avoid name space pollution.
+- * GL needs GLAPI and GLAPIENTRY, GLU needs APIENTRY, CALLBACK, and wchar_t
+- * defined properly.
+- */
+-/* <windef.h> */
+-#ifndef APIENTRY
+-#define GLEW_APIENTRY_DEFINED
+-#  if defined(__MINGW32__)
+-#    define APIENTRY __stdcall
+-#  elif (_MSC_VER >= 800) || defined(_STDCALL_SUPPORTED) || defined(__BORLANDC__)
+-#    define APIENTRY __stdcall
+-#  else
+-#    define APIENTRY
+-#  endif
+-#endif
+-#ifndef GLAPI
+-#  if defined(__MINGW32__)
+-#    define GLAPI extern
+-#  endif
+-#endif
+-/* <winnt.h> */
+-#ifndef CALLBACK
+-#define GLEW_CALLBACK_DEFINED
+-#  if defined(__MINGW32__)
+-#    define CALLBACK __attribute__ ((__stdcall__))
+-#  elif (defined(_M_MRX000) || defined(_M_IX86) || defined(_M_ALPHA) || defined(_M_PPC)) && !defined(MIDL_PASS)
+-#    define CALLBACK __stdcall
+-#  else
+-#    define CALLBACK
+-#  endif
+-#endif
+-/* <wingdi.h> and <winnt.h> */
+-#ifndef WINGDIAPI
+-#define GLEW_WINGDIAPI_DEFINED
+-#define WINGDIAPI __declspec(dllimport)
+-#endif
+-/* <ctype.h> */
+-#if (defined(_MSC_VER) || defined(__BORLANDC__)) && !defined(_WCHAR_T_DEFINED)
+-typedef unsigned short wchar_t;
+-#  define _WCHAR_T_DEFINED
+-#endif
+-/* <stddef.h> */
+-#if !defined(_W64)
+-#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
+-#    define _W64 __w64
+-#  else
+-#    define _W64
+-#  endif
+-#endif
+-#if !defined(_PTRDIFF_T_DEFINED) && !defined(_PTRDIFF_T_)
+-#  ifdef _WIN64
+-typedef __int64 ptrdiff_t;
+-#  else
+-typedef _W64 int ptrdiff_t;
+-#  endif
+-#  define _PTRDIFF_T_DEFINED
+-#  define _PTRDIFF_T_
+-#endif
+-
+-#ifndef GLAPI
+-#  if defined(__MINGW32__)
+-#    define GLAPI extern
+-#  else
+-#    define GLAPI WINGDIAPI
+-#  endif
+-#endif
+-
+-#ifndef GLAPIENTRY
+-#define GLAPIENTRY APIENTRY
+-#endif
+-
+-/*
+- * GLEW_STATIC needs to be set when using the static version.
+- * GLEW_BUILD is set when building the DLL version.
+- */
+-#ifndef GLEW_STATIC
+-# define GLEW_STATIC
+-#endif
+-
+-#ifdef GLEW_STATIC
+-#define GLEWAPI extern
+-#else
+-#  ifdef GLEW_BUILD
+-#    define GLEWAPI extern __declspec(dllexport)
+-#  else
+-#    define GLEWAPI extern __declspec(dllimport)
+-#  endif
+-#endif
+-
+-#else /* _UNIX */
+-
+-/*
+- * Needed for ptrdiff_t in turn needed by VBO.  This is defined by ISO
+- * C.  On my system, this amounts to _3 lines_ of included code, all of
+- * them pretty much harmless.  If you know of a way of detecting 32 vs
+- * 64 _targets_ at compile time you are free to replace this with
+- * something that's portable.  For now, _this_ is the portable solution.
+- * (mem, 2004-01-04)
+- */
+-
+-#include <stddef.h>
+-
+-#define GLEW_APIENTRY_DEFINED
+-#define APIENTRY
+-#define GLEWAPI extern
+-
+-/* <glu.h> */
+-#ifndef GLAPI
+-#define GLAPI extern
+-#endif
+-#ifndef GLAPIENTRY
+-#define GLAPIENTRY
+-#endif
+-
+-#endif /* _WIN32 */
+-
+-#ifdef __cplusplus
+-extern "C" {
+-#endif
+-
+-/* ----------------------------- GL_VERSION_1_1 ---------------------------- */
+-
+-#ifndef GL_VERSION_1_1
+-#define GL_VERSION_1_1 1
+-
+-#if defined(__APPLE__)
+-typedef unsigned long GLenum;
+-typedef unsigned long GLbitfield;
+-typedef unsigned long GLuint;
+-typedef long GLint;
+-typedef long GLsizei;
+-#else
+-typedef unsigned int GLenum;
+-typedef unsigned int GLbitfield;
+-typedef unsigned int GLuint;
+-typedef int GLint;
+-typedef int GLsizei;
+-#endif
+-typedef unsigned char GLboolean;
+-typedef signed char GLbyte;
+-typedef short GLshort;
+-typedef unsigned char GLubyte;
+-typedef unsigned short GLushort;
+-typedef unsigned long GLulong;
+-typedef float GLfloat;
+-typedef float GLclampf;
+-typedef double GLdouble;
+-typedef double GLclampd;
+-typedef void GLvoid;
+-#if defined(_MSC_VER) && _MSC_VER < 1400
+-typedef __int64 GLint64EXT;
+-typedef unsigned __int64 GLuint64EXT;
+-#else
+-typedef signed long long GLint64EXT;
+-typedef unsigned long long GLuint64EXT;
+-#endif
+-
+-#define GL_ACCUM 0x0100
+-#define GL_LOAD 0x0101
+-#define GL_RETURN 0x0102
+-#define GL_MULT 0x0103
+-#define GL_ADD 0x0104
+-#define GL_NEVER 0x0200
+-#define GL_LESS 0x0201
+-#define GL_EQUAL 0x0202
+-#define GL_LEQUAL 0x0203
+-#define GL_GREATER 0x0204
+-#define GL_NOTEQUAL 0x0205
+-#define GL_GEQUAL 0x0206
+-#define GL_ALWAYS 0x0207
+-#define GL_CURRENT_BIT 0x00000001
+-#define GL_POINT_BIT 0x00000002
+-#define GL_LINE_BIT 0x00000004
+-#define GL_POLYGON_BIT 0x00000008
+-#define GL_POLYGON_STIPPLE_BIT 0x00000010
+-#define GL_PIXEL_MODE_BIT 0x00000020
+-#define GL_LIGHTING_BIT 0x00000040
+-#define GL_FOG_BIT 0x00000080
+-#define GL_DEPTH_BUFFER_BIT 0x00000100
+-#define GL_ACCUM_BUFFER_BIT 0x00000200
+-#define GL_STENCIL_BUFFER_BIT 0x00000400
+-#define GL_VIEWPORT_BIT 0x00000800
+-#define GL_TRANSFORM_BIT 0x00001000
+-#define GL_ENABLE_BIT 0x00002000
+-#define GL_COLOR_BUFFER_BIT 0x00004000
+-#define GL_HINT_BIT 0x00008000
+-#define GL_EVAL_BIT 0x00010000
+-#define GL_LIST_BIT 0x00020000
+-#define GL_TEXTURE_BIT 0x00040000
+-#define GL_SCISSOR_BIT 0x00080000
+-#define GL_ALL_ATTRIB_BITS 0x000fffff
+-#define GL_POINTS 0x0000
+-#define GL_LINES 0x0001
+-#define GL_LINE_LOOP 0x0002
+-#define GL_LINE_STRIP 0x0003
+-#define GL_TRIANGLES 0x0004
+-#define GL_TRIANGLE_STRIP 0x0005
+-#define GL_TRIANGLE_FAN 0x0006
+-#define GL_QUADS 0x0007
+-#define GL_QUAD_STRIP 0x0008
+-#define GL_POLYGON 0x0009
+-#define GL_ZERO 0
+-#define GL_ONE 1
+-#define GL_SRC_COLOR 0x0300
+-#define GL_ONE_MINUS_SRC_COLOR 0x0301
+-#define GL_SRC_ALPHA 0x0302
+-#define GL_ONE_MINUS_SRC_ALPHA 0x0303
+-#define GL_DST_ALPHA 0x0304
+-#define GL_ONE_MINUS_DST_ALPHA 0x0305
+-#define GL_DST_COLOR 0x0306
+-#define GL_ONE_MINUS_DST_COLOR 0x0307
+-#define GL_SRC_ALPHA_SATURATE 0x0308
+-#define GL_TRUE 1
+-#define GL_FALSE 0
+-#define GL_CLIP_PLANE0 0x3000
+-#define GL_CLIP_PLANE1 0x3001
+-#define GL_CLIP_PLANE2 0x3002
+-#define GL_CLIP_PLANE3 0x3003
+-#define GL_CLIP_PLANE4 0x3004
+-#define GL_CLIP_PLANE5 0x3005
+-#define GL_BYTE 0x1400
+-#define GL_UNSIGNED_BYTE 0x1401
+-#define GL_SHORT 0x1402
+-#define GL_UNSIGNED_SHORT 0x1403
+-#define GL_INT 0x1404
+-#define GL_UNSIGNED_INT 0x1405
+-#define GL_FLOAT 0x1406
+-#define GL_2_BYTES 0x1407
+-#define GL_3_BYTES 0x1408
+-#define GL_4_BYTES 0x1409
+-#define GL_DOUBLE 0x140A
+-#define GL_NONE 0
+-#define GL_FRONT_LEFT 0x0400
+-#define GL_FRONT_RIGHT 0x0401
+-#define GL_BACK_LEFT 0x0402
+-#define GL_BACK_RIGHT 0x0403
+-#define GL_FRONT 0x0404
+-#define GL_BACK 0x0405
+-#define GL_LEFT 0x0406
+-#define GL_RIGHT 0x0407
+-#define GL_FRONT_AND_BACK 0x0408
+-#define GL_AUX0 0x0409
+-#define GL_AUX1 0x040A
+-#define GL_AUX2 0x040B
+-#define GL_AUX3 0x040C
+-#define GL_NO_ERROR 0
+-#define GL_INVALID_ENUM 0x0500
+-#define GL_INVALID_VALUE 0x0501
+-#define GL_INVALID_OPERATION 0x0502
+-#define GL_STACK_OVERFLOW 0x0503
+-#define GL_STACK_UNDERFLOW 0x0504
+-#define GL_OUT_OF_MEMORY 0x0505
+-#define GL_2D 0x0600
+-#define GL_3D 0x0601
+-#define GL_3D_COLOR 0x0602
+-#define GL_3D_COLOR_TEXTURE 0x0603
+-#define GL_4D_COLOR_TEXTURE 0x0604
+-#define GL_PASS_THROUGH_TOKEN 0x0700
+-#define GL_POINT_TOKEN 0x0701
+-#define GL_LINE_TOKEN 0x0702
+-#define GL_POLYGON_TOKEN 0x0703
+-#define GL_BITMAP_TOKEN 0x0704
+-#define GL_DRAW_PIXEL_TOKEN 0x0705
+-#define GL_COPY_PIXEL_TOKEN 0x0706
+-#define GL_LINE_RESET_TOKEN 0x0707
+-#define GL_EXP 0x0800
+-#define GL_EXP2 0x0801
+-#define GL_CW 0x0900
+-#define GL_CCW 0x0901
+-#define GL_COEFF 0x0A00
+-#define GL_ORDER 0x0A01
+-#define GL_DOMAIN 0x0A02
+-#define GL_CURRENT_COLOR 0x0B00
+-#define GL_CURRENT_INDEX 0x0B01
+-#define GL_CURRENT_NORMAL 0x0B02
+-#define GL_CURRENT_TEXTURE_COORDS 0x0B03
+-#define GL_CURRENT_RASTER_COLOR 0x0B04
+-#define GL_CURRENT_RASTER_INDEX 0x0B05
+-#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
+-#define GL_CURRENT_RASTER_POSITION 0x0B07
+-#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
+-#define GL_CURRENT_RASTER_DISTANCE 0x0B09
+-#define GL_POINT_SMOOTH 0x0B10
+-#define GL_POINT_SIZE 0x0B11
+-#define GL_POINT_SIZE_RANGE 0x0B12
+-#define GL_POINT_SIZE_GRANULARITY 0x0B13
+-#define GL_LINE_SMOOTH 0x0B20
+-#define GL_LINE_WIDTH 0x0B21
+-#define GL_LINE_WIDTH_RANGE 0x0B22
+-#define GL_LINE_WIDTH_GRANULARITY 0x0B23
+-#define GL_LINE_STIPPLE 0x0B24
+-#define GL_LINE_STIPPLE_PATTERN 0x0B25
+-#define GL_LINE_STIPPLE_REPEAT 0x0B26
+-#define GL_LIST_MODE 0x0B30
+-#define GL_MAX_LIST_NESTING 0x0B31
+-#define GL_LIST_BASE 0x0B32
+-#define GL_LIST_INDEX 0x0B33
+-#define GL_POLYGON_MODE 0x0B40
+-#define GL_POLYGON_SMOOTH 0x0B41
+-#define GL_POLYGON_STIPPLE 0x0B42
+-#define GL_EDGE_FLAG 0x0B43
+-#define GL_CULL_FACE 0x0B44
+-#define GL_CULL_FACE_MODE 0x0B45
+-#define GL_FRONT_FACE 0x0B46
+-#define GL_LIGHTING 0x0B50
+-#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
+-#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
+-#define GL_LIGHT_MODEL_AMBIENT 0x0B53
+-#define GL_SHADE_MODEL 0x0B54
+-#define GL_COLOR_MATERIAL_FACE 0x0B55
+-#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
+-#define GL_COLOR_MATERIAL 0x0B57
+-#define GL_FOG 0x0B60
+-#define GL_FOG_INDEX 0x0B61
+-#define GL_FOG_DENSITY 0x0B62
+-#define GL_FOG_START 0x0B63
+-#define GL_FOG_END 0x0B64
+-#define GL_FOG_MODE 0x0B65
+-#define GL_FOG_COLOR 0x0B66
+-#define GL_DEPTH_RANGE 0x0B70
+-#define GL_DEPTH_TEST 0x0B71
+-#define GL_DEPTH_WRITEMASK 0x0B72
+-#define GL_DEPTH_CLEAR_VALUE 0x0B73
+-#define GL_DEPTH_FUNC 0x0B74
+-#define GL_ACCUM_CLEAR_VALUE 0x0B80
+-#define GL_STENCIL_TEST 0x0B90
+-#define GL_STENCIL_CLEAR_VALUE 0x0B91
+-#define GL_STENCIL_FUNC 0x0B92
+-#define GL_STENCIL_VALUE_MASK 0x0B93
+-#define GL_STENCIL_FAIL 0x0B94
+-#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
+-#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
+-#define GL_STENCIL_REF 0x0B97
+-#define GL_STENCIL_WRITEMASK 0x0B98
+-#define GL_MATRIX_MODE 0x0BA0
+-#define GL_NORMALIZE 0x0BA1
+-#define GL_VIEWPORT 0x0BA2
+-#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
+-#define GL_PROJECTION_STACK_DEPTH 0x0BA4
+-#define GL_TEXTURE_STACK_DEPTH 0x0BA5
+-#define GL_MODELVIEW_MATRIX 0x0BA6
+-#define GL_PROJECTION_MATRIX 0x0BA7
+-#define GL_TEXTURE_MATRIX 0x0BA8
+-#define GL_ATTRIB_STACK_DEPTH 0x0BB0
+-#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
+-#define GL_ALPHA_TEST 0x0BC0
+-#define GL_ALPHA_TEST_FUNC 0x0BC1
+-#define GL_ALPHA_TEST_REF 0x0BC2
+-#define GL_DITHER 0x0BD0
+-#define GL_BLEND_DST 0x0BE0
+-#define GL_BLEND_SRC 0x0BE1
+-#define GL_BLEND 0x0BE2
+-#define GL_LOGIC_OP_MODE 0x0BF0
+-#define GL_INDEX_LOGIC_OP 0x0BF1
+-#define GL_COLOR_LOGIC_OP 0x0BF2
+-#define GL_AUX_BUFFERS 0x0C00
+-#define GL_DRAW_BUFFER 0x0C01
+-#define GL_READ_BUFFER 0x0C02
+-#define GL_SCISSOR_BOX 0x0C10
+-#define GL_SCISSOR_TEST 0x0C11
+-#define GL_INDEX_CLEAR_VALUE 0x0C20
+-#define GL_INDEX_WRITEMASK 0x0C21
+-#define GL_COLOR_CLEAR_VALUE 0x0C22
+-#define GL_COLOR_WRITEMASK 0x0C23
+-#define GL_INDEX_MODE 0x0C30
+-#define GL_RGBA_MODE 0x0C31
+-#define GL_DOUBLEBUFFER 0x0C32
+-#define GL_STEREO 0x0C33
+-#define GL_RENDER_MODE 0x0C40
+-#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
+-#define GL_POINT_SMOOTH_HINT 0x0C51
+-#define GL_LINE_SMOOTH_HINT 0x0C52
+-#define GL_POLYGON_SMOOTH_HINT 0x0C53
+-#define GL_FOG_HINT 0x0C54
+-#define GL_TEXTURE_GEN_S 0x0C60
+-#define GL_TEXTURE_GEN_T 0x0C61
+-#define GL_TEXTURE_GEN_R 0x0C62
+-#define GL_TEXTURE_GEN_Q 0x0C63
+-#define GL_PIXEL_MAP_I_TO_I 0x0C70
+-#define GL_PIXEL_MAP_S_TO_S 0x0C71
+-#define GL_PIXEL_MAP_I_TO_R 0x0C72
+-#define GL_PIXEL_MAP_I_TO_G 0x0C73
+-#define GL_PIXEL_MAP_I_TO_B 0x0C74
+-#define GL_PIXEL_MAP_I_TO_A 0x0C75
+-#define GL_PIXEL_MAP_R_TO_R 0x0C76
+-#define GL_PIXEL_MAP_G_TO_G 0x0C77
+-#define GL_PIXEL_MAP_B_TO_B 0x0C78
+-#define GL_PIXEL_MAP_A_TO_A 0x0C79
+-#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
+-#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
+-#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
+-#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
+-#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
+-#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
+-#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
+-#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
+-#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
+-#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
+-#define GL_UNPACK_SWAP_BYTES 0x0CF0
+-#define GL_UNPACK_LSB_FIRST 0x0CF1
+-#define GL_UNPACK_ROW_LENGTH 0x0CF2
+-#define GL_UNPACK_SKIP_ROWS 0x0CF3
+-#define GL_UNPACK_SKIP_PIXELS 0x0CF4
+-#define GL_UNPACK_ALIGNMENT 0x0CF5
+-#define GL_PACK_SWAP_BYTES 0x0D00
+-#define GL_PACK_LSB_FIRST 0x0D01
+-#define GL_PACK_ROW_LENGTH 0x0D02
+-#define GL_PACK_SKIP_ROWS 0x0D03
+-#define GL_PACK_SKIP_PIXELS 0x0D04
+-#define GL_PACK_ALIGNMENT 0x0D05
+-#define GL_MAP_COLOR 0x0D10
+-#define GL_MAP_STENCIL 0x0D11
+-#define GL_INDEX_SHIFT 0x0D12
+-#define GL_INDEX_OFFSET 0x0D13
+-#define GL_RED_SCALE 0x0D14
+-#define GL_RED_BIAS 0x0D15
+-#define GL_ZOOM_X 0x0D16
+-#define GL_ZOOM_Y 0x0D17
+-#define GL_GREEN_SCALE 0x0D18
+-#define GL_GREEN_BIAS 0x0D19
+-#define GL_BLUE_SCALE 0x0D1A
+-#define GL_BLUE_BIAS 0x0D1B
+-#define GL_ALPHA_SCALE 0x0D1C
+-#define GL_ALPHA_BIAS 0x0D1D
+-#define GL_DEPTH_SCALE 0x0D1E
+-#define GL_DEPTH_BIAS 0x0D1F
+-#define GL_MAX_EVAL_ORDER 0x0D30
+-#define GL_MAX_LIGHTS 0x0D31
+-#define GL_MAX_CLIP_PLANES 0x0D32
+-#define GL_MAX_TEXTURE_SIZE 0x0D33
+-#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
+-#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
+-#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
+-#define GL_MAX_NAME_STACK_DEPTH 0x0D37
+-#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
+-#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
+-#define GL_MAX_VIEWPORT_DIMS 0x0D3A
+-#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
+-#define GL_SUBPIXEL_BITS 0x0D50
+-#define GL_INDEX_BITS 0x0D51
+-#define GL_RED_BITS 0x0D52
+-#define GL_GREEN_BITS 0x0D53
+-#define GL_BLUE_BITS 0x0D54
+-#define GL_ALPHA_BITS 0x0D55
+-#define GL_DEPTH_BITS 0x0D56
+-#define GL_STENCIL_BITS 0x0D57
+-#define GL_ACCUM_RED_BITS 0x0D58
+-#define GL_ACCUM_GREEN_BITS 0x0D59
+-#define GL_ACCUM_BLUE_BITS 0x0D5A
+-#define GL_ACCUM_ALPHA_BITS 0x0D5B
+-#define GL_NAME_STACK_DEPTH 0x0D70
+-#define GL_AUTO_NORMAL 0x0D80
+-#define GL_MAP1_COLOR_4 0x0D90
+-#define GL_MAP1_INDEX 0x0D91
+-#define GL_MAP1_NORMAL 0x0D92
+-#define GL_MAP1_TEXTURE_COORD_1 0x0D93
+-#define GL_MAP1_TEXTURE_COORD_2 0x0D94
+-#define GL_MAP1_TEXTURE_COORD_3 0x0D95
+-#define GL_MAP1_TEXTURE_COORD_4 0x0D96
+-#define GL_MAP1_VERTEX_3 0x0D97
+-#define GL_MAP1_VERTEX_4 0x0D98
+-#define GL_MAP2_COLOR_4 0x0DB0
+-#define GL_MAP2_INDEX 0x0DB1
+-#define GL_MAP2_NORMAL 0x0DB2
+-#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
+-#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
+-#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
+-#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
+-#define GL_MAP2_VERTEX_3 0x0DB7
+-#define GL_MAP2_VERTEX_4 0x0DB8
+-#define GL_MAP1_GRID_DOMAIN 0x0DD0
+-#define GL_MAP1_GRID_SEGMENTS 0x0DD1
+-#define GL_MAP2_GRID_DOMAIN 0x0DD2
+-#define GL_MAP2_GRID_SEGMENTS 0x0DD3
+-#define GL_TEXTURE_1D 0x0DE0
+-#define GL_TEXTURE_2D 0x0DE1
+-#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
+-#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
+-#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
+-#define GL_SELECTION_BUFFER_POINTER 0x0DF3
+-#define GL_SELECTION_BUFFER_SIZE 0x0DF4
+-#define GL_TEXTURE_WIDTH 0x1000
+-#define GL_TEXTURE_HEIGHT 0x1001
+-#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
+-#define GL_TEXTURE_BORDER_COLOR 0x1004
+-#define GL_TEXTURE_BORDER 0x1005
+-#define GL_DONT_CARE 0x1100
+-#define GL_FASTEST 0x1101
+-#define GL_NICEST 0x1102
+-#define GL_LIGHT0 0x4000
+-#define GL_LIGHT1 0x4001
+-#define GL_LIGHT2 0x4002
+-#define GL_LIGHT3 0x4003
+-#define GL_LIGHT4 0x4004
+-#define GL_LIGHT5 0x4005
+-#define GL_LIGHT6 0x4006
+-#define GL_LIGHT7 0x4007
+-#define GL_AMBIENT 0x1200
+-#define GL_DIFFUSE 0x1201
+-#define GL_SPECULAR 0x1202
+-#define GL_POSITION 0x1203
+-#define GL_SPOT_DIRECTION 0x1204
+-#define GL_SPOT_EXPONENT 0x1205
+-#define GL_SPOT_CUTOFF 0x1206
+-#define GL_CONSTANT_ATTENUATION 0x1207
+-#define GL_LINEAR_ATTENUATION 0x1208
+-#define GL_QUADRATIC_ATTENUATION 0x1209
+-#define GL_COMPILE 0x1300
+-#define GL_COMPILE_AND_EXECUTE 0x1301
+-#define GL_CLEAR 0x1500
+-#define GL_AND 0x1501
+-#define GL_AND_REVERSE 0x1502
+-#define GL_COPY 0x1503
+-#define GL_AND_INVERTED 0x1504
+-#define GL_NOOP 0x1505
+-#define GL_XOR 0x1506
+-#define GL_OR 0x1507
+-#define GL_NOR 0x1508
+-#define GL_EQUIV 0x1509
+-#define GL_INVERT 0x150A
+-#define GL_OR_REVERSE 0x150B
+-#define GL_COPY_INVERTED 0x150C
+-#define GL_OR_INVERTED 0x150D
+-#define GL_NAND 0x150E
+-#define GL_SET 0x150F
+-#define GL_EMISSION 0x1600
+-#define GL_SHININESS 0x1601
+-#define GL_AMBIENT_AND_DIFFUSE 0x1602
+-#define GL_COLOR_INDEXES 0x1603
+-#define GL_MODELVIEW 0x1700
+-#define GL_PROJECTION 0x1701
+-#define GL_TEXTURE 0x1702
+-#define GL_COLOR 0x1800
+-#define GL_DEPTH 0x1801
+-#define GL_STENCIL 0x1802
+-#define GL_COLOR_INDEX 0x1900
+-#define GL_STENCIL_INDEX 0x1901
+-#define GL_DEPTH_COMPONENT 0x1902
+-#define GL_RED 0x1903
+-#define GL_GREEN 0x1904
+-#define GL_BLUE 0x1905
+-#define GL_ALPHA 0x1906
+-#define GL_RGB 0x1907
+-#define GL_RGBA 0x1908
+-#define GL_LUMINANCE 0x1909
+-#define GL_LUMINANCE_ALPHA 0x190A
+-#define GL_BITMAP 0x1A00
+-#define GL_POINT 0x1B00
+-#define GL_LINE 0x1B01
+-#define GL_FILL 0x1B02
+-#define GL_RENDER 0x1C00
+-#define GL_FEEDBACK 0x1C01
+-#define GL_SELECT 0x1C02
+-#define GL_FLAT 0x1D00
+-#define GL_SMOOTH 0x1D01
+-#define GL_KEEP 0x1E00
+-#define GL_REPLACE 0x1E01
+-#define GL_INCR 0x1E02
+-#define GL_DECR 0x1E03
+-#define GL_VENDOR 0x1F00
+-#define GL_RENDERER 0x1F01
+-#define GL_VERSION 0x1F02
+-#define GL_EXTENSIONS 0x1F03
+-#define GL_S 0x2000
+-#define GL_T 0x2001
+-#define GL_R 0x2002
+-#define GL_Q 0x2003
+-#define GL_MODULATE 0x2100
+-#define GL_DECAL 0x2101
+-#define GL_TEXTURE_ENV_MODE 0x2200
+-#define GL_TEXTURE_ENV_COLOR 0x2201
+-#define GL_TEXTURE_ENV 0x2300
+-#define GL_EYE_LINEAR 0x2400
+-#define GL_OBJECT_LINEAR 0x2401
+-#define GL_SPHERE_MAP 0x2402
+-#define GL_TEXTURE_GEN_MODE 0x2500
+-#define GL_OBJECT_PLANE 0x2501
+-#define GL_EYE_PLANE 0x2502
+-#define GL_NEAREST 0x2600
+-#define GL_LINEAR 0x2601
+-#define GL_NEAREST_MIPMAP_NEAREST 0x2700
+-#define GL_LINEAR_MIPMAP_NEAREST 0x2701
+-#define GL_NEAREST_MIPMAP_LINEAR 0x2702
+-#define GL_LINEAR_MIPMAP_LINEAR 0x2703
+-#define GL_TEXTURE_MAG_FILTER 0x2800
+-#define GL_TEXTURE_MIN_FILTER 0x2801
+-#define GL_TEXTURE_WRAP_S 0x2802
+-#define GL_TEXTURE_WRAP_T 0x2803
+-#define GL_CLAMP 0x2900
+-#define GL_REPEAT 0x2901
+-#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
+-#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
+-#define GL_CLIENT_ALL_ATTRIB_BITS 0xffffffff
+-#define GL_POLYGON_OFFSET_FACTOR 0x8038
+-#define GL_POLYGON_OFFSET_UNITS 0x2A00
+-#define GL_POLYGON_OFFSET_POINT 0x2A01
+-#define GL_POLYGON_OFFSET_LINE 0x2A02
+-#define GL_POLYGON_OFFSET_FILL 0x8037
+-#define GL_ALPHA4 0x803B
+-#define GL_ALPHA8 0x803C
+-#define GL_ALPHA12 0x803D
+-#define GL_ALPHA16 0x803E
+-#define GL_LUMINANCE4 0x803F
+-#define GL_LUMINANCE8 0x8040
+-#define GL_LUMINANCE12 0x8041
+-#define GL_LUMINANCE16 0x8042
+-#define GL_LUMINANCE4_ALPHA4 0x8043
+-#define GL_LUMINANCE6_ALPHA2 0x8044
+-#define GL_LUMINANCE8_ALPHA8 0x8045
+-#define GL_LUMINANCE12_ALPHA4 0x8046
+-#define GL_LUMINANCE12_ALPHA12 0x8047
+-#define GL_LUMINANCE16_ALPHA16 0x8048
+-#define GL_INTENSITY 0x8049
+-#define GL_INTENSITY4 0x804A
+-#define GL_INTENSITY8 0x804B
+-#define GL_INTENSITY12 0x804C
+-#define GL_INTENSITY16 0x804D
+-#define GL_R3_G3_B2 0x2A10
+-#define GL_RGB4 0x804F
+-#define GL_RGB5 0x8050
+-#define GL_RGB8 0x8051
+-#define GL_RGB10 0x8052
+-#define GL_RGB12 0x8053
+-#define GL_RGB16 0x8054
+-#define GL_RGBA2 0x8055
+-#define GL_RGBA4 0x8056
+-#define GL_RGB5_A1 0x8057
+-#define GL_RGBA8 0x8058
+-#define GL_RGB10_A2 0x8059
+-#define GL_RGBA12 0x805A
+-#define GL_RGBA16 0x805B
+-#define GL_TEXTURE_RED_SIZE 0x805C
+-#define GL_TEXTURE_GREEN_SIZE 0x805D
+-#define GL_TEXTURE_BLUE_SIZE 0x805E
+-#define GL_TEXTURE_ALPHA_SIZE 0x805F
+-#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
+-#define GL_TEXTURE_INTENSITY_SIZE 0x8061
+-#define GL_PROXY_TEXTURE_1D 0x8063
+-#define GL_PROXY_TEXTURE_2D 0x8064
+-#define GL_TEXTURE_PRIORITY 0x8066
+-#define GL_TEXTURE_RESIDENT 0x8067
+-#define GL_TEXTURE_BINDING_1D 0x8068
+-#define GL_TEXTURE_BINDING_2D 0x8069
+-#define GL_VERTEX_ARRAY 0x8074
+-#define GL_NORMAL_ARRAY 0x8075
+-#define GL_COLOR_ARRAY 0x8076
+-#define GL_INDEX_ARRAY 0x8077
+-#define GL_TEXTURE_COORD_ARRAY 0x8078
+-#define GL_EDGE_FLAG_ARRAY 0x8079
+-#define GL_VERTEX_ARRAY_SIZE 0x807A
+-#define GL_VERTEX_ARRAY_TYPE 0x807B
+-#define GL_VERTEX_ARRAY_STRIDE 0x807C
+-#define GL_NORMAL_ARRAY_TYPE 0x807E
+-#define GL_NORMAL_ARRAY_STRIDE 0x807F
+-#define GL_COLOR_ARRAY_SIZE 0x8081
+-#define GL_COLOR_ARRAY_TYPE 0x8082
+-#define GL_COLOR_ARRAY_STRIDE 0x8083
+-#define GL_INDEX_ARRAY_TYPE 0x8085
+-#define GL_INDEX_ARRAY_STRIDE 0x8086
+-#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
+-#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
+-#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
+-#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
+-#define GL_VERTEX_ARRAY_POINTER 0x808E
+-#define GL_NORMAL_ARRAY_POINTER 0x808F
+-#define GL_COLOR_ARRAY_POINTER 0x8090
+-#define GL_INDEX_ARRAY_POINTER 0x8091
+-#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
+-#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
+-#define GL_V2F 0x2A20
+-#define GL_V3F 0x2A21
+-#define GL_C4UB_V2F 0x2A22
+-#define GL_C4UB_V3F 0x2A23
+-#define GL_C3F_V3F 0x2A24
+-#define GL_N3F_V3F 0x2A25
+-#define GL_C4F_N3F_V3F 0x2A26
+-#define GL_T2F_V3F 0x2A27
+-#define GL_T4F_V4F 0x2A28
+-#define GL_T2F_C4UB_V3F 0x2A29
+-#define GL_T2F_C3F_V3F 0x2A2A
+-#define GL_T2F_N3F_V3F 0x2A2B
+-#define GL_T2F_C4F_N3F_V3F 0x2A2C
+-#define GL_T4F_C4F_N3F_V4F 0x2A2D
+-#define GL_LOGIC_OP GL_INDEX_LOGIC_OP
+-#define GL_TEXTURE_COMPONENTS GL_TEXTURE_INTERNAL_FORMAT
+-#define GL_COLOR_INDEX1_EXT 0x80E2
+-#define GL_COLOR_INDEX2_EXT 0x80E3
+-#define GL_COLOR_INDEX4_EXT 0x80E4
+-#define GL_COLOR_INDEX8_EXT 0x80E5
+-#define GL_COLOR_INDEX12_EXT 0x80E6
+-#define GL_COLOR_INDEX16_EXT 0x80E7
+-
+-GLAPI void GLAPIENTRY glAccum (GLenum op, GLfloat value);
+-GLAPI void GLAPIENTRY glAlphaFunc (GLenum func, GLclampf ref);
+-GLAPI GLboolean GLAPIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
+-GLAPI void GLAPIENTRY glArrayElement (GLint i);
+-GLAPI void GLAPIENTRY glBegin (GLenum mode);
+-GLAPI void GLAPIENTRY glBindTexture (GLenum target, GLuint texture);
+-GLAPI void GLAPIENTRY glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
+-GLAPI void GLAPIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
+-GLAPI void GLAPIENTRY glCallList (GLuint list);
+-GLAPI void GLAPIENTRY glCallLists (GLsizei n, GLenum type, const GLvoid *lists);
+-GLAPI void GLAPIENTRY glClear (GLbitfield mask);
+-GLAPI void GLAPIENTRY glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
+-GLAPI void GLAPIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+-GLAPI void GLAPIENTRY glClearDepth (GLclampd depth);
+-GLAPI void GLAPIENTRY glClearIndex (GLfloat c);
+-GLAPI void GLAPIENTRY glClearStencil (GLint s);
+-GLAPI void GLAPIENTRY glClipPlane (GLenum plane, const GLdouble *equation);
+-GLAPI void GLAPIENTRY glColor3b (GLbyte red, GLbyte green, GLbyte blue);
+-GLAPI void GLAPIENTRY glColor3bv (const GLbyte *v);
+-GLAPI void GLAPIENTRY glColor3d (GLdouble red, GLdouble green, GLdouble blue);
+-GLAPI void GLAPIENTRY glColor3dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glColor3f (GLfloat red, GLfloat green, GLfloat blue);
+-GLAPI void GLAPIENTRY glColor3fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glColor3i (GLint red, GLint green, GLint blue);
+-GLAPI void GLAPIENTRY glColor3iv (const GLint *v);
+-GLAPI void GLAPIENTRY glColor3s (GLshort red, GLshort green, GLshort blue);
+-GLAPI void GLAPIENTRY glColor3sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glColor3ub (GLubyte red, GLubyte green, GLubyte blue);
+-GLAPI void GLAPIENTRY glColor3ubv (const GLubyte *v);
+-GLAPI void GLAPIENTRY glColor3ui (GLuint red, GLuint green, GLuint blue);
+-GLAPI void GLAPIENTRY glColor3uiv (const GLuint *v);
+-GLAPI void GLAPIENTRY glColor3us (GLushort red, GLushort green, GLushort blue);
+-GLAPI void GLAPIENTRY glColor3usv (const GLushort *v);
+-GLAPI void GLAPIENTRY glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
+-GLAPI void GLAPIENTRY glColor4bv (const GLbyte *v);
+-GLAPI void GLAPIENTRY glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
+-GLAPI void GLAPIENTRY glColor4dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
+-GLAPI void GLAPIENTRY glColor4fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glColor4i (GLint red, GLint green, GLint blue, GLint alpha);
+-GLAPI void GLAPIENTRY glColor4iv (const GLint *v);
+-GLAPI void GLAPIENTRY glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);
+-GLAPI void GLAPIENTRY glColor4sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
+-GLAPI void GLAPIENTRY glColor4ubv (const GLubyte *v);
+-GLAPI void GLAPIENTRY glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);
+-GLAPI void GLAPIENTRY glColor4uiv (const GLuint *v);
+-GLAPI void GLAPIENTRY glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);
+-GLAPI void GLAPIENTRY glColor4usv (const GLushort *v);
+-GLAPI void GLAPIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
+-GLAPI void GLAPIENTRY glColorMaterial (GLenum face, GLenum mode);
+-GLAPI void GLAPIENTRY glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+-GLAPI void GLAPIENTRY glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
+-GLAPI void GLAPIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
+-GLAPI void GLAPIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+-GLAPI void GLAPIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+-GLAPI void GLAPIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+-GLAPI void GLAPIENTRY glCullFace (GLenum mode);
+-GLAPI void GLAPIENTRY glDeleteLists (GLuint list, GLsizei range);
+-GLAPI void GLAPIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
+-GLAPI void GLAPIENTRY glDepthFunc (GLenum func);
+-GLAPI void GLAPIENTRY glDepthMask (GLboolean flag);
+-GLAPI void GLAPIENTRY glDepthRange (GLclampd zNear, GLclampd zFar);
+-GLAPI void GLAPIENTRY glDisable (GLenum cap);
+-GLAPI void GLAPIENTRY glDisableClientState (GLenum array);
+-GLAPI void GLAPIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
+-GLAPI void GLAPIENTRY glDrawBuffer (GLenum mode);
+-GLAPI void GLAPIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
+-GLAPI void GLAPIENTRY glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+-GLAPI void GLAPIENTRY glEdgeFlag (GLboolean flag);
+-GLAPI void GLAPIENTRY glEdgeFlagPointer (GLsizei stride, const GLvoid *pointer);
+-GLAPI void GLAPIENTRY glEdgeFlagv (const GLboolean *flag);
+-GLAPI void GLAPIENTRY glEnable (GLenum cap);
+-GLAPI void GLAPIENTRY glEnableClientState (GLenum array);
+-GLAPI void GLAPIENTRY glEnd (void);
+-GLAPI void GLAPIENTRY glEndList (void);
+-GLAPI void GLAPIENTRY glEvalCoord1d (GLdouble u);
+-GLAPI void GLAPIENTRY glEvalCoord1dv (const GLdouble *u);
+-GLAPI void GLAPIENTRY glEvalCoord1f (GLfloat u);
+-GLAPI void GLAPIENTRY glEvalCoord1fv (const GLfloat *u);
+-GLAPI void GLAPIENTRY glEvalCoord2d (GLdouble u, GLdouble v);
+-GLAPI void GLAPIENTRY glEvalCoord2dv (const GLdouble *u);
+-GLAPI void GLAPIENTRY glEvalCoord2f (GLfloat u, GLfloat v);
+-GLAPI void GLAPIENTRY glEvalCoord2fv (const GLfloat *u);
+-GLAPI void GLAPIENTRY glEvalMesh1 (GLenum mode, GLint i1, GLint i2);
+-GLAPI void GLAPIENTRY glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
+-GLAPI void GLAPIENTRY glEvalPoint1 (GLint i);
+-GLAPI void GLAPIENTRY glEvalPoint2 (GLint i, GLint j);
+-GLAPI void GLAPIENTRY glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);
+-GLAPI void GLAPIENTRY glFinish (void);
+-GLAPI void GLAPIENTRY glFlush (void);
+-GLAPI void GLAPIENTRY glFogf (GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glFogfv (GLenum pname, const GLfloat *params);
+-GLAPI void GLAPIENTRY glFogi (GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glFogiv (GLenum pname, const GLint *params);
+-GLAPI void GLAPIENTRY glFrontFace (GLenum mode);
+-GLAPI void GLAPIENTRY glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+-GLAPI GLuint GLAPIENTRY glGenLists (GLsizei range);
+-GLAPI void GLAPIENTRY glGenTextures (GLsizei n, GLuint *textures);
+-GLAPI void GLAPIENTRY glGetBooleanv (GLenum pname, GLboolean *params);
+-GLAPI void GLAPIENTRY glGetClipPlane (GLenum plane, GLdouble *equation);
+-GLAPI void GLAPIENTRY glGetDoublev (GLenum pname, GLdouble *params);
+-GLAPI GLenum GLAPIENTRY glGetError (void);
+-GLAPI void GLAPIENTRY glGetFloatv (GLenum pname, GLfloat *params);
+-GLAPI void GLAPIENTRY glGetIntegerv (GLenum pname, GLint *params);
+-GLAPI void GLAPIENTRY glGetLightfv (GLenum light, GLenum pname, GLfloat *params);
+-GLAPI void GLAPIENTRY glGetLightiv (GLenum light, GLenum pname, GLint *params);
+-GLAPI void GLAPIENTRY glGetMapdv (GLenum target, GLenum query, GLdouble *v);
+-GLAPI void GLAPIENTRY glGetMapfv (GLenum target, GLenum query, GLfloat *v);
+-GLAPI void GLAPIENTRY glGetMapiv (GLenum target, GLenum query, GLint *v);
+-GLAPI void GLAPIENTRY glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);
+-GLAPI void GLAPIENTRY glGetMaterialiv (GLenum face, GLenum pname, GLint *params);
+-GLAPI void GLAPIENTRY glGetPixelMapfv (GLenum map, GLfloat *values);
+-GLAPI void GLAPIENTRY glGetPixelMapuiv (GLenum map, GLuint *values);
+-GLAPI void GLAPIENTRY glGetPixelMapusv (GLenum map, GLushort *values);
+-GLAPI void GLAPIENTRY glGetPointerv (GLenum pname, GLvoid* *params);
+-GLAPI void GLAPIENTRY glGetPolygonStipple (GLubyte *mask);
+-GLAPI const GLubyte * GLAPIENTRY glGetString (GLenum name);
+-GLAPI void GLAPIENTRY glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);
+-GLAPI void GLAPIENTRY glGetTexEnviv (GLenum target, GLenum pname, GLint *params);
+-GLAPI void GLAPIENTRY glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);
+-GLAPI void GLAPIENTRY glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);
+-GLAPI void GLAPIENTRY glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);
+-GLAPI void GLAPIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+-GLAPI void GLAPIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
+-GLAPI void GLAPIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
+-GLAPI void GLAPIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
+-GLAPI void GLAPIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
+-GLAPI void GLAPIENTRY glHint (GLenum target, GLenum mode);
+-GLAPI void GLAPIENTRY glIndexMask (GLuint mask);
+-GLAPI void GLAPIENTRY glIndexPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
+-GLAPI void GLAPIENTRY glIndexd (GLdouble c);
+-GLAPI void GLAPIENTRY glIndexdv (const GLdouble *c);
+-GLAPI void GLAPIENTRY glIndexf (GLfloat c);
+-GLAPI void GLAPIENTRY glIndexfv (const GLfloat *c);
+-GLAPI void GLAPIENTRY glIndexi (GLint c);
+-GLAPI void GLAPIENTRY glIndexiv (const GLint *c);
+-GLAPI void GLAPIENTRY glIndexs (GLshort c);
+-GLAPI void GLAPIENTRY glIndexsv (const GLshort *c);
+-GLAPI void GLAPIENTRY glIndexub (GLubyte c);
+-GLAPI void GLAPIENTRY glIndexubv (const GLubyte *c);
+-GLAPI void GLAPIENTRY glInitNames (void);
+-GLAPI void GLAPIENTRY glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid *pointer);
+-GLAPI GLboolean GLAPIENTRY glIsEnabled (GLenum cap);
+-GLAPI GLboolean GLAPIENTRY glIsList (GLuint list);
+-GLAPI GLboolean GLAPIENTRY glIsTexture (GLuint texture);
+-GLAPI void GLAPIENTRY glLightModelf (GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glLightModelfv (GLenum pname, const GLfloat *params);
+-GLAPI void GLAPIENTRY glLightModeli (GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glLightModeliv (GLenum pname, const GLint *params);
+-GLAPI void GLAPIENTRY glLightf (GLenum light, GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glLightfv (GLenum light, GLenum pname, const GLfloat *params);
+-GLAPI void GLAPIENTRY glLighti (GLenum light, GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glLightiv (GLenum light, GLenum pname, const GLint *params);
+-GLAPI void GLAPIENTRY glLineStipple (GLint factor, GLushort pattern);
+-GLAPI void GLAPIENTRY glLineWidth (GLfloat width);
+-GLAPI void GLAPIENTRY glListBase (GLuint base);
+-GLAPI void GLAPIENTRY glLoadIdentity (void);
+-GLAPI void GLAPIENTRY glLoadMatrixd (const GLdouble *m);
+-GLAPI void GLAPIENTRY glLoadMatrixf (const GLfloat *m);
+-GLAPI void GLAPIENTRY glLoadName (GLuint name);
+-GLAPI void GLAPIENTRY glLogicOp (GLenum opcode);
+-GLAPI void GLAPIENTRY glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
+-GLAPI void GLAPIENTRY glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
+-GLAPI void GLAPIENTRY glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
+-GLAPI void GLAPIENTRY glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
+-GLAPI void GLAPIENTRY glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);
+-GLAPI void GLAPIENTRY glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);
+-GLAPI void GLAPIENTRY glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
+-GLAPI void GLAPIENTRY glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
+-GLAPI void GLAPIENTRY glMaterialf (GLenum face, GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
+-GLAPI void GLAPIENTRY glMateriali (GLenum face, GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glMaterialiv (GLenum face, GLenum pname, const GLint *params);
+-GLAPI void GLAPIENTRY glMatrixMode (GLenum mode);
+-GLAPI void GLAPIENTRY glMultMatrixd (const GLdouble *m);
+-GLAPI void GLAPIENTRY glMultMatrixf (const GLfloat *m);
+-GLAPI void GLAPIENTRY glNewList (GLuint list, GLenum mode);
+-GLAPI void GLAPIENTRY glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);
+-GLAPI void GLAPIENTRY glNormal3bv (const GLbyte *v);
+-GLAPI void GLAPIENTRY glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);
+-GLAPI void GLAPIENTRY glNormal3dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
+-GLAPI void GLAPIENTRY glNormal3fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glNormal3i (GLint nx, GLint ny, GLint nz);
+-GLAPI void GLAPIENTRY glNormal3iv (const GLint *v);
+-GLAPI void GLAPIENTRY glNormal3s (GLshort nx, GLshort ny, GLshort nz);
+-GLAPI void GLAPIENTRY glNormal3sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
+-GLAPI void GLAPIENTRY glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+-GLAPI void GLAPIENTRY glPassThrough (GLfloat token);
+-GLAPI void GLAPIENTRY glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat *values);
+-GLAPI void GLAPIENTRY glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint *values);
+-GLAPI void GLAPIENTRY glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort *values);
+-GLAPI void GLAPIENTRY glPixelStoref (GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glPixelStorei (GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glPixelTransferf (GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glPixelTransferi (GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glPixelZoom (GLfloat xfactor, GLfloat yfactor);
+-GLAPI void GLAPIENTRY glPointSize (GLfloat size);
+-GLAPI void GLAPIENTRY glPolygonMode (GLenum face, GLenum mode);
+-GLAPI void GLAPIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
+-GLAPI void GLAPIENTRY glPolygonStipple (const GLubyte *mask);
+-GLAPI void GLAPIENTRY glPopAttrib (void);
+-GLAPI void GLAPIENTRY glPopClientAttrib (void);
+-GLAPI void GLAPIENTRY glPopMatrix (void);
+-GLAPI void GLAPIENTRY glPopName (void);
+-GLAPI void GLAPIENTRY glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);
+-GLAPI void GLAPIENTRY glPushAttrib (GLbitfield mask);
+-GLAPI void GLAPIENTRY glPushClientAttrib (GLbitfield mask);
+-GLAPI void GLAPIENTRY glPushMatrix (void);
+-GLAPI void GLAPIENTRY glPushName (GLuint name);
+-GLAPI void GLAPIENTRY glRasterPos2d (GLdouble x, GLdouble y);
+-GLAPI void GLAPIENTRY glRasterPos2dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glRasterPos2f (GLfloat x, GLfloat y);
+-GLAPI void GLAPIENTRY glRasterPos2fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glRasterPos2i (GLint x, GLint y);
+-GLAPI void GLAPIENTRY glRasterPos2iv (const GLint *v);
+-GLAPI void GLAPIENTRY glRasterPos2s (GLshort x, GLshort y);
+-GLAPI void GLAPIENTRY glRasterPos2sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);
+-GLAPI void GLAPIENTRY glRasterPos3dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);
+-GLAPI void GLAPIENTRY glRasterPos3fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glRasterPos3i (GLint x, GLint y, GLint z);
+-GLAPI void GLAPIENTRY glRasterPos3iv (const GLint *v);
+-GLAPI void GLAPIENTRY glRasterPos3s (GLshort x, GLshort y, GLshort z);
+-GLAPI void GLAPIENTRY glRasterPos3sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-GLAPI void GLAPIENTRY glRasterPos4dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-GLAPI void GLAPIENTRY glRasterPos4fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glRasterPos4i (GLint x, GLint y, GLint z, GLint w);
+-GLAPI void GLAPIENTRY glRasterPos4iv (const GLint *v);
+-GLAPI void GLAPIENTRY glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);
+-GLAPI void GLAPIENTRY glRasterPos4sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glReadBuffer (GLenum mode);
+-GLAPI void GLAPIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
+-GLAPI void GLAPIENTRY glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
+-GLAPI void GLAPIENTRY glRectdv (const GLdouble *v1, const GLdouble *v2);
+-GLAPI void GLAPIENTRY glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
+-GLAPI void GLAPIENTRY glRectfv (const GLfloat *v1, const GLfloat *v2);
+-GLAPI void GLAPIENTRY glRecti (GLint x1, GLint y1, GLint x2, GLint y2);
+-GLAPI void GLAPIENTRY glRectiv (const GLint *v1, const GLint *v2);
+-GLAPI void GLAPIENTRY glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
+-GLAPI void GLAPIENTRY glRectsv (const GLshort *v1, const GLshort *v2);
+-GLAPI GLint GLAPIENTRY glRenderMode (GLenum mode);
+-GLAPI void GLAPIENTRY glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
+-GLAPI void GLAPIENTRY glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
+-GLAPI void GLAPIENTRY glScaled (GLdouble x, GLdouble y, GLdouble z);
+-GLAPI void GLAPIENTRY glScalef (GLfloat x, GLfloat y, GLfloat z);
+-GLAPI void GLAPIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
+-GLAPI void GLAPIENTRY glSelectBuffer (GLsizei size, GLuint *buffer);
+-GLAPI void GLAPIENTRY glShadeModel (GLenum mode);
+-GLAPI void GLAPIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
+-GLAPI void GLAPIENTRY glStencilMask (GLuint mask);
+-GLAPI void GLAPIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
+-GLAPI void GLAPIENTRY glTexCoord1d (GLdouble s);
+-GLAPI void GLAPIENTRY glTexCoord1dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glTexCoord1f (GLfloat s);
+-GLAPI void GLAPIENTRY glTexCoord1fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glTexCoord1i (GLint s);
+-GLAPI void GLAPIENTRY glTexCoord1iv (const GLint *v);
+-GLAPI void GLAPIENTRY glTexCoord1s (GLshort s);
+-GLAPI void GLAPIENTRY glTexCoord1sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glTexCoord2d (GLdouble s, GLdouble t);
+-GLAPI void GLAPIENTRY glTexCoord2dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glTexCoord2f (GLfloat s, GLfloat t);
+-GLAPI void GLAPIENTRY glTexCoord2fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glTexCoord2i (GLint s, GLint t);
+-GLAPI void GLAPIENTRY glTexCoord2iv (const GLint *v);
+-GLAPI void GLAPIENTRY glTexCoord2s (GLshort s, GLshort t);
+-GLAPI void GLAPIENTRY glTexCoord2sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);
+-GLAPI void GLAPIENTRY glTexCoord3dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);
+-GLAPI void GLAPIENTRY glTexCoord3fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glTexCoord3i (GLint s, GLint t, GLint r);
+-GLAPI void GLAPIENTRY glTexCoord3iv (const GLint *v);
+-GLAPI void GLAPIENTRY glTexCoord3s (GLshort s, GLshort t, GLshort r);
+-GLAPI void GLAPIENTRY glTexCoord3sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+-GLAPI void GLAPIENTRY glTexCoord4dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+-GLAPI void GLAPIENTRY glTexCoord4fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glTexCoord4i (GLint s, GLint t, GLint r, GLint q);
+-GLAPI void GLAPIENTRY glTexCoord4iv (const GLint *v);
+-GLAPI void GLAPIENTRY glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);
+-GLAPI void GLAPIENTRY glTexCoord4sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+-GLAPI void GLAPIENTRY glTexEnvf (GLenum target, GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
+-GLAPI void GLAPIENTRY glTexEnvi (GLenum target, GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glTexEnviv (GLenum target, GLenum pname, const GLint *params);
+-GLAPI void GLAPIENTRY glTexGend (GLenum coord, GLenum pname, GLdouble param);
+-GLAPI void GLAPIENTRY glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);
+-GLAPI void GLAPIENTRY glTexGenf (GLenum coord, GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);
+-GLAPI void GLAPIENTRY glTexGeni (GLenum coord, GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glTexGeniv (GLenum coord, GLenum pname, const GLint *params);
+-GLAPI void GLAPIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+-GLAPI void GLAPIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+-GLAPI void GLAPIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);
+-GLAPI void GLAPIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
+-GLAPI void GLAPIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);
+-GLAPI void GLAPIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
+-GLAPI void GLAPIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+-GLAPI void GLAPIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+-GLAPI void GLAPIENTRY glTranslated (GLdouble x, GLdouble y, GLdouble z);
+-GLAPI void GLAPIENTRY glTranslatef (GLfloat x, GLfloat y, GLfloat z);
+-GLAPI void GLAPIENTRY glVertex2d (GLdouble x, GLdouble y);
+-GLAPI void GLAPIENTRY glVertex2dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glVertex2f (GLfloat x, GLfloat y);
+-GLAPI void GLAPIENTRY glVertex2fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glVertex2i (GLint x, GLint y);
+-GLAPI void GLAPIENTRY glVertex2iv (const GLint *v);
+-GLAPI void GLAPIENTRY glVertex2s (GLshort x, GLshort y);
+-GLAPI void GLAPIENTRY glVertex2sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glVertex3d (GLdouble x, GLdouble y, GLdouble z);
+-GLAPI void GLAPIENTRY glVertex3dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glVertex3f (GLfloat x, GLfloat y, GLfloat z);
+-GLAPI void GLAPIENTRY glVertex3fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glVertex3i (GLint x, GLint y, GLint z);
+-GLAPI void GLAPIENTRY glVertex3iv (const GLint *v);
+-GLAPI void GLAPIENTRY glVertex3s (GLshort x, GLshort y, GLshort z);
+-GLAPI void GLAPIENTRY glVertex3sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-GLAPI void GLAPIENTRY glVertex4dv (const GLdouble *v);
+-GLAPI void GLAPIENTRY glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-GLAPI void GLAPIENTRY glVertex4fv (const GLfloat *v);
+-GLAPI void GLAPIENTRY glVertex4i (GLint x, GLint y, GLint z, GLint w);
+-GLAPI void GLAPIENTRY glVertex4iv (const GLint *v);
+-GLAPI void GLAPIENTRY glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);
+-GLAPI void GLAPIENTRY glVertex4sv (const GLshort *v);
+-GLAPI void GLAPIENTRY glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+-GLAPI void GLAPIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
+-
+-#define GLEW_VERSION_1_1 GLEW_GET_VAR(__GLEW_VERSION_1_1)
+-
+-#endif /* GL_VERSION_1_1 */
+-
+-/* ---------------------------------- GLU ---------------------------------- */
+-
+-/* this is where we can safely include GLU */
+-#if defined(__APPLE__) && defined(__MACH__)
+-#include <OpenGL/glu.h>
+-#else
+-#include <GL/glu.h>
+-#endif
+-
+-/* ----------------------------- GL_VERSION_1_2 ---------------------------- */
+-
+-#ifndef GL_VERSION_1_2
+-#define GL_VERSION_1_2 1
+-
+-#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
+-#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
+-#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
+-#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
+-#define GL_UNSIGNED_BYTE_3_3_2 0x8032
+-#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
+-#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
+-#define GL_UNSIGNED_INT_8_8_8_8 0x8035
+-#define GL_UNSIGNED_INT_10_10_10_2 0x8036
+-#define GL_RESCALE_NORMAL 0x803A
+-#define GL_TEXTURE_BINDING_3D 0x806A
+-#define GL_PACK_SKIP_IMAGES 0x806B
+-#define GL_PACK_IMAGE_HEIGHT 0x806C
+-#define GL_UNPACK_SKIP_IMAGES 0x806D
+-#define GL_UNPACK_IMAGE_HEIGHT 0x806E
+-#define GL_TEXTURE_3D 0x806F
+-#define GL_PROXY_TEXTURE_3D 0x8070
+-#define GL_TEXTURE_DEPTH 0x8071
+-#define GL_TEXTURE_WRAP_R 0x8072
+-#define GL_MAX_3D_TEXTURE_SIZE 0x8073
+-#define GL_BGR 0x80E0
+-#define GL_BGRA 0x80E1
+-#define GL_MAX_ELEMENTS_VERTICES 0x80E8
+-#define GL_MAX_ELEMENTS_INDICES 0x80E9
+-#define GL_CLAMP_TO_EDGE 0x812F
+-#define GL_TEXTURE_MIN_LOD 0x813A
+-#define GL_TEXTURE_MAX_LOD 0x813B
+-#define GL_TEXTURE_BASE_LEVEL 0x813C
+-#define GL_TEXTURE_MAX_LEVEL 0x813D
+-#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
+-#define GL_SINGLE_COLOR 0x81F9
+-#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
+-#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
+-#define GL_UNSIGNED_SHORT_5_6_5 0x8363
+-#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
+-#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
+-#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
+-#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
+-#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
+-#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
+-#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
+-
+-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+-typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+-
+-#define glCopyTexSubImage3D GLEW_GET_FUN(__glewCopyTexSubImage3D)
+-#define glDrawRangeElements GLEW_GET_FUN(__glewDrawRangeElements)
+-#define glTexImage3D GLEW_GET_FUN(__glewTexImage3D)
+-#define glTexSubImage3D GLEW_GET_FUN(__glewTexSubImage3D)
+-
+-#define GLEW_VERSION_1_2 GLEW_GET_VAR(__GLEW_VERSION_1_2)
+-
+-#endif /* GL_VERSION_1_2 */
+-
+-/* ----------------------------- GL_VERSION_1_3 ---------------------------- */
+-
+-#ifndef GL_VERSION_1_3
+-#define GL_VERSION_1_3 1
+-
+-#define GL_MULTISAMPLE 0x809D
+-#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
+-#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
+-#define GL_SAMPLE_COVERAGE 0x80A0
+-#define GL_SAMPLE_BUFFERS 0x80A8
+-#define GL_SAMPLES 0x80A9
+-#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
+-#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
+-#define GL_CLAMP_TO_BORDER 0x812D
+-#define GL_TEXTURE0 0x84C0
+-#define GL_TEXTURE1 0x84C1
+-#define GL_TEXTURE2 0x84C2
+-#define GL_TEXTURE3 0x84C3
+-#define GL_TEXTURE4 0x84C4
+-#define GL_TEXTURE5 0x84C5
+-#define GL_TEXTURE6 0x84C6
+-#define GL_TEXTURE7 0x84C7
+-#define GL_TEXTURE8 0x84C8
+-#define GL_TEXTURE9 0x84C9
+-#define GL_TEXTURE10 0x84CA
+-#define GL_TEXTURE11 0x84CB
+-#define GL_TEXTURE12 0x84CC
+-#define GL_TEXTURE13 0x84CD
+-#define GL_TEXTURE14 0x84CE
+-#define GL_TEXTURE15 0x84CF
+-#define GL_TEXTURE16 0x84D0
+-#define GL_TEXTURE17 0x84D1
+-#define GL_TEXTURE18 0x84D2
+-#define GL_TEXTURE19 0x84D3
+-#define GL_TEXTURE20 0x84D4
+-#define GL_TEXTURE21 0x84D5
+-#define GL_TEXTURE22 0x84D6
+-#define GL_TEXTURE23 0x84D7
+-#define GL_TEXTURE24 0x84D8
+-#define GL_TEXTURE25 0x84D9
+-#define GL_TEXTURE26 0x84DA
+-#define GL_TEXTURE27 0x84DB
+-#define GL_TEXTURE28 0x84DC
+-#define GL_TEXTURE29 0x84DD
+-#define GL_TEXTURE30 0x84DE
+-#define GL_TEXTURE31 0x84DF
+-#define GL_ACTIVE_TEXTURE 0x84E0
+-#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
+-#define GL_MAX_TEXTURE_UNITS 0x84E2
+-#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
+-#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
+-#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
+-#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
+-#define GL_SUBTRACT 0x84E7
+-#define GL_COMPRESSED_ALPHA 0x84E9
+-#define GL_COMPRESSED_LUMINANCE 0x84EA
+-#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
+-#define GL_COMPRESSED_INTENSITY 0x84EC
+-#define GL_COMPRESSED_RGB 0x84ED
+-#define GL_COMPRESSED_RGBA 0x84EE
+-#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
+-#define GL_NORMAL_MAP 0x8511
+-#define GL_REFLECTION_MAP 0x8512
+-#define GL_TEXTURE_CUBE_MAP 0x8513
+-#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
+-#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
+-#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
+-#define GL_COMBINE 0x8570
+-#define GL_COMBINE_RGB 0x8571
+-#define GL_COMBINE_ALPHA 0x8572
+-#define GL_RGB_SCALE 0x8573
+-#define GL_ADD_SIGNED 0x8574
+-#define GL_INTERPOLATE 0x8575
+-#define GL_CONSTANT 0x8576
+-#define GL_PRIMARY_COLOR 0x8577
+-#define GL_PREVIOUS 0x8578
+-#define GL_SOURCE0_RGB 0x8580
+-#define GL_SOURCE1_RGB 0x8581
+-#define GL_SOURCE2_RGB 0x8582
+-#define GL_SOURCE0_ALPHA 0x8588
+-#define GL_SOURCE1_ALPHA 0x8589
+-#define GL_SOURCE2_ALPHA 0x858A
+-#define GL_OPERAND0_RGB 0x8590
+-#define GL_OPERAND1_RGB 0x8591
+-#define GL_OPERAND2_RGB 0x8592
+-#define GL_OPERAND0_ALPHA 0x8598
+-#define GL_OPERAND1_ALPHA 0x8599
+-#define GL_OPERAND2_ALPHA 0x859A
+-#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
+-#define GL_TEXTURE_COMPRESSED 0x86A1
+-#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
+-#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
+-#define GL_DOT3_RGB 0x86AE
+-#define GL_DOT3_RGBA 0x86AF
+-#define GL_MULTISAMPLE_BIT 0x20000000
+-
+-typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREPROC) (GLenum texture);
+-typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+-typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLvoid *img);
+-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
+-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
+-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
+-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
+-
+-#define glActiveTexture GLEW_GET_FUN(__glewActiveTexture)
+-#define glClientActiveTexture GLEW_GET_FUN(__glewClientActiveTexture)
+-#define glCompressedTexImage1D GLEW_GET_FUN(__glewCompressedTexImage1D)
+-#define glCompressedTexImage2D GLEW_GET_FUN(__glewCompressedTexImage2D)
+-#define glCompressedTexImage3D GLEW_GET_FUN(__glewCompressedTexImage3D)
+-#define glCompressedTexSubImage1D GLEW_GET_FUN(__glewCompressedTexSubImage1D)
+-#define glCompressedTexSubImage2D GLEW_GET_FUN(__glewCompressedTexSubImage2D)
+-#define glCompressedTexSubImage3D GLEW_GET_FUN(__glewCompressedTexSubImage3D)
+-#define glGetCompressedTexImage GLEW_GET_FUN(__glewGetCompressedTexImage)
+-#define glLoadTransposeMatrixd GLEW_GET_FUN(__glewLoadTransposeMatrixd)
+-#define glLoadTransposeMatrixf GLEW_GET_FUN(__glewLoadTransposeMatrixf)
+-#define glMultTransposeMatrixd GLEW_GET_FUN(__glewMultTransposeMatrixd)
+-#define glMultTransposeMatrixf GLEW_GET_FUN(__glewMultTransposeMatrixf)
+-#define glMultiTexCoord1d GLEW_GET_FUN(__glewMultiTexCoord1d)
+-#define glMultiTexCoord1dv GLEW_GET_FUN(__glewMultiTexCoord1dv)
+-#define glMultiTexCoord1f GLEW_GET_FUN(__glewMultiTexCoord1f)
+-#define glMultiTexCoord1fv GLEW_GET_FUN(__glewMultiTexCoord1fv)
+-#define glMultiTexCoord1i GLEW_GET_FUN(__glewMultiTexCoord1i)
+-#define glMultiTexCoord1iv GLEW_GET_FUN(__glewMultiTexCoord1iv)
+-#define glMultiTexCoord1s GLEW_GET_FUN(__glewMultiTexCoord1s)
+-#define glMultiTexCoord1sv GLEW_GET_FUN(__glewMultiTexCoord1sv)
+-#define glMultiTexCoord2d GLEW_GET_FUN(__glewMultiTexCoord2d)
+-#define glMultiTexCoord2dv GLEW_GET_FUN(__glewMultiTexCoord2dv)
+-#define glMultiTexCoord2f GLEW_GET_FUN(__glewMultiTexCoord2f)
+-#define glMultiTexCoord2fv GLEW_GET_FUN(__glewMultiTexCoord2fv)
+-#define glMultiTexCoord2i GLEW_GET_FUN(__glewMultiTexCoord2i)
+-#define glMultiTexCoord2iv GLEW_GET_FUN(__glewMultiTexCoord2iv)
+-#define glMultiTexCoord2s GLEW_GET_FUN(__glewMultiTexCoord2s)
+-#define glMultiTexCoord2sv GLEW_GET_FUN(__glewMultiTexCoord2sv)
+-#define glMultiTexCoord3d GLEW_GET_FUN(__glewMultiTexCoord3d)
+-#define glMultiTexCoord3dv GLEW_GET_FUN(__glewMultiTexCoord3dv)
+-#define glMultiTexCoord3f GLEW_GET_FUN(__glewMultiTexCoord3f)
+-#define glMultiTexCoord3fv GLEW_GET_FUN(__glewMultiTexCoord3fv)
+-#define glMultiTexCoord3i GLEW_GET_FUN(__glewMultiTexCoord3i)
+-#define glMultiTexCoord3iv GLEW_GET_FUN(__glewMultiTexCoord3iv)
+-#define glMultiTexCoord3s GLEW_GET_FUN(__glewMultiTexCoord3s)
+-#define glMultiTexCoord3sv GLEW_GET_FUN(__glewMultiTexCoord3sv)
+-#define glMultiTexCoord4d GLEW_GET_FUN(__glewMultiTexCoord4d)
+-#define glMultiTexCoord4dv GLEW_GET_FUN(__glewMultiTexCoord4dv)
+-#define glMultiTexCoord4f GLEW_GET_FUN(__glewMultiTexCoord4f)
+-#define glMultiTexCoord4fv GLEW_GET_FUN(__glewMultiTexCoord4fv)
+-#define glMultiTexCoord4i GLEW_GET_FUN(__glewMultiTexCoord4i)
+-#define glMultiTexCoord4iv GLEW_GET_FUN(__glewMultiTexCoord4iv)
+-#define glMultiTexCoord4s GLEW_GET_FUN(__glewMultiTexCoord4s)
+-#define glMultiTexCoord4sv GLEW_GET_FUN(__glewMultiTexCoord4sv)
+-#define glSampleCoverage GLEW_GET_FUN(__glewSampleCoverage)
+-
+-#define GLEW_VERSION_1_3 GLEW_GET_VAR(__GLEW_VERSION_1_3)
+-
+-#endif /* GL_VERSION_1_3 */
+-
+-/* ----------------------------- GL_VERSION_1_4 ---------------------------- */
+-
+-#ifndef GL_VERSION_1_4
+-#define GL_VERSION_1_4 1
+-
+-#define GL_BLEND_DST_RGB 0x80C8
+-#define GL_BLEND_SRC_RGB 0x80C9
+-#define GL_BLEND_DST_ALPHA 0x80CA
+-#define GL_BLEND_SRC_ALPHA 0x80CB
+-#define GL_POINT_SIZE_MIN 0x8126
+-#define GL_POINT_SIZE_MAX 0x8127
+-#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
+-#define GL_POINT_DISTANCE_ATTENUATION 0x8129
+-#define GL_GENERATE_MIPMAP 0x8191
+-#define GL_GENERATE_MIPMAP_HINT 0x8192
+-#define GL_DEPTH_COMPONENT16 0x81A5
+-#define GL_DEPTH_COMPONENT24 0x81A6
+-#define GL_DEPTH_COMPONENT32 0x81A7
+-#define GL_MIRRORED_REPEAT 0x8370
+-#define GL_FOG_COORDINATE_SOURCE 0x8450
+-#define GL_FOG_COORDINATE 0x8451
+-#define GL_FRAGMENT_DEPTH 0x8452
+-#define GL_CURRENT_FOG_COORDINATE 0x8453
+-#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
+-#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
+-#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
+-#define GL_FOG_COORDINATE_ARRAY 0x8457
+-#define GL_COLOR_SUM 0x8458
+-#define GL_CURRENT_SECONDARY_COLOR 0x8459
+-#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
+-#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
+-#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
+-#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
+-#define GL_SECONDARY_COLOR_ARRAY 0x845E
+-#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
+-#define GL_TEXTURE_FILTER_CONTROL 0x8500
+-#define GL_TEXTURE_LOD_BIAS 0x8501
+-#define GL_INCR_WRAP 0x8507
+-#define GL_DECR_WRAP 0x8508
+-#define GL_TEXTURE_DEPTH_SIZE 0x884A
+-#define GL_DEPTH_TEXTURE_MODE 0x884B
+-#define GL_TEXTURE_COMPARE_MODE 0x884C
+-#define GL_TEXTURE_COMPARE_FUNC 0x884D
+-#define GL_COMPARE_R_TO_TEXTURE 0x884E
+-
+-typedef void (GLAPIENTRY * PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONPROC) (GLenum mode);
+-typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDDPROC) (GLdouble coord);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDFPROC) (GLfloat coord);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
+-typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
+-typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount);
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, GLint *params);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVPROC) (const GLdouble *p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVPROC) (const GLfloat *p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVPROC) (const GLint *p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVPROC) (const GLshort *p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVPROC) (const GLdouble *p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVPROC) (const GLfloat *p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVPROC) (const GLint *p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVPROC) (const GLshort *p);
+-
+-#define glBlendColor GLEW_GET_FUN(__glewBlendColor)
+-#define glBlendEquation GLEW_GET_FUN(__glewBlendEquation)
+-#define glBlendFuncSeparate GLEW_GET_FUN(__glewBlendFuncSeparate)
+-#define glFogCoordPointer GLEW_GET_FUN(__glewFogCoordPointer)
+-#define glFogCoordd GLEW_GET_FUN(__glewFogCoordd)
+-#define glFogCoorddv GLEW_GET_FUN(__glewFogCoorddv)
+-#define glFogCoordf GLEW_GET_FUN(__glewFogCoordf)
+-#define glFogCoordfv GLEW_GET_FUN(__glewFogCoordfv)
+-#define glMultiDrawArrays GLEW_GET_FUN(__glewMultiDrawArrays)
+-#define glMultiDrawElements GLEW_GET_FUN(__glewMultiDrawElements)
+-#define glPointParameterf GLEW_GET_FUN(__glewPointParameterf)
+-#define glPointParameterfv GLEW_GET_FUN(__glewPointParameterfv)
+-#define glPointParameteri GLEW_GET_FUN(__glewPointParameteri)
+-#define glPointParameteriv GLEW_GET_FUN(__glewPointParameteriv)
+-#define glSecondaryColor3b GLEW_GET_FUN(__glewSecondaryColor3b)
+-#define glSecondaryColor3bv GLEW_GET_FUN(__glewSecondaryColor3bv)
+-#define glSecondaryColor3d GLEW_GET_FUN(__glewSecondaryColor3d)
+-#define glSecondaryColor3dv GLEW_GET_FUN(__glewSecondaryColor3dv)
+-#define glSecondaryColor3f GLEW_GET_FUN(__glewSecondaryColor3f)
+-#define glSecondaryColor3fv GLEW_GET_FUN(__glewSecondaryColor3fv)
+-#define glSecondaryColor3i GLEW_GET_FUN(__glewSecondaryColor3i)
+-#define glSecondaryColor3iv GLEW_GET_FUN(__glewSecondaryColor3iv)
+-#define glSecondaryColor3s GLEW_GET_FUN(__glewSecondaryColor3s)
+-#define glSecondaryColor3sv GLEW_GET_FUN(__glewSecondaryColor3sv)
+-#define glSecondaryColor3ub GLEW_GET_FUN(__glewSecondaryColor3ub)
+-#define glSecondaryColor3ubv GLEW_GET_FUN(__glewSecondaryColor3ubv)
+-#define glSecondaryColor3ui GLEW_GET_FUN(__glewSecondaryColor3ui)
+-#define glSecondaryColor3uiv GLEW_GET_FUN(__glewSecondaryColor3uiv)
+-#define glSecondaryColor3us GLEW_GET_FUN(__glewSecondaryColor3us)
+-#define glSecondaryColor3usv GLEW_GET_FUN(__glewSecondaryColor3usv)
+-#define glSecondaryColorPointer GLEW_GET_FUN(__glewSecondaryColorPointer)
+-#define glWindowPos2d GLEW_GET_FUN(__glewWindowPos2d)
+-#define glWindowPos2dv GLEW_GET_FUN(__glewWindowPos2dv)
+-#define glWindowPos2f GLEW_GET_FUN(__glewWindowPos2f)
+-#define glWindowPos2fv GLEW_GET_FUN(__glewWindowPos2fv)
+-#define glWindowPos2i GLEW_GET_FUN(__glewWindowPos2i)
+-#define glWindowPos2iv GLEW_GET_FUN(__glewWindowPos2iv)
+-#define glWindowPos2s GLEW_GET_FUN(__glewWindowPos2s)
+-#define glWindowPos2sv GLEW_GET_FUN(__glewWindowPos2sv)
+-#define glWindowPos3d GLEW_GET_FUN(__glewWindowPos3d)
+-#define glWindowPos3dv GLEW_GET_FUN(__glewWindowPos3dv)
+-#define glWindowPos3f GLEW_GET_FUN(__glewWindowPos3f)
+-#define glWindowPos3fv GLEW_GET_FUN(__glewWindowPos3fv)
+-#define glWindowPos3i GLEW_GET_FUN(__glewWindowPos3i)
+-#define glWindowPos3iv GLEW_GET_FUN(__glewWindowPos3iv)
+-#define glWindowPos3s GLEW_GET_FUN(__glewWindowPos3s)
+-#define glWindowPos3sv GLEW_GET_FUN(__glewWindowPos3sv)
+-
+-#define GLEW_VERSION_1_4 GLEW_GET_VAR(__GLEW_VERSION_1_4)
+-
+-#endif /* GL_VERSION_1_4 */
+-
+-/* ----------------------------- GL_VERSION_1_5 ---------------------------- */
+-
+-#ifndef GL_VERSION_1_5
+-#define GL_VERSION_1_5 1
+-
+-#define GL_FOG_COORD_SRC GL_FOG_COORDINATE_SOURCE
+-#define GL_FOG_COORD GL_FOG_COORDINATE
+-#define GL_FOG_COORD_ARRAY GL_FOG_COORDINATE_ARRAY
+-#define GL_SRC0_RGB GL_SOURCE0_RGB
+-#define GL_FOG_COORD_ARRAY_POINTER GL_FOG_COORDINATE_ARRAY_POINTER
+-#define GL_FOG_COORD_ARRAY_TYPE GL_FOG_COORDINATE_ARRAY_TYPE
+-#define GL_SRC1_ALPHA GL_SOURCE1_ALPHA
+-#define GL_CURRENT_FOG_COORD GL_CURRENT_FOG_COORDINATE
+-#define GL_FOG_COORD_ARRAY_STRIDE GL_FOG_COORDINATE_ARRAY_STRIDE
+-#define GL_SRC0_ALPHA GL_SOURCE0_ALPHA
+-#define GL_SRC1_RGB GL_SOURCE1_RGB
+-#define GL_FOG_COORD_ARRAY_BUFFER_BINDING GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
+-#define GL_SRC2_ALPHA GL_SOURCE2_ALPHA
+-#define GL_SRC2_RGB GL_SOURCE2_RGB
+-#define GL_BUFFER_SIZE 0x8764
+-#define GL_BUFFER_USAGE 0x8765
+-#define GL_QUERY_COUNTER_BITS 0x8864
+-#define GL_CURRENT_QUERY 0x8865
+-#define GL_QUERY_RESULT 0x8866
+-#define GL_QUERY_RESULT_AVAILABLE 0x8867
+-#define GL_ARRAY_BUFFER 0x8892
+-#define GL_ELEMENT_ARRAY_BUFFER 0x8893
+-#define GL_ARRAY_BUFFER_BINDING 0x8894
+-#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
+-#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
+-#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
+-#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
+-#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
+-#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
+-#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
+-#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
+-#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
+-#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
+-#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
+-#define GL_READ_ONLY 0x88B8
+-#define GL_WRITE_ONLY 0x88B9
+-#define GL_READ_WRITE 0x88BA
+-#define GL_BUFFER_ACCESS 0x88BB
+-#define GL_BUFFER_MAPPED 0x88BC
+-#define GL_BUFFER_MAP_POINTER 0x88BD
+-#define GL_STREAM_DRAW 0x88E0
+-#define GL_STREAM_READ 0x88E1
+-#define GL_STREAM_COPY 0x88E2
+-#define GL_STATIC_DRAW 0x88E4
+-#define GL_STATIC_READ 0x88E5
+-#define GL_STATIC_COPY 0x88E6
+-#define GL_DYNAMIC_DRAW 0x88E8
+-#define GL_DYNAMIC_READ 0x88E9
+-#define GL_DYNAMIC_COPY 0x88EA
+-#define GL_SAMPLES_PASSED 0x8914
+-
+-typedef ptrdiff_t GLsizeiptr;
+-typedef ptrdiff_t GLintptr;
+-
+-typedef void (GLAPIENTRY * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
+-typedef void (GLAPIENTRY * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
+-typedef void (GLAPIENTRY * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
+-typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
+-typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint* buffers);
+-typedef void (GLAPIENTRY * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLENDQUERYPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint* buffers);
+-typedef void (GLAPIENTRY * PFNGLGENQUERIESPROC) (GLsizei n, GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid** params);
+-typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
+-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint* params);
+-typedef void (GLAPIENTRY * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERPROC) (GLuint buffer);
+-typedef GLboolean (GLAPIENTRY * PFNGLISQUERYPROC) (GLuint id);
+-typedef GLvoid* (GLAPIENTRY * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
+-typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERPROC) (GLenum target);
+-
+-#define glBeginQuery GLEW_GET_FUN(__glewBeginQuery)
+-#define glBindBuffer GLEW_GET_FUN(__glewBindBuffer)
+-#define glBufferData GLEW_GET_FUN(__glewBufferData)
+-#define glBufferSubData GLEW_GET_FUN(__glewBufferSubData)
+-#define glDeleteBuffers GLEW_GET_FUN(__glewDeleteBuffers)
+-#define glDeleteQueries GLEW_GET_FUN(__glewDeleteQueries)
+-#define glEndQuery GLEW_GET_FUN(__glewEndQuery)
+-#define glGenBuffers GLEW_GET_FUN(__glewGenBuffers)
+-#define glGenQueries GLEW_GET_FUN(__glewGenQueries)
+-#define glGetBufferParameteriv GLEW_GET_FUN(__glewGetBufferParameteriv)
+-#define glGetBufferPointerv GLEW_GET_FUN(__glewGetBufferPointerv)
+-#define glGetBufferSubData GLEW_GET_FUN(__glewGetBufferSubData)
+-#define glGetQueryObjectiv GLEW_GET_FUN(__glewGetQueryObjectiv)
+-#define glGetQueryObjectuiv GLEW_GET_FUN(__glewGetQueryObjectuiv)
+-#define glGetQueryiv GLEW_GET_FUN(__glewGetQueryiv)
+-#define glIsBuffer GLEW_GET_FUN(__glewIsBuffer)
+-#define glIsQuery GLEW_GET_FUN(__glewIsQuery)
+-#define glMapBuffer GLEW_GET_FUN(__glewMapBuffer)
+-#define glUnmapBuffer GLEW_GET_FUN(__glewUnmapBuffer)
+-
+-#define GLEW_VERSION_1_5 GLEW_GET_VAR(__GLEW_VERSION_1_5)
+-
+-#endif /* GL_VERSION_1_5 */
+-
+-/* ----------------------------- GL_VERSION_2_0 ---------------------------- */
+-
+-#ifndef GL_VERSION_2_0
+-#define GL_VERSION_2_0 1
+-
+-#define GL_BLEND_EQUATION_RGB GL_BLEND_EQUATION
+-#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
+-#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
+-#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
+-#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
+-#define GL_CURRENT_VERTEX_ATTRIB 0x8626
+-#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
+-#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
+-#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
+-#define GL_STENCIL_BACK_FUNC 0x8800
+-#define GL_STENCIL_BACK_FAIL 0x8801
+-#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
+-#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
+-#define GL_MAX_DRAW_BUFFERS 0x8824
+-#define GL_DRAW_BUFFER0 0x8825
+-#define GL_DRAW_BUFFER1 0x8826
+-#define GL_DRAW_BUFFER2 0x8827
+-#define GL_DRAW_BUFFER3 0x8828
+-#define GL_DRAW_BUFFER4 0x8829
+-#define GL_DRAW_BUFFER5 0x882A
+-#define GL_DRAW_BUFFER6 0x882B
+-#define GL_DRAW_BUFFER7 0x882C
+-#define GL_DRAW_BUFFER8 0x882D
+-#define GL_DRAW_BUFFER9 0x882E
+-#define GL_DRAW_BUFFER10 0x882F
+-#define GL_DRAW_BUFFER11 0x8830
+-#define GL_DRAW_BUFFER12 0x8831
+-#define GL_DRAW_BUFFER13 0x8832
+-#define GL_DRAW_BUFFER14 0x8833
+-#define GL_DRAW_BUFFER15 0x8834
+-#define GL_BLEND_EQUATION_ALPHA 0x883D
+-#define GL_POINT_SPRITE 0x8861
+-#define GL_COORD_REPLACE 0x8862
+-#define GL_MAX_VERTEX_ATTRIBS 0x8869
+-#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
+-#define GL_MAX_TEXTURE_COORDS 0x8871
+-#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
+-#define GL_FRAGMENT_SHADER 0x8B30
+-#define GL_VERTEX_SHADER 0x8B31
+-#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
+-#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
+-#define GL_MAX_VARYING_FLOATS 0x8B4B
+-#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
+-#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
+-#define GL_SHADER_TYPE 0x8B4F
+-#define GL_FLOAT_VEC2 0x8B50
+-#define GL_FLOAT_VEC3 0x8B51
+-#define GL_FLOAT_VEC4 0x8B52
+-#define GL_INT_VEC2 0x8B53
+-#define GL_INT_VEC3 0x8B54
+-#define GL_INT_VEC4 0x8B55
+-#define GL_BOOL 0x8B56
+-#define GL_BOOL_VEC2 0x8B57
+-#define GL_BOOL_VEC3 0x8B58
+-#define GL_BOOL_VEC4 0x8B59
+-#define GL_FLOAT_MAT2 0x8B5A
+-#define GL_FLOAT_MAT3 0x8B5B
+-#define GL_FLOAT_MAT4 0x8B5C
+-#define GL_SAMPLER_1D 0x8B5D
+-#define GL_SAMPLER_2D 0x8B5E
+-#define GL_SAMPLER_3D 0x8B5F
+-#define GL_SAMPLER_CUBE 0x8B60
+-#define GL_SAMPLER_1D_SHADOW 0x8B61
+-#define GL_SAMPLER_2D_SHADOW 0x8B62
+-#define GL_DELETE_STATUS 0x8B80
+-#define GL_COMPILE_STATUS 0x8B81
+-#define GL_LINK_STATUS 0x8B82
+-#define GL_VALIDATE_STATUS 0x8B83
+-#define GL_INFO_LOG_LENGTH 0x8B84
+-#define GL_ATTACHED_SHADERS 0x8B85
+-#define GL_ACTIVE_UNIFORMS 0x8B86
+-#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
+-#define GL_SHADER_SOURCE_LENGTH 0x8B88
+-#define GL_ACTIVE_ATTRIBUTES 0x8B89
+-#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
+-#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
+-#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
+-#define GL_CURRENT_PROGRAM 0x8B8D
+-#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
+-#define GL_LOWER_LEFT 0x8CA1
+-#define GL_UPPER_LEFT 0x8CA2
+-#define GL_STENCIL_BACK_REF 0x8CA3
+-#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
+-#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
+-
+-typedef char GLchar;
+-
+-typedef void (GLAPIENTRY * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
+-typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar* name);
+-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum, GLenum);
+-typedef void (GLAPIENTRY * PFNGLCOMPILESHADERPROC) (GLuint shader);
+-typedef GLuint (GLAPIENTRY * PFNGLCREATEPROGRAMPROC) (void);
+-typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROC) (GLenum type);
+-typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMPROC) (GLuint program);
+-typedef void (GLAPIENTRY * PFNGLDELETESHADERPROC) (GLuint shader);
+-typedef void (GLAPIENTRY * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
+-typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint);
+-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum* bufs);
+-typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint);
+-typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
+-typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
+-typedef void (GLAPIENTRY * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
+-typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar* name);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint* param);
+-typedef void (GLAPIENTRY * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
+-typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEPROC) (GLint obj, GLsizei maxLength, GLsizei* length, GLchar* source);
+-typedef void (GLAPIENTRY * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint* param);
+-typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONPROC) (GLint programObj, const GLchar* name);
+-typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint, GLenum, GLvoid*);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVPROC) (GLuint, GLenum, GLdouble*);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVPROC) (GLuint, GLenum, GLfloat*);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVPROC) (GLuint, GLenum, GLint*);
+-typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMPROC) (GLuint program);
+-typedef GLboolean (GLAPIENTRY * PFNGLISSHADERPROC) (GLuint shader);
+-typedef void (GLAPIENTRY * PFNGLLINKPROGRAMPROC) (GLuint program);
+-typedef void (GLAPIENTRY * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar** strings, const GLint* lengths);
+-typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
+-typedef void (GLAPIENTRY * PFNGLSTENCILMASKSEPARATEPROC) (GLenum, GLuint);
+-typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUSEPROGRAMPROC) (GLuint program);
+-typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMPROC) (GLuint program);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
+-
+-#define glAttachShader GLEW_GET_FUN(__glewAttachShader)
+-#define glBindAttribLocation GLEW_GET_FUN(__glewBindAttribLocation)
+-#define glBlendEquationSeparate GLEW_GET_FUN(__glewBlendEquationSeparate)
+-#define glCompileShader GLEW_GET_FUN(__glewCompileShader)
+-#define glCreateProgram GLEW_GET_FUN(__glewCreateProgram)
+-#define glCreateShader GLEW_GET_FUN(__glewCreateShader)
+-#define glDeleteProgram GLEW_GET_FUN(__glewDeleteProgram)
+-#define glDeleteShader GLEW_GET_FUN(__glewDeleteShader)
+-#define glDetachShader GLEW_GET_FUN(__glewDetachShader)
+-#define glDisableVertexAttribArray GLEW_GET_FUN(__glewDisableVertexAttribArray)
+-#define glDrawBuffers GLEW_GET_FUN(__glewDrawBuffers)
+-#define glEnableVertexAttribArray GLEW_GET_FUN(__glewEnableVertexAttribArray)
+-#define glGetActiveAttrib GLEW_GET_FUN(__glewGetActiveAttrib)
+-#define glGetActiveUniform GLEW_GET_FUN(__glewGetActiveUniform)
+-#define glGetAttachedShaders GLEW_GET_FUN(__glewGetAttachedShaders)
+-#define glGetAttribLocation GLEW_GET_FUN(__glewGetAttribLocation)
+-#define glGetProgramInfoLog GLEW_GET_FUN(__glewGetProgramInfoLog)
+-#define glGetProgramiv GLEW_GET_FUN(__glewGetProgramiv)
+-#define glGetShaderInfoLog GLEW_GET_FUN(__glewGetShaderInfoLog)
+-#define glGetShaderSource GLEW_GET_FUN(__glewGetShaderSource)
+-#define glGetShaderiv GLEW_GET_FUN(__glewGetShaderiv)
+-#define glGetUniformLocation GLEW_GET_FUN(__glewGetUniformLocation)
+-#define glGetUniformfv GLEW_GET_FUN(__glewGetUniformfv)
+-#define glGetUniformiv GLEW_GET_FUN(__glewGetUniformiv)
+-#define glGetVertexAttribPointerv GLEW_GET_FUN(__glewGetVertexAttribPointerv)
+-#define glGetVertexAttribdv GLEW_GET_FUN(__glewGetVertexAttribdv)
+-#define glGetVertexAttribfv GLEW_GET_FUN(__glewGetVertexAttribfv)
+-#define glGetVertexAttribiv GLEW_GET_FUN(__glewGetVertexAttribiv)
+-#define glIsProgram GLEW_GET_FUN(__glewIsProgram)
+-#define glIsShader GLEW_GET_FUN(__glewIsShader)
+-#define glLinkProgram GLEW_GET_FUN(__glewLinkProgram)
+-#define glShaderSource GLEW_GET_FUN(__glewShaderSource)
+-#define glStencilFuncSeparate GLEW_GET_FUN(__glewStencilFuncSeparate)
+-#define glStencilMaskSeparate GLEW_GET_FUN(__glewStencilMaskSeparate)
+-#define glStencilOpSeparate GLEW_GET_FUN(__glewStencilOpSeparate)
+-#define glUniform1f GLEW_GET_FUN(__glewUniform1f)
+-#define glUniform1fv GLEW_GET_FUN(__glewUniform1fv)
+-#define glUniform1i GLEW_GET_FUN(__glewUniform1i)
+-#define glUniform1iv GLEW_GET_FUN(__glewUniform1iv)
+-#define glUniform2f GLEW_GET_FUN(__glewUniform2f)
+-#define glUniform2fv GLEW_GET_FUN(__glewUniform2fv)
+-#define glUniform2i GLEW_GET_FUN(__glewUniform2i)
+-#define glUniform2iv GLEW_GET_FUN(__glewUniform2iv)
+-#define glUniform3f GLEW_GET_FUN(__glewUniform3f)
+-#define glUniform3fv GLEW_GET_FUN(__glewUniform3fv)
+-#define glUniform3i GLEW_GET_FUN(__glewUniform3i)
+-#define glUniform3iv GLEW_GET_FUN(__glewUniform3iv)
+-#define glUniform4f GLEW_GET_FUN(__glewUniform4f)
+-#define glUniform4fv GLEW_GET_FUN(__glewUniform4fv)
+-#define glUniform4i GLEW_GET_FUN(__glewUniform4i)
+-#define glUniform4iv GLEW_GET_FUN(__glewUniform4iv)
+-#define glUniformMatrix2fv GLEW_GET_FUN(__glewUniformMatrix2fv)
+-#define glUniformMatrix3fv GLEW_GET_FUN(__glewUniformMatrix3fv)
+-#define glUniformMatrix4fv GLEW_GET_FUN(__glewUniformMatrix4fv)
+-#define glUseProgram GLEW_GET_FUN(__glewUseProgram)
+-#define glValidateProgram GLEW_GET_FUN(__glewValidateProgram)
+-#define glVertexAttrib1d GLEW_GET_FUN(__glewVertexAttrib1d)
+-#define glVertexAttrib1dv GLEW_GET_FUN(__glewVertexAttrib1dv)
+-#define glVertexAttrib1f GLEW_GET_FUN(__glewVertexAttrib1f)
+-#define glVertexAttrib1fv GLEW_GET_FUN(__glewVertexAttrib1fv)
+-#define glVertexAttrib1s GLEW_GET_FUN(__glewVertexAttrib1s)
+-#define glVertexAttrib1sv GLEW_GET_FUN(__glewVertexAttrib1sv)
+-#define glVertexAttrib2d GLEW_GET_FUN(__glewVertexAttrib2d)
+-#define glVertexAttrib2dv GLEW_GET_FUN(__glewVertexAttrib2dv)
+-#define glVertexAttrib2f GLEW_GET_FUN(__glewVertexAttrib2f)
+-#define glVertexAttrib2fv GLEW_GET_FUN(__glewVertexAttrib2fv)
+-#define glVertexAttrib2s GLEW_GET_FUN(__glewVertexAttrib2s)
+-#define glVertexAttrib2sv GLEW_GET_FUN(__glewVertexAttrib2sv)
+-#define glVertexAttrib3d GLEW_GET_FUN(__glewVertexAttrib3d)
+-#define glVertexAttrib3dv GLEW_GET_FUN(__glewVertexAttrib3dv)
+-#define glVertexAttrib3f GLEW_GET_FUN(__glewVertexAttrib3f)
+-#define glVertexAttrib3fv GLEW_GET_FUN(__glewVertexAttrib3fv)
+-#define glVertexAttrib3s GLEW_GET_FUN(__glewVertexAttrib3s)
+-#define glVertexAttrib3sv GLEW_GET_FUN(__glewVertexAttrib3sv)
+-#define glVertexAttrib4Nbv GLEW_GET_FUN(__glewVertexAttrib4Nbv)
+-#define glVertexAttrib4Niv GLEW_GET_FUN(__glewVertexAttrib4Niv)
+-#define glVertexAttrib4Nsv GLEW_GET_FUN(__glewVertexAttrib4Nsv)
+-#define glVertexAttrib4Nub GLEW_GET_FUN(__glewVertexAttrib4Nub)
+-#define glVertexAttrib4Nubv GLEW_GET_FUN(__glewVertexAttrib4Nubv)
+-#define glVertexAttrib4Nuiv GLEW_GET_FUN(__glewVertexAttrib4Nuiv)
+-#define glVertexAttrib4Nusv GLEW_GET_FUN(__glewVertexAttrib4Nusv)
+-#define glVertexAttrib4bv GLEW_GET_FUN(__glewVertexAttrib4bv)
+-#define glVertexAttrib4d GLEW_GET_FUN(__glewVertexAttrib4d)
+-#define glVertexAttrib4dv GLEW_GET_FUN(__glewVertexAttrib4dv)
+-#define glVertexAttrib4f GLEW_GET_FUN(__glewVertexAttrib4f)
+-#define glVertexAttrib4fv GLEW_GET_FUN(__glewVertexAttrib4fv)
+-#define glVertexAttrib4iv GLEW_GET_FUN(__glewVertexAttrib4iv)
+-#define glVertexAttrib4s GLEW_GET_FUN(__glewVertexAttrib4s)
+-#define glVertexAttrib4sv GLEW_GET_FUN(__glewVertexAttrib4sv)
+-#define glVertexAttrib4ubv GLEW_GET_FUN(__glewVertexAttrib4ubv)
+-#define glVertexAttrib4uiv GLEW_GET_FUN(__glewVertexAttrib4uiv)
+-#define glVertexAttrib4usv GLEW_GET_FUN(__glewVertexAttrib4usv)
+-#define glVertexAttribPointer GLEW_GET_FUN(__glewVertexAttribPointer)
+-
+-#define GLEW_VERSION_2_0 GLEW_GET_VAR(__GLEW_VERSION_2_0)
+-
+-#endif /* GL_VERSION_2_0 */
+-
+-/* ----------------------------- GL_VERSION_2_1 ---------------------------- */
+-
+-#ifndef GL_VERSION_2_1
+-#define GL_VERSION_2_1 1
+-
+-#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
+-#define GL_PIXEL_PACK_BUFFER 0x88EB
+-#define GL_PIXEL_UNPACK_BUFFER 0x88EC
+-#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
+-#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
+-#define GL_FLOAT_MAT2x3 0x8B65
+-#define GL_FLOAT_MAT2x4 0x8B66
+-#define GL_FLOAT_MAT3x2 0x8B67
+-#define GL_FLOAT_MAT3x4 0x8B68
+-#define GL_FLOAT_MAT4x2 0x8B69
+-#define GL_FLOAT_MAT4x3 0x8B6A
+-#define GL_SRGB 0x8C40
+-#define GL_SRGB8 0x8C41
+-#define GL_SRGB_ALPHA 0x8C42
+-#define GL_SRGB8_ALPHA8 0x8C43
+-#define GL_SLUMINANCE_ALPHA 0x8C44
+-#define GL_SLUMINANCE8_ALPHA8 0x8C45
+-#define GL_SLUMINANCE 0x8C46
+-#define GL_SLUMINANCE8 0x8C47
+-#define GL_COMPRESSED_SRGB 0x8C48
+-#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
+-#define GL_COMPRESSED_SLUMINANCE 0x8C4A
+-#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
+-
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+-
+-#define glUniformMatrix2x3fv GLEW_GET_FUN(__glewUniformMatrix2x3fv)
+-#define glUniformMatrix2x4fv GLEW_GET_FUN(__glewUniformMatrix2x4fv)
+-#define glUniformMatrix3x2fv GLEW_GET_FUN(__glewUniformMatrix3x2fv)
+-#define glUniformMatrix3x4fv GLEW_GET_FUN(__glewUniformMatrix3x4fv)
+-#define glUniformMatrix4x2fv GLEW_GET_FUN(__glewUniformMatrix4x2fv)
+-#define glUniformMatrix4x3fv GLEW_GET_FUN(__glewUniformMatrix4x3fv)
+-
+-#define GLEW_VERSION_2_1 GLEW_GET_VAR(__GLEW_VERSION_2_1)
+-
+-#endif /* GL_VERSION_2_1 */
+-
+-/* -------------------------- GL_3DFX_multisample -------------------------- */
+-
+-#ifndef GL_3DFX_multisample
+-#define GL_3DFX_multisample 1
+-
+-#define GL_MULTISAMPLE_3DFX 0x86B2
+-#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
+-#define GL_SAMPLES_3DFX 0x86B4
+-#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
+-
+-#define GLEW_3DFX_multisample GLEW_GET_VAR(__GLEW_3DFX_multisample)
+-
+-#endif /* GL_3DFX_multisample */
+-
+-/* ---------------------------- GL_3DFX_tbuffer ---------------------------- */
+-
+-#ifndef GL_3DFX_tbuffer
+-#define GL_3DFX_tbuffer 1
+-
+-typedef void (GLAPIENTRY * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
+-
+-#define glTbufferMask3DFX GLEW_GET_FUN(__glewTbufferMask3DFX)
+-
+-#define GLEW_3DFX_tbuffer GLEW_GET_VAR(__GLEW_3DFX_tbuffer)
+-
+-#endif /* GL_3DFX_tbuffer */
+-
+-/* -------------------- GL_3DFX_texture_compression_FXT1 ------------------- */
+-
+-#ifndef GL_3DFX_texture_compression_FXT1
+-#define GL_3DFX_texture_compression_FXT1 1
+-
+-#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
+-#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
+-
+-#define GLEW_3DFX_texture_compression_FXT1 GLEW_GET_VAR(__GLEW_3DFX_texture_compression_FXT1)
+-
+-#endif /* GL_3DFX_texture_compression_FXT1 */
+-
+-/* ------------------------ GL_APPLE_client_storage ------------------------ */
+-
+-#ifndef GL_APPLE_client_storage
+-#define GL_APPLE_client_storage 1
+-
+-#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
+-
+-#define GLEW_APPLE_client_storage GLEW_GET_VAR(__GLEW_APPLE_client_storage)
+-
+-#endif /* GL_APPLE_client_storage */
+-
+-/* ------------------------- GL_APPLE_element_array ------------------------ */
+-
+-#ifndef GL_APPLE_element_array
+-#define GL_APPLE_element_array 1
+-
+-#define GL_ELEMENT_ARRAY_APPLE 0x8768
+-#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8769
+-#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x876A
+-
+-typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
+-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
+-typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void* pointer);
+-typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
+-typedef void (GLAPIENTRY * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount);
+-
+-#define glDrawElementArrayAPPLE GLEW_GET_FUN(__glewDrawElementArrayAPPLE)
+-#define glDrawRangeElementArrayAPPLE GLEW_GET_FUN(__glewDrawRangeElementArrayAPPLE)
+-#define glElementPointerAPPLE GLEW_GET_FUN(__glewElementPointerAPPLE)
+-#define glMultiDrawElementArrayAPPLE GLEW_GET_FUN(__glewMultiDrawElementArrayAPPLE)
+-#define glMultiDrawRangeElementArrayAPPLE GLEW_GET_FUN(__glewMultiDrawRangeElementArrayAPPLE)
+-
+-#define GLEW_APPLE_element_array GLEW_GET_VAR(__GLEW_APPLE_element_array)
+-
+-#endif /* GL_APPLE_element_array */
+-
+-/* ----------------------------- GL_APPLE_fence ---------------------------- */
+-
+-#ifndef GL_APPLE_fence
+-#define GL_APPLE_fence 1
+-
+-#define GL_DRAW_PIXELS_APPLE 0x8A0A
+-#define GL_FENCE_APPLE 0x8A0B
+-
+-typedef void (GLAPIENTRY * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint* fences);
+-typedef void (GLAPIENTRY * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
+-typedef void (GLAPIENTRY * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
+-typedef void (GLAPIENTRY * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint* fences);
+-typedef GLboolean (GLAPIENTRY * PFNGLISFENCEAPPLEPROC) (GLuint fence);
+-typedef void (GLAPIENTRY * PFNGLSETFENCEAPPLEPROC) (GLuint fence);
+-typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
+-typedef GLboolean (GLAPIENTRY * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
+-
+-#define glDeleteFencesAPPLE GLEW_GET_FUN(__glewDeleteFencesAPPLE)
+-#define glFinishFenceAPPLE GLEW_GET_FUN(__glewFinishFenceAPPLE)
+-#define glFinishObjectAPPLE GLEW_GET_FUN(__glewFinishObjectAPPLE)
+-#define glGenFencesAPPLE GLEW_GET_FUN(__glewGenFencesAPPLE)
+-#define glIsFenceAPPLE GLEW_GET_FUN(__glewIsFenceAPPLE)
+-#define glSetFenceAPPLE GLEW_GET_FUN(__glewSetFenceAPPLE)
+-#define glTestFenceAPPLE GLEW_GET_FUN(__glewTestFenceAPPLE)
+-#define glTestObjectAPPLE GLEW_GET_FUN(__glewTestObjectAPPLE)
+-
+-#define GLEW_APPLE_fence GLEW_GET_VAR(__GLEW_APPLE_fence)
+-
+-#endif /* GL_APPLE_fence */
+-
+-/* ------------------------- GL_APPLE_float_pixels ------------------------- */
+-
+-#ifndef GL_APPLE_float_pixels
+-#define GL_APPLE_float_pixels 1
+-
+-#define GL_HALF_APPLE 0x140B
+-#define GL_RGBA_FLOAT32_APPLE 0x8814
+-#define GL_RGB_FLOAT32_APPLE 0x8815
+-#define GL_ALPHA_FLOAT32_APPLE 0x8816
+-#define GL_INTENSITY_FLOAT32_APPLE 0x8817
+-#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
+-#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
+-#define GL_RGBA_FLOAT16_APPLE 0x881A
+-#define GL_RGB_FLOAT16_APPLE 0x881B
+-#define GL_ALPHA_FLOAT16_APPLE 0x881C
+-#define GL_INTENSITY_FLOAT16_APPLE 0x881D
+-#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
+-#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
+-#define GL_COLOR_FLOAT_APPLE 0x8A0F
+-
+-#define GLEW_APPLE_float_pixels GLEW_GET_VAR(__GLEW_APPLE_float_pixels)
+-
+-#endif /* GL_APPLE_float_pixels */
+-
+-/* ---------------------- GL_APPLE_flush_buffer_range ---------------------- */
+-
+-#ifndef GL_APPLE_flush_buffer_range
+-#define GL_APPLE_flush_buffer_range 1
+-
+-#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
+-#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
+-
+-typedef void (GLAPIENTRY * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
+-
+-#define glBufferParameteriAPPLE GLEW_GET_FUN(__glewBufferParameteriAPPLE)
+-#define glFlushMappedBufferRangeAPPLE GLEW_GET_FUN(__glewFlushMappedBufferRangeAPPLE)
+-
+-#define GLEW_APPLE_flush_buffer_range GLEW_GET_VAR(__GLEW_APPLE_flush_buffer_range)
+-
+-#endif /* GL_APPLE_flush_buffer_range */
+-
+-/* ------------------------- GL_APPLE_pixel_buffer ------------------------- */
+-
+-#ifndef GL_APPLE_pixel_buffer
+-#define GL_APPLE_pixel_buffer 1
+-
+-#define GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE 0x8A10
+-
+-#define GLEW_APPLE_pixel_buffer GLEW_GET_VAR(__GLEW_APPLE_pixel_buffer)
+-
+-#endif /* GL_APPLE_pixel_buffer */
+-
+-/* ------------------------ GL_APPLE_specular_vector ----------------------- */
+-
+-#ifndef GL_APPLE_specular_vector
+-#define GL_APPLE_specular_vector 1
+-
+-#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
+-
+-#define GLEW_APPLE_specular_vector GLEW_GET_VAR(__GLEW_APPLE_specular_vector)
+-
+-#endif /* GL_APPLE_specular_vector */
+-
+-/* ------------------------- GL_APPLE_texture_range ------------------------ */
+-
+-#ifndef GL_APPLE_texture_range
+-#define GL_APPLE_texture_range 1
+-
+-#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
+-#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
+-#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
+-#define GL_STORAGE_PRIVATE_APPLE 0x85BD
+-#define GL_STORAGE_CACHED_APPLE 0x85BE
+-#define GL_STORAGE_SHARED_APPLE 0x85BF
+-
+-typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid **params);
+-typedef void (GLAPIENTRY * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, GLvoid *pointer);
+-
+-#define glGetTexParameterPointervAPPLE GLEW_GET_FUN(__glewGetTexParameterPointervAPPLE)
+-#define glTextureRangeAPPLE GLEW_GET_FUN(__glewTextureRangeAPPLE)
+-
+-#define GLEW_APPLE_texture_range GLEW_GET_VAR(__GLEW_APPLE_texture_range)
+-
+-#endif /* GL_APPLE_texture_range */
+-
+-/* ------------------------ GL_APPLE_transform_hint ------------------------ */
+-
+-#ifndef GL_APPLE_transform_hint
+-#define GL_APPLE_transform_hint 1
+-
+-#define GL_TRANSFORM_HINT_APPLE 0x85B1
+-
+-#define GLEW_APPLE_transform_hint GLEW_GET_VAR(__GLEW_APPLE_transform_hint)
+-
+-#endif /* GL_APPLE_transform_hint */
+-
+-/* ---------------------- GL_APPLE_vertex_array_object --------------------- */
+-
+-#ifndef GL_APPLE_vertex_array_object
+-#define GL_APPLE_vertex_array_object 1
+-
+-#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
+-
+-typedef void (GLAPIENTRY * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
+-typedef void (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
+-typedef void (GLAPIENTRY * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
+-typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
+-
+-#define glBindVertexArrayAPPLE GLEW_GET_FUN(__glewBindVertexArrayAPPLE)
+-#define glDeleteVertexArraysAPPLE GLEW_GET_FUN(__glewDeleteVertexArraysAPPLE)
+-#define glGenVertexArraysAPPLE GLEW_GET_FUN(__glewGenVertexArraysAPPLE)
+-#define glIsVertexArrayAPPLE GLEW_GET_FUN(__glewIsVertexArrayAPPLE)
+-
+-#define GLEW_APPLE_vertex_array_object GLEW_GET_VAR(__GLEW_APPLE_vertex_array_object)
+-
+-#endif /* GL_APPLE_vertex_array_object */
+-
+-/* ---------------------- GL_APPLE_vertex_array_range ---------------------- */
+-
+-#ifndef GL_APPLE_vertex_array_range
+-#define GL_APPLE_vertex_array_range 1
+-
+-#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
+-#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
+-#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
+-#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE 0x8520
+-#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
+-#define GL_STORAGE_CACHED_APPLE 0x85BE
+-#define GL_STORAGE_SHARED_APPLE 0x85BF
+-
+-typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void* pointer);
+-typedef void (GLAPIENTRY * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void* pointer);
+-
+-#define glFlushVertexArrayRangeAPPLE GLEW_GET_FUN(__glewFlushVertexArrayRangeAPPLE)
+-#define glVertexArrayParameteriAPPLE GLEW_GET_FUN(__glewVertexArrayParameteriAPPLE)
+-#define glVertexArrayRangeAPPLE GLEW_GET_FUN(__glewVertexArrayRangeAPPLE)
+-
+-#define GLEW_APPLE_vertex_array_range GLEW_GET_VAR(__GLEW_APPLE_vertex_array_range)
+-
+-#endif /* GL_APPLE_vertex_array_range */
+-
+-/* --------------------------- GL_APPLE_ycbcr_422 -------------------------- */
+-
+-#ifndef GL_APPLE_ycbcr_422
+-#define GL_APPLE_ycbcr_422 1
+-
+-#define GL_YCBCR_422_APPLE 0x85B9
+-#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
+-#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
+-
+-#define GLEW_APPLE_ycbcr_422 GLEW_GET_VAR(__GLEW_APPLE_ycbcr_422)
+-
+-#endif /* GL_APPLE_ycbcr_422 */
+-
+-/* ----------------------- GL_ARB_color_buffer_float ----------------------- */
+-
+-#ifndef GL_ARB_color_buffer_float
+-#define GL_ARB_color_buffer_float 1
+-
+-#define GL_RGBA_FLOAT_MODE_ARB 0x8820
+-#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
+-#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
+-#define GL_CLAMP_READ_COLOR_ARB 0x891C
+-#define GL_FIXED_ONLY_ARB 0x891D
+-
+-typedef void (GLAPIENTRY * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
+-
+-#define glClampColorARB GLEW_GET_FUN(__glewClampColorARB)
+-
+-#define GLEW_ARB_color_buffer_float GLEW_GET_VAR(__GLEW_ARB_color_buffer_float)
+-
+-#endif /* GL_ARB_color_buffer_float */
+-
+-/* -------------------------- GL_ARB_depth_texture ------------------------- */
+-
+-#ifndef GL_ARB_depth_texture
+-#define GL_ARB_depth_texture 1
+-
+-#define GL_DEPTH_COMPONENT16_ARB 0x81A5
+-#define GL_DEPTH_COMPONENT24_ARB 0x81A6
+-#define GL_DEPTH_COMPONENT32_ARB 0x81A7
+-#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
+-#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
+-
+-#define GLEW_ARB_depth_texture GLEW_GET_VAR(__GLEW_ARB_depth_texture)
+-
+-#endif /* GL_ARB_depth_texture */
+-
+-/* -------------------------- GL_ARB_draw_buffers -------------------------- */
+-
+-#ifndef GL_ARB_draw_buffers
+-#define GL_ARB_draw_buffers 1
+-
+-#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
+-#define GL_DRAW_BUFFER0_ARB 0x8825
+-#define GL_DRAW_BUFFER1_ARB 0x8826
+-#define GL_DRAW_BUFFER2_ARB 0x8827
+-#define GL_DRAW_BUFFER3_ARB 0x8828
+-#define GL_DRAW_BUFFER4_ARB 0x8829
+-#define GL_DRAW_BUFFER5_ARB 0x882A
+-#define GL_DRAW_BUFFER6_ARB 0x882B
+-#define GL_DRAW_BUFFER7_ARB 0x882C
+-#define GL_DRAW_BUFFER8_ARB 0x882D
+-#define GL_DRAW_BUFFER9_ARB 0x882E
+-#define GL_DRAW_BUFFER10_ARB 0x882F
+-#define GL_DRAW_BUFFER11_ARB 0x8830
+-#define GL_DRAW_BUFFER12_ARB 0x8831
+-#define GL_DRAW_BUFFER13_ARB 0x8832
+-#define GL_DRAW_BUFFER14_ARB 0x8833
+-#define GL_DRAW_BUFFER15_ARB 0x8834
+-
+-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum* bufs);
+-
+-#define glDrawBuffersARB GLEW_GET_FUN(__glewDrawBuffersARB)
+-
+-#define GLEW_ARB_draw_buffers GLEW_GET_VAR(__GLEW_ARB_draw_buffers)
+-
+-#endif /* GL_ARB_draw_buffers */
+-
+-/* ------------------------ GL_ARB_fragment_program ------------------------ */
+-
+-#ifndef GL_ARB_fragment_program
+-#define GL_ARB_fragment_program 1
+-
+-#define GL_FRAGMENT_PROGRAM_ARB 0x8804
+-#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
+-#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
+-#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
+-#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
+-#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
+-#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
+-#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
+-#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
+-#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
+-#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
+-#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
+-#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
+-#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
+-#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
+-
+-#define GLEW_ARB_fragment_program GLEW_GET_VAR(__GLEW_ARB_fragment_program)
+-
+-#endif /* GL_ARB_fragment_program */
+-
+-/* --------------------- GL_ARB_fragment_program_shadow -------------------- */
+-
+-#ifndef GL_ARB_fragment_program_shadow
+-#define GL_ARB_fragment_program_shadow 1
+-
+-#define GLEW_ARB_fragment_program_shadow GLEW_GET_VAR(__GLEW_ARB_fragment_program_shadow)
+-
+-#endif /* GL_ARB_fragment_program_shadow */
+-
+-/* ------------------------- GL_ARB_fragment_shader ------------------------ */
+-
+-#ifndef GL_ARB_fragment_shader
+-#define GL_ARB_fragment_shader 1
+-
+-#define GL_FRAGMENT_SHADER_ARB 0x8B30
+-#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
+-#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
+-
+-#define GLEW_ARB_fragment_shader GLEW_GET_VAR(__GLEW_ARB_fragment_shader)
+-
+-#endif /* GL_ARB_fragment_shader */
+-
+-/* ------------------------ GL_ARB_half_float_pixel ------------------------ */
+-
+-#ifndef GL_ARB_half_float_pixel
+-#define GL_ARB_half_float_pixel 1
+-
+-#define GL_HALF_FLOAT_ARB 0x140B
+-
+-#define GLEW_ARB_half_float_pixel GLEW_GET_VAR(__GLEW_ARB_half_float_pixel)
+-
+-#endif /* GL_ARB_half_float_pixel */
+-
+-/* ----------------------------- GL_ARB_imaging ---------------------------- */
+-
+-#ifndef GL_ARB_imaging
+-#define GL_ARB_imaging 1
+-
+-#define GL_CONSTANT_COLOR 0x8001
+-#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
+-#define GL_CONSTANT_ALPHA 0x8003
+-#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
+-#define GL_BLEND_COLOR 0x8005
+-#define GL_FUNC_ADD 0x8006
+-#define GL_MIN 0x8007
+-#define GL_MAX 0x8008
+-#define GL_BLEND_EQUATION 0x8009
+-#define GL_FUNC_SUBTRACT 0x800A
+-#define GL_FUNC_REVERSE_SUBTRACT 0x800B
+-#define GL_CONVOLUTION_1D 0x8010
+-#define GL_CONVOLUTION_2D 0x8011
+-#define GL_SEPARABLE_2D 0x8012
+-#define GL_CONVOLUTION_BORDER_MODE 0x8013
+-#define GL_CONVOLUTION_FILTER_SCALE 0x8014
+-#define GL_CONVOLUTION_FILTER_BIAS 0x8015
+-#define GL_REDUCE 0x8016
+-#define GL_CONVOLUTION_FORMAT 0x8017
+-#define GL_CONVOLUTION_WIDTH 0x8018
+-#define GL_CONVOLUTION_HEIGHT 0x8019
+-#define GL_MAX_CONVOLUTION_WIDTH 0x801A
+-#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
+-#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
+-#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
+-#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
+-#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
+-#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
+-#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
+-#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
+-#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
+-#define GL_HISTOGRAM 0x8024
+-#define GL_PROXY_HISTOGRAM 0x8025
+-#define GL_HISTOGRAM_WIDTH 0x8026
+-#define GL_HISTOGRAM_FORMAT 0x8027
+-#define GL_HISTOGRAM_RED_SIZE 0x8028
+-#define GL_HISTOGRAM_GREEN_SIZE 0x8029
+-#define GL_HISTOGRAM_BLUE_SIZE 0x802A
+-#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
+-#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
+-#define GL_HISTOGRAM_SINK 0x802D
+-#define GL_MINMAX 0x802E
+-#define GL_MINMAX_FORMAT 0x802F
+-#define GL_MINMAX_SINK 0x8030
+-#define GL_TABLE_TOO_LARGE 0x8031
+-#define GL_COLOR_MATRIX 0x80B1
+-#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
+-#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
+-#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
+-#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
+-#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
+-#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
+-#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
+-#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
+-#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
+-#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
+-#define GL_COLOR_TABLE 0x80D0
+-#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
+-#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
+-#define GL_PROXY_COLOR_TABLE 0x80D3
+-#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
+-#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
+-#define GL_COLOR_TABLE_SCALE 0x80D6
+-#define GL_COLOR_TABLE_BIAS 0x80D7
+-#define GL_COLOR_TABLE_FORMAT 0x80D8
+-#define GL_COLOR_TABLE_WIDTH 0x80D9
+-#define GL_COLOR_TABLE_RED_SIZE 0x80DA
+-#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
+-#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
+-#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
+-#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
+-#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
+-#define GL_IGNORE_BORDER 0x8150
+-#define GL_CONSTANT_BORDER 0x8151
+-#define GL_WRAP_BORDER 0x8152
+-#define GL_REPLICATE_BORDER 0x8153
+-#define GL_CONVOLUTION_BORDER_COLOR 0x8154
+-
+-typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
+-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
+-typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
+-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+-typedef void (GLAPIENTRY * PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values);
+-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+-typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
+-typedef void (GLAPIENTRY * PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+-typedef void (GLAPIENTRY * PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
+-typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLRESETMINMAXPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
+-
+-#define glColorSubTable GLEW_GET_FUN(__glewColorSubTable)
+-#define glColorTable GLEW_GET_FUN(__glewColorTable)
+-#define glColorTableParameterfv GLEW_GET_FUN(__glewColorTableParameterfv)
+-#define glColorTableParameteriv GLEW_GET_FUN(__glewColorTableParameteriv)
+-#define glConvolutionFilter1D GLEW_GET_FUN(__glewConvolutionFilter1D)
+-#define glConvolutionFilter2D GLEW_GET_FUN(__glewConvolutionFilter2D)
+-#define glConvolutionParameterf GLEW_GET_FUN(__glewConvolutionParameterf)
+-#define glConvolutionParameterfv GLEW_GET_FUN(__glewConvolutionParameterfv)
+-#define glConvolutionParameteri GLEW_GET_FUN(__glewConvolutionParameteri)
+-#define glConvolutionParameteriv GLEW_GET_FUN(__glewConvolutionParameteriv)
+-#define glCopyColorSubTable GLEW_GET_FUN(__glewCopyColorSubTable)
+-#define glCopyColorTable GLEW_GET_FUN(__glewCopyColorTable)
+-#define glCopyConvolutionFilter1D GLEW_GET_FUN(__glewCopyConvolutionFilter1D)
+-#define glCopyConvolutionFilter2D GLEW_GET_FUN(__glewCopyConvolutionFilter2D)
+-#define glGetColorTable GLEW_GET_FUN(__glewGetColorTable)
+-#define glGetColorTableParameterfv GLEW_GET_FUN(__glewGetColorTableParameterfv)
+-#define glGetColorTableParameteriv GLEW_GET_FUN(__glewGetColorTableParameteriv)
+-#define glGetConvolutionFilter GLEW_GET_FUN(__glewGetConvolutionFilter)
+-#define glGetConvolutionParameterfv GLEW_GET_FUN(__glewGetConvolutionParameterfv)
+-#define glGetConvolutionParameteriv GLEW_GET_FUN(__glewGetConvolutionParameteriv)
+-#define glGetHistogram GLEW_GET_FUN(__glewGetHistogram)
+-#define glGetHistogramParameterfv GLEW_GET_FUN(__glewGetHistogramParameterfv)
+-#define glGetHistogramParameteriv GLEW_GET_FUN(__glewGetHistogramParameteriv)
+-#define glGetMinmax GLEW_GET_FUN(__glewGetMinmax)
+-#define glGetMinmaxParameterfv GLEW_GET_FUN(__glewGetMinmaxParameterfv)
+-#define glGetMinmaxParameteriv GLEW_GET_FUN(__glewGetMinmaxParameteriv)
+-#define glGetSeparableFilter GLEW_GET_FUN(__glewGetSeparableFilter)
+-#define glHistogram GLEW_GET_FUN(__glewHistogram)
+-#define glMinmax GLEW_GET_FUN(__glewMinmax)
+-#define glResetHistogram GLEW_GET_FUN(__glewResetHistogram)
+-#define glResetMinmax GLEW_GET_FUN(__glewResetMinmax)
+-#define glSeparableFilter2D GLEW_GET_FUN(__glewSeparableFilter2D)
+-
+-#define GLEW_ARB_imaging GLEW_GET_VAR(__GLEW_ARB_imaging)
+-
+-#endif /* GL_ARB_imaging */
+-
+-/* ------------------------- GL_ARB_matrix_palette ------------------------- */
+-
+-#ifndef GL_ARB_matrix_palette
+-#define GL_ARB_matrix_palette 1
+-
+-#define GL_MATRIX_PALETTE_ARB 0x8840
+-#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
+-#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
+-#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
+-#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
+-#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
+-#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
+-#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
+-#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
+-#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
+-
+-typedef void (GLAPIENTRY * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
+-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
+-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, GLubyte *indices);
+-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, GLuint *indices);
+-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, GLushort *indices);
+-
+-#define glCurrentPaletteMatrixARB GLEW_GET_FUN(__glewCurrentPaletteMatrixARB)
+-#define glMatrixIndexPointerARB GLEW_GET_FUN(__glewMatrixIndexPointerARB)
+-#define glMatrixIndexubvARB GLEW_GET_FUN(__glewMatrixIndexubvARB)
+-#define glMatrixIndexuivARB GLEW_GET_FUN(__glewMatrixIndexuivARB)
+-#define glMatrixIndexusvARB GLEW_GET_FUN(__glewMatrixIndexusvARB)
+-
+-#define GLEW_ARB_matrix_palette GLEW_GET_VAR(__GLEW_ARB_matrix_palette)
+-
+-#endif /* GL_ARB_matrix_palette */
+-
+-/* --------------------------- GL_ARB_multisample -------------------------- */
+-
+-#ifndef GL_ARB_multisample
+-#define GL_ARB_multisample 1
+-
+-#define GL_MULTISAMPLE_ARB 0x809D
+-#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
+-#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
+-#define GL_SAMPLE_COVERAGE_ARB 0x80A0
+-#define GL_SAMPLE_BUFFERS_ARB 0x80A8
+-#define GL_SAMPLES_ARB 0x80A9
+-#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
+-#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
+-#define GL_MULTISAMPLE_BIT_ARB 0x20000000
+-
+-typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
+-
+-#define glSampleCoverageARB GLEW_GET_FUN(__glewSampleCoverageARB)
+-
+-#define GLEW_ARB_multisample GLEW_GET_VAR(__GLEW_ARB_multisample)
+-
+-#endif /* GL_ARB_multisample */
+-
+-/* -------------------------- GL_ARB_multitexture -------------------------- */
+-
+-#ifndef GL_ARB_multitexture
+-#define GL_ARB_multitexture 1
+-
+-#define GL_TEXTURE0_ARB 0x84C0
+-#define GL_TEXTURE1_ARB 0x84C1
+-#define GL_TEXTURE2_ARB 0x84C2
+-#define GL_TEXTURE3_ARB 0x84C3
+-#define GL_TEXTURE4_ARB 0x84C4
+-#define GL_TEXTURE5_ARB 0x84C5
+-#define GL_TEXTURE6_ARB 0x84C6
+-#define GL_TEXTURE7_ARB 0x84C7
+-#define GL_TEXTURE8_ARB 0x84C8
+-#define GL_TEXTURE9_ARB 0x84C9
+-#define GL_TEXTURE10_ARB 0x84CA
+-#define GL_TEXTURE11_ARB 0x84CB
+-#define GL_TEXTURE12_ARB 0x84CC
+-#define GL_TEXTURE13_ARB 0x84CD
+-#define GL_TEXTURE14_ARB 0x84CE
+-#define GL_TEXTURE15_ARB 0x84CF
+-#define GL_TEXTURE16_ARB 0x84D0
+-#define GL_TEXTURE17_ARB 0x84D1
+-#define GL_TEXTURE18_ARB 0x84D2
+-#define GL_TEXTURE19_ARB 0x84D3
+-#define GL_TEXTURE20_ARB 0x84D4
+-#define GL_TEXTURE21_ARB 0x84D5
+-#define GL_TEXTURE22_ARB 0x84D6
+-#define GL_TEXTURE23_ARB 0x84D7
+-#define GL_TEXTURE24_ARB 0x84D8
+-#define GL_TEXTURE25_ARB 0x84D9
+-#define GL_TEXTURE26_ARB 0x84DA
+-#define GL_TEXTURE27_ARB 0x84DB
+-#define GL_TEXTURE28_ARB 0x84DC
+-#define GL_TEXTURE29_ARB 0x84DD
+-#define GL_TEXTURE30_ARB 0x84DE
+-#define GL_TEXTURE31_ARB 0x84DF
+-#define GL_ACTIVE_TEXTURE_ARB 0x84E0
+-#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
+-#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
+-
+-typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
+-typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
+-
+-#define glActiveTextureARB GLEW_GET_FUN(__glewActiveTextureARB)
+-#define glClientActiveTextureARB GLEW_GET_FUN(__glewClientActiveTextureARB)
+-#define glMultiTexCoord1dARB GLEW_GET_FUN(__glewMultiTexCoord1dARB)
+-#define glMultiTexCoord1dvARB GLEW_GET_FUN(__glewMultiTexCoord1dvARB)
+-#define glMultiTexCoord1fARB GLEW_GET_FUN(__glewMultiTexCoord1fARB)
+-#define glMultiTexCoord1fvARB GLEW_GET_FUN(__glewMultiTexCoord1fvARB)
+-#define glMultiTexCoord1iARB GLEW_GET_FUN(__glewMultiTexCoord1iARB)
+-#define glMultiTexCoord1ivARB GLEW_GET_FUN(__glewMultiTexCoord1ivARB)
+-#define glMultiTexCoord1sARB GLEW_GET_FUN(__glewMultiTexCoord1sARB)
+-#define glMultiTexCoord1svARB GLEW_GET_FUN(__glewMultiTexCoord1svARB)
+-#define glMultiTexCoord2dARB GLEW_GET_FUN(__glewMultiTexCoord2dARB)
+-#define glMultiTexCoord2dvARB GLEW_GET_FUN(__glewMultiTexCoord2dvARB)
+-#define glMultiTexCoord2fARB GLEW_GET_FUN(__glewMultiTexCoord2fARB)
+-#define glMultiTexCoord2fvARB GLEW_GET_FUN(__glewMultiTexCoord2fvARB)
+-#define glMultiTexCoord2iARB GLEW_GET_FUN(__glewMultiTexCoord2iARB)
+-#define glMultiTexCoord2ivARB GLEW_GET_FUN(__glewMultiTexCoord2ivARB)
+-#define glMultiTexCoord2sARB GLEW_GET_FUN(__glewMultiTexCoord2sARB)
+-#define glMultiTexCoord2svARB GLEW_GET_FUN(__glewMultiTexCoord2svARB)
+-#define glMultiTexCoord3dARB GLEW_GET_FUN(__glewMultiTexCoord3dARB)
+-#define glMultiTexCoord3dvARB GLEW_GET_FUN(__glewMultiTexCoord3dvARB)
+-#define glMultiTexCoord3fARB GLEW_GET_FUN(__glewMultiTexCoord3fARB)
+-#define glMultiTexCoord3fvARB GLEW_GET_FUN(__glewMultiTexCoord3fvARB)
+-#define glMultiTexCoord3iARB GLEW_GET_FUN(__glewMultiTexCoord3iARB)
+-#define glMultiTexCoord3ivARB GLEW_GET_FUN(__glewMultiTexCoord3ivARB)
+-#define glMultiTexCoord3sARB GLEW_GET_FUN(__glewMultiTexCoord3sARB)
+-#define glMultiTexCoord3svARB GLEW_GET_FUN(__glewMultiTexCoord3svARB)
+-#define glMultiTexCoord4dARB GLEW_GET_FUN(__glewMultiTexCoord4dARB)
+-#define glMultiTexCoord4dvARB GLEW_GET_FUN(__glewMultiTexCoord4dvARB)
+-#define glMultiTexCoord4fARB GLEW_GET_FUN(__glewMultiTexCoord4fARB)
+-#define glMultiTexCoord4fvARB GLEW_GET_FUN(__glewMultiTexCoord4fvARB)
+-#define glMultiTexCoord4iARB GLEW_GET_FUN(__glewMultiTexCoord4iARB)
+-#define glMultiTexCoord4ivARB GLEW_GET_FUN(__glewMultiTexCoord4ivARB)
+-#define glMultiTexCoord4sARB GLEW_GET_FUN(__glewMultiTexCoord4sARB)
+-#define glMultiTexCoord4svARB GLEW_GET_FUN(__glewMultiTexCoord4svARB)
+-
+-#define GLEW_ARB_multitexture GLEW_GET_VAR(__GLEW_ARB_multitexture)
+-
+-#endif /* GL_ARB_multitexture */
+-
+-/* ------------------------- GL_ARB_occlusion_query ------------------------ */
+-
+-#ifndef GL_ARB_occlusion_query
+-#define GL_ARB_occlusion_query 1
+-
+-#define GL_QUERY_COUNTER_BITS_ARB 0x8864
+-#define GL_CURRENT_QUERY_ARB 0x8865
+-#define GL_QUERY_RESULT_ARB 0x8866
+-#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
+-#define GL_SAMPLES_PASSED_ARB 0x8914
+-
+-typedef void (GLAPIENTRY * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
+-typedef void (GLAPIENTRY * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLENDQUERYARBPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint* params);
+-typedef void (GLAPIENTRY * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISQUERYARBPROC) (GLuint id);
+-
+-#define glBeginQueryARB GLEW_GET_FUN(__glewBeginQueryARB)
+-#define glDeleteQueriesARB GLEW_GET_FUN(__glewDeleteQueriesARB)
+-#define glEndQueryARB GLEW_GET_FUN(__glewEndQueryARB)
+-#define glGenQueriesARB GLEW_GET_FUN(__glewGenQueriesARB)
+-#define glGetQueryObjectivARB GLEW_GET_FUN(__glewGetQueryObjectivARB)
+-#define glGetQueryObjectuivARB GLEW_GET_FUN(__glewGetQueryObjectuivARB)
+-#define glGetQueryivARB GLEW_GET_FUN(__glewGetQueryivARB)
+-#define glIsQueryARB GLEW_GET_FUN(__glewIsQueryARB)
+-
+-#define GLEW_ARB_occlusion_query GLEW_GET_VAR(__GLEW_ARB_occlusion_query)
+-
+-#endif /* GL_ARB_occlusion_query */
+-
+-/* ----------------------- GL_ARB_pixel_buffer_object ---------------------- */
+-
+-#ifndef GL_ARB_pixel_buffer_object
+-#define GL_ARB_pixel_buffer_object 1
+-
+-#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
+-#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
+-#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
+-#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
+-
+-#define GLEW_ARB_pixel_buffer_object GLEW_GET_VAR(__GLEW_ARB_pixel_buffer_object)
+-
+-#endif /* GL_ARB_pixel_buffer_object */
+-
+-/* ------------------------ GL_ARB_point_parameters ------------------------ */
+-
+-#ifndef GL_ARB_point_parameters
+-#define GL_ARB_point_parameters 1
+-
+-#define GL_POINT_SIZE_MIN_ARB 0x8126
+-#define GL_POINT_SIZE_MAX_ARB 0x8127
+-#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
+-#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
+-
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, GLfloat* params);
+-
+-#define glPointParameterfARB GLEW_GET_FUN(__glewPointParameterfARB)
+-#define glPointParameterfvARB GLEW_GET_FUN(__glewPointParameterfvARB)
+-
+-#define GLEW_ARB_point_parameters GLEW_GET_VAR(__GLEW_ARB_point_parameters)
+-
+-#endif /* GL_ARB_point_parameters */
+-
+-/* -------------------------- GL_ARB_point_sprite -------------------------- */
+-
+-#ifndef GL_ARB_point_sprite
+-#define GL_ARB_point_sprite 1
+-
+-#define GL_POINT_SPRITE_ARB 0x8861
+-#define GL_COORD_REPLACE_ARB 0x8862
+-
+-#define GLEW_ARB_point_sprite GLEW_GET_VAR(__GLEW_ARB_point_sprite)
+-
+-#endif /* GL_ARB_point_sprite */
+-
+-/* ------------------------- GL_ARB_shader_objects ------------------------- */
+-
+-#ifndef GL_ARB_shader_objects
+-#define GL_ARB_shader_objects 1
+-
+-#define GL_PROGRAM_OBJECT_ARB 0x8B40
+-#define GL_SHADER_OBJECT_ARB 0x8B48
+-#define GL_OBJECT_TYPE_ARB 0x8B4E
+-#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
+-#define GL_FLOAT_VEC2_ARB 0x8B50
+-#define GL_FLOAT_VEC3_ARB 0x8B51
+-#define GL_FLOAT_VEC4_ARB 0x8B52
+-#define GL_INT_VEC2_ARB 0x8B53
+-#define GL_INT_VEC3_ARB 0x8B54
+-#define GL_INT_VEC4_ARB 0x8B55
+-#define GL_BOOL_ARB 0x8B56
+-#define GL_BOOL_VEC2_ARB 0x8B57
+-#define GL_BOOL_VEC3_ARB 0x8B58
+-#define GL_BOOL_VEC4_ARB 0x8B59
+-#define GL_FLOAT_MAT2_ARB 0x8B5A
+-#define GL_FLOAT_MAT3_ARB 0x8B5B
+-#define GL_FLOAT_MAT4_ARB 0x8B5C
+-#define GL_SAMPLER_1D_ARB 0x8B5D
+-#define GL_SAMPLER_2D_ARB 0x8B5E
+-#define GL_SAMPLER_3D_ARB 0x8B5F
+-#define GL_SAMPLER_CUBE_ARB 0x8B60
+-#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
+-#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
+-#define GL_SAMPLER_2D_RECT_ARB 0x8B63
+-#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
+-#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
+-#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
+-#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
+-#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
+-#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
+-#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
+-#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
+-#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
+-#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
+-
+-typedef char GLcharARB;
+-typedef unsigned int GLhandleARB;
+-
+-typedef void (GLAPIENTRY * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
+-typedef void (GLAPIENTRY * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
+-typedef GLhandleARB (GLAPIENTRY * PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
+-typedef GLhandleARB (GLAPIENTRY * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
+-typedef void (GLAPIENTRY * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
+-typedef void (GLAPIENTRY * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
+-typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
+-typedef void (GLAPIENTRY * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj);
+-typedef GLhandleARB (GLAPIENTRY * PFNGLGETHANDLEARBPROC) (GLenum pname);
+-typedef void (GLAPIENTRY * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog);
+-typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source);
+-typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
+-typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
+-typedef void (GLAPIENTRY * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
+-typedef void (GLAPIENTRY * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
+-typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
+-
+-#define glAttachObjectARB GLEW_GET_FUN(__glewAttachObjectARB)
+-#define glCompileShaderARB GLEW_GET_FUN(__glewCompileShaderARB)
+-#define glCreateProgramObjectARB GLEW_GET_FUN(__glewCreateProgramObjectARB)
+-#define glCreateShaderObjectARB GLEW_GET_FUN(__glewCreateShaderObjectARB)
+-#define glDeleteObjectARB GLEW_GET_FUN(__glewDeleteObjectARB)
+-#define glDetachObjectARB GLEW_GET_FUN(__glewDetachObjectARB)
+-#define glGetActiveUniformARB GLEW_GET_FUN(__glewGetActiveUniformARB)
+-#define glGetAttachedObjectsARB GLEW_GET_FUN(__glewGetAttachedObjectsARB)
+-#define glGetHandleARB GLEW_GET_FUN(__glewGetHandleARB)
+-#define glGetInfoLogARB GLEW_GET_FUN(__glewGetInfoLogARB)
+-#define glGetObjectParameterfvARB GLEW_GET_FUN(__glewGetObjectParameterfvARB)
+-#define glGetObjectParameterivARB GLEW_GET_FUN(__glewGetObjectParameterivARB)
+-#define glGetShaderSourceARB GLEW_GET_FUN(__glewGetShaderSourceARB)
+-#define glGetUniformLocationARB GLEW_GET_FUN(__glewGetUniformLocationARB)
+-#define glGetUniformfvARB GLEW_GET_FUN(__glewGetUniformfvARB)
+-#define glGetUniformivARB GLEW_GET_FUN(__glewGetUniformivARB)
+-#define glLinkProgramARB GLEW_GET_FUN(__glewLinkProgramARB)
+-#define glShaderSourceARB GLEW_GET_FUN(__glewShaderSourceARB)
+-#define glUniform1fARB GLEW_GET_FUN(__glewUniform1fARB)
+-#define glUniform1fvARB GLEW_GET_FUN(__glewUniform1fvARB)
+-#define glUniform1iARB GLEW_GET_FUN(__glewUniform1iARB)
+-#define glUniform1ivARB GLEW_GET_FUN(__glewUniform1ivARB)
+-#define glUniform2fARB GLEW_GET_FUN(__glewUniform2fARB)
+-#define glUniform2fvARB GLEW_GET_FUN(__glewUniform2fvARB)
+-#define glUniform2iARB GLEW_GET_FUN(__glewUniform2iARB)
+-#define glUniform2ivARB GLEW_GET_FUN(__glewUniform2ivARB)
+-#define glUniform3fARB GLEW_GET_FUN(__glewUniform3fARB)
+-#define glUniform3fvARB GLEW_GET_FUN(__glewUniform3fvARB)
+-#define glUniform3iARB GLEW_GET_FUN(__glewUniform3iARB)
+-#define glUniform3ivARB GLEW_GET_FUN(__glewUniform3ivARB)
+-#define glUniform4fARB GLEW_GET_FUN(__glewUniform4fARB)
+-#define glUniform4fvARB GLEW_GET_FUN(__glewUniform4fvARB)
+-#define glUniform4iARB GLEW_GET_FUN(__glewUniform4iARB)
+-#define glUniform4ivARB GLEW_GET_FUN(__glewUniform4ivARB)
+-#define glUniformMatrix2fvARB GLEW_GET_FUN(__glewUniformMatrix2fvARB)
+-#define glUniformMatrix3fvARB GLEW_GET_FUN(__glewUniformMatrix3fvARB)
+-#define glUniformMatrix4fvARB GLEW_GET_FUN(__glewUniformMatrix4fvARB)
+-#define glUseProgramObjectARB GLEW_GET_FUN(__glewUseProgramObjectARB)
+-#define glValidateProgramARB GLEW_GET_FUN(__glewValidateProgramARB)
+-
+-#define GLEW_ARB_shader_objects GLEW_GET_VAR(__GLEW_ARB_shader_objects)
+-
+-#endif /* GL_ARB_shader_objects */
+-
+-/* ---------------------- GL_ARB_shading_language_100 ---------------------- */
+-
+-#ifndef GL_ARB_shading_language_100
+-#define GL_ARB_shading_language_100 1
+-
+-#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
+-
+-#define GLEW_ARB_shading_language_100 GLEW_GET_VAR(__GLEW_ARB_shading_language_100)
+-
+-#endif /* GL_ARB_shading_language_100 */
+-
+-/* ----------------------------- GL_ARB_shadow ----------------------------- */
+-
+-#ifndef GL_ARB_shadow
+-#define GL_ARB_shadow 1
+-
+-#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
+-#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
+-#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
+-
+-#define GLEW_ARB_shadow GLEW_GET_VAR(__GLEW_ARB_shadow)
+-
+-#endif /* GL_ARB_shadow */
+-
+-/* ------------------------- GL_ARB_shadow_ambient ------------------------- */
+-
+-#ifndef GL_ARB_shadow_ambient
+-#define GL_ARB_shadow_ambient 1
+-
+-#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
+-
+-#define GLEW_ARB_shadow_ambient GLEW_GET_VAR(__GLEW_ARB_shadow_ambient)
+-
+-#endif /* GL_ARB_shadow_ambient */
+-
+-/* ---------------------- GL_ARB_texture_border_clamp ---------------------- */
+-
+-#ifndef GL_ARB_texture_border_clamp
+-#define GL_ARB_texture_border_clamp 1
+-
+-#define GL_CLAMP_TO_BORDER_ARB 0x812D
+-
+-#define GLEW_ARB_texture_border_clamp GLEW_GET_VAR(__GLEW_ARB_texture_border_clamp)
+-
+-#endif /* GL_ARB_texture_border_clamp */
+-
+-/* ----------------------- GL_ARB_texture_compression ---------------------- */
+-
+-#ifndef GL_ARB_texture_compression
+-#define GL_ARB_texture_compression 1
+-
+-#define GL_COMPRESSED_ALPHA_ARB 0x84E9
+-#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
+-#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
+-#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
+-#define GL_COMPRESSED_RGB_ARB 0x84ED
+-#define GL_COMPRESSED_RGBA_ARB 0x84EE
+-#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
+-#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
+-#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
+-#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
+-#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
+-
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
+-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
+-typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, void* img);
+-
+-#define glCompressedTexImage1DARB GLEW_GET_FUN(__glewCompressedTexImage1DARB)
+-#define glCompressedTexImage2DARB GLEW_GET_FUN(__glewCompressedTexImage2DARB)
+-#define glCompressedTexImage3DARB GLEW_GET_FUN(__glewCompressedTexImage3DARB)
+-#define glCompressedTexSubImage1DARB GLEW_GET_FUN(__glewCompressedTexSubImage1DARB)
+-#define glCompressedTexSubImage2DARB GLEW_GET_FUN(__glewCompressedTexSubImage2DARB)
+-#define glCompressedTexSubImage3DARB GLEW_GET_FUN(__glewCompressedTexSubImage3DARB)
+-#define glGetCompressedTexImageARB GLEW_GET_FUN(__glewGetCompressedTexImageARB)
+-
+-#define GLEW_ARB_texture_compression GLEW_GET_VAR(__GLEW_ARB_texture_compression)
+-
+-#endif /* GL_ARB_texture_compression */
+-
+-/* ------------------------ GL_ARB_texture_cube_map ------------------------ */
+-
+-#ifndef GL_ARB_texture_cube_map
+-#define GL_ARB_texture_cube_map 1
+-
+-#define GL_NORMAL_MAP_ARB 0x8511
+-#define GL_REFLECTION_MAP_ARB 0x8512
+-#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
+-#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
+-#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
+-#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
+-
+-#define GLEW_ARB_texture_cube_map GLEW_GET_VAR(__GLEW_ARB_texture_cube_map)
+-
+-#endif /* GL_ARB_texture_cube_map */
+-
+-/* ------------------------- GL_ARB_texture_env_add ------------------------ */
+-
+-#ifndef GL_ARB_texture_env_add
+-#define GL_ARB_texture_env_add 1
+-
+-#define GLEW_ARB_texture_env_add GLEW_GET_VAR(__GLEW_ARB_texture_env_add)
+-
+-#endif /* GL_ARB_texture_env_add */
+-
+-/* ----------------------- GL_ARB_texture_env_combine ---------------------- */
+-
+-#ifndef GL_ARB_texture_env_combine
+-#define GL_ARB_texture_env_combine 1
+-
+-#define GL_SUBTRACT_ARB 0x84E7
+-#define GL_COMBINE_ARB 0x8570
+-#define GL_COMBINE_RGB_ARB 0x8571
+-#define GL_COMBINE_ALPHA_ARB 0x8572
+-#define GL_RGB_SCALE_ARB 0x8573
+-#define GL_ADD_SIGNED_ARB 0x8574
+-#define GL_INTERPOLATE_ARB 0x8575
+-#define GL_CONSTANT_ARB 0x8576
+-#define GL_PRIMARY_COLOR_ARB 0x8577
+-#define GL_PREVIOUS_ARB 0x8578
+-#define GL_SOURCE0_RGB_ARB 0x8580
+-#define GL_SOURCE1_RGB_ARB 0x8581
+-#define GL_SOURCE2_RGB_ARB 0x8582
+-#define GL_SOURCE0_ALPHA_ARB 0x8588
+-#define GL_SOURCE1_ALPHA_ARB 0x8589
+-#define GL_SOURCE2_ALPHA_ARB 0x858A
+-#define GL_OPERAND0_RGB_ARB 0x8590
+-#define GL_OPERAND1_RGB_ARB 0x8591
+-#define GL_OPERAND2_RGB_ARB 0x8592
+-#define GL_OPERAND0_ALPHA_ARB 0x8598
+-#define GL_OPERAND1_ALPHA_ARB 0x8599
+-#define GL_OPERAND2_ALPHA_ARB 0x859A
+-
+-#define GLEW_ARB_texture_env_combine GLEW_GET_VAR(__GLEW_ARB_texture_env_combine)
+-
+-#endif /* GL_ARB_texture_env_combine */
+-
+-/* ---------------------- GL_ARB_texture_env_crossbar ---------------------- */
+-
+-#ifndef GL_ARB_texture_env_crossbar
+-#define GL_ARB_texture_env_crossbar 1
+-
+-#define GLEW_ARB_texture_env_crossbar GLEW_GET_VAR(__GLEW_ARB_texture_env_crossbar)
+-
+-#endif /* GL_ARB_texture_env_crossbar */
+-
+-/* ------------------------ GL_ARB_texture_env_dot3 ------------------------ */
+-
+-#ifndef GL_ARB_texture_env_dot3
+-#define GL_ARB_texture_env_dot3 1
+-
+-#define GL_DOT3_RGB_ARB 0x86AE
+-#define GL_DOT3_RGBA_ARB 0x86AF
+-
+-#define GLEW_ARB_texture_env_dot3 GLEW_GET_VAR(__GLEW_ARB_texture_env_dot3)
+-
+-#endif /* GL_ARB_texture_env_dot3 */
+-
+-/* -------------------------- GL_ARB_texture_float ------------------------- */
+-
+-#ifndef GL_ARB_texture_float
+-#define GL_ARB_texture_float 1
+-
+-#define GL_RGBA32F_ARB 0x8814
+-#define GL_RGB32F_ARB 0x8815
+-#define GL_ALPHA32F_ARB 0x8816
+-#define GL_INTENSITY32F_ARB 0x8817
+-#define GL_LUMINANCE32F_ARB 0x8818
+-#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
+-#define GL_RGBA16F_ARB 0x881A
+-#define GL_RGB16F_ARB 0x881B
+-#define GL_ALPHA16F_ARB 0x881C
+-#define GL_INTENSITY16F_ARB 0x881D
+-#define GL_LUMINANCE16F_ARB 0x881E
+-#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
+-#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
+-#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
+-#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
+-#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
+-#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
+-#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
+-#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
+-#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
+-
+-#define GLEW_ARB_texture_float GLEW_GET_VAR(__GLEW_ARB_texture_float)
+-
+-#endif /* GL_ARB_texture_float */
+-
+-/* --------------------- GL_ARB_texture_mirrored_repeat -------------------- */
+-
+-#ifndef GL_ARB_texture_mirrored_repeat
+-#define GL_ARB_texture_mirrored_repeat 1
+-
+-#define GL_MIRRORED_REPEAT_ARB 0x8370
+-
+-#define GLEW_ARB_texture_mirrored_repeat GLEW_GET_VAR(__GLEW_ARB_texture_mirrored_repeat)
+-
+-#endif /* GL_ARB_texture_mirrored_repeat */
+-
+-/* -------------------- GL_ARB_texture_non_power_of_two -------------------- */
+-
+-#ifndef GL_ARB_texture_non_power_of_two
+-#define GL_ARB_texture_non_power_of_two 1
+-
+-#define GLEW_ARB_texture_non_power_of_two GLEW_GET_VAR(__GLEW_ARB_texture_non_power_of_two)
+-
+-#endif /* GL_ARB_texture_non_power_of_two */
+-
+-/* ------------------------ GL_ARB_texture_rectangle ----------------------- */
+-
+-#ifndef GL_ARB_texture_rectangle
+-#define GL_ARB_texture_rectangle 1
+-
+-#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
+-#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
+-#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
+-#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
+-#define GL_SAMPLER_2D_RECT_ARB 0x8B63
+-#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
+-
+-#define GLEW_ARB_texture_rectangle GLEW_GET_VAR(__GLEW_ARB_texture_rectangle)
+-
+-#endif /* GL_ARB_texture_rectangle */
+-
+-/* ------------------------ GL_ARB_transpose_matrix ------------------------ */
+-
+-#ifndef GL_ARB_transpose_matrix
+-#define GL_ARB_transpose_matrix 1
+-
+-#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
+-#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
+-#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
+-#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
+-
+-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
+-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
+-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
+-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
+-
+-#define glLoadTransposeMatrixdARB GLEW_GET_FUN(__glewLoadTransposeMatrixdARB)
+-#define glLoadTransposeMatrixfARB GLEW_GET_FUN(__glewLoadTransposeMatrixfARB)
+-#define glMultTransposeMatrixdARB GLEW_GET_FUN(__glewMultTransposeMatrixdARB)
+-#define glMultTransposeMatrixfARB GLEW_GET_FUN(__glewMultTransposeMatrixfARB)
+-
+-#define GLEW_ARB_transpose_matrix GLEW_GET_VAR(__GLEW_ARB_transpose_matrix)
+-
+-#endif /* GL_ARB_transpose_matrix */
+-
+-/* -------------------------- GL_ARB_vertex_blend -------------------------- */
+-
+-#ifndef GL_ARB_vertex_blend
+-#define GL_ARB_vertex_blend 1
+-
+-#define GL_MODELVIEW0_ARB 0x1700
+-#define GL_MODELVIEW1_ARB 0x850A
+-#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
+-#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
+-#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
+-#define GL_VERTEX_BLEND_ARB 0x86A7
+-#define GL_CURRENT_WEIGHT_ARB 0x86A8
+-#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
+-#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
+-#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
+-#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
+-#define GL_WEIGHT_ARRAY_ARB 0x86AD
+-#define GL_MODELVIEW2_ARB 0x8722
+-#define GL_MODELVIEW3_ARB 0x8723
+-#define GL_MODELVIEW4_ARB 0x8724
+-#define GL_MODELVIEW5_ARB 0x8725
+-#define GL_MODELVIEW6_ARB 0x8726
+-#define GL_MODELVIEW7_ARB 0x8727
+-#define GL_MODELVIEW8_ARB 0x8728
+-#define GL_MODELVIEW9_ARB 0x8729
+-#define GL_MODELVIEW10_ARB 0x872A
+-#define GL_MODELVIEW11_ARB 0x872B
+-#define GL_MODELVIEW12_ARB 0x872C
+-#define GL_MODELVIEW13_ARB 0x872D
+-#define GL_MODELVIEW14_ARB 0x872E
+-#define GL_MODELVIEW15_ARB 0x872F
+-#define GL_MODELVIEW16_ARB 0x8730
+-#define GL_MODELVIEW17_ARB 0x8731
+-#define GL_MODELVIEW18_ARB 0x8732
+-#define GL_MODELVIEW19_ARB 0x8733
+-#define GL_MODELVIEW20_ARB 0x8734
+-#define GL_MODELVIEW21_ARB 0x8735
+-#define GL_MODELVIEW22_ARB 0x8736
+-#define GL_MODELVIEW23_ARB 0x8737
+-#define GL_MODELVIEW24_ARB 0x8738
+-#define GL_MODELVIEW25_ARB 0x8739
+-#define GL_MODELVIEW26_ARB 0x873A
+-#define GL_MODELVIEW27_ARB 0x873B
+-#define GL_MODELVIEW28_ARB 0x873C
+-#define GL_MODELVIEW29_ARB 0x873D
+-#define GL_MODELVIEW30_ARB 0x873E
+-#define GL_MODELVIEW31_ARB 0x873F
+-
+-typedef void (GLAPIENTRY * PFNGLVERTEXBLENDARBPROC) (GLint count);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTBVARBPROC) (GLint size, GLbyte *weights);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTDVARBPROC) (GLint size, GLdouble *weights);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTFVARBPROC) (GLint size, GLfloat *weights);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTIVARBPROC) (GLint size, GLint *weights);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTSVARBPROC) (GLint size, GLshort *weights);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTUBVARBPROC) (GLint size, GLubyte *weights);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTUIVARBPROC) (GLint size, GLuint *weights);
+-typedef void (GLAPIENTRY * PFNGLWEIGHTUSVARBPROC) (GLint size, GLushort *weights);
+-
+-#define glVertexBlendARB GLEW_GET_FUN(__glewVertexBlendARB)
+-#define glWeightPointerARB GLEW_GET_FUN(__glewWeightPointerARB)
+-#define glWeightbvARB GLEW_GET_FUN(__glewWeightbvARB)
+-#define glWeightdvARB GLEW_GET_FUN(__glewWeightdvARB)
+-#define glWeightfvARB GLEW_GET_FUN(__glewWeightfvARB)
+-#define glWeightivARB GLEW_GET_FUN(__glewWeightivARB)
+-#define glWeightsvARB GLEW_GET_FUN(__glewWeightsvARB)
+-#define glWeightubvARB GLEW_GET_FUN(__glewWeightubvARB)
+-#define glWeightuivARB GLEW_GET_FUN(__glewWeightuivARB)
+-#define glWeightusvARB GLEW_GET_FUN(__glewWeightusvARB)
+-
+-#define GLEW_ARB_vertex_blend GLEW_GET_VAR(__GLEW_ARB_vertex_blend)
+-
+-#endif /* GL_ARB_vertex_blend */
+-
+-/* ---------------------- GL_ARB_vertex_buffer_object ---------------------- */
+-
+-#ifndef GL_ARB_vertex_buffer_object
+-#define GL_ARB_vertex_buffer_object 1
+-
+-#define GL_BUFFER_SIZE_ARB 0x8764
+-#define GL_BUFFER_USAGE_ARB 0x8765
+-#define GL_ARRAY_BUFFER_ARB 0x8892
+-#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
+-#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
+-#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
+-#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
+-#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
+-#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
+-#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
+-#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
+-#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
+-#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
+-#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
+-#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
+-#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
+-#define GL_READ_ONLY_ARB 0x88B8
+-#define GL_WRITE_ONLY_ARB 0x88B9
+-#define GL_READ_WRITE_ARB 0x88BA
+-#define GL_BUFFER_ACCESS_ARB 0x88BB
+-#define GL_BUFFER_MAPPED_ARB 0x88BC
+-#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
+-#define GL_STREAM_DRAW_ARB 0x88E0
+-#define GL_STREAM_READ_ARB 0x88E1
+-#define GL_STREAM_COPY_ARB 0x88E2
+-#define GL_STATIC_DRAW_ARB 0x88E4
+-#define GL_STATIC_READ_ARB 0x88E5
+-#define GL_STATIC_COPY_ARB 0x88E6
+-#define GL_DYNAMIC_DRAW_ARB 0x88E8
+-#define GL_DYNAMIC_READ_ARB 0x88E9
+-#define GL_DYNAMIC_COPY_ARB 0x88EA
+-
+-typedef ptrdiff_t GLsizeiptrARB;
+-typedef ptrdiff_t GLintptrARB;
+-
+-typedef void (GLAPIENTRY * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
+-typedef void (GLAPIENTRY * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage);
+-typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data);
+-typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint* buffers);
+-typedef void (GLAPIENTRY * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint* buffers);
+-typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid** params);
+-typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data);
+-typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERARBPROC) (GLuint buffer);
+-typedef GLvoid * (GLAPIENTRY * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
+-typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERARBPROC) (GLenum target);
+-
+-#define glBindBufferARB GLEW_GET_FUN(__glewBindBufferARB)
+-#define glBufferDataARB GLEW_GET_FUN(__glewBufferDataARB)
+-#define glBufferSubDataARB GLEW_GET_FUN(__glewBufferSubDataARB)
+-#define glDeleteBuffersARB GLEW_GET_FUN(__glewDeleteBuffersARB)
+-#define glGenBuffersARB GLEW_GET_FUN(__glewGenBuffersARB)
+-#define glGetBufferParameterivARB GLEW_GET_FUN(__glewGetBufferParameterivARB)
+-#define glGetBufferPointervARB GLEW_GET_FUN(__glewGetBufferPointervARB)
+-#define glGetBufferSubDataARB GLEW_GET_FUN(__glewGetBufferSubDataARB)
+-#define glIsBufferARB GLEW_GET_FUN(__glewIsBufferARB)
+-#define glMapBufferARB GLEW_GET_FUN(__glewMapBufferARB)
+-#define glUnmapBufferARB GLEW_GET_FUN(__glewUnmapBufferARB)
+-
+-#define GLEW_ARB_vertex_buffer_object GLEW_GET_VAR(__GLEW_ARB_vertex_buffer_object)
+-
+-#endif /* GL_ARB_vertex_buffer_object */
+-
+-/* ------------------------- GL_ARB_vertex_program ------------------------- */
+-
+-#ifndef GL_ARB_vertex_program
+-#define GL_ARB_vertex_program 1
+-
+-#define GL_COLOR_SUM_ARB 0x8458
+-#define GL_VERTEX_PROGRAM_ARB 0x8620
+-#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
+-#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
+-#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
+-#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
+-#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
+-#define GL_PROGRAM_LENGTH_ARB 0x8627
+-#define GL_PROGRAM_STRING_ARB 0x8628
+-#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
+-#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
+-#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
+-#define GL_CURRENT_MATRIX_ARB 0x8641
+-#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
+-#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
+-#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
+-#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
+-#define GL_PROGRAM_BINDING_ARB 0x8677
+-#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
+-#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
+-#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
+-#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
+-#define GL_PROGRAM_FORMAT_ARB 0x8876
+-#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
+-#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
+-#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
+-#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
+-#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
+-#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
+-#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
+-#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
+-#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
+-#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
+-#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
+-#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
+-#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
+-#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
+-#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
+-#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
+-#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
+-#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
+-#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
+-#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
+-#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
+-#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
+-#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
+-#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
+-#define GL_MATRIX0_ARB 0x88C0
+-#define GL_MATRIX1_ARB 0x88C1
+-#define GL_MATRIX2_ARB 0x88C2
+-#define GL_MATRIX3_ARB 0x88C3
+-#define GL_MATRIX4_ARB 0x88C4
+-#define GL_MATRIX5_ARB 0x88C5
+-#define GL_MATRIX6_ARB 0x88C6
+-#define GL_MATRIX7_ARB 0x88C7
+-#define GL_MATRIX8_ARB 0x88C8
+-#define GL_MATRIX9_ARB 0x88C9
+-#define GL_MATRIX10_ARB 0x88CA
+-#define GL_MATRIX11_ARB 0x88CB
+-#define GL_MATRIX12_ARB 0x88CC
+-#define GL_MATRIX13_ARB 0x88CD
+-#define GL_MATRIX14_ARB 0x88CE
+-#define GL_MATRIX15_ARB 0x88CF
+-#define GL_MATRIX16_ARB 0x88D0
+-#define GL_MATRIX17_ARB 0x88D1
+-#define GL_MATRIX18_ARB 0x88D2
+-#define GL_MATRIX19_ARB 0x88D3
+-#define GL_MATRIX20_ARB 0x88D4
+-#define GL_MATRIX21_ARB 0x88D5
+-#define GL_MATRIX22_ARB 0x88D6
+-#define GL_MATRIX23_ARB 0x88D7
+-#define GL_MATRIX24_ARB 0x88D8
+-#define GL_MATRIX25_ARB 0x88D9
+-#define GL_MATRIX26_ARB 0x88DA
+-#define GL_MATRIX27_ARB 0x88DB
+-#define GL_MATRIX28_ARB 0x88DC
+-#define GL_MATRIX29_ARB 0x88DD
+-#define GL_MATRIX30_ARB 0x88DE
+-#define GL_MATRIX31_ARB 0x88DF
+-
+-typedef void (GLAPIENTRY * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
+-typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint* programs);
+-typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
+-typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
+-typedef void (GLAPIENTRY * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint* programs);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void* string);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid** pointer);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMARBPROC) (GLuint program);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void* string);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
+-
+-#define glBindProgramARB GLEW_GET_FUN(__glewBindProgramARB)
+-#define glDeleteProgramsARB GLEW_GET_FUN(__glewDeleteProgramsARB)
+-#define glDisableVertexAttribArrayARB GLEW_GET_FUN(__glewDisableVertexAttribArrayARB)
+-#define glEnableVertexAttribArrayARB GLEW_GET_FUN(__glewEnableVertexAttribArrayARB)
+-#define glGenProgramsARB GLEW_GET_FUN(__glewGenProgramsARB)
+-#define glGetProgramEnvParameterdvARB GLEW_GET_FUN(__glewGetProgramEnvParameterdvARB)
+-#define glGetProgramEnvParameterfvARB GLEW_GET_FUN(__glewGetProgramEnvParameterfvARB)
+-#define glGetProgramLocalParameterdvARB GLEW_GET_FUN(__glewGetProgramLocalParameterdvARB)
+-#define glGetProgramLocalParameterfvARB GLEW_GET_FUN(__glewGetProgramLocalParameterfvARB)
+-#define glGetProgramStringARB GLEW_GET_FUN(__glewGetProgramStringARB)
+-#define glGetProgramivARB GLEW_GET_FUN(__glewGetProgramivARB)
+-#define glGetVertexAttribPointervARB GLEW_GET_FUN(__glewGetVertexAttribPointervARB)
+-#define glGetVertexAttribdvARB GLEW_GET_FUN(__glewGetVertexAttribdvARB)
+-#define glGetVertexAttribfvARB GLEW_GET_FUN(__glewGetVertexAttribfvARB)
+-#define glGetVertexAttribivARB GLEW_GET_FUN(__glewGetVertexAttribivARB)
+-#define glIsProgramARB GLEW_GET_FUN(__glewIsProgramARB)
+-#define glProgramEnvParameter4dARB GLEW_GET_FUN(__glewProgramEnvParameter4dARB)
+-#define glProgramEnvParameter4dvARB GLEW_GET_FUN(__glewProgramEnvParameter4dvARB)
+-#define glProgramEnvParameter4fARB GLEW_GET_FUN(__glewProgramEnvParameter4fARB)
+-#define glProgramEnvParameter4fvARB GLEW_GET_FUN(__glewProgramEnvParameter4fvARB)
+-#define glProgramLocalParameter4dARB GLEW_GET_FUN(__glewProgramLocalParameter4dARB)
+-#define glProgramLocalParameter4dvARB GLEW_GET_FUN(__glewProgramLocalParameter4dvARB)
+-#define glProgramLocalParameter4fARB GLEW_GET_FUN(__glewProgramLocalParameter4fARB)
+-#define glProgramLocalParameter4fvARB GLEW_GET_FUN(__glewProgramLocalParameter4fvARB)
+-#define glProgramStringARB GLEW_GET_FUN(__glewProgramStringARB)
+-#define glVertexAttrib1dARB GLEW_GET_FUN(__glewVertexAttrib1dARB)
+-#define glVertexAttrib1dvARB GLEW_GET_FUN(__glewVertexAttrib1dvARB)
+-#define glVertexAttrib1fARB GLEW_GET_FUN(__glewVertexAttrib1fARB)
+-#define glVertexAttrib1fvARB GLEW_GET_FUN(__glewVertexAttrib1fvARB)
+-#define glVertexAttrib1sARB GLEW_GET_FUN(__glewVertexAttrib1sARB)
+-#define glVertexAttrib1svARB GLEW_GET_FUN(__glewVertexAttrib1svARB)
+-#define glVertexAttrib2dARB GLEW_GET_FUN(__glewVertexAttrib2dARB)
+-#define glVertexAttrib2dvARB GLEW_GET_FUN(__glewVertexAttrib2dvARB)
+-#define glVertexAttrib2fARB GLEW_GET_FUN(__glewVertexAttrib2fARB)
+-#define glVertexAttrib2fvARB GLEW_GET_FUN(__glewVertexAttrib2fvARB)
+-#define glVertexAttrib2sARB GLEW_GET_FUN(__glewVertexAttrib2sARB)
+-#define glVertexAttrib2svARB GLEW_GET_FUN(__glewVertexAttrib2svARB)
+-#define glVertexAttrib3dARB GLEW_GET_FUN(__glewVertexAttrib3dARB)
+-#define glVertexAttrib3dvARB GLEW_GET_FUN(__glewVertexAttrib3dvARB)
+-#define glVertexAttrib3fARB GLEW_GET_FUN(__glewVertexAttrib3fARB)
+-#define glVertexAttrib3fvARB GLEW_GET_FUN(__glewVertexAttrib3fvARB)
+-#define glVertexAttrib3sARB GLEW_GET_FUN(__glewVertexAttrib3sARB)
+-#define glVertexAttrib3svARB GLEW_GET_FUN(__glewVertexAttrib3svARB)
+-#define glVertexAttrib4NbvARB GLEW_GET_FUN(__glewVertexAttrib4NbvARB)
+-#define glVertexAttrib4NivARB GLEW_GET_FUN(__glewVertexAttrib4NivARB)
+-#define glVertexAttrib4NsvARB GLEW_GET_FUN(__glewVertexAttrib4NsvARB)
+-#define glVertexAttrib4NubARB GLEW_GET_FUN(__glewVertexAttrib4NubARB)
+-#define glVertexAttrib4NubvARB GLEW_GET_FUN(__glewVertexAttrib4NubvARB)
+-#define glVertexAttrib4NuivARB GLEW_GET_FUN(__glewVertexAttrib4NuivARB)
+-#define glVertexAttrib4NusvARB GLEW_GET_FUN(__glewVertexAttrib4NusvARB)
+-#define glVertexAttrib4bvARB GLEW_GET_FUN(__glewVertexAttrib4bvARB)
+-#define glVertexAttrib4dARB GLEW_GET_FUN(__glewVertexAttrib4dARB)
+-#define glVertexAttrib4dvARB GLEW_GET_FUN(__glewVertexAttrib4dvARB)
+-#define glVertexAttrib4fARB GLEW_GET_FUN(__glewVertexAttrib4fARB)
+-#define glVertexAttrib4fvARB GLEW_GET_FUN(__glewVertexAttrib4fvARB)
+-#define glVertexAttrib4ivARB GLEW_GET_FUN(__glewVertexAttrib4ivARB)
+-#define glVertexAttrib4sARB GLEW_GET_FUN(__glewVertexAttrib4sARB)
+-#define glVertexAttrib4svARB GLEW_GET_FUN(__glewVertexAttrib4svARB)
+-#define glVertexAttrib4ubvARB GLEW_GET_FUN(__glewVertexAttrib4ubvARB)
+-#define glVertexAttrib4uivARB GLEW_GET_FUN(__glewVertexAttrib4uivARB)
+-#define glVertexAttrib4usvARB GLEW_GET_FUN(__glewVertexAttrib4usvARB)
+-#define glVertexAttribPointerARB GLEW_GET_FUN(__glewVertexAttribPointerARB)
+-
+-#define GLEW_ARB_vertex_program GLEW_GET_VAR(__GLEW_ARB_vertex_program)
+-
+-#endif /* GL_ARB_vertex_program */
+-
+-/* -------------------------- GL_ARB_vertex_shader ------------------------- */
+-
+-#ifndef GL_ARB_vertex_shader
+-#define GL_ARB_vertex_shader 1
+-
+-#define GL_VERTEX_SHADER_ARB 0x8B31
+-#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
+-#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
+-#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
+-#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
+-#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
+-#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
+-
+-typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB* name);
+-typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
+-typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
+-
+-#define glBindAttribLocationARB GLEW_GET_FUN(__glewBindAttribLocationARB)
+-#define glGetActiveAttribARB GLEW_GET_FUN(__glewGetActiveAttribARB)
+-#define glGetAttribLocationARB GLEW_GET_FUN(__glewGetAttribLocationARB)
+-
+-#define GLEW_ARB_vertex_shader GLEW_GET_VAR(__GLEW_ARB_vertex_shader)
+-
+-#endif /* GL_ARB_vertex_shader */
+-
+-/* --------------------------- GL_ARB_window_pos --------------------------- */
+-
+-#ifndef GL_ARB_window_pos
+-#define GL_ARB_window_pos 1
+-
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVARBPROC) (const GLint* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVARBPROC) (const GLshort* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVARBPROC) (const GLint* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVARBPROC) (const GLshort* p);
+-
+-#define glWindowPos2dARB GLEW_GET_FUN(__glewWindowPos2dARB)
+-#define glWindowPos2dvARB GLEW_GET_FUN(__glewWindowPos2dvARB)
+-#define glWindowPos2fARB GLEW_GET_FUN(__glewWindowPos2fARB)
+-#define glWindowPos2fvARB GLEW_GET_FUN(__glewWindowPos2fvARB)
+-#define glWindowPos2iARB GLEW_GET_FUN(__glewWindowPos2iARB)
+-#define glWindowPos2ivARB GLEW_GET_FUN(__glewWindowPos2ivARB)
+-#define glWindowPos2sARB GLEW_GET_FUN(__glewWindowPos2sARB)
+-#define glWindowPos2svARB GLEW_GET_FUN(__glewWindowPos2svARB)
+-#define glWindowPos3dARB GLEW_GET_FUN(__glewWindowPos3dARB)
+-#define glWindowPos3dvARB GLEW_GET_FUN(__glewWindowPos3dvARB)
+-#define glWindowPos3fARB GLEW_GET_FUN(__glewWindowPos3fARB)
+-#define glWindowPos3fvARB GLEW_GET_FUN(__glewWindowPos3fvARB)
+-#define glWindowPos3iARB GLEW_GET_FUN(__glewWindowPos3iARB)
+-#define glWindowPos3ivARB GLEW_GET_FUN(__glewWindowPos3ivARB)
+-#define glWindowPos3sARB GLEW_GET_FUN(__glewWindowPos3sARB)
+-#define glWindowPos3svARB GLEW_GET_FUN(__glewWindowPos3svARB)
+-
+-#define GLEW_ARB_window_pos GLEW_GET_VAR(__GLEW_ARB_window_pos)
+-
+-#endif /* GL_ARB_window_pos */
+-
+-/* ------------------------- GL_ATIX_point_sprites ------------------------- */
+-
+-#ifndef GL_ATIX_point_sprites
+-#define GL_ATIX_point_sprites 1
+-
+-#define GL_TEXTURE_POINT_MODE_ATIX 0x60B0
+-#define GL_TEXTURE_POINT_ONE_COORD_ATIX 0x60B1
+-#define GL_TEXTURE_POINT_SPRITE_ATIX 0x60B2
+-#define GL_POINT_SPRITE_CULL_MODE_ATIX 0x60B3
+-#define GL_POINT_SPRITE_CULL_CENTER_ATIX 0x60B4
+-#define GL_POINT_SPRITE_CULL_CLIP_ATIX 0x60B5
+-
+-#define GLEW_ATIX_point_sprites GLEW_GET_VAR(__GLEW_ATIX_point_sprites)
+-
+-#endif /* GL_ATIX_point_sprites */
+-
+-/* ---------------------- GL_ATIX_texture_env_combine3 --------------------- */
+-
+-#ifndef GL_ATIX_texture_env_combine3
+-#define GL_ATIX_texture_env_combine3 1
+-
+-#define GL_MODULATE_ADD_ATIX 0x8744
+-#define GL_MODULATE_SIGNED_ADD_ATIX 0x8745
+-#define GL_MODULATE_SUBTRACT_ATIX 0x8746
+-
+-#define GLEW_ATIX_texture_env_combine3 GLEW_GET_VAR(__GLEW_ATIX_texture_env_combine3)
+-
+-#endif /* GL_ATIX_texture_env_combine3 */
+-
+-/* ----------------------- GL_ATIX_texture_env_route ----------------------- */
+-
+-#ifndef GL_ATIX_texture_env_route
+-#define GL_ATIX_texture_env_route 1
+-
+-#define GL_SECONDARY_COLOR_ATIX 0x8747
+-#define GL_TEXTURE_OUTPUT_RGB_ATIX 0x8748
+-#define GL_TEXTURE_OUTPUT_ALPHA_ATIX 0x8749
+-
+-#define GLEW_ATIX_texture_env_route GLEW_GET_VAR(__GLEW_ATIX_texture_env_route)
+-
+-#endif /* GL_ATIX_texture_env_route */
+-
+-/* ---------------- GL_ATIX_vertex_shader_output_point_size ---------------- */
+-
+-#ifndef GL_ATIX_vertex_shader_output_point_size
+-#define GL_ATIX_vertex_shader_output_point_size 1
+-
+-#define GL_OUTPUT_POINT_SIZE_ATIX 0x610E
+-
+-#define GLEW_ATIX_vertex_shader_output_point_size GLEW_GET_VAR(__GLEW_ATIX_vertex_shader_output_point_size)
+-
+-#endif /* GL_ATIX_vertex_shader_output_point_size */
+-
+-/* -------------------------- GL_ATI_draw_buffers -------------------------- */
+-
+-#ifndef GL_ATI_draw_buffers
+-#define GL_ATI_draw_buffers 1
+-
+-#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
+-#define GL_DRAW_BUFFER0_ATI 0x8825
+-#define GL_DRAW_BUFFER1_ATI 0x8826
+-#define GL_DRAW_BUFFER2_ATI 0x8827
+-#define GL_DRAW_BUFFER3_ATI 0x8828
+-#define GL_DRAW_BUFFER4_ATI 0x8829
+-#define GL_DRAW_BUFFER5_ATI 0x882A
+-#define GL_DRAW_BUFFER6_ATI 0x882B
+-#define GL_DRAW_BUFFER7_ATI 0x882C
+-#define GL_DRAW_BUFFER8_ATI 0x882D
+-#define GL_DRAW_BUFFER9_ATI 0x882E
+-#define GL_DRAW_BUFFER10_ATI 0x882F
+-#define GL_DRAW_BUFFER11_ATI 0x8830
+-#define GL_DRAW_BUFFER12_ATI 0x8831
+-#define GL_DRAW_BUFFER13_ATI 0x8832
+-#define GL_DRAW_BUFFER14_ATI 0x8833
+-#define GL_DRAW_BUFFER15_ATI 0x8834
+-
+-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum* bufs);
+-
+-#define glDrawBuffersATI GLEW_GET_FUN(__glewDrawBuffersATI)
+-
+-#define GLEW_ATI_draw_buffers GLEW_GET_VAR(__GLEW_ATI_draw_buffers)
+-
+-#endif /* GL_ATI_draw_buffers */
+-
+-/* -------------------------- GL_ATI_element_array ------------------------- */
+-
+-#ifndef GL_ATI_element_array
+-#define GL_ATI_element_array 1
+-
+-#define GL_ELEMENT_ARRAY_ATI 0x8768
+-#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
+-#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
+-
+-typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
+-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
+-typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void* pointer);
+-
+-#define glDrawElementArrayATI GLEW_GET_FUN(__glewDrawElementArrayATI)
+-#define glDrawRangeElementArrayATI GLEW_GET_FUN(__glewDrawRangeElementArrayATI)
+-#define glElementPointerATI GLEW_GET_FUN(__glewElementPointerATI)
+-
+-#define GLEW_ATI_element_array GLEW_GET_VAR(__GLEW_ATI_element_array)
+-
+-#endif /* GL_ATI_element_array */
+-
+-/* ------------------------- GL_ATI_envmap_bumpmap ------------------------- */
+-
+-#ifndef GL_ATI_envmap_bumpmap
+-#define GL_ATI_envmap_bumpmap 1
+-
+-#define GL_BUMP_ROT_MATRIX_ATI 0x8775
+-#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
+-#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
+-#define GL_BUMP_TEX_UNITS_ATI 0x8778
+-#define GL_DUDV_ATI 0x8779
+-#define GL_DU8DV8_ATI 0x877A
+-#define GL_BUMP_ENVMAP_ATI 0x877B
+-#define GL_BUMP_TARGET_ATI 0x877C
+-
+-typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
+-typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
+-typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
+-typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
+-
+-#define glGetTexBumpParameterfvATI GLEW_GET_FUN(__glewGetTexBumpParameterfvATI)
+-#define glGetTexBumpParameterivATI GLEW_GET_FUN(__glewGetTexBumpParameterivATI)
+-#define glTexBumpParameterfvATI GLEW_GET_FUN(__glewTexBumpParameterfvATI)
+-#define glTexBumpParameterivATI GLEW_GET_FUN(__glewTexBumpParameterivATI)
+-
+-#define GLEW_ATI_envmap_bumpmap GLEW_GET_VAR(__GLEW_ATI_envmap_bumpmap)
+-
+-#endif /* GL_ATI_envmap_bumpmap */
+-
+-/* ------------------------- GL_ATI_fragment_shader ------------------------ */
+-
+-#ifndef GL_ATI_fragment_shader
+-#define GL_ATI_fragment_shader 1
+-
+-#define GL_RED_BIT_ATI 0x00000001
+-#define GL_2X_BIT_ATI 0x00000001
+-#define GL_4X_BIT_ATI 0x00000002
+-#define GL_GREEN_BIT_ATI 0x00000002
+-#define GL_COMP_BIT_ATI 0x00000002
+-#define GL_BLUE_BIT_ATI 0x00000004
+-#define GL_8X_BIT_ATI 0x00000004
+-#define GL_NEGATE_BIT_ATI 0x00000004
+-#define GL_BIAS_BIT_ATI 0x00000008
+-#define GL_HALF_BIT_ATI 0x00000008
+-#define GL_QUARTER_BIT_ATI 0x00000010
+-#define GL_EIGHTH_BIT_ATI 0x00000020
+-#define GL_SATURATE_BIT_ATI 0x00000040
+-#define GL_FRAGMENT_SHADER_ATI 0x8920
+-#define GL_REG_0_ATI 0x8921
+-#define GL_REG_1_ATI 0x8922
+-#define GL_REG_2_ATI 0x8923
+-#define GL_REG_3_ATI 0x8924
+-#define GL_REG_4_ATI 0x8925
+-#define GL_REG_5_ATI 0x8926
+-#define GL_CON_0_ATI 0x8941
+-#define GL_CON_1_ATI 0x8942
+-#define GL_CON_2_ATI 0x8943
+-#define GL_CON_3_ATI 0x8944
+-#define GL_CON_4_ATI 0x8945
+-#define GL_CON_5_ATI 0x8946
+-#define GL_CON_6_ATI 0x8947
+-#define GL_CON_7_ATI 0x8948
+-#define GL_MOV_ATI 0x8961
+-#define GL_ADD_ATI 0x8963
+-#define GL_MUL_ATI 0x8964
+-#define GL_SUB_ATI 0x8965
+-#define GL_DOT3_ATI 0x8966
+-#define GL_DOT4_ATI 0x8967
+-#define GL_MAD_ATI 0x8968
+-#define GL_LERP_ATI 0x8969
+-#define GL_CND_ATI 0x896A
+-#define GL_CND0_ATI 0x896B
+-#define GL_DOT2_ADD_ATI 0x896C
+-#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
+-#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
+-#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
+-#define GL_NUM_PASSES_ATI 0x8970
+-#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
+-#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
+-#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
+-#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
+-#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
+-#define GL_SWIZZLE_STR_ATI 0x8976
+-#define GL_SWIZZLE_STQ_ATI 0x8977
+-#define GL_SWIZZLE_STR_DR_ATI 0x8978
+-#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
+-#define GL_SWIZZLE_STRQ_ATI 0x897A
+-#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
+-
+-typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+-typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+-typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+-typedef void (GLAPIENTRY * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
+-typedef void (GLAPIENTRY * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+-typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+-typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+-typedef void (GLAPIENTRY * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLENDFRAGMENTSHADERATIPROC) (void);
+-typedef GLuint (GLAPIENTRY * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
+-typedef void (GLAPIENTRY * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
+-typedef void (GLAPIENTRY * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
+-typedef void (GLAPIENTRY * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat* value);
+-
+-#define glAlphaFragmentOp1ATI GLEW_GET_FUN(__glewAlphaFragmentOp1ATI)
+-#define glAlphaFragmentOp2ATI GLEW_GET_FUN(__glewAlphaFragmentOp2ATI)
+-#define glAlphaFragmentOp3ATI GLEW_GET_FUN(__glewAlphaFragmentOp3ATI)
+-#define glBeginFragmentShaderATI GLEW_GET_FUN(__glewBeginFragmentShaderATI)
+-#define glBindFragmentShaderATI GLEW_GET_FUN(__glewBindFragmentShaderATI)
+-#define glColorFragmentOp1ATI GLEW_GET_FUN(__glewColorFragmentOp1ATI)
+-#define glColorFragmentOp2ATI GLEW_GET_FUN(__glewColorFragmentOp2ATI)
+-#define glColorFragmentOp3ATI GLEW_GET_FUN(__glewColorFragmentOp3ATI)
+-#define glDeleteFragmentShaderATI GLEW_GET_FUN(__glewDeleteFragmentShaderATI)
+-#define glEndFragmentShaderATI GLEW_GET_FUN(__glewEndFragmentShaderATI)
+-#define glGenFragmentShadersATI GLEW_GET_FUN(__glewGenFragmentShadersATI)
+-#define glPassTexCoordATI GLEW_GET_FUN(__glewPassTexCoordATI)
+-#define glSampleMapATI GLEW_GET_FUN(__glewSampleMapATI)
+-#define glSetFragmentShaderConstantATI GLEW_GET_FUN(__glewSetFragmentShaderConstantATI)
+-
+-#define GLEW_ATI_fragment_shader GLEW_GET_VAR(__GLEW_ATI_fragment_shader)
+-
+-#endif /* GL_ATI_fragment_shader */
+-
+-/* ------------------------ GL_ATI_map_object_buffer ----------------------- */
+-
+-#ifndef GL_ATI_map_object_buffer
+-#define GL_ATI_map_object_buffer 1
+-
+-typedef void* (GLAPIENTRY * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
+-typedef void (GLAPIENTRY * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
+-
+-#define glMapObjectBufferATI GLEW_GET_FUN(__glewMapObjectBufferATI)
+-#define glUnmapObjectBufferATI GLEW_GET_FUN(__glewUnmapObjectBufferATI)
+-
+-#define GLEW_ATI_map_object_buffer GLEW_GET_VAR(__GLEW_ATI_map_object_buffer)
+-
+-#endif /* GL_ATI_map_object_buffer */
+-
+-/* -------------------------- GL_ATI_pn_triangles -------------------------- */
+-
+-#ifndef GL_ATI_pn_triangles
+-#define GL_ATI_pn_triangles 1
+-
+-#define GL_PN_TRIANGLES_ATI 0x87F0
+-#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
+-#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
+-#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
+-#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
+-#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
+-#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
+-#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
+-#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
+-
+-typedef void (GLAPIENTRY * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
+-
+-#define glPNTrianglesfATI GLEW_GET_FUN(__glPNTrianglewesfATI)
+-#define glPNTrianglesiATI GLEW_GET_FUN(__glPNTrianglewesiATI)
+-
+-#define GLEW_ATI_pn_triangles GLEW_GET_VAR(__GLEW_ATI_pn_triangles)
+-
+-#endif /* GL_ATI_pn_triangles */
+-
+-/* ------------------------ GL_ATI_separate_stencil ------------------------ */
+-
+-#ifndef GL_ATI_separate_stencil
+-#define GL_ATI_separate_stencil 1
+-
+-#define GL_STENCIL_BACK_FUNC_ATI 0x8800
+-#define GL_STENCIL_BACK_FAIL_ATI 0x8801
+-#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
+-#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
+-
+-typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
+-typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+-
+-#define glStencilFuncSeparateATI GLEW_GET_FUN(__glewStencilFuncSeparateATI)
+-#define glStencilOpSeparateATI GLEW_GET_FUN(__glewStencilOpSeparateATI)
+-
+-#define GLEW_ATI_separate_stencil GLEW_GET_VAR(__GLEW_ATI_separate_stencil)
+-
+-#endif /* GL_ATI_separate_stencil */
+-
+-/* ----------------------- GL_ATI_shader_texture_lod ----------------------- */
+-
+-#ifndef GL_ATI_shader_texture_lod
+-#define GL_ATI_shader_texture_lod 1
+-
+-#define GLEW_ATI_shader_texture_lod GLEW_GET_VAR(__GLEW_ATI_shader_texture_lod)
+-
+-#endif /* GL_ATI_shader_texture_lod */
+-
+-/* ---------------------- GL_ATI_text_fragment_shader ---------------------- */
+-
+-#ifndef GL_ATI_text_fragment_shader
+-#define GL_ATI_text_fragment_shader 1
+-
+-#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
+-
+-#define GLEW_ATI_text_fragment_shader GLEW_GET_VAR(__GLEW_ATI_text_fragment_shader)
+-
+-#endif /* GL_ATI_text_fragment_shader */
+-
+-/* --------------------- GL_ATI_texture_compression_3dc -------------------- */
+-
+-#ifndef GL_ATI_texture_compression_3dc
+-#define GL_ATI_texture_compression_3dc 1
+-
+-#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI 0x8837
+-
+-#define GLEW_ATI_texture_compression_3dc GLEW_GET_VAR(__GLEW_ATI_texture_compression_3dc)
+-
+-#endif /* GL_ATI_texture_compression_3dc */
+-
+-/* ---------------------- GL_ATI_texture_env_combine3 ---------------------- */
+-
+-#ifndef GL_ATI_texture_env_combine3
+-#define GL_ATI_texture_env_combine3 1
+-
+-#define GL_MODULATE_ADD_ATI 0x8744
+-#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
+-#define GL_MODULATE_SUBTRACT_ATI 0x8746
+-
+-#define GLEW_ATI_texture_env_combine3 GLEW_GET_VAR(__GLEW_ATI_texture_env_combine3)
+-
+-#endif /* GL_ATI_texture_env_combine3 */
+-
+-/* -------------------------- GL_ATI_texture_float ------------------------- */
+-
+-#ifndef GL_ATI_texture_float
+-#define GL_ATI_texture_float 1
+-
+-#define GL_RGBA_FLOAT32_ATI 0x8814
+-#define GL_RGB_FLOAT32_ATI 0x8815
+-#define GL_ALPHA_FLOAT32_ATI 0x8816
+-#define GL_INTENSITY_FLOAT32_ATI 0x8817
+-#define GL_LUMINANCE_FLOAT32_ATI 0x8818
+-#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
+-#define GL_RGBA_FLOAT16_ATI 0x881A
+-#define GL_RGB_FLOAT16_ATI 0x881B
+-#define GL_ALPHA_FLOAT16_ATI 0x881C
+-#define GL_INTENSITY_FLOAT16_ATI 0x881D
+-#define GL_LUMINANCE_FLOAT16_ATI 0x881E
+-#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
+-
+-#define GLEW_ATI_texture_float GLEW_GET_VAR(__GLEW_ATI_texture_float)
+-
+-#endif /* GL_ATI_texture_float */
+-
+-/* ----------------------- GL_ATI_texture_mirror_once ---------------------- */
+-
+-#ifndef GL_ATI_texture_mirror_once
+-#define GL_ATI_texture_mirror_once 1
+-
+-#define GL_MIRROR_CLAMP_ATI 0x8742
+-#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
+-
+-#define GLEW_ATI_texture_mirror_once GLEW_GET_VAR(__GLEW_ATI_texture_mirror_once)
+-
+-#endif /* GL_ATI_texture_mirror_once */
+-
+-/* ----------------------- GL_ATI_vertex_array_object ---------------------- */
+-
+-#ifndef GL_ATI_vertex_array_object
+-#define GL_ATI_vertex_array_object 1
+-
+-#define GL_STATIC_ATI 0x8760
+-#define GL_DYNAMIC_ATI 0x8761
+-#define GL_PRESERVE_ATI 0x8762
+-#define GL_DISCARD_ATI 0x8763
+-#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
+-#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
+-#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
+-#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
+-
+-typedef void (GLAPIENTRY * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+-typedef void (GLAPIENTRY * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
+-typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
+-typedef GLuint (GLAPIENTRY * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void* pointer, GLenum usage);
+-typedef void (GLAPIENTRY * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve);
+-typedef void (GLAPIENTRY * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+-
+-#define glArrayObjectATI GLEW_GET_FUN(__glewArrayObjectATI)
+-#define glFreeObjectBufferATI GLEW_GET_FUN(__glewFreeObjectBufferATI)
+-#define glGetArrayObjectfvATI GLEW_GET_FUN(__glewGetArrayObjectfvATI)
+-#define glGetArrayObjectivATI GLEW_GET_FUN(__glewGetArrayObjectivATI)
+-#define glGetObjectBufferfvATI GLEW_GET_FUN(__glewGetObjectBufferfvATI)
+-#define glGetObjectBufferivATI GLEW_GET_FUN(__glewGetObjectBufferivATI)
+-#define glGetVariantArrayObjectfvATI GLEW_GET_FUN(__glewGetVariantArrayObjectfvATI)
+-#define glGetVariantArrayObjectivATI GLEW_GET_FUN(__glewGetVariantArrayObjectivATI)
+-#define glIsObjectBufferATI GLEW_GET_FUN(__glewIsObjectBufferATI)
+-#define glNewObjectBufferATI GLEW_GET_FUN(__glewNewObjectBufferATI)
+-#define glUpdateObjectBufferATI GLEW_GET_FUN(__glewUpdateObjectBufferATI)
+-#define glVariantArrayObjectATI GLEW_GET_FUN(__glewVariantArrayObjectATI)
+-
+-#define GLEW_ATI_vertex_array_object GLEW_GET_VAR(__GLEW_ATI_vertex_array_object)
+-
+-#endif /* GL_ATI_vertex_array_object */
+-
+-/* ------------------- GL_ATI_vertex_attrib_array_object ------------------- */
+-
+-#ifndef GL_ATI_vertex_attrib_array_object
+-#define GL_ATI_vertex_attrib_array_object 1
+-
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
+-
+-#define glGetVertexAttribArrayObjectfvATI GLEW_GET_FUN(__glewGetVertexAttribArrayObjectfvATI)
+-#define glGetVertexAttribArrayObjectivATI GLEW_GET_FUN(__glewGetVertexAttribArrayObjectivATI)
+-#define glVertexAttribArrayObjectATI GLEW_GET_FUN(__glewVertexAttribArrayObjectATI)
+-
+-#define GLEW_ATI_vertex_attrib_array_object GLEW_GET_VAR(__GLEW_ATI_vertex_attrib_array_object)
+-
+-#endif /* GL_ATI_vertex_attrib_array_object */
+-
+-/* ------------------------- GL_ATI_vertex_streams ------------------------- */
+-
+-#ifndef GL_ATI_vertex_streams
+-#define GL_ATI_vertex_streams 1
+-
+-#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
+-#define GL_VERTEX_SOURCE_ATI 0x876C
+-#define GL_VERTEX_STREAM0_ATI 0x876D
+-#define GL_VERTEX_STREAM1_ATI 0x876E
+-#define GL_VERTEX_STREAM2_ATI 0x876F
+-#define GL_VERTEX_STREAM3_ATI 0x8770
+-#define GL_VERTEX_STREAM4_ATI 0x8771
+-#define GL_VERTEX_STREAM5_ATI 0x8772
+-#define GL_VERTEX_STREAM6_ATI 0x8773
+-#define GL_VERTEX_STREAM7_ATI 0x8774
+-
+-typedef void (GLAPIENTRY * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte x, GLbyte y, GLbyte z);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *v);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *v);
+-
+-#define glClientActiveVertexStreamATI GLEW_GET_FUN(__glewClientActiveVertexStreamATI)
+-#define glNormalStream3bATI GLEW_GET_FUN(__glewNormalStream3bATI)
+-#define glNormalStream3bvATI GLEW_GET_FUN(__glewNormalStream3bvATI)
+-#define glNormalStream3dATI GLEW_GET_FUN(__glewNormalStream3dATI)
+-#define glNormalStream3dvATI GLEW_GET_FUN(__glewNormalStream3dvATI)
+-#define glNormalStream3fATI GLEW_GET_FUN(__glewNormalStream3fATI)
+-#define glNormalStream3fvATI GLEW_GET_FUN(__glewNormalStream3fvATI)
+-#define glNormalStream3iATI GLEW_GET_FUN(__glewNormalStream3iATI)
+-#define glNormalStream3ivATI GLEW_GET_FUN(__glewNormalStream3ivATI)
+-#define glNormalStream3sATI GLEW_GET_FUN(__glewNormalStream3sATI)
+-#define glNormalStream3svATI GLEW_GET_FUN(__glewNormalStream3svATI)
+-#define glVertexBlendEnvfATI GLEW_GET_FUN(__glewVertexBlendEnvfATI)
+-#define glVertexBlendEnviATI GLEW_GET_FUN(__glewVertexBlendEnviATI)
+-#define glVertexStream2dATI GLEW_GET_FUN(__glewVertexStream2dATI)
+-#define glVertexStream2dvATI GLEW_GET_FUN(__glewVertexStream2dvATI)
+-#define glVertexStream2fATI GLEW_GET_FUN(__glewVertexStream2fATI)
+-#define glVertexStream2fvATI GLEW_GET_FUN(__glewVertexStream2fvATI)
+-#define glVertexStream2iATI GLEW_GET_FUN(__glewVertexStream2iATI)
+-#define glVertexStream2ivATI GLEW_GET_FUN(__glewVertexStream2ivATI)
+-#define glVertexStream2sATI GLEW_GET_FUN(__glewVertexStream2sATI)
+-#define glVertexStream2svATI GLEW_GET_FUN(__glewVertexStream2svATI)
+-#define glVertexStream3dATI GLEW_GET_FUN(__glewVertexStream3dATI)
+-#define glVertexStream3dvATI GLEW_GET_FUN(__glewVertexStream3dvATI)
+-#define glVertexStream3fATI GLEW_GET_FUN(__glewVertexStream3fATI)
+-#define glVertexStream3fvATI GLEW_GET_FUN(__glewVertexStream3fvATI)
+-#define glVertexStream3iATI GLEW_GET_FUN(__glewVertexStream3iATI)
+-#define glVertexStream3ivATI GLEW_GET_FUN(__glewVertexStream3ivATI)
+-#define glVertexStream3sATI GLEW_GET_FUN(__glewVertexStream3sATI)
+-#define glVertexStream3svATI GLEW_GET_FUN(__glewVertexStream3svATI)
+-#define glVertexStream4dATI GLEW_GET_FUN(__glewVertexStream4dATI)
+-#define glVertexStream4dvATI GLEW_GET_FUN(__glewVertexStream4dvATI)
+-#define glVertexStream4fATI GLEW_GET_FUN(__glewVertexStream4fATI)
+-#define glVertexStream4fvATI GLEW_GET_FUN(__glewVertexStream4fvATI)
+-#define glVertexStream4iATI GLEW_GET_FUN(__glewVertexStream4iATI)
+-#define glVertexStream4ivATI GLEW_GET_FUN(__glewVertexStream4ivATI)
+-#define glVertexStream4sATI GLEW_GET_FUN(__glewVertexStream4sATI)
+-#define glVertexStream4svATI GLEW_GET_FUN(__glewVertexStream4svATI)
+-
+-#define GLEW_ATI_vertex_streams GLEW_GET_VAR(__GLEW_ATI_vertex_streams)
+-
+-#endif /* GL_ATI_vertex_streams */
+-
+-/* --------------------------- GL_EXT_422_pixels --------------------------- */
+-
+-#ifndef GL_EXT_422_pixels
+-#define GL_EXT_422_pixels 1
+-
+-#define GL_422_EXT 0x80CC
+-#define GL_422_REV_EXT 0x80CD
+-#define GL_422_AVERAGE_EXT 0x80CE
+-#define GL_422_REV_AVERAGE_EXT 0x80CF
+-
+-#define GLEW_EXT_422_pixels GLEW_GET_VAR(__GLEW_EXT_422_pixels)
+-
+-#endif /* GL_EXT_422_pixels */
+-
+-/* ---------------------------- GL_EXT_Cg_shader --------------------------- */
+-
+-#ifndef GL_EXT_Cg_shader
+-#define GL_EXT_Cg_shader 1
+-
+-#define GL_CG_VERTEX_SHADER_EXT 0x890E
+-#define GL_CG_FRAGMENT_SHADER_EXT 0x890F
+-
+-#define GLEW_EXT_Cg_shader GLEW_GET_VAR(__GLEW_EXT_Cg_shader)
+-
+-#endif /* GL_EXT_Cg_shader */
+-
+-/* ------------------------------ GL_EXT_abgr ------------------------------ */
+-
+-#ifndef GL_EXT_abgr
+-#define GL_EXT_abgr 1
+-
+-#define GL_ABGR_EXT 0x8000
+-
+-#define GLEW_EXT_abgr GLEW_GET_VAR(__GLEW_EXT_abgr)
+-
+-#endif /* GL_EXT_abgr */
+-
+-/* ------------------------------ GL_EXT_bgra ------------------------------ */
+-
+-#ifndef GL_EXT_bgra
+-#define GL_EXT_bgra 1
+-
+-#define GL_BGR_EXT 0x80E0
+-#define GL_BGRA_EXT 0x80E1
+-
+-#define GLEW_EXT_bgra GLEW_GET_VAR(__GLEW_EXT_bgra)
+-
+-#endif /* GL_EXT_bgra */
+-
+-/* ------------------------ GL_EXT_bindable_uniform ------------------------ */
+-
+-#ifndef GL_EXT_bindable_uniform
+-#define GL_EXT_bindable_uniform 1
+-
+-#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
+-#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
+-#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
+-#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
+-#define GL_UNIFORM_BUFFER_EXT 0x8DEE
+-#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
+-
+-typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
+-typedef GLintptr (GLAPIENTRY * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
+-typedef void (GLAPIENTRY * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
+-
+-#define glGetUniformBufferSizeEXT GLEW_GET_FUN(__glewGetUniformBufferSizeEXT)
+-#define glGetUniformOffsetEXT GLEW_GET_FUN(__glewGetUniformOffsetEXT)
+-#define glUniformBufferEXT GLEW_GET_FUN(__glewUniformBufferEXT)
+-
+-#define GLEW_EXT_bindable_uniform GLEW_GET_VAR(__GLEW_EXT_bindable_uniform)
+-
+-#endif /* GL_EXT_bindable_uniform */
+-
+-/* --------------------------- GL_EXT_blend_color -------------------------- */
+-
+-#ifndef GL_EXT_blend_color
+-#define GL_EXT_blend_color 1
+-
+-#define GL_CONSTANT_COLOR_EXT 0x8001
+-#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
+-#define GL_CONSTANT_ALPHA_EXT 0x8003
+-#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
+-#define GL_BLEND_COLOR_EXT 0x8005
+-
+-typedef void (GLAPIENTRY * PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+-
+-#define glBlendColorEXT GLEW_GET_FUN(__glewBlendColorEXT)
+-
+-#define GLEW_EXT_blend_color GLEW_GET_VAR(__GLEW_EXT_blend_color)
+-
+-#endif /* GL_EXT_blend_color */
+-
+-/* --------------------- GL_EXT_blend_equation_separate -------------------- */
+-
+-#ifndef GL_EXT_blend_equation_separate
+-#define GL_EXT_blend_equation_separate 1
+-
+-#define GL_BLEND_EQUATION_RGB_EXT 0x8009
+-#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
+-
+-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
+-
+-#define glBlendEquationSeparateEXT GLEW_GET_FUN(__glewBlendEquationSeparateEXT)
+-
+-#define GLEW_EXT_blend_equation_separate GLEW_GET_VAR(__GLEW_EXT_blend_equation_separate)
+-
+-#endif /* GL_EXT_blend_equation_separate */
+-
+-/* ----------------------- GL_EXT_blend_func_separate ---------------------- */
+-
+-#ifndef GL_EXT_blend_func_separate
+-#define GL_EXT_blend_func_separate 1
+-
+-#define GL_BLEND_DST_RGB_EXT 0x80C8
+-#define GL_BLEND_SRC_RGB_EXT 0x80C9
+-#define GL_BLEND_DST_ALPHA_EXT 0x80CA
+-#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
+-
+-typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+-
+-#define glBlendFuncSeparateEXT GLEW_GET_FUN(__glewBlendFuncSeparateEXT)
+-
+-#define GLEW_EXT_blend_func_separate GLEW_GET_VAR(__GLEW_EXT_blend_func_separate)
+-
+-#endif /* GL_EXT_blend_func_separate */
+-
+-/* ------------------------- GL_EXT_blend_logic_op ------------------------- */
+-
+-#ifndef GL_EXT_blend_logic_op
+-#define GL_EXT_blend_logic_op 1
+-
+-#define GLEW_EXT_blend_logic_op GLEW_GET_VAR(__GLEW_EXT_blend_logic_op)
+-
+-#endif /* GL_EXT_blend_logic_op */
+-
+-/* -------------------------- GL_EXT_blend_minmax -------------------------- */
+-
+-#ifndef GL_EXT_blend_minmax
+-#define GL_EXT_blend_minmax 1
+-
+-#define GL_FUNC_ADD_EXT 0x8006
+-#define GL_MIN_EXT 0x8007
+-#define GL_MAX_EXT 0x8008
+-#define GL_BLEND_EQUATION_EXT 0x8009
+-
+-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
+-
+-#define glBlendEquationEXT GLEW_GET_FUN(__glewBlendEquationEXT)
+-
+-#define GLEW_EXT_blend_minmax GLEW_GET_VAR(__GLEW_EXT_blend_minmax)
+-
+-#endif /* GL_EXT_blend_minmax */
+-
+-/* ------------------------- GL_EXT_blend_subtract ------------------------- */
+-
+-#ifndef GL_EXT_blend_subtract
+-#define GL_EXT_blend_subtract 1
+-
+-#define GL_FUNC_SUBTRACT_EXT 0x800A
+-#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
+-
+-#define GLEW_EXT_blend_subtract GLEW_GET_VAR(__GLEW_EXT_blend_subtract)
+-
+-#endif /* GL_EXT_blend_subtract */
+-
+-/* ------------------------ GL_EXT_clip_volume_hint ------------------------ */
+-
+-#ifndef GL_EXT_clip_volume_hint
+-#define GL_EXT_clip_volume_hint 1
+-
+-#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
+-
+-#define GLEW_EXT_clip_volume_hint GLEW_GET_VAR(__GLEW_EXT_clip_volume_hint)
+-
+-#endif /* GL_EXT_clip_volume_hint */
+-
+-/* ------------------------------ GL_EXT_cmyka ----------------------------- */
+-
+-#ifndef GL_EXT_cmyka
+-#define GL_EXT_cmyka 1
+-
+-#define GL_CMYK_EXT 0x800C
+-#define GL_CMYKA_EXT 0x800D
+-#define GL_PACK_CMYK_HINT_EXT 0x800E
+-#define GL_UNPACK_CMYK_HINT_EXT 0x800F
+-
+-#define GLEW_EXT_cmyka GLEW_GET_VAR(__GLEW_EXT_cmyka)
+-
+-#endif /* GL_EXT_cmyka */
+-
+-/* ------------------------- GL_EXT_color_subtable ------------------------- */
+-
+-#ifndef GL_EXT_color_subtable
+-#define GL_EXT_color_subtable 1
+-
+-typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data);
+-typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
+-
+-#define glColorSubTableEXT GLEW_GET_FUN(__glewColorSubTableEXT)
+-#define glCopyColorSubTableEXT GLEW_GET_FUN(__glewCopyColorSubTableEXT)
+-
+-#define GLEW_EXT_color_subtable GLEW_GET_VAR(__GLEW_EXT_color_subtable)
+-
+-#endif /* GL_EXT_color_subtable */
+-
+-/* ---------------------- GL_EXT_compiled_vertex_array --------------------- */
+-
+-#ifndef GL_EXT_compiled_vertex_array
+-#define GL_EXT_compiled_vertex_array 1
+-
+-typedef void (GLAPIENTRY * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
+-typedef void (GLAPIENTRY * PFNGLUNLOCKARRAYSEXTPROC) (void);
+-
+-#define glLockArraysEXT GLEW_GET_FUN(__glewLockArraysEXT)
+-#define glUnlockArraysEXT GLEW_GET_FUN(__glewUnlockArraysEXT)
+-
+-#define GLEW_EXT_compiled_vertex_array GLEW_GET_VAR(__GLEW_EXT_compiled_vertex_array)
+-
+-#endif /* GL_EXT_compiled_vertex_array */
+-
+-/* --------------------------- GL_EXT_convolution -------------------------- */
+-
+-#ifndef GL_EXT_convolution
+-#define GL_EXT_convolution 1
+-
+-#define GL_CONVOLUTION_1D_EXT 0x8010
+-#define GL_CONVOLUTION_2D_EXT 0x8011
+-#define GL_SEPARABLE_2D_EXT 0x8012
+-#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
+-#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
+-#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
+-#define GL_REDUCE_EXT 0x8016
+-#define GL_CONVOLUTION_FORMAT_EXT 0x8017
+-#define GL_CONVOLUTION_WIDTH_EXT 0x8018
+-#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
+-#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
+-#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
+-#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
+-#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
+-#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
+-#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
+-#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
+-#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
+-#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
+-#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
+-
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void* image);
+-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
+-typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column);
+-
+-#define glConvolutionFilter1DEXT GLEW_GET_FUN(__glewConvolutionFilter1DEXT)
+-#define glConvolutionFilter2DEXT GLEW_GET_FUN(__glewConvolutionFilter2DEXT)
+-#define glConvolutionParameterfEXT GLEW_GET_FUN(__glewConvolutionParameterfEXT)
+-#define glConvolutionParameterfvEXT GLEW_GET_FUN(__glewConvolutionParameterfvEXT)
+-#define glConvolutionParameteriEXT GLEW_GET_FUN(__glewConvolutionParameteriEXT)
+-#define glConvolutionParameterivEXT GLEW_GET_FUN(__glewConvolutionParameterivEXT)
+-#define glCopyConvolutionFilter1DEXT GLEW_GET_FUN(__glewCopyConvolutionFilter1DEXT)
+-#define glCopyConvolutionFilter2DEXT GLEW_GET_FUN(__glewCopyConvolutionFilter2DEXT)
+-#define glGetConvolutionFilterEXT GLEW_GET_FUN(__glewGetConvolutionFilterEXT)
+-#define glGetConvolutionParameterfvEXT GLEW_GET_FUN(__glewGetConvolutionParameterfvEXT)
+-#define glGetConvolutionParameterivEXT GLEW_GET_FUN(__glewGetConvolutionParameterivEXT)
+-#define glGetSeparableFilterEXT GLEW_GET_FUN(__glewGetSeparableFilterEXT)
+-#define glSeparableFilter2DEXT GLEW_GET_FUN(__glewSeparableFilter2DEXT)
+-
+-#define GLEW_EXT_convolution GLEW_GET_VAR(__GLEW_EXT_convolution)
+-
+-#endif /* GL_EXT_convolution */
+-
+-/* ------------------------ GL_EXT_coordinate_frame ------------------------ */
+-
+-#ifndef GL_EXT_coordinate_frame
+-#define GL_EXT_coordinate_frame 1
+-
+-#define GL_TANGENT_ARRAY_EXT 0x8439
+-#define GL_BINORMAL_ARRAY_EXT 0x843A
+-#define GL_CURRENT_TANGENT_EXT 0x843B
+-#define GL_CURRENT_BINORMAL_EXT 0x843C
+-#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
+-#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
+-#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
+-#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
+-#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
+-#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
+-#define GL_MAP1_TANGENT_EXT 0x8444
+-#define GL_MAP2_TANGENT_EXT 0x8445
+-#define GL_MAP1_BINORMAL_EXT 0x8446
+-#define GL_MAP2_BINORMAL_EXT 0x8447
+-
+-typedef void (GLAPIENTRY * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, void* pointer);
+-typedef void (GLAPIENTRY * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, void* pointer);
+-
+-#define glBinormalPointerEXT GLEW_GET_FUN(__glewBinormalPointerEXT)
+-#define glTangentPointerEXT GLEW_GET_FUN(__glewTangentPointerEXT)
+-
+-#define GLEW_EXT_coordinate_frame GLEW_GET_VAR(__GLEW_EXT_coordinate_frame)
+-
+-#endif /* GL_EXT_coordinate_frame */
+-
+-/* -------------------------- GL_EXT_copy_texture -------------------------- */
+-
+-#ifndef GL_EXT_copy_texture
+-#define GL_EXT_copy_texture 1
+-
+-typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+-typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+-
+-#define glCopyTexImage1DEXT GLEW_GET_FUN(__glewCopyTexImage1DEXT)
+-#define glCopyTexImage2DEXT GLEW_GET_FUN(__glewCopyTexImage2DEXT)
+-#define glCopyTexSubImage1DEXT GLEW_GET_FUN(__glewCopyTexSubImage1DEXT)
+-#define glCopyTexSubImage2DEXT GLEW_GET_FUN(__glewCopyTexSubImage2DEXT)
+-#define glCopyTexSubImage3DEXT GLEW_GET_FUN(__glewCopyTexSubImage3DEXT)
+-
+-#define GLEW_EXT_copy_texture GLEW_GET_VAR(__GLEW_EXT_copy_texture)
+-
+-#endif /* GL_EXT_copy_texture */
+-
+-/* --------------------------- GL_EXT_cull_vertex -------------------------- */
+-
+-#ifndef GL_EXT_cull_vertex
+-#define GL_EXT_cull_vertex 1
+-
+-typedef void (GLAPIENTRY * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat* params);
+-
+-#define glCullParameterdvEXT GLEW_GET_FUN(__glewCullParameterdvEXT)
+-#define glCullParameterfvEXT GLEW_GET_FUN(__glewCullParameterfvEXT)
+-
+-#define GLEW_EXT_cull_vertex GLEW_GET_VAR(__GLEW_EXT_cull_vertex)
+-
+-#endif /* GL_EXT_cull_vertex */
+-
+-/* ------------------------ GL_EXT_depth_bounds_test ----------------------- */
+-
+-#ifndef GL_EXT_depth_bounds_test
+-#define GL_EXT_depth_bounds_test 1
+-
+-#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
+-#define GL_DEPTH_BOUNDS_EXT 0x8891
+-
+-typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
+-
+-#define glDepthBoundsEXT GLEW_GET_FUN(__glewDepthBoundsEXT)
+-
+-#define GLEW_EXT_depth_bounds_test GLEW_GET_VAR(__GLEW_EXT_depth_bounds_test)
+-
+-#endif /* GL_EXT_depth_bounds_test */
+-
+-/* -------------------------- GL_EXT_draw_buffers2 ------------------------- */
+-
+-#ifndef GL_EXT_draw_buffers2
+-#define GL_EXT_draw_buffers2 1
+-
+-typedef void (GLAPIENTRY * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+-typedef void (GLAPIENTRY * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
+-typedef void (GLAPIENTRY * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
+-typedef void (GLAPIENTRY * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
+-typedef void (GLAPIENTRY * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
+-typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
+-
+-#define glColorMaskIndexedEXT GLEW_GET_FUN(__glewColorMaskIndexedEXT)
+-#define glDisableIndexedEXT GLEW_GET_FUN(__glewDisableIndexedEXT)
+-#define glEnableIndexedEXT GLEW_GET_FUN(__glewEnableIndexedEXT)
+-#define glGetBooleanIndexedvEXT GLEW_GET_FUN(__glewGetBooleanIndexedvEXT)
+-#define glGetIntegerIndexedvEXT GLEW_GET_FUN(__glewGetIntegerIndexedvEXT)
+-#define glIsEnabledIndexedEXT GLEW_GET_FUN(__glewIsEnabledIndexedEXT)
+-
+-#define GLEW_EXT_draw_buffers2 GLEW_GET_VAR(__GLEW_EXT_draw_buffers2)
+-
+-#endif /* GL_EXT_draw_buffers2 */
+-
+-/* ------------------------- GL_EXT_draw_instanced ------------------------- */
+-
+-#ifndef GL_EXT_draw_instanced
+-#define GL_EXT_draw_instanced 1
+-
+-typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
+-typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+-
+-#define glDrawArraysInstancedEXT GLEW_GET_FUN(__glewDrawArraysInstancedEXT)
+-#define glDrawElementsInstancedEXT GLEW_GET_FUN(__glewDrawElementsInstancedEXT)
+-
+-#define GLEW_EXT_draw_instanced GLEW_GET_VAR(__GLEW_EXT_draw_instanced)
+-
+-#endif /* GL_EXT_draw_instanced */
+-
+-/* ----------------------- GL_EXT_draw_range_elements ---------------------- */
+-
+-#ifndef GL_EXT_draw_range_elements
+-#define GL_EXT_draw_range_elements 1
+-
+-#define GL_MAX_ELEMENTS_VERTICES 0x80E8
+-#define GL_MAX_ELEMENTS_INDICES 0x80E9
+-
+-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+-
+-#define glDrawRangeElementsEXT GLEW_GET_FUN(__glewDrawRangeElementsEXT)
+-
+-#define GLEW_EXT_draw_range_elements GLEW_GET_VAR(__GLEW_EXT_draw_range_elements)
+-
+-#endif /* GL_EXT_draw_range_elements */
+-
+-/* ---------------------------- GL_EXT_fog_coord --------------------------- */
+-
+-#ifndef GL_EXT_fog_coord
+-#define GL_EXT_fog_coord 1
+-
+-#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
+-#define GL_FOG_COORDINATE_EXT 0x8451
+-#define GL_FRAGMENT_DEPTH_EXT 0x8452
+-#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
+-#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
+-#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
+-#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
+-#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
+-
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
+-
+-#define glFogCoordPointerEXT GLEW_GET_FUN(__glewFogCoordPointerEXT)
+-#define glFogCoorddEXT GLEW_GET_FUN(__glewFogCoorddEXT)
+-#define glFogCoorddvEXT GLEW_GET_FUN(__glewFogCoorddvEXT)
+-#define glFogCoordfEXT GLEW_GET_FUN(__glewFogCoordfEXT)
+-#define glFogCoordfvEXT GLEW_GET_FUN(__glewFogCoordfvEXT)
+-
+-#define GLEW_EXT_fog_coord GLEW_GET_VAR(__GLEW_EXT_fog_coord)
+-
+-#endif /* GL_EXT_fog_coord */
+-
+-/* ------------------------ GL_EXT_fragment_lighting ----------------------- */
+-
+-#ifndef GL_EXT_fragment_lighting
+-#define GL_EXT_fragment_lighting 1
+-
+-#define GL_FRAGMENT_LIGHTING_EXT 0x8400
+-#define GL_FRAGMENT_COLOR_MATERIAL_EXT 0x8401
+-#define GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT 0x8402
+-#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT 0x8403
+-#define GL_MAX_FRAGMENT_LIGHTS_EXT 0x8404
+-#define GL_MAX_ACTIVE_LIGHTS_EXT 0x8405
+-#define GL_CURRENT_RASTER_NORMAL_EXT 0x8406
+-#define GL_LIGHT_ENV_MODE_EXT 0x8407
+-#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT 0x8408
+-#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT 0x8409
+-#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT 0x840A
+-#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT 0x840B
+-#define GL_FRAGMENT_LIGHT0_EXT 0x840C
+-#define GL_FRAGMENT_LIGHT7_EXT 0x8413
+-
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALEXTPROC) (GLenum face, GLenum mode);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFEXTPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVEXTPROC) (GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIEXTPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVEXTPROC) (GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFEXTPROC) (GLenum light, GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIEXTPROC) (GLenum light, GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFEXTPROC) (GLenum face, GLenum pname, const GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIEXTPROC) (GLenum face, GLenum pname, const GLint param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLLIGHTENVIEXTPROC) (GLenum pname, GLint param);
+-
+-#define glFragmentColorMaterialEXT GLEW_GET_FUN(__glewFragmentColorMaterialEXT)
+-#define glFragmentLightModelfEXT GLEW_GET_FUN(__glewFragmentLightModelfEXT)
+-#define glFragmentLightModelfvEXT GLEW_GET_FUN(__glewFragmentLightModelfvEXT)
+-#define glFragmentLightModeliEXT GLEW_GET_FUN(__glewFragmentLightModeliEXT)
+-#define glFragmentLightModelivEXT GLEW_GET_FUN(__glewFragmentLightModelivEXT)
+-#define glFragmentLightfEXT GLEW_GET_FUN(__glewFragmentLightfEXT)
+-#define glFragmentLightfvEXT GLEW_GET_FUN(__glewFragmentLightfvEXT)
+-#define glFragmentLightiEXT GLEW_GET_FUN(__glewFragmentLightiEXT)
+-#define glFragmentLightivEXT GLEW_GET_FUN(__glewFragmentLightivEXT)
+-#define glFragmentMaterialfEXT GLEW_GET_FUN(__glewFragmentMaterialfEXT)
+-#define glFragmentMaterialfvEXT GLEW_GET_FUN(__glewFragmentMaterialfvEXT)
+-#define glFragmentMaterialiEXT GLEW_GET_FUN(__glewFragmentMaterialiEXT)
+-#define glFragmentMaterialivEXT GLEW_GET_FUN(__glewFragmentMaterialivEXT)
+-#define glGetFragmentLightfvEXT GLEW_GET_FUN(__glewGetFragmentLightfvEXT)
+-#define glGetFragmentLightivEXT GLEW_GET_FUN(__glewGetFragmentLightivEXT)
+-#define glGetFragmentMaterialfvEXT GLEW_GET_FUN(__glewGetFragmentMaterialfvEXT)
+-#define glGetFragmentMaterialivEXT GLEW_GET_FUN(__glewGetFragmentMaterialivEXT)
+-#define glLightEnviEXT GLEW_GET_FUN(__glewLightEnviEXT)
+-
+-#define GLEW_EXT_fragment_lighting GLEW_GET_VAR(__GLEW_EXT_fragment_lighting)
+-
+-#endif /* GL_EXT_fragment_lighting */
+-
+-/* ------------------------ GL_EXT_framebuffer_blit ------------------------ */
+-
+-#ifndef GL_EXT_framebuffer_blit
+-#define GL_EXT_framebuffer_blit 1
+-
+-#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
+-#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
+-#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
+-#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
+-
+-typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+-
+-#define glBlitFramebufferEXT GLEW_GET_FUN(__glewBlitFramebufferEXT)
+-
+-#define GLEW_EXT_framebuffer_blit GLEW_GET_VAR(__GLEW_EXT_framebuffer_blit)
+-
+-#endif /* GL_EXT_framebuffer_blit */
+-
+-/* --------------------- GL_EXT_framebuffer_multisample -------------------- */
+-
+-#ifndef GL_EXT_framebuffer_multisample
+-#define GL_EXT_framebuffer_multisample 1
+-
+-#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
+-#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
+-#define GL_MAX_SAMPLES_EXT 0x8D57
+-
+-typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+-
+-#define glRenderbufferStorageMultisampleEXT GLEW_GET_FUN(__glewRenderbufferStorageMultisampleEXT)
+-
+-#define GLEW_EXT_framebuffer_multisample GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample)
+-
+-#endif /* GL_EXT_framebuffer_multisample */
+-
+-/* ----------------------- GL_EXT_framebuffer_object ----------------------- */
+-
+-#ifndef GL_EXT_framebuffer_object
+-#define GL_EXT_framebuffer_object 1
+-
+-#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
+-#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
+-#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
+-#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
+-#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
+-#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
+-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
+-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
+-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
+-#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
+-#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
+-#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
+-#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
+-#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
+-#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
+-#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
+-#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
+-#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
+-#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
+-#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
+-#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
+-#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
+-#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
+-#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
+-#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
+-#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
+-#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
+-#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
+-#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
+-#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
+-#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
+-#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
+-#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
+-#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
+-#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
+-#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
+-#define GL_FRAMEBUFFER_EXT 0x8D40
+-#define GL_RENDERBUFFER_EXT 0x8D41
+-#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
+-#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
+-#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
+-#define GL_STENCIL_INDEX1_EXT 0x8D46
+-#define GL_STENCIL_INDEX4_EXT 0x8D47
+-#define GL_STENCIL_INDEX8_EXT 0x8D48
+-#define GL_STENCIL_INDEX16_EXT 0x8D49
+-#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
+-#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
+-#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
+-#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
+-#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
+-#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
+-
+-typedef void (GLAPIENTRY * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
+-typedef void (GLAPIENTRY * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
+-typedef GLenum (GLAPIENTRY * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint* framebuffers);
+-typedef void (GLAPIENTRY * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint* renderbuffers);
+-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+-typedef void (GLAPIENTRY * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint* framebuffers);
+-typedef void (GLAPIENTRY * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint* renderbuffers);
+-typedef void (GLAPIENTRY * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
+-typedef GLboolean (GLAPIENTRY * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
+-typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+-
+-#define glBindFramebufferEXT GLEW_GET_FUN(__glewBindFramebufferEXT)
+-#define glBindRenderbufferEXT GLEW_GET_FUN(__glewBindRenderbufferEXT)
+-#define glCheckFramebufferStatusEXT GLEW_GET_FUN(__glewCheckFramebufferStatusEXT)
+-#define glDeleteFramebuffersEXT GLEW_GET_FUN(__glewDeleteFramebuffersEXT)
+-#define glDeleteRenderbuffersEXT GLEW_GET_FUN(__glewDeleteRenderbuffersEXT)
+-#define glFramebufferRenderbufferEXT GLEW_GET_FUN(__glewFramebufferRenderbufferEXT)
+-#define glFramebufferTexture1DEXT GLEW_GET_FUN(__glewFramebufferTexture1DEXT)
+-#define glFramebufferTexture2DEXT GLEW_GET_FUN(__glewFramebufferTexture2DEXT)
+-#define glFramebufferTexture3DEXT GLEW_GET_FUN(__glewFramebufferTexture3DEXT)
+-#define glGenFramebuffersEXT GLEW_GET_FUN(__glewGenFramebuffersEXT)
+-#define glGenRenderbuffersEXT GLEW_GET_FUN(__glewGenRenderbuffersEXT)
+-#define glGenerateMipmapEXT GLEW_GET_FUN(__glewGenerateMipmapEXT)
+-#define glGetFramebufferAttachmentParameterivEXT GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivEXT)
+-#define glGetRenderbufferParameterivEXT GLEW_GET_FUN(__glewGetRenderbufferParameterivEXT)
+-#define glIsFramebufferEXT GLEW_GET_FUN(__glewIsFramebufferEXT)
+-#define glIsRenderbufferEXT GLEW_GET_FUN(__glewIsRenderbufferEXT)
+-#define glRenderbufferStorageEXT GLEW_GET_FUN(__glewRenderbufferStorageEXT)
+-
+-#define GLEW_EXT_framebuffer_object GLEW_GET_VAR(__GLEW_EXT_framebuffer_object)
+-
+-#endif /* GL_EXT_framebuffer_object */
+-
+-/* ------------------------ GL_EXT_framebuffer_sRGB ------------------------ */
+-
+-#ifndef GL_EXT_framebuffer_sRGB
+-#define GL_EXT_framebuffer_sRGB 1
+-
+-#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
+-#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
+-
+-#define GLEW_EXT_framebuffer_sRGB GLEW_GET_VAR(__GLEW_EXT_framebuffer_sRGB)
+-
+-#endif /* GL_EXT_framebuffer_sRGB */
+-
+-/* ------------------------ GL_EXT_geometry_shader4 ------------------------ */
+-
+-#ifndef GL_EXT_geometry_shader4
+-#define GL_EXT_geometry_shader4 1
+-
+-#define GL_LINES_ADJACENCY_EXT 0xA
+-#define GL_LINE_STRIP_ADJACENCY_EXT 0xB
+-#define GL_TRIANGLES_ADJACENCY_EXT 0xC
+-#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0xD
+-#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
+-#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
+-#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
+-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
+-#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
+-#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
+-#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
+-#define GL_GEOMETRY_SHADER_EXT 0x8DD9
+-#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
+-#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
+-#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
+-#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
+-#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
+-#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
+-#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
+-#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
+-
+-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
+-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
+-
+-#define glFramebufferTextureEXT GLEW_GET_FUN(__glewFramebufferTextureEXT)
+-#define glFramebufferTextureFaceEXT GLEW_GET_FUN(__glewFramebufferTextureFaceEXT)
+-#define glFramebufferTextureLayerEXT GLEW_GET_FUN(__glewFramebufferTextureLayerEXT)
+-#define glProgramParameteriEXT GLEW_GET_FUN(__glewProgramParameteriEXT)
+-
+-#define GLEW_EXT_geometry_shader4 GLEW_GET_VAR(__GLEW_EXT_geometry_shader4)
+-
+-#endif /* GL_EXT_geometry_shader4 */
+-
+-/* --------------------- GL_EXT_gpu_program_parameters --------------------- */
+-
+-#ifndef GL_EXT_gpu_program_parameters
+-#define GL_EXT_gpu_program_parameters 1
+-
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
+-
+-#define glProgramEnvParameters4fvEXT GLEW_GET_FUN(__glewProgramEnvParameters4fvEXT)
+-#define glProgramLocalParameters4fvEXT GLEW_GET_FUN(__glewProgramLocalParameters4fvEXT)
+-
+-#define GLEW_EXT_gpu_program_parameters GLEW_GET_VAR(__GLEW_EXT_gpu_program_parameters)
+-
+-#endif /* GL_EXT_gpu_program_parameters */
+-
+-/* --------------------------- GL_EXT_gpu_shader4 -------------------------- */
+-
+-#ifndef GL_EXT_gpu_shader4
+-#define GL_EXT_gpu_shader4 1
+-
+-#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
+-#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
+-#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
+-#define GL_SAMPLER_BUFFER_EXT 0x8DC2
+-#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
+-#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
+-#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
+-#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
+-#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
+-#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
+-#define GL_INT_SAMPLER_1D_EXT 0x8DC9
+-#define GL_INT_SAMPLER_2D_EXT 0x8DCA
+-#define GL_INT_SAMPLER_3D_EXT 0x8DCB
+-#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
+-#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
+-#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
+-#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
+-#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
+-#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
+-#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
+-#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
+-#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
+-#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
+-#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
+-#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
+-#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
+-
+-typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
+-typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
+-typedef void (GLAPIENTRY * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+-typedef void (GLAPIENTRY * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+-
+-#define glBindFragDataLocationEXT GLEW_GET_FUN(__glewBindFragDataLocationEXT)
+-#define glGetFragDataLocationEXT GLEW_GET_FUN(__glewGetFragDataLocationEXT)
+-#define glGetUniformuivEXT GLEW_GET_FUN(__glewGetUniformuivEXT)
+-#define glGetVertexAttribIivEXT GLEW_GET_FUN(__glewGetVertexAttribIivEXT)
+-#define glGetVertexAttribIuivEXT GLEW_GET_FUN(__glewGetVertexAttribIuivEXT)
+-#define glUniform1uiEXT GLEW_GET_FUN(__glewUniform1uiEXT)
+-#define glUniform1uivEXT GLEW_GET_FUN(__glewUniform1uivEXT)
+-#define glUniform2uiEXT GLEW_GET_FUN(__glewUniform2uiEXT)
+-#define glUniform2uivEXT GLEW_GET_FUN(__glewUniform2uivEXT)
+-#define glUniform3uiEXT GLEW_GET_FUN(__glewUniform3uiEXT)
+-#define glUniform3uivEXT GLEW_GET_FUN(__glewUniform3uivEXT)
+-#define glUniform4uiEXT GLEW_GET_FUN(__glewUniform4uiEXT)
+-#define glUniform4uivEXT GLEW_GET_FUN(__glewUniform4uivEXT)
+-#define glVertexAttribI1iEXT GLEW_GET_FUN(__glewVertexAttribI1iEXT)
+-#define glVertexAttribI1ivEXT GLEW_GET_FUN(__glewVertexAttribI1ivEXT)
+-#define glVertexAttribI1uiEXT GLEW_GET_FUN(__glewVertexAttribI1uiEXT)
+-#define glVertexAttribI1uivEXT GLEW_GET_FUN(__glewVertexAttribI1uivEXT)
+-#define glVertexAttribI2iEXT GLEW_GET_FUN(__glewVertexAttribI2iEXT)
+-#define glVertexAttribI2ivEXT GLEW_GET_FUN(__glewVertexAttribI2ivEXT)
+-#define glVertexAttribI2uiEXT GLEW_GET_FUN(__glewVertexAttribI2uiEXT)
+-#define glVertexAttribI2uivEXT GLEW_GET_FUN(__glewVertexAttribI2uivEXT)
+-#define glVertexAttribI3iEXT GLEW_GET_FUN(__glewVertexAttribI3iEXT)
+-#define glVertexAttribI3ivEXT GLEW_GET_FUN(__glewVertexAttribI3ivEXT)
+-#define glVertexAttribI3uiEXT GLEW_GET_FUN(__glewVertexAttribI3uiEXT)
+-#define glVertexAttribI3uivEXT GLEW_GET_FUN(__glewVertexAttribI3uivEXT)
+-#define glVertexAttribI4bvEXT GLEW_GET_FUN(__glewVertexAttribI4bvEXT)
+-#define glVertexAttribI4iEXT GLEW_GET_FUN(__glewVertexAttribI4iEXT)
+-#define glVertexAttribI4ivEXT GLEW_GET_FUN(__glewVertexAttribI4ivEXT)
+-#define glVertexAttribI4svEXT GLEW_GET_FUN(__glewVertexAttribI4svEXT)
+-#define glVertexAttribI4ubvEXT GLEW_GET_FUN(__glewVertexAttribI4ubvEXT)
+-#define glVertexAttribI4uiEXT GLEW_GET_FUN(__glewVertexAttribI4uiEXT)
+-#define glVertexAttribI4uivEXT GLEW_GET_FUN(__glewVertexAttribI4uivEXT)
+-#define glVertexAttribI4usvEXT GLEW_GET_FUN(__glewVertexAttribI4usvEXT)
+-#define glVertexAttribIPointerEXT GLEW_GET_FUN(__glewVertexAttribIPointerEXT)
+-
+-#define GLEW_EXT_gpu_shader4 GLEW_GET_VAR(__GLEW_EXT_gpu_shader4)
+-
+-#endif /* GL_EXT_gpu_shader4 */
+-
+-/* ---------------------------- GL_EXT_histogram --------------------------- */
+-
+-#ifndef GL_EXT_histogram
+-#define GL_EXT_histogram 1
+-
+-#define GL_HISTOGRAM_EXT 0x8024
+-#define GL_PROXY_HISTOGRAM_EXT 0x8025
+-#define GL_HISTOGRAM_WIDTH_EXT 0x8026
+-#define GL_HISTOGRAM_FORMAT_EXT 0x8027
+-#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
+-#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
+-#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
+-#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
+-#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
+-#define GL_HISTOGRAM_SINK_EXT 0x802D
+-#define GL_MINMAX_EXT 0x802E
+-#define GL_MINMAX_FORMAT_EXT 0x802F
+-#define GL_MINMAX_SINK_EXT 0x8030
+-
+-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
+-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
+-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+-typedef void (GLAPIENTRY * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
+-typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLRESETMINMAXEXTPROC) (GLenum target);
+-
+-#define glGetHistogramEXT GLEW_GET_FUN(__glewGetHistogramEXT)
+-#define glGetHistogramParameterfvEXT GLEW_GET_FUN(__glewGetHistogramParameterfvEXT)
+-#define glGetHistogramParameterivEXT GLEW_GET_FUN(__glewGetHistogramParameterivEXT)
+-#define glGetMinmaxEXT GLEW_GET_FUN(__glewGetMinmaxEXT)
+-#define glGetMinmaxParameterfvEXT GLEW_GET_FUN(__glewGetMinmaxParameterfvEXT)
+-#define glGetMinmaxParameterivEXT GLEW_GET_FUN(__glewGetMinmaxParameterivEXT)
+-#define glHistogramEXT GLEW_GET_FUN(__glewHistogramEXT)
+-#define glMinmaxEXT GLEW_GET_FUN(__glewMinmaxEXT)
+-#define glResetHistogramEXT GLEW_GET_FUN(__glewResetHistogramEXT)
+-#define glResetMinmaxEXT GLEW_GET_FUN(__glewResetMinmaxEXT)
+-
+-#define GLEW_EXT_histogram GLEW_GET_VAR(__GLEW_EXT_histogram)
+-
+-#endif /* GL_EXT_histogram */
+-
+-/* ----------------------- GL_EXT_index_array_formats ---------------------- */
+-
+-#ifndef GL_EXT_index_array_formats
+-#define GL_EXT_index_array_formats 1
+-
+-#define GLEW_EXT_index_array_formats GLEW_GET_VAR(__GLEW_EXT_index_array_formats)
+-
+-#endif /* GL_EXT_index_array_formats */
+-
+-/* --------------------------- GL_EXT_index_func --------------------------- */
+-
+-#ifndef GL_EXT_index_func
+-#define GL_EXT_index_func 1
+-
+-typedef void (GLAPIENTRY * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLfloat ref);
+-
+-#define glIndexFuncEXT GLEW_GET_FUN(__glewIndexFuncEXT)
+-
+-#define GLEW_EXT_index_func GLEW_GET_VAR(__GLEW_EXT_index_func)
+-
+-#endif /* GL_EXT_index_func */
+-
+-/* ------------------------- GL_EXT_index_material ------------------------- */
+-
+-#ifndef GL_EXT_index_material
+-#define GL_EXT_index_material 1
+-
+-typedef void (GLAPIENTRY * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
+-
+-#define glIndexMaterialEXT GLEW_GET_FUN(__glewIndexMaterialEXT)
+-
+-#define GLEW_EXT_index_material GLEW_GET_VAR(__GLEW_EXT_index_material)
+-
+-#endif /* GL_EXT_index_material */
+-
+-/* -------------------------- GL_EXT_index_texture ------------------------- */
+-
+-#ifndef GL_EXT_index_texture
+-#define GL_EXT_index_texture 1
+-
+-#define GLEW_EXT_index_texture GLEW_GET_VAR(__GLEW_EXT_index_texture)
+-
+-#endif /* GL_EXT_index_texture */
+-
+-/* -------------------------- GL_EXT_light_texture ------------------------- */
+-
+-#ifndef GL_EXT_light_texture
+-#define GL_EXT_light_texture 1
+-
+-#define GL_FRAGMENT_MATERIAL_EXT 0x8349
+-#define GL_FRAGMENT_NORMAL_EXT 0x834A
+-#define GL_FRAGMENT_COLOR_EXT 0x834C
+-#define GL_ATTENUATION_EXT 0x834D
+-#define GL_SHADOW_ATTENUATION_EXT 0x834E
+-#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
+-#define GL_TEXTURE_LIGHT_EXT 0x8350
+-#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
+-#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
+-#define GL_FRAGMENT_DEPTH_EXT 0x8452
+-
+-typedef void (GLAPIENTRY * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
+-typedef void (GLAPIENTRY * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
+-typedef void (GLAPIENTRY * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
+-
+-#define glApplyTextureEXT GLEW_GET_FUN(__glewApplyTextureEXT)
+-#define glTextureLightEXT GLEW_GET_FUN(__glewTextureLightEXT)
+-#define glTextureMaterialEXT GLEW_GET_FUN(__glewTextureMaterialEXT)
+-
+-#define GLEW_EXT_light_texture GLEW_GET_VAR(__GLEW_EXT_light_texture)
+-
+-#endif /* GL_EXT_light_texture */
+-
+-/* ------------------------- GL_EXT_misc_attribute ------------------------- */
+-
+-#ifndef GL_EXT_misc_attribute
+-#define GL_EXT_misc_attribute 1
+-
+-#define GLEW_EXT_misc_attribute GLEW_GET_VAR(__GLEW_EXT_misc_attribute)
+-
+-#endif /* GL_EXT_misc_attribute */
+-
+-/* ------------------------ GL_EXT_multi_draw_arrays ----------------------- */
+-
+-#ifndef GL_EXT_multi_draw_arrays
+-#define GL_EXT_multi_draw_arrays 1
+-
+-typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint* first, GLsizei *count, GLsizei primcount);
+-typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, GLsizei* count, GLenum type, const GLvoid **indices, GLsizei primcount);
+-
+-#define glMultiDrawArraysEXT GLEW_GET_FUN(__glewMultiDrawArraysEXT)
+-#define glMultiDrawElementsEXT GLEW_GET_FUN(__glewMultiDrawElementsEXT)
+-
+-#define GLEW_EXT_multi_draw_arrays GLEW_GET_VAR(__GLEW_EXT_multi_draw_arrays)
+-
+-#endif /* GL_EXT_multi_draw_arrays */
+-
+-/* --------------------------- GL_EXT_multisample -------------------------- */
+-
+-#ifndef GL_EXT_multisample
+-#define GL_EXT_multisample 1
+-
+-#define GL_MULTISAMPLE_EXT 0x809D
+-#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
+-#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
+-#define GL_SAMPLE_MASK_EXT 0x80A0
+-#define GL_1PASS_EXT 0x80A1
+-#define GL_2PASS_0_EXT 0x80A2
+-#define GL_2PASS_1_EXT 0x80A3
+-#define GL_4PASS_0_EXT 0x80A4
+-#define GL_4PASS_1_EXT 0x80A5
+-#define GL_4PASS_2_EXT 0x80A6
+-#define GL_4PASS_3_EXT 0x80A7
+-#define GL_SAMPLE_BUFFERS_EXT 0x80A8
+-#define GL_SAMPLES_EXT 0x80A9
+-#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
+-#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
+-#define GL_SAMPLE_PATTERN_EXT 0x80AC
+-#define GL_MULTISAMPLE_BIT_EXT 0x20000000
+-
+-typedef void (GLAPIENTRY * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
+-typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
+-
+-#define glSampleMaskEXT GLEW_GET_FUN(__glewSampleMaskEXT)
+-#define glSamplePatternEXT GLEW_GET_FUN(__glewSamplePatternEXT)
+-
+-#define GLEW_EXT_multisample GLEW_GET_VAR(__GLEW_EXT_multisample)
+-
+-#endif /* GL_EXT_multisample */
+-
+-/* ---------------------- GL_EXT_packed_depth_stencil ---------------------- */
+-
+-#ifndef GL_EXT_packed_depth_stencil
+-#define GL_EXT_packed_depth_stencil 1
+-
+-#define GL_DEPTH_STENCIL_EXT 0x84F9
+-#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
+-#define GL_DEPTH24_STENCIL8_EXT 0x88F0
+-#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
+-
+-#define GLEW_EXT_packed_depth_stencil GLEW_GET_VAR(__GLEW_EXT_packed_depth_stencil)
+-
+-#endif /* GL_EXT_packed_depth_stencil */
+-
+-/* -------------------------- GL_EXT_packed_float -------------------------- */
+-
+-#ifndef GL_EXT_packed_float
+-#define GL_EXT_packed_float 1
+-
+-#define GL_R11F_G11F_B10F_EXT 0x8C3A
+-#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
+-#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
+-
+-#define GLEW_EXT_packed_float GLEW_GET_VAR(__GLEW_EXT_packed_float)
+-
+-#endif /* GL_EXT_packed_float */
+-
+-/* -------------------------- GL_EXT_packed_pixels ------------------------- */
+-
+-#ifndef GL_EXT_packed_pixels
+-#define GL_EXT_packed_pixels 1
+-
+-#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
+-#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
+-#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
+-#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
+-#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
+-
+-#define GLEW_EXT_packed_pixels GLEW_GET_VAR(__GLEW_EXT_packed_pixels)
+-
+-#endif /* GL_EXT_packed_pixels */
+-
+-/* ------------------------ GL_EXT_paletted_texture ------------------------ */
+-
+-#ifndef GL_EXT_paletted_texture
+-#define GL_EXT_paletted_texture 1
+-
+-#define GL_TEXTURE_1D 0x0DE0
+-#define GL_TEXTURE_2D 0x0DE1
+-#define GL_PROXY_TEXTURE_1D 0x8063
+-#define GL_PROXY_TEXTURE_2D 0x8064
+-#define GL_TEXTURE_3D_EXT 0x806F
+-#define GL_PROXY_TEXTURE_3D_EXT 0x8070
+-#define GL_COLOR_TABLE_FORMAT_EXT 0x80D8
+-#define GL_COLOR_TABLE_WIDTH_EXT 0x80D9
+-#define GL_COLOR_TABLE_RED_SIZE_EXT 0x80DA
+-#define GL_COLOR_TABLE_GREEN_SIZE_EXT 0x80DB
+-#define GL_COLOR_TABLE_BLUE_SIZE_EXT 0x80DC
+-#define GL_COLOR_TABLE_ALPHA_SIZE_EXT 0x80DD
+-#define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT 0x80DE
+-#define GL_COLOR_TABLE_INTENSITY_SIZE_EXT 0x80DF
+-#define GL_COLOR_INDEX1_EXT 0x80E2
+-#define GL_COLOR_INDEX2_EXT 0x80E3
+-#define GL_COLOR_INDEX4_EXT 0x80E4
+-#define GL_COLOR_INDEX8_EXT 0x80E5
+-#define GL_COLOR_INDEX12_EXT 0x80E6
+-#define GL_COLOR_INDEX16_EXT 0x80E7
+-#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
+-#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
+-#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
+-
+-typedef void (GLAPIENTRY * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* data);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void* data);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
+-
+-#define glColorTableEXT GLEW_GET_FUN(__glewColorTableEXT)
+-#define glGetColorTableEXT GLEW_GET_FUN(__glewGetColorTableEXT)
+-#define glGetColorTableParameterfvEXT GLEW_GET_FUN(__glewGetColorTableParameterfvEXT)
+-#define glGetColorTableParameterivEXT GLEW_GET_FUN(__glewGetColorTableParameterivEXT)
+-
+-#define GLEW_EXT_paletted_texture GLEW_GET_VAR(__GLEW_EXT_paletted_texture)
+-
+-#endif /* GL_EXT_paletted_texture */
+-
+-/* ----------------------- GL_EXT_pixel_buffer_object ---------------------- */
+-
+-#ifndef GL_EXT_pixel_buffer_object
+-#define GL_EXT_pixel_buffer_object 1
+-
+-#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
+-#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
+-#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
+-#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
+-
+-#define GLEW_EXT_pixel_buffer_object GLEW_GET_VAR(__GLEW_EXT_pixel_buffer_object)
+-
+-#endif /* GL_EXT_pixel_buffer_object */
+-
+-/* ------------------------- GL_EXT_pixel_transform ------------------------ */
+-
+-#ifndef GL_EXT_pixel_transform
+-#define GL_EXT_pixel_transform 1
+-
+-#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
+-#define GL_PIXEL_MAG_FILTER_EXT 0x8331
+-#define GL_PIXEL_MIN_FILTER_EXT 0x8332
+-#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
+-#define GL_CUBIC_EXT 0x8334
+-#define GL_AVERAGE_EXT 0x8335
+-#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
+-#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
+-#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
+-
+-typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, const GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, const GLint param);
+-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
+-
+-#define glGetPixelTransformParameterfvEXT GLEW_GET_FUN(__glewGetPixelTransformParameterfvEXT)
+-#define glGetPixelTransformParameterivEXT GLEW_GET_FUN(__glewGetPixelTransformParameterivEXT)
+-#define glPixelTransformParameterfEXT GLEW_GET_FUN(__glewPixelTransformParameterfEXT)
+-#define glPixelTransformParameterfvEXT GLEW_GET_FUN(__glewPixelTransformParameterfvEXT)
+-#define glPixelTransformParameteriEXT GLEW_GET_FUN(__glewPixelTransformParameteriEXT)
+-#define glPixelTransformParameterivEXT GLEW_GET_FUN(__glewPixelTransformParameterivEXT)
+-
+-#define GLEW_EXT_pixel_transform GLEW_GET_VAR(__GLEW_EXT_pixel_transform)
+-
+-#endif /* GL_EXT_pixel_transform */
+-
+-/* ------------------- GL_EXT_pixel_transform_color_table ------------------ */
+-
+-#ifndef GL_EXT_pixel_transform_color_table
+-#define GL_EXT_pixel_transform_color_table 1
+-
+-#define GLEW_EXT_pixel_transform_color_table GLEW_GET_VAR(__GLEW_EXT_pixel_transform_color_table)
+-
+-#endif /* GL_EXT_pixel_transform_color_table */
+-
+-/* ------------------------ GL_EXT_point_parameters ------------------------ */
+-
+-#ifndef GL_EXT_point_parameters
+-#define GL_EXT_point_parameters 1
+-
+-#define GL_POINT_SIZE_MIN_EXT 0x8126
+-#define GL_POINT_SIZE_MAX_EXT 0x8127
+-#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
+-#define GL_DISTANCE_ATTENUATION_EXT 0x8129
+-
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, GLfloat* params);
+-
+-#define glPointParameterfEXT GLEW_GET_FUN(__glewPointParameterfEXT)
+-#define glPointParameterfvEXT GLEW_GET_FUN(__glewPointParameterfvEXT)
+-
+-#define GLEW_EXT_point_parameters GLEW_GET_VAR(__GLEW_EXT_point_parameters)
+-
+-#endif /* GL_EXT_point_parameters */
+-
+-/* ------------------------- GL_EXT_polygon_offset ------------------------- */
+-
+-#ifndef GL_EXT_polygon_offset
+-#define GL_EXT_polygon_offset 1
+-
+-#define GL_POLYGON_OFFSET_EXT 0x8037
+-#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
+-#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
+-
+-typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
+-
+-#define glPolygonOffsetEXT GLEW_GET_FUN(__glewPolygonOffsetEXT)
+-
+-#define GLEW_EXT_polygon_offset GLEW_GET_VAR(__GLEW_EXT_polygon_offset)
+-
+-#endif /* GL_EXT_polygon_offset */
+-
+-/* ------------------------- GL_EXT_rescale_normal ------------------------- */
+-
+-#ifndef GL_EXT_rescale_normal
+-#define GL_EXT_rescale_normal 1
+-
+-#define GLEW_EXT_rescale_normal GLEW_GET_VAR(__GLEW_EXT_rescale_normal)
+-
+-#endif /* GL_EXT_rescale_normal */
+-
+-/* -------------------------- GL_EXT_scene_marker -------------------------- */
+-
+-#ifndef GL_EXT_scene_marker
+-#define GL_EXT_scene_marker 1
+-
+-typedef void (GLAPIENTRY * PFNGLBEGINSCENEEXTPROC) (void);
+-typedef void (GLAPIENTRY * PFNGLENDSCENEEXTPROC) (void);
+-
+-#define glBeginSceneEXT GLEW_GET_FUN(__glewBeginSceneEXT)
+-#define glEndSceneEXT GLEW_GET_FUN(__glewEndSceneEXT)
+-
+-#define GLEW_EXT_scene_marker GLEW_GET_VAR(__GLEW_EXT_scene_marker)
+-
+-#endif /* GL_EXT_scene_marker */
+-
+-/* ------------------------- GL_EXT_secondary_color ------------------------ */
+-
+-#ifndef GL_EXT_secondary_color
+-#define GL_EXT_secondary_color 1
+-
+-#define GL_COLOR_SUM_EXT 0x8458
+-#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
+-#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
+-#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
+-#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
+-#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
+-#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
+-
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
+-
+-#define glSecondaryColor3bEXT GLEW_GET_FUN(__glewSecondaryColor3bEXT)
+-#define glSecondaryColor3bvEXT GLEW_GET_FUN(__glewSecondaryColor3bvEXT)
+-#define glSecondaryColor3dEXT GLEW_GET_FUN(__glewSecondaryColor3dEXT)
+-#define glSecondaryColor3dvEXT GLEW_GET_FUN(__glewSecondaryColor3dvEXT)
+-#define glSecondaryColor3fEXT GLEW_GET_FUN(__glewSecondaryColor3fEXT)
+-#define glSecondaryColor3fvEXT GLEW_GET_FUN(__glewSecondaryColor3fvEXT)
+-#define glSecondaryColor3iEXT GLEW_GET_FUN(__glewSecondaryColor3iEXT)
+-#define glSecondaryColor3ivEXT GLEW_GET_FUN(__glewSecondaryColor3ivEXT)
+-#define glSecondaryColor3sEXT GLEW_GET_FUN(__glewSecondaryColor3sEXT)
+-#define glSecondaryColor3svEXT GLEW_GET_FUN(__glewSecondaryColor3svEXT)
+-#define glSecondaryColor3ubEXT GLEW_GET_FUN(__glewSecondaryColor3ubEXT)
+-#define glSecondaryColor3ubvEXT GLEW_GET_FUN(__glewSecondaryColor3ubvEXT)
+-#define glSecondaryColor3uiEXT GLEW_GET_FUN(__glewSecondaryColor3uiEXT)
+-#define glSecondaryColor3uivEXT GLEW_GET_FUN(__glewSecondaryColor3uivEXT)
+-#define glSecondaryColor3usEXT GLEW_GET_FUN(__glewSecondaryColor3usEXT)
+-#define glSecondaryColor3usvEXT GLEW_GET_FUN(__glewSecondaryColor3usvEXT)
+-#define glSecondaryColorPointerEXT GLEW_GET_FUN(__glewSecondaryColorPointerEXT)
+-
+-#define GLEW_EXT_secondary_color GLEW_GET_VAR(__GLEW_EXT_secondary_color)
+-
+-#endif /* GL_EXT_secondary_color */
+-
+-/* --------------------- GL_EXT_separate_specular_color -------------------- */
+-
+-#ifndef GL_EXT_separate_specular_color
+-#define GL_EXT_separate_specular_color 1
+-
+-#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
+-#define GL_SINGLE_COLOR_EXT 0x81F9
+-#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
+-
+-#define GLEW_EXT_separate_specular_color GLEW_GET_VAR(__GLEW_EXT_separate_specular_color)
+-
+-#endif /* GL_EXT_separate_specular_color */
+-
+-/* -------------------------- GL_EXT_shadow_funcs -------------------------- */
+-
+-#ifndef GL_EXT_shadow_funcs
+-#define GL_EXT_shadow_funcs 1
+-
+-#define GLEW_EXT_shadow_funcs GLEW_GET_VAR(__GLEW_EXT_shadow_funcs)
+-
+-#endif /* GL_EXT_shadow_funcs */
+-
+-/* --------------------- GL_EXT_shared_texture_palette --------------------- */
+-
+-#ifndef GL_EXT_shared_texture_palette
+-#define GL_EXT_shared_texture_palette 1
+-
+-#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
+-
+-#define GLEW_EXT_shared_texture_palette GLEW_GET_VAR(__GLEW_EXT_shared_texture_palette)
+-
+-#endif /* GL_EXT_shared_texture_palette */
+-
+-/* ------------------------ GL_EXT_stencil_clear_tag ----------------------- */
+-
+-#ifndef GL_EXT_stencil_clear_tag
+-#define GL_EXT_stencil_clear_tag 1
+-
+-#define GL_STENCIL_TAG_BITS_EXT 0x88F2
+-#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
+-
+-#define GLEW_EXT_stencil_clear_tag GLEW_GET_VAR(__GLEW_EXT_stencil_clear_tag)
+-
+-#endif /* GL_EXT_stencil_clear_tag */
+-
+-/* ------------------------ GL_EXT_stencil_two_side ------------------------ */
+-
+-#ifndef GL_EXT_stencil_two_side
+-#define GL_EXT_stencil_two_side 1
+-
+-#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
+-#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
+-
+-typedef void (GLAPIENTRY * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
+-
+-#define glActiveStencilFaceEXT GLEW_GET_FUN(__glewActiveStencilFaceEXT)
+-
+-#define GLEW_EXT_stencil_two_side GLEW_GET_VAR(__GLEW_EXT_stencil_two_side)
+-
+-#endif /* GL_EXT_stencil_two_side */
+-
+-/* -------------------------- GL_EXT_stencil_wrap -------------------------- */
+-
+-#ifndef GL_EXT_stencil_wrap
+-#define GL_EXT_stencil_wrap 1
+-
+-#define GL_INCR_WRAP_EXT 0x8507
+-#define GL_DECR_WRAP_EXT 0x8508
+-
+-#define GLEW_EXT_stencil_wrap GLEW_GET_VAR(__GLEW_EXT_stencil_wrap)
+-
+-#endif /* GL_EXT_stencil_wrap */
+-
+-/* --------------------------- GL_EXT_subtexture --------------------------- */
+-
+-#ifndef GL_EXT_subtexture
+-#define GL_EXT_subtexture 1
+-
+-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
+-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
+-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
+-
+-#define glTexSubImage1DEXT GLEW_GET_FUN(__glewTexSubImage1DEXT)
+-#define glTexSubImage2DEXT GLEW_GET_FUN(__glewTexSubImage2DEXT)
+-#define glTexSubImage3DEXT GLEW_GET_FUN(__glewTexSubImage3DEXT)
+-
+-#define GLEW_EXT_subtexture GLEW_GET_VAR(__GLEW_EXT_subtexture)
+-
+-#endif /* GL_EXT_subtexture */
+-
+-/* ----------------------------- GL_EXT_texture ---------------------------- */
+-
+-#ifndef GL_EXT_texture
+-#define GL_EXT_texture 1
+-
+-#define GL_ALPHA4_EXT 0x803B
+-#define GL_ALPHA8_EXT 0x803C
+-#define GL_ALPHA12_EXT 0x803D
+-#define GL_ALPHA16_EXT 0x803E
+-#define GL_LUMINANCE4_EXT 0x803F
+-#define GL_LUMINANCE8_EXT 0x8040
+-#define GL_LUMINANCE12_EXT 0x8041
+-#define GL_LUMINANCE16_EXT 0x8042
+-#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
+-#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
+-#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
+-#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
+-#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
+-#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
+-#define GL_INTENSITY_EXT 0x8049
+-#define GL_INTENSITY4_EXT 0x804A
+-#define GL_INTENSITY8_EXT 0x804B
+-#define GL_INTENSITY12_EXT 0x804C
+-#define GL_INTENSITY16_EXT 0x804D
+-#define GL_RGB2_EXT 0x804E
+-#define GL_RGB4_EXT 0x804F
+-#define GL_RGB5_EXT 0x8050
+-#define GL_RGB8_EXT 0x8051
+-#define GL_RGB10_EXT 0x8052
+-#define GL_RGB12_EXT 0x8053
+-#define GL_RGB16_EXT 0x8054
+-#define GL_RGBA2_EXT 0x8055
+-#define GL_RGBA4_EXT 0x8056
+-#define GL_RGB5_A1_EXT 0x8057
+-#define GL_RGBA8_EXT 0x8058
+-#define GL_RGB10_A2_EXT 0x8059
+-#define GL_RGBA12_EXT 0x805A
+-#define GL_RGBA16_EXT 0x805B
+-#define GL_TEXTURE_RED_SIZE_EXT 0x805C
+-#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
+-#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
+-#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
+-#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
+-#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
+-#define GL_REPLACE_EXT 0x8062
+-#define GL_PROXY_TEXTURE_1D_EXT 0x8063
+-#define GL_PROXY_TEXTURE_2D_EXT 0x8064
+-
+-#define GLEW_EXT_texture GLEW_GET_VAR(__GLEW_EXT_texture)
+-
+-#endif /* GL_EXT_texture */
+-
+-/* ---------------------------- GL_EXT_texture3D --------------------------- */
+-
+-#ifndef GL_EXT_texture3D
+-#define GL_EXT_texture3D 1
+-
+-#define GL_PACK_SKIP_IMAGES_EXT 0x806B
+-#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
+-#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
+-#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
+-#define GL_TEXTURE_3D_EXT 0x806F
+-#define GL_PROXY_TEXTURE_3D_EXT 0x8070
+-#define GL_TEXTURE_DEPTH_EXT 0x8071
+-#define GL_TEXTURE_WRAP_R_EXT 0x8072
+-#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
+-
+-typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
+-
+-#define glTexImage3DEXT GLEW_GET_FUN(__glewTexImage3DEXT)
+-
+-#define GLEW_EXT_texture3D GLEW_GET_VAR(__GLEW_EXT_texture3D)
+-
+-#endif /* GL_EXT_texture3D */
+-
+-/* -------------------------- GL_EXT_texture_array ------------------------- */
+-
+-#ifndef GL_EXT_texture_array
+-#define GL_EXT_texture_array 1
+-
+-#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
+-#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
+-#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
+-#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
+-#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
+-#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
+-#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
+-#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
+-
+-#define GLEW_EXT_texture_array GLEW_GET_VAR(__GLEW_EXT_texture_array)
+-
+-#endif /* GL_EXT_texture_array */
+-
+-/* ---------------------- GL_EXT_texture_buffer_object --------------------- */
+-
+-#ifndef GL_EXT_texture_buffer_object
+-#define GL_EXT_texture_buffer_object 1
+-
+-#define GL_TEXTURE_BUFFER_EXT 0x8C2A
+-#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
+-#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
+-#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
+-#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
+-
+-typedef void (GLAPIENTRY * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
+-
+-#define glTexBufferEXT GLEW_GET_FUN(__glewTexBufferEXT)
+-
+-#define GLEW_EXT_texture_buffer_object GLEW_GET_VAR(__GLEW_EXT_texture_buffer_object)
+-
+-#endif /* GL_EXT_texture_buffer_object */
+-
+-/* -------------------- GL_EXT_texture_compression_dxt1 -------------------- */
+-
+-#ifndef GL_EXT_texture_compression_dxt1
+-#define GL_EXT_texture_compression_dxt1 1
+-
+-#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
+-#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
+-
+-#define GLEW_EXT_texture_compression_dxt1 GLEW_GET_VAR(__GLEW_EXT_texture_compression_dxt1)
+-
+-#endif /* GL_EXT_texture_compression_dxt1 */
+-
+-/* -------------------- GL_EXT_texture_compression_latc -------------------- */
+-
+-#ifndef GL_EXT_texture_compression_latc
+-#define GL_EXT_texture_compression_latc 1
+-
+-#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
+-#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
+-#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
+-#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
+-
+-#define GLEW_EXT_texture_compression_latc GLEW_GET_VAR(__GLEW_EXT_texture_compression_latc)
+-
+-#endif /* GL_EXT_texture_compression_latc */
+-
+-/* -------------------- GL_EXT_texture_compression_rgtc -------------------- */
+-
+-#ifndef GL_EXT_texture_compression_rgtc
+-#define GL_EXT_texture_compression_rgtc 1
+-
+-#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
+-#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
+-#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
+-#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
+-
+-#define GLEW_EXT_texture_compression_rgtc GLEW_GET_VAR(__GLEW_EXT_texture_compression_rgtc)
+-
+-#endif /* GL_EXT_texture_compression_rgtc */
+-
+-/* -------------------- GL_EXT_texture_compression_s3tc -------------------- */
+-
+-#ifndef GL_EXT_texture_compression_s3tc
+-#define GL_EXT_texture_compression_s3tc 1
+-
+-#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
+-#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
+-#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
+-#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
+-
+-#define GLEW_EXT_texture_compression_s3tc GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc)
+-
+-#endif /* GL_EXT_texture_compression_s3tc */
+-
+-/* ------------------------ GL_EXT_texture_cube_map ------------------------ */
+-
+-#ifndef GL_EXT_texture_cube_map
+-#define GL_EXT_texture_cube_map 1
+-
+-#define GL_NORMAL_MAP_EXT 0x8511
+-#define GL_REFLECTION_MAP_EXT 0x8512
+-#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
+-#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
+-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
+-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
+-#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
+-#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
+-
+-#define GLEW_EXT_texture_cube_map GLEW_GET_VAR(__GLEW_EXT_texture_cube_map)
+-
+-#endif /* GL_EXT_texture_cube_map */
+-
+-/* ----------------------- GL_EXT_texture_edge_clamp ----------------------- */
+-
+-#ifndef GL_EXT_texture_edge_clamp
+-#define GL_EXT_texture_edge_clamp 1
+-
+-#define GL_CLAMP_TO_EDGE_EXT 0x812F
+-
+-#define GLEW_EXT_texture_edge_clamp GLEW_GET_VAR(__GLEW_EXT_texture_edge_clamp)
+-
+-#endif /* GL_EXT_texture_edge_clamp */
+-
+-/* --------------------------- GL_EXT_texture_env -------------------------- */
+-
+-#ifndef GL_EXT_texture_env
+-#define GL_EXT_texture_env 1
+-
+-#define GL_TEXTURE_ENV0_EXT 0
+-#define GL_ENV_BLEND_EXT 0
+-#define GL_TEXTURE_ENV_SHIFT_EXT 0
+-#define GL_ENV_REPLACE_EXT 0
+-#define GL_ENV_ADD_EXT 0
+-#define GL_ENV_SUBTRACT_EXT 0
+-#define GL_TEXTURE_ENV_MODE_ALPHA_EXT 0
+-#define GL_ENV_REVERSE_SUBTRACT_EXT 0
+-#define GL_ENV_REVERSE_BLEND_EXT 0
+-#define GL_ENV_COPY_EXT 0
+-#define GL_ENV_MODULATE_EXT 0
+-
+-#define GLEW_EXT_texture_env GLEW_GET_VAR(__GLEW_EXT_texture_env)
+-
+-#endif /* GL_EXT_texture_env */
+-
+-/* ------------------------- GL_EXT_texture_env_add ------------------------ */
+-
+-#ifndef GL_EXT_texture_env_add
+-#define GL_EXT_texture_env_add 1
+-
+-#define GLEW_EXT_texture_env_add GLEW_GET_VAR(__GLEW_EXT_texture_env_add)
+-
+-#endif /* GL_EXT_texture_env_add */
+-
+-/* ----------------------- GL_EXT_texture_env_combine ---------------------- */
+-
+-#ifndef GL_EXT_texture_env_combine
+-#define GL_EXT_texture_env_combine 1
+-
+-#define GL_COMBINE_EXT 0x8570
+-#define GL_COMBINE_RGB_EXT 0x8571
+-#define GL_COMBINE_ALPHA_EXT 0x8572
+-#define GL_RGB_SCALE_EXT 0x8573
+-#define GL_ADD_SIGNED_EXT 0x8574
+-#define GL_INTERPOLATE_EXT 0x8575
+-#define GL_CONSTANT_EXT 0x8576
+-#define GL_PRIMARY_COLOR_EXT 0x8577
+-#define GL_PREVIOUS_EXT 0x8578
+-#define GL_SOURCE0_RGB_EXT 0x8580
+-#define GL_SOURCE1_RGB_EXT 0x8581
+-#define GL_SOURCE2_RGB_EXT 0x8582
+-#define GL_SOURCE0_ALPHA_EXT 0x8588
+-#define GL_SOURCE1_ALPHA_EXT 0x8589
+-#define GL_SOURCE2_ALPHA_EXT 0x858A
+-#define GL_OPERAND0_RGB_EXT 0x8590
+-#define GL_OPERAND1_RGB_EXT 0x8591
+-#define GL_OPERAND2_RGB_EXT 0x8592
+-#define GL_OPERAND0_ALPHA_EXT 0x8598
+-#define GL_OPERAND1_ALPHA_EXT 0x8599
+-#define GL_OPERAND2_ALPHA_EXT 0x859A
+-
+-#define GLEW_EXT_texture_env_combine GLEW_GET_VAR(__GLEW_EXT_texture_env_combine)
+-
+-#endif /* GL_EXT_texture_env_combine */
+-
+-/* ------------------------ GL_EXT_texture_env_dot3 ------------------------ */
+-
+-#ifndef GL_EXT_texture_env_dot3
+-#define GL_EXT_texture_env_dot3 1
+-
+-#define GL_DOT3_RGB_EXT 0x8740
+-#define GL_DOT3_RGBA_EXT 0x8741
+-
+-#define GLEW_EXT_texture_env_dot3 GLEW_GET_VAR(__GLEW_EXT_texture_env_dot3)
+-
+-#endif /* GL_EXT_texture_env_dot3 */
+-
+-/* ------------------- GL_EXT_texture_filter_anisotropic ------------------- */
+-
+-#ifndef GL_EXT_texture_filter_anisotropic
+-#define GL_EXT_texture_filter_anisotropic 1
+-
+-#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
+-#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
+-
+-#define GLEW_EXT_texture_filter_anisotropic GLEW_GET_VAR(__GLEW_EXT_texture_filter_anisotropic)
+-
+-#endif /* GL_EXT_texture_filter_anisotropic */
+-
+-/* ------------------------- GL_EXT_texture_integer ------------------------ */
+-
+-#ifndef GL_EXT_texture_integer
+-#define GL_EXT_texture_integer 1
+-
+-#define GL_RGBA32UI_EXT 0x8D70
+-#define GL_RGB32UI_EXT 0x8D71
+-#define GL_ALPHA32UI_EXT 0x8D72
+-#define GL_INTENSITY32UI_EXT 0x8D73
+-#define GL_LUMINANCE32UI_EXT 0x8D74
+-#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
+-#define GL_RGBA16UI_EXT 0x8D76
+-#define GL_RGB16UI_EXT 0x8D77
+-#define GL_ALPHA16UI_EXT 0x8D78
+-#define GL_INTENSITY16UI_EXT 0x8D79
+-#define GL_LUMINANCE16UI_EXT 0x8D7A
+-#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
+-#define GL_RGBA8UI_EXT 0x8D7C
+-#define GL_RGB8UI_EXT 0x8D7D
+-#define GL_ALPHA8UI_EXT 0x8D7E
+-#define GL_INTENSITY8UI_EXT 0x8D7F
+-#define GL_LUMINANCE8UI_EXT 0x8D80
+-#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
+-#define GL_RGBA32I_EXT 0x8D82
+-#define GL_RGB32I_EXT 0x8D83
+-#define GL_ALPHA32I_EXT 0x8D84
+-#define GL_INTENSITY32I_EXT 0x8D85
+-#define GL_LUMINANCE32I_EXT 0x8D86
+-#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
+-#define GL_RGBA16I_EXT 0x8D88
+-#define GL_RGB16I_EXT 0x8D89
+-#define GL_ALPHA16I_EXT 0x8D8A
+-#define GL_INTENSITY16I_EXT 0x8D8B
+-#define GL_LUMINANCE16I_EXT 0x8D8C
+-#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
+-#define GL_RGBA8I_EXT 0x8D8E
+-#define GL_RGB8I_EXT 0x8D8F
+-#define GL_ALPHA8I_EXT 0x8D90
+-#define GL_INTENSITY8I_EXT 0x8D91
+-#define GL_LUMINANCE8I_EXT 0x8D92
+-#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
+-#define GL_RED_INTEGER_EXT 0x8D94
+-#define GL_GREEN_INTEGER_EXT 0x8D95
+-#define GL_BLUE_INTEGER_EXT 0x8D96
+-#define GL_ALPHA_INTEGER_EXT 0x8D97
+-#define GL_RGB_INTEGER_EXT 0x8D98
+-#define GL_RGBA_INTEGER_EXT 0x8D99
+-#define GL_BGR_INTEGER_EXT 0x8D9A
+-#define GL_BGRA_INTEGER_EXT 0x8D9B
+-#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
+-#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
+-#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
+-
+-typedef void (GLAPIENTRY * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
+-typedef void (GLAPIENTRY * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
+-typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
+-typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
+-typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
+-
+-#define glClearColorIiEXT GLEW_GET_FUN(__glewClearColorIiEXT)
+-#define glClearColorIuiEXT GLEW_GET_FUN(__glewClearColorIuiEXT)
+-#define glGetTexParameterIivEXT GLEW_GET_FUN(__glewGetTexParameterIivEXT)
+-#define glGetTexParameterIuivEXT GLEW_GET_FUN(__glewGetTexParameterIuivEXT)
+-#define glTexParameterIivEXT GLEW_GET_FUN(__glewTexParameterIivEXT)
+-#define glTexParameterIuivEXT GLEW_GET_FUN(__glewTexParameterIuivEXT)
+-
+-#define GLEW_EXT_texture_integer GLEW_GET_VAR(__GLEW_EXT_texture_integer)
+-
+-#endif /* GL_EXT_texture_integer */
+-
+-/* ------------------------ GL_EXT_texture_lod_bias ------------------------ */
+-
+-#ifndef GL_EXT_texture_lod_bias
+-#define GL_EXT_texture_lod_bias 1
+-
+-#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
+-#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
+-#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
+-
+-#define GLEW_EXT_texture_lod_bias GLEW_GET_VAR(__GLEW_EXT_texture_lod_bias)
+-
+-#endif /* GL_EXT_texture_lod_bias */
+-
+-/* ---------------------- GL_EXT_texture_mirror_clamp ---------------------- */
+-
+-#ifndef GL_EXT_texture_mirror_clamp
+-#define GL_EXT_texture_mirror_clamp 1
+-
+-#define GL_MIRROR_CLAMP_EXT 0x8742
+-#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
+-#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
+-
+-#define GLEW_EXT_texture_mirror_clamp GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp)
+-
+-#endif /* GL_EXT_texture_mirror_clamp */
+-
+-/* ------------------------- GL_EXT_texture_object ------------------------- */
+-
+-#ifndef GL_EXT_texture_object
+-#define GL_EXT_texture_object 1
+-
+-#define GL_TEXTURE_PRIORITY_EXT 0x8066
+-#define GL_TEXTURE_RESIDENT_EXT 0x8067
+-#define GL_TEXTURE_1D_BINDING_EXT 0x8068
+-#define GL_TEXTURE_2D_BINDING_EXT 0x8069
+-#define GL_TEXTURE_3D_BINDING_EXT 0x806A
+-
+-typedef GLboolean (GLAPIENTRY * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint* textures, GLboolean* residences);
+-typedef void (GLAPIENTRY * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
+-typedef void (GLAPIENTRY * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint* textures);
+-typedef void (GLAPIENTRY * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint* textures);
+-typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREEXTPROC) (GLuint texture);
+-typedef void (GLAPIENTRY * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint* textures, const GLclampf* priorities);
+-
+-#define glAreTexturesResidentEXT GLEW_GET_FUN(__glewAreTexturesResidentEXT)
+-#define glBindTextureEXT GLEW_GET_FUN(__glewBindTextureEXT)
+-#define glDeleteTexturesEXT GLEW_GET_FUN(__glewDeleteTexturesEXT)
+-#define glGenTexturesEXT GLEW_GET_FUN(__glewGenTexturesEXT)
+-#define glIsTextureEXT GLEW_GET_FUN(__glewIsTextureEXT)
+-#define glPrioritizeTexturesEXT GLEW_GET_FUN(__glewPrioritizeTexturesEXT)
+-
+-#define GLEW_EXT_texture_object GLEW_GET_VAR(__GLEW_EXT_texture_object)
+-
+-#endif /* GL_EXT_texture_object */
+-
+-/* --------------------- GL_EXT_texture_perturb_normal --------------------- */
+-
+-#ifndef GL_EXT_texture_perturb_normal
+-#define GL_EXT_texture_perturb_normal 1
+-
+-#define GL_PERTURB_EXT 0x85AE
+-#define GL_TEXTURE_NORMAL_EXT 0x85AF
+-
+-typedef void (GLAPIENTRY * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
+-
+-#define glTextureNormalEXT GLEW_GET_FUN(__glewTextureNormalEXT)
+-
+-#define GLEW_EXT_texture_perturb_normal GLEW_GET_VAR(__GLEW_EXT_texture_perturb_normal)
+-
+-#endif /* GL_EXT_texture_perturb_normal */
+-
+-/* ------------------------ GL_EXT_texture_rectangle ----------------------- */
+-
+-#ifndef GL_EXT_texture_rectangle
+-#define GL_EXT_texture_rectangle 1
+-
+-#define GL_TEXTURE_RECTANGLE_EXT 0x84F5
+-#define GL_TEXTURE_BINDING_RECTANGLE_EXT 0x84F6
+-#define GL_PROXY_TEXTURE_RECTANGLE_EXT 0x84F7
+-#define GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT 0x84F8
+-
+-#define GLEW_EXT_texture_rectangle GLEW_GET_VAR(__GLEW_EXT_texture_rectangle)
+-
+-#endif /* GL_EXT_texture_rectangle */
+-
+-/* -------------------------- GL_EXT_texture_sRGB -------------------------- */
+-
+-#ifndef GL_EXT_texture_sRGB
+-#define GL_EXT_texture_sRGB 1
+-
+-#define GL_SRGB_EXT 0x8C40
+-#define GL_SRGB8_EXT 0x8C41
+-#define GL_SRGB_ALPHA_EXT 0x8C42
+-#define GL_SRGB8_ALPHA8_EXT 0x8C43
+-#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
+-#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
+-#define GL_SLUMINANCE_EXT 0x8C46
+-#define GL_SLUMINANCE8_EXT 0x8C47
+-#define GL_COMPRESSED_SRGB_EXT 0x8C48
+-#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
+-#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
+-#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
+-#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
+-#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
+-#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
+-#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
+-
+-#define GLEW_EXT_texture_sRGB GLEW_GET_VAR(__GLEW_EXT_texture_sRGB)
+-
+-#endif /* GL_EXT_texture_sRGB */
+-
+-/* --------------------- GL_EXT_texture_shared_exponent -------------------- */
+-
+-#ifndef GL_EXT_texture_shared_exponent
+-#define GL_EXT_texture_shared_exponent 1
+-
+-#define GL_RGB9_E5_EXT 0x8C3D
+-#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
+-#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
+-
+-#define GLEW_EXT_texture_shared_exponent GLEW_GET_VAR(__GLEW_EXT_texture_shared_exponent)
+-
+-#endif /* GL_EXT_texture_shared_exponent */
+-
+-/* --------------------------- GL_EXT_timer_query -------------------------- */
+-
+-#ifndef GL_EXT_timer_query
+-#define GL_EXT_timer_query 1
+-
+-#define GL_TIME_ELAPSED_EXT 0x88BF
+-
+-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
+-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);
+-
+-#define glGetQueryObjecti64vEXT GLEW_GET_FUN(__glewGetQueryObjecti64vEXT)
+-#define glGetQueryObjectui64vEXT GLEW_GET_FUN(__glewGetQueryObjectui64vEXT)
+-
+-#define GLEW_EXT_timer_query GLEW_GET_VAR(__GLEW_EXT_timer_query)
+-
+-#endif /* GL_EXT_timer_query */
+-
+-/* -------------------------- GL_EXT_vertex_array -------------------------- */
+-
+-#ifndef GL_EXT_vertex_array
+-#define GL_EXT_vertex_array 1
+-
+-#define GL_DOUBLE_EXT 0x140A
+-#define GL_VERTEX_ARRAY_EXT 0x8074
+-#define GL_NORMAL_ARRAY_EXT 0x8075
+-#define GL_COLOR_ARRAY_EXT 0x8076
+-#define GL_INDEX_ARRAY_EXT 0x8077
+-#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
+-#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
+-#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
+-#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
+-#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
+-#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
+-#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
+-#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
+-#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
+-#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
+-#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
+-#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
+-#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
+-#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
+-#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
+-#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
+-#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
+-#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
+-#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
+-#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
+-#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
+-#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
+-#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
+-#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
+-#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
+-#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
+-#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
+-#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
+-
+-typedef void (GLAPIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i);
+-typedef void (GLAPIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
+-typedef void (GLAPIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
+-typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean* pointer);
+-typedef void (GLAPIENTRY * PFNGLGETPOINTERVEXTPROC) (GLenum pname, void** params);
+-typedef void (GLAPIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void* pointer);
+-typedef void (GLAPIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void* pointer);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
+-typedef void (GLAPIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
+-
+-#define glArrayElementEXT GLEW_GET_FUN(__glewArrayElementEXT)
+-#define glColorPointerEXT GLEW_GET_FUN(__glewColorPointerEXT)
+-#define glDrawArraysEXT GLEW_GET_FUN(__glewDrawArraysEXT)
+-#define glEdgeFlagPointerEXT GLEW_GET_FUN(__glewEdgeFlagPointerEXT)
+-#define glGetPointervEXT GLEW_GET_FUN(__glewGetPointervEXT)
+-#define glIndexPointerEXT GLEW_GET_FUN(__glewIndexPointerEXT)
+-#define glNormalPointerEXT GLEW_GET_FUN(__glewNormalPointerEXT)
+-#define glTexCoordPointerEXT GLEW_GET_FUN(__glewTexCoordPointerEXT)
+-#define glVertexPointerEXT GLEW_GET_FUN(__glewVertexPointerEXT)
+-
+-#define GLEW_EXT_vertex_array GLEW_GET_VAR(__GLEW_EXT_vertex_array)
+-
+-#endif /* GL_EXT_vertex_array */
+-
+-/* -------------------------- GL_EXT_vertex_shader ------------------------- */
+-
+-#ifndef GL_EXT_vertex_shader
+-#define GL_EXT_vertex_shader 1
+-
+-#define GL_VERTEX_SHADER_EXT 0x8780
+-#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
+-#define GL_OP_INDEX_EXT 0x8782
+-#define GL_OP_NEGATE_EXT 0x8783
+-#define GL_OP_DOT3_EXT 0x8784
+-#define GL_OP_DOT4_EXT 0x8785
+-#define GL_OP_MUL_EXT 0x8786
+-#define GL_OP_ADD_EXT 0x8787
+-#define GL_OP_MADD_EXT 0x8788
+-#define GL_OP_FRAC_EXT 0x8789
+-#define GL_OP_MAX_EXT 0x878A
+-#define GL_OP_MIN_EXT 0x878B
+-#define GL_OP_SET_GE_EXT 0x878C
+-#define GL_OP_SET_LT_EXT 0x878D
+-#define GL_OP_CLAMP_EXT 0x878E
+-#define GL_OP_FLOOR_EXT 0x878F
+-#define GL_OP_ROUND_EXT 0x8790
+-#define GL_OP_EXP_BASE_2_EXT 0x8791
+-#define GL_OP_LOG_BASE_2_EXT 0x8792
+-#define GL_OP_POWER_EXT 0x8793
+-#define GL_OP_RECIP_EXT 0x8794
+-#define GL_OP_RECIP_SQRT_EXT 0x8795
+-#define GL_OP_SUB_EXT 0x8796
+-#define GL_OP_CROSS_PRODUCT_EXT 0x8797
+-#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
+-#define GL_OP_MOV_EXT 0x8799
+-#define GL_OUTPUT_VERTEX_EXT 0x879A
+-#define GL_OUTPUT_COLOR0_EXT 0x879B
+-#define GL_OUTPUT_COLOR1_EXT 0x879C
+-#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
+-#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
+-#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
+-#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
+-#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
+-#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
+-#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
+-#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
+-#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
+-#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
+-#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
+-#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
+-#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
+-#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
+-#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
+-#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
+-#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
+-#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
+-#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
+-#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
+-#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
+-#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
+-#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
+-#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
+-#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
+-#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
+-#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
+-#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
+-#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
+-#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
+-#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
+-#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
+-#define GL_OUTPUT_FOG_EXT 0x87BD
+-#define GL_SCALAR_EXT 0x87BE
+-#define GL_VECTOR_EXT 0x87BF
+-#define GL_MATRIX_EXT 0x87C0
+-#define GL_VARIANT_EXT 0x87C1
+-#define GL_INVARIANT_EXT 0x87C2
+-#define GL_LOCAL_CONSTANT_EXT 0x87C3
+-#define GL_LOCAL_EXT 0x87C4
+-#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
+-#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
+-#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
+-#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
+-#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
+-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
+-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
+-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CC
+-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CD
+-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
+-#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
+-#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
+-#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
+-#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
+-#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
+-#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
+-#define GL_X_EXT 0x87D5
+-#define GL_Y_EXT 0x87D6
+-#define GL_Z_EXT 0x87D7
+-#define GL_W_EXT 0x87D8
+-#define GL_NEGATIVE_X_EXT 0x87D9
+-#define GL_NEGATIVE_Y_EXT 0x87DA
+-#define GL_NEGATIVE_Z_EXT 0x87DB
+-#define GL_NEGATIVE_W_EXT 0x87DC
+-#define GL_ZERO_EXT 0x87DD
+-#define GL_ONE_EXT 0x87DE
+-#define GL_NEGATIVE_ONE_EXT 0x87DF
+-#define GL_NORMALIZED_RANGE_EXT 0x87E0
+-#define GL_FULL_RANGE_EXT 0x87E1
+-#define GL_CURRENT_VERTEX_EXT 0x87E2
+-#define GL_MVP_MATRIX_EXT 0x87E3
+-#define GL_VARIANT_VALUE_EXT 0x87E4
+-#define GL_VARIANT_DATATYPE_EXT 0x87E5
+-#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
+-#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
+-#define GL_VARIANT_ARRAY_EXT 0x87E8
+-#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
+-#define GL_INVARIANT_VALUE_EXT 0x87EA
+-#define GL_INVARIANT_DATATYPE_EXT 0x87EB
+-#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
+-#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
+-
+-typedef void (GLAPIENTRY * PFNGLBEGINVERTEXSHADEREXTPROC) (void);
+-typedef GLuint (GLAPIENTRY * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
+-typedef GLuint (GLAPIENTRY * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
+-typedef GLuint (GLAPIENTRY * PFNGLBINDPARAMETEREXTPROC) (GLenum value);
+-typedef GLuint (GLAPIENTRY * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
+-typedef GLuint (GLAPIENTRY * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
+-typedef void (GLAPIENTRY * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLENDVERTEXSHADEREXTPROC) (void);
+-typedef void (GLAPIENTRY * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
+-typedef GLuint (GLAPIENTRY * PFNGLGENSYMBOLSEXTPROC) (GLenum dataType, GLenum storageType, GLenum range, GLuint components);
+-typedef GLuint (GLAPIENTRY * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
+-typedef void (GLAPIENTRY * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
+-typedef void (GLAPIENTRY * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
+-typedef void (GLAPIENTRY * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
+-typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
+-typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
+-typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
+-typedef void (GLAPIENTRY * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
+-typedef void (GLAPIENTRY * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
+-typedef void (GLAPIENTRY * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
+-typedef void (GLAPIENTRY * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid **data);
+-typedef void (GLAPIENTRY * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
+-typedef GLboolean (GLAPIENTRY * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
+-typedef void (GLAPIENTRY * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, GLvoid *addr);
+-typedef void (GLAPIENTRY * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, GLvoid *addr);
+-typedef void (GLAPIENTRY * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
+-typedef void (GLAPIENTRY * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
+-typedef void (GLAPIENTRY * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
+-typedef void (GLAPIENTRY * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+-typedef void (GLAPIENTRY * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, GLvoid *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTBVEXTPROC) (GLuint id, GLbyte *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTDVEXTPROC) (GLuint id, GLdouble *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTFVEXTPROC) (GLuint id, GLfloat *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTIVEXTPROC) (GLuint id, GLint *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTSVEXTPROC) (GLuint id, GLshort *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTUBVEXTPROC) (GLuint id, GLubyte *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTUIVEXTPROC) (GLuint id, GLuint *addr);
+-typedef void (GLAPIENTRY * PFNGLVARIANTUSVEXTPROC) (GLuint id, GLushort *addr);
+-typedef void (GLAPIENTRY * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+-
+-#define glBeginVertexShaderEXT GLEW_GET_FUN(__glewBeginVertexShaderEXT)
+-#define glBindLightParameterEXT GLEW_GET_FUN(__glewBindLightParameterEXT)
+-#define glBindMaterialParameterEXT GLEW_GET_FUN(__glewBindMaterialParameterEXT)
+-#define glBindParameterEXT GLEW_GET_FUN(__glewBindParameterEXT)
+-#define glBindTexGenParameterEXT GLEW_GET_FUN(__glewBindTexGenParameterEXT)
+-#define glBindTextureUnitParameterEXT GLEW_GET_FUN(__glewBindTextureUnitParameterEXT)
+-#define glBindVertexShaderEXT GLEW_GET_FUN(__glewBindVertexShaderEXT)
+-#define glDeleteVertexShaderEXT GLEW_GET_FUN(__glewDeleteVertexShaderEXT)
+-#define glDisableVariantClientStateEXT GLEW_GET_FUN(__glewDisableVariantClientStateEXT)
+-#define glEnableVariantClientStateEXT GLEW_GET_FUN(__glewEnableVariantClientStateEXT)
+-#define glEndVertexShaderEXT GLEW_GET_FUN(__glewEndVertexShaderEXT)
+-#define glExtractComponentEXT GLEW_GET_FUN(__glewExtractComponentEXT)
+-#define glGenSymbolsEXT GLEW_GET_FUN(__glewGenSymbolsEXT)
+-#define glGenVertexShadersEXT GLEW_GET_FUN(__glewGenVertexShadersEXT)
+-#define glGetInvariantBooleanvEXT GLEW_GET_FUN(__glewGetInvariantBooleanvEXT)
+-#define glGetInvariantFloatvEXT GLEW_GET_FUN(__glewGetInvariantFloatvEXT)
+-#define glGetInvariantIntegervEXT GLEW_GET_FUN(__glewGetInvariantIntegervEXT)
+-#define glGetLocalConstantBooleanvEXT GLEW_GET_FUN(__glewGetLocalConstantBooleanvEXT)
+-#define glGetLocalConstantFloatvEXT GLEW_GET_FUN(__glewGetLocalConstantFloatvEXT)
+-#define glGetLocalConstantIntegervEXT GLEW_GET_FUN(__glewGetLocalConstantIntegervEXT)
+-#define glGetVariantBooleanvEXT GLEW_GET_FUN(__glewGetVariantBooleanvEXT)
+-#define glGetVariantFloatvEXT GLEW_GET_FUN(__glewGetVariantFloatvEXT)
+-#define glGetVariantIntegervEXT GLEW_GET_FUN(__glewGetVariantIntegervEXT)
+-#define glGetVariantPointervEXT GLEW_GET_FUN(__glewGetVariantPointervEXT)
+-#define glInsertComponentEXT GLEW_GET_FUN(__glewInsertComponentEXT)
+-#define glIsVariantEnabledEXT GLEW_GET_FUN(__glewIsVariantEnabledEXT)
+-#define glSetInvariantEXT GLEW_GET_FUN(__glewSetInvariantEXT)
+-#define glSetLocalConstantEXT GLEW_GET_FUN(__glewSetLocalConstantEXT)
+-#define glShaderOp1EXT GLEW_GET_FUN(__glewShaderOp1EXT)
+-#define glShaderOp2EXT GLEW_GET_FUN(__glewShaderOp2EXT)
+-#define glShaderOp3EXT GLEW_GET_FUN(__glewShaderOp3EXT)
+-#define glSwizzleEXT GLEW_GET_FUN(__glewSwizzleEXT)
+-#define glVariantPointerEXT GLEW_GET_FUN(__glewVariantPointerEXT)
+-#define glVariantbvEXT GLEW_GET_FUN(__glewVariantbvEXT)
+-#define glVariantdvEXT GLEW_GET_FUN(__glewVariantdvEXT)
+-#define glVariantfvEXT GLEW_GET_FUN(__glewVariantfvEXT)
+-#define glVariantivEXT GLEW_GET_FUN(__glewVariantivEXT)
+-#define glVariantsvEXT GLEW_GET_FUN(__glewVariantsvEXT)
+-#define glVariantubvEXT GLEW_GET_FUN(__glewVariantubvEXT)
+-#define glVariantuivEXT GLEW_GET_FUN(__glewVariantuivEXT)
+-#define glVariantusvEXT GLEW_GET_FUN(__glewVariantusvEXT)
+-#define glWriteMaskEXT GLEW_GET_FUN(__glewWriteMaskEXT)
+-
+-#define GLEW_EXT_vertex_shader GLEW_GET_VAR(__GLEW_EXT_vertex_shader)
+-
+-#endif /* GL_EXT_vertex_shader */
+-
+-/* ------------------------ GL_EXT_vertex_weighting ------------------------ */
+-
+-#ifndef GL_EXT_vertex_weighting
+-#define GL_EXT_vertex_weighting 1
+-
+-#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
+-#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
+-#define GL_MODELVIEW0_EXT 0x1700
+-#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
+-#define GL_MODELVIEW1_MATRIX_EXT 0x8506
+-#define GL_VERTEX_WEIGHTING_EXT 0x8509
+-#define GL_MODELVIEW1_EXT 0x850A
+-#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
+-#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
+-#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
+-#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
+-#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
+-#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
+-
+-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, void* pointer);
+-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
+-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFVEXTPROC) (GLfloat* weight);
+-
+-#define glVertexWeightPointerEXT GLEW_GET_FUN(__glewVertexWeightPointerEXT)
+-#define glVertexWeightfEXT GLEW_GET_FUN(__glewVertexWeightfEXT)
+-#define glVertexWeightfvEXT GLEW_GET_FUN(__glewVertexWeightfvEXT)
+-
+-#define GLEW_EXT_vertex_weighting GLEW_GET_VAR(__GLEW_EXT_vertex_weighting)
+-
+-#endif /* GL_EXT_vertex_weighting */
+-
+-/* ---------------------- GL_GREMEDY_frame_terminator ---------------------- */
+-
+-#ifndef GL_GREMEDY_frame_terminator
+-#define GL_GREMEDY_frame_terminator 1
+-
+-typedef void (GLAPIENTRY * PFNGLFRAMETERMINATORGREMEDYPROC) (void);
+-
+-#define glFrameTerminatorGREMEDY GLEW_GET_FUN(__glewFrameTerminatorGREMEDY)
+-
+-#define GLEW_GREMEDY_frame_terminator GLEW_GET_VAR(__GLEW_GREMEDY_frame_terminator)
+-
+-#endif /* GL_GREMEDY_frame_terminator */
+-
+-/* ------------------------ GL_GREMEDY_string_marker ----------------------- */
+-
+-#ifndef GL_GREMEDY_string_marker
+-#define GL_GREMEDY_string_marker 1
+-
+-typedef void (GLAPIENTRY * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void* string);
+-
+-#define glStringMarkerGREMEDY GLEW_GET_FUN(__glewStringMarkerGREMEDY)
+-
+-#define GLEW_GREMEDY_string_marker GLEW_GET_VAR(__GLEW_GREMEDY_string_marker)
+-
+-#endif /* GL_GREMEDY_string_marker */
+-
+-/* --------------------- GL_HP_convolution_border_modes -------------------- */
+-
+-#ifndef GL_HP_convolution_border_modes
+-#define GL_HP_convolution_border_modes 1
+-
+-#define GLEW_HP_convolution_border_modes GLEW_GET_VAR(__GLEW_HP_convolution_border_modes)
+-
+-#endif /* GL_HP_convolution_border_modes */
+-
+-/* ------------------------- GL_HP_image_transform ------------------------- */
+-
+-#ifndef GL_HP_image_transform
+-#define GL_HP_image_transform 1
+-
+-typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, const GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, const GLint param);
+-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
+-
+-#define glGetImageTransformParameterfvHP GLEW_GET_FUN(__glewGetImageTransformParameterfvHP)
+-#define glGetImageTransformParameterivHP GLEW_GET_FUN(__glewGetImageTransformParameterivHP)
+-#define glImageTransformParameterfHP GLEW_GET_FUN(__glewImageTransformParameterfHP)
+-#define glImageTransformParameterfvHP GLEW_GET_FUN(__glewImageTransformParameterfvHP)
+-#define glImageTransformParameteriHP GLEW_GET_FUN(__glewImageTransformParameteriHP)
+-#define glImageTransformParameterivHP GLEW_GET_FUN(__glewImageTransformParameterivHP)
+-
+-#define GLEW_HP_image_transform GLEW_GET_VAR(__GLEW_HP_image_transform)
+-
+-#endif /* GL_HP_image_transform */
+-
+-/* -------------------------- GL_HP_occlusion_test ------------------------- */
+-
+-#ifndef GL_HP_occlusion_test
+-#define GL_HP_occlusion_test 1
+-
+-#define GL_OCCLUSION_TEST_HP 0x8165
+-#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
+-
+-#define GLEW_HP_occlusion_test GLEW_GET_VAR(__GLEW_HP_occlusion_test)
+-
+-#endif /* GL_HP_occlusion_test */
+-
+-/* ------------------------- GL_HP_texture_lighting ------------------------ */
+-
+-#ifndef GL_HP_texture_lighting
+-#define GL_HP_texture_lighting 1
+-
+-#define GLEW_HP_texture_lighting GLEW_GET_VAR(__GLEW_HP_texture_lighting)
+-
+-#endif /* GL_HP_texture_lighting */
+-
+-/* --------------------------- GL_IBM_cull_vertex -------------------------- */
+-
+-#ifndef GL_IBM_cull_vertex
+-#define GL_IBM_cull_vertex 1
+-
+-#define GL_CULL_VERTEX_IBM 103050
+-
+-#define GLEW_IBM_cull_vertex GLEW_GET_VAR(__GLEW_IBM_cull_vertex)
+-
+-#endif /* GL_IBM_cull_vertex */
+-
+-/* ---------------------- GL_IBM_multimode_draw_arrays --------------------- */
+-
+-#ifndef GL_IBM_multimode_draw_arrays
+-#define GL_IBM_multimode_draw_arrays 1
+-
+-typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
+-typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum* mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);
+-
+-#define glMultiModeDrawArraysIBM GLEW_GET_FUN(__glewMultiModeDrawArraysIBM)
+-#define glMultiModeDrawElementsIBM GLEW_GET_FUN(__glewMultiModeDrawElementsIBM)
+-
+-#define GLEW_IBM_multimode_draw_arrays GLEW_GET_VAR(__GLEW_IBM_multimode_draw_arrays)
+-
+-#endif /* GL_IBM_multimode_draw_arrays */
+-
+-/* ------------------------- GL_IBM_rasterpos_clip ------------------------- */
+-
+-#ifndef GL_IBM_rasterpos_clip
+-#define GL_IBM_rasterpos_clip 1
+-
+-#define GL_RASTER_POSITION_UNCLIPPED_IBM 103010
+-
+-#define GLEW_IBM_rasterpos_clip GLEW_GET_VAR(__GLEW_IBM_rasterpos_clip)
+-
+-#endif /* GL_IBM_rasterpos_clip */
+-
+-/* --------------------------- GL_IBM_static_data -------------------------- */
+-
+-#ifndef GL_IBM_static_data
+-#define GL_IBM_static_data 1
+-
+-#define GL_ALL_STATIC_DATA_IBM 103060
+-#define GL_STATIC_VERTEX_ARRAY_IBM 103061
+-
+-#define GLEW_IBM_static_data GLEW_GET_VAR(__GLEW_IBM_static_data)
+-
+-#endif /* GL_IBM_static_data */
+-
+-/* --------------------- GL_IBM_texture_mirrored_repeat -------------------- */
+-
+-#ifndef GL_IBM_texture_mirrored_repeat
+-#define GL_IBM_texture_mirrored_repeat 1
+-
+-#define GL_MIRRORED_REPEAT_IBM 0x8370
+-
+-#define GLEW_IBM_texture_mirrored_repeat GLEW_GET_VAR(__GLEW_IBM_texture_mirrored_repeat)
+-
+-#endif /* GL_IBM_texture_mirrored_repeat */
+-
+-/* ----------------------- GL_IBM_vertex_array_lists ----------------------- */
+-
+-#ifndef GL_IBM_vertex_array_lists
+-#define GL_IBM_vertex_array_lists 1
+-
+-#define GL_VERTEX_ARRAY_LIST_IBM 103070
+-#define GL_NORMAL_ARRAY_LIST_IBM 103071
+-#define GL_COLOR_ARRAY_LIST_IBM 103072
+-#define GL_INDEX_ARRAY_LIST_IBM 103073
+-#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
+-#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
+-#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
+-#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
+-#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
+-#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
+-#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
+-#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
+-#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
+-#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
+-#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
+-#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
+-
+-typedef void (GLAPIENTRY * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
+-typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean ** pointer, GLint ptrstride);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
+-typedef void (GLAPIENTRY * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
+-typedef void (GLAPIENTRY * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
+-typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
+-
+-#define glColorPointerListIBM GLEW_GET_FUN(__glewColorPointerListIBM)
+-#define glEdgeFlagPointerListIBM GLEW_GET_FUN(__glewEdgeFlagPointerListIBM)
+-#define glFogCoordPointerListIBM GLEW_GET_FUN(__glewFogCoordPointerListIBM)
+-#define glIndexPointerListIBM GLEW_GET_FUN(__glewIndexPointerListIBM)
+-#define glNormalPointerListIBM GLEW_GET_FUN(__glewNormalPointerListIBM)
+-#define glSecondaryColorPointerListIBM GLEW_GET_FUN(__glewSecondaryColorPointerListIBM)
+-#define glTexCoordPointerListIBM GLEW_GET_FUN(__glewTexCoordPointerListIBM)
+-#define glVertexPointerListIBM GLEW_GET_FUN(__glewVertexPointerListIBM)
+-
+-#define GLEW_IBM_vertex_array_lists GLEW_GET_VAR(__GLEW_IBM_vertex_array_lists)
+-
+-#endif /* GL_IBM_vertex_array_lists */
+-
+-/* -------------------------- GL_INGR_color_clamp -------------------------- */
+-
+-#ifndef GL_INGR_color_clamp
+-#define GL_INGR_color_clamp 1
+-
+-#define GL_RED_MIN_CLAMP_INGR 0x8560
+-#define GL_GREEN_MIN_CLAMP_INGR 0x8561
+-#define GL_BLUE_MIN_CLAMP_INGR 0x8562
+-#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
+-#define GL_RED_MAX_CLAMP_INGR 0x8564
+-#define GL_GREEN_MAX_CLAMP_INGR 0x8565
+-#define GL_BLUE_MAX_CLAMP_INGR 0x8566
+-#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
+-
+-#define GLEW_INGR_color_clamp GLEW_GET_VAR(__GLEW_INGR_color_clamp)
+-
+-#endif /* GL_INGR_color_clamp */
+-
+-/* ------------------------- GL_INGR_interlace_read ------------------------ */
+-
+-#ifndef GL_INGR_interlace_read
+-#define GL_INGR_interlace_read 1
+-
+-#define GL_INTERLACE_READ_INGR 0x8568
+-
+-#define GLEW_INGR_interlace_read GLEW_GET_VAR(__GLEW_INGR_interlace_read)
+-
+-#endif /* GL_INGR_interlace_read */
+-
+-/* ------------------------ GL_INTEL_parallel_arrays ----------------------- */
+-
+-#ifndef GL_INTEL_parallel_arrays
+-#define GL_INTEL_parallel_arrays 1
+-
+-#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
+-#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
+-#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
+-#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
+-#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
+-
+-typedef void (GLAPIENTRY * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
+-typedef void (GLAPIENTRY * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void** pointer);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
+-typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
+-
+-#define glColorPointervINTEL GLEW_GET_FUN(__glewColorPointervINTEL)
+-#define glNormalPointervINTEL GLEW_GET_FUN(__glewNormalPointervINTEL)
+-#define glTexCoordPointervINTEL GLEW_GET_FUN(__glewTexCoordPointervINTEL)
+-#define glVertexPointervINTEL GLEW_GET_FUN(__glewVertexPointervINTEL)
+-
+-#define GLEW_INTEL_parallel_arrays GLEW_GET_VAR(__GLEW_INTEL_parallel_arrays)
+-
+-#endif /* GL_INTEL_parallel_arrays */
+-
+-/* ------------------------ GL_INTEL_texture_scissor ----------------------- */
+-
+-#ifndef GL_INTEL_texture_scissor
+-#define GL_INTEL_texture_scissor 1
+-
+-typedef void (GLAPIENTRY * PFNGLTEXSCISSORFUNCINTELPROC) (GLenum target, GLenum lfunc, GLenum hfunc);
+-typedef void (GLAPIENTRY * PFNGLTEXSCISSORINTELPROC) (GLenum target, GLclampf tlow, GLclampf thigh);
+-
+-#define glTexScissorFuncINTEL GLEW_GET_FUN(__glewTexScissorFuncINTEL)
+-#define glTexScissorINTEL GLEW_GET_FUN(__glewTexScissorINTEL)
+-
+-#define GLEW_INTEL_texture_scissor GLEW_GET_VAR(__GLEW_INTEL_texture_scissor)
+-
+-#endif /* GL_INTEL_texture_scissor */
+-
+-/* -------------------------- GL_KTX_buffer_region ------------------------- */
+-
+-#ifndef GL_KTX_buffer_region
+-#define GL_KTX_buffer_region 1
+-
+-#define GL_KTX_FRONT_REGION 0x0
+-#define GL_KTX_BACK_REGION 0x1
+-#define GL_KTX_Z_REGION 0x2
+-#define GL_KTX_STENCIL_REGION 0x3
+-
+-typedef GLuint (GLAPIENTRY * PFNGLBUFFERREGIONENABLEDEXTPROC) (void);
+-typedef void (GLAPIENTRY * PFNGLDELETEBUFFERREGIONEXTPROC) (GLenum region);
+-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERREGIONEXTPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);
+-typedef GLuint (GLAPIENTRY * PFNGLNEWBUFFERREGIONEXTPROC) (GLenum region);
+-typedef void (GLAPIENTRY * PFNGLREADBUFFERREGIONEXTPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height);
+-
+-#define glBufferRegionEnabledEXT GLEW_GET_FUN(__glewBufferRegionEnabledEXT)
+-#define glDeleteBufferRegionEXT GLEW_GET_FUN(__glewDeleteBufferRegionEXT)
+-#define glDrawBufferRegionEXT GLEW_GET_FUN(__glewDrawBufferRegionEXT)
+-#define glNewBufferRegionEXT GLEW_GET_FUN(__glewNewBufferRegionEXT)
+-#define glReadBufferRegionEXT GLEW_GET_FUN(__glewReadBufferRegionEXT)
+-
+-#define GLEW_KTX_buffer_region GLEW_GET_VAR(__GLEW_KTX_buffer_region)
+-
+-#endif /* GL_KTX_buffer_region */
+-
+-/* ------------------------- GL_MESAX_texture_stack ------------------------ */
+-
+-#ifndef GL_MESAX_texture_stack
+-#define GL_MESAX_texture_stack 1
+-
+-#define GL_TEXTURE_1D_STACK_MESAX 0x8759
+-#define GL_TEXTURE_2D_STACK_MESAX 0x875A
+-#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
+-#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
+-#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
+-#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
+-
+-#define GLEW_MESAX_texture_stack GLEW_GET_VAR(__GLEW_MESAX_texture_stack)
+-
+-#endif /* GL_MESAX_texture_stack */
+-
+-/* -------------------------- GL_MESA_pack_invert -------------------------- */
+-
+-#ifndef GL_MESA_pack_invert
+-#define GL_MESA_pack_invert 1
+-
+-#define GL_PACK_INVERT_MESA 0x8758
+-
+-#define GLEW_MESA_pack_invert GLEW_GET_VAR(__GLEW_MESA_pack_invert)
+-
+-#endif /* GL_MESA_pack_invert */
+-
+-/* ------------------------- GL_MESA_resize_buffers ------------------------ */
+-
+-#ifndef GL_MESA_resize_buffers
+-#define GL_MESA_resize_buffers 1
+-
+-typedef void (GLAPIENTRY * PFNGLRESIZEBUFFERSMESAPROC) (void);
+-
+-#define glResizeBuffersMESA GLEW_GET_FUN(__glewResizeBuffersMESA)
+-
+-#define GLEW_MESA_resize_buffers GLEW_GET_VAR(__GLEW_MESA_resize_buffers)
+-
+-#endif /* GL_MESA_resize_buffers */
+-
+-/* --------------------------- GL_MESA_window_pos -------------------------- */
+-
+-#ifndef GL_MESA_window_pos
+-#define GL_MESA_window_pos 1
+-
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVMESAPROC) (const GLint* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVMESAPROC) (const GLint* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IVMESAPROC) (const GLint* p);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
+-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort* p);
+-
+-#define glWindowPos2dMESA GLEW_GET_FUN(__glewWindowPos2dMESA)
+-#define glWindowPos2dvMESA GLEW_GET_FUN(__glewWindowPos2dvMESA)
+-#define glWindowPos2fMESA GLEW_GET_FUN(__glewWindowPos2fMESA)
+-#define glWindowPos2fvMESA GLEW_GET_FUN(__glewWindowPos2fvMESA)
+-#define glWindowPos2iMESA GLEW_GET_FUN(__glewWindowPos2iMESA)
+-#define glWindowPos2ivMESA GLEW_GET_FUN(__glewWindowPos2ivMESA)
+-#define glWindowPos2sMESA GLEW_GET_FUN(__glewWindowPos2sMESA)
+-#define glWindowPos2svMESA GLEW_GET_FUN(__glewWindowPos2svMESA)
+-#define glWindowPos3dMESA GLEW_GET_FUN(__glewWindowPos3dMESA)
+-#define glWindowPos3dvMESA GLEW_GET_FUN(__glewWindowPos3dvMESA)
+-#define glWindowPos3fMESA GLEW_GET_FUN(__glewWindowPos3fMESA)
+-#define glWindowPos3fvMESA GLEW_GET_FUN(__glewWindowPos3fvMESA)
+-#define glWindowPos3iMESA GLEW_GET_FUN(__glewWindowPos3iMESA)
+-#define glWindowPos3ivMESA GLEW_GET_FUN(__glewWindowPos3ivMESA)
+-#define glWindowPos3sMESA GLEW_GET_FUN(__glewWindowPos3sMESA)
+-#define glWindowPos3svMESA GLEW_GET_FUN(__glewWindowPos3svMESA)
+-#define glWindowPos4dMESA GLEW_GET_FUN(__glewWindowPos4dMESA)
+-#define glWindowPos4dvMESA GLEW_GET_FUN(__glewWindowPos4dvMESA)
+-#define glWindowPos4fMESA GLEW_GET_FUN(__glewWindowPos4fMESA)
+-#define glWindowPos4fvMESA GLEW_GET_FUN(__glewWindowPos4fvMESA)
+-#define glWindowPos4iMESA GLEW_GET_FUN(__glewWindowPos4iMESA)
+-#define glWindowPos4ivMESA GLEW_GET_FUN(__glewWindowPos4ivMESA)
+-#define glWindowPos4sMESA GLEW_GET_FUN(__glewWindowPos4sMESA)
+-#define glWindowPos4svMESA GLEW_GET_FUN(__glewWindowPos4svMESA)
+-
+-#define GLEW_MESA_window_pos GLEW_GET_VAR(__GLEW_MESA_window_pos)
+-
+-#endif /* GL_MESA_window_pos */
+-
+-/* ------------------------- GL_MESA_ycbcr_texture ------------------------- */
+-
+-#ifndef GL_MESA_ycbcr_texture
+-#define GL_MESA_ycbcr_texture 1
+-
+-#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
+-#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
+-#define GL_YCBCR_MESA 0x8757
+-
+-#define GLEW_MESA_ycbcr_texture GLEW_GET_VAR(__GLEW_MESA_ycbcr_texture)
+-
+-#endif /* GL_MESA_ycbcr_texture */
+-
+-/* --------------------------- GL_NV_blend_square -------------------------- */
+-
+-#ifndef GL_NV_blend_square
+-#define GL_NV_blend_square 1
+-
+-#define GLEW_NV_blend_square GLEW_GET_VAR(__GLEW_NV_blend_square)
+-
+-#endif /* GL_NV_blend_square */
+-
+-/* ----------------------- GL_NV_copy_depth_to_color ----------------------- */
+-
+-#ifndef GL_NV_copy_depth_to_color
+-#define GL_NV_copy_depth_to_color 1
+-
+-#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
+-#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
+-
+-#define GLEW_NV_copy_depth_to_color GLEW_GET_VAR(__GLEW_NV_copy_depth_to_color)
+-
+-#endif /* GL_NV_copy_depth_to_color */
+-
+-/* ------------------------ GL_NV_depth_buffer_float ----------------------- */
+-
+-#ifndef GL_NV_depth_buffer_float
+-#define GL_NV_depth_buffer_float 1
+-
+-#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
+-#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
+-#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
+-#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
+-
+-typedef void (GLAPIENTRY * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
+-typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
+-typedef void (GLAPIENTRY * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
+-
+-#define glClearDepthdNV GLEW_GET_FUN(__glewClearDepthdNV)
+-#define glDepthBoundsdNV GLEW_GET_FUN(__glewDepthBoundsdNV)
+-#define glDepthRangedNV GLEW_GET_FUN(__glewDepthRangedNV)
+-
+-#define GLEW_NV_depth_buffer_float GLEW_GET_VAR(__GLEW_NV_depth_buffer_float)
+-
+-#endif /* GL_NV_depth_buffer_float */
+-
+-/* --------------------------- GL_NV_depth_clamp --------------------------- */
+-
+-#ifndef GL_NV_depth_clamp
+-#define GL_NV_depth_clamp 1
+-
+-#define GL_DEPTH_CLAMP_NV 0x864F
+-
+-#define GLEW_NV_depth_clamp GLEW_GET_VAR(__GLEW_NV_depth_clamp)
+-
+-#endif /* GL_NV_depth_clamp */
+-
+-/* ---------------------- GL_NV_depth_range_unclamped ---------------------- */
+-
+-#ifndef GL_NV_depth_range_unclamped
+-#define GL_NV_depth_range_unclamped 1
+-
+-#define GL_SAMPLE_COUNT_BITS_NV 0x8864
+-#define GL_CURRENT_SAMPLE_COUNT_QUERY_NV 0x8865
+-#define GL_QUERY_RESULT_NV 0x8866
+-#define GL_QUERY_RESULT_AVAILABLE_NV 0x8867
+-#define GL_SAMPLE_COUNT_NV 0x8914
+-
+-#define GLEW_NV_depth_range_unclamped GLEW_GET_VAR(__GLEW_NV_depth_range_unclamped)
+-
+-#endif /* GL_NV_depth_range_unclamped */
+-
+-/* ---------------------------- GL_NV_evaluators --------------------------- */
+-
+-#ifndef GL_NV_evaluators
+-#define GL_NV_evaluators 1
+-
+-#define GL_EVAL_2D_NV 0x86C0
+-#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
+-#define GL_MAP_TESSELLATION_NV 0x86C2
+-#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
+-#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
+-#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
+-#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
+-#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
+-#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
+-#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
+-#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
+-#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
+-#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
+-#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
+-#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
+-#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
+-#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
+-#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
+-#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
+-#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
+-#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
+-#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
+-#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
+-#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
+-
+-typedef void (GLAPIENTRY * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
+-typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points);
+-typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points);
+-typedef void (GLAPIENTRY * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint* params);
+-
+-#define glEvalMapsNV GLEW_GET_FUN(__glewEvalMapsNV)
+-#define glGetMapAttribParameterfvNV GLEW_GET_FUN(__glewGetMapAttribParameterfvNV)
+-#define glGetMapAttribParameterivNV GLEW_GET_FUN(__glewGetMapAttribParameterivNV)
+-#define glGetMapControlPointsNV GLEW_GET_FUN(__glewGetMapControlPointsNV)
+-#define glGetMapParameterfvNV GLEW_GET_FUN(__glewGetMapParameterfvNV)
+-#define glGetMapParameterivNV GLEW_GET_FUN(__glewGetMapParameterivNV)
+-#define glMapControlPointsNV GLEW_GET_FUN(__glewMapControlPointsNV)
+-#define glMapParameterfvNV GLEW_GET_FUN(__glewMapParameterfvNV)
+-#define glMapParameterivNV GLEW_GET_FUN(__glewMapParameterivNV)
+-
+-#define GLEW_NV_evaluators GLEW_GET_VAR(__GLEW_NV_evaluators)
+-
+-#endif /* GL_NV_evaluators */
+-
+-/* ------------------------------ GL_NV_fence ------------------------------ */
+-
+-#ifndef GL_NV_fence
+-#define GL_NV_fence 1
+-
+-#define GL_ALL_COMPLETED_NV 0x84F2
+-#define GL_FENCE_STATUS_NV 0x84F3
+-#define GL_FENCE_CONDITION_NV 0x84F4
+-
+-typedef void (GLAPIENTRY * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint* fences);
+-typedef void (GLAPIENTRY * PFNGLFINISHFENCENVPROC) (GLuint fence);
+-typedef void (GLAPIENTRY * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint* fences);
+-typedef void (GLAPIENTRY * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISFENCENVPROC) (GLuint fence);
+-typedef void (GLAPIENTRY * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
+-typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCENVPROC) (GLuint fence);
+-
+-#define glDeleteFencesNV GLEW_GET_FUN(__glewDeleteFencesNV)
+-#define glFinishFenceNV GLEW_GET_FUN(__glewFinishFenceNV)
+-#define glGenFencesNV GLEW_GET_FUN(__glewGenFencesNV)
+-#define glGetFenceivNV GLEW_GET_FUN(__glewGetFenceivNV)
+-#define glIsFenceNV GLEW_GET_FUN(__glewIsFenceNV)
+-#define glSetFenceNV GLEW_GET_FUN(__glewSetFenceNV)
+-#define glTestFenceNV GLEW_GET_FUN(__glewTestFenceNV)
+-
+-#define GLEW_NV_fence GLEW_GET_VAR(__GLEW_NV_fence)
+-
+-#endif /* GL_NV_fence */
+-
+-/* --------------------------- GL_NV_float_buffer -------------------------- */
+-
+-#ifndef GL_NV_float_buffer
+-#define GL_NV_float_buffer 1
+-
+-#define GL_FLOAT_R_NV 0x8880
+-#define GL_FLOAT_RG_NV 0x8881
+-#define GL_FLOAT_RGB_NV 0x8882
+-#define GL_FLOAT_RGBA_NV 0x8883
+-#define GL_FLOAT_R16_NV 0x8884
+-#define GL_FLOAT_R32_NV 0x8885
+-#define GL_FLOAT_RG16_NV 0x8886
+-#define GL_FLOAT_RG32_NV 0x8887
+-#define GL_FLOAT_RGB16_NV 0x8888
+-#define GL_FLOAT_RGB32_NV 0x8889
+-#define GL_FLOAT_RGBA16_NV 0x888A
+-#define GL_FLOAT_RGBA32_NV 0x888B
+-#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
+-#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
+-#define GL_FLOAT_RGBA_MODE_NV 0x888E
+-
+-#define GLEW_NV_float_buffer GLEW_GET_VAR(__GLEW_NV_float_buffer)
+-
+-#endif /* GL_NV_float_buffer */
+-
+-/* --------------------------- GL_NV_fog_distance -------------------------- */
+-
+-#ifndef GL_NV_fog_distance
+-#define GL_NV_fog_distance 1
+-
+-#define GL_FOG_DISTANCE_MODE_NV 0x855A
+-#define GL_EYE_RADIAL_NV 0x855B
+-#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
+-
+-#define GLEW_NV_fog_distance GLEW_GET_VAR(__GLEW_NV_fog_distance)
+-
+-#endif /* GL_NV_fog_distance */
+-
+-/* ------------------------- GL_NV_fragment_program ------------------------ */
+-
+-#ifndef GL_NV_fragment_program
+-#define GL_NV_fragment_program 1
+-
+-#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
+-#define GL_FRAGMENT_PROGRAM_NV 0x8870
+-#define GL_MAX_TEXTURE_COORDS_NV 0x8871
+-#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
+-#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
+-#define GL_PROGRAM_ERROR_STRING_NV 0x8874
+-
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble *params);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[]);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[]);
+-
+-#define glGetProgramNamedParameterdvNV GLEW_GET_FUN(__glewGetProgramNamedParameterdvNV)
+-#define glGetProgramNamedParameterfvNV GLEW_GET_FUN(__glewGetProgramNamedParameterfvNV)
+-#define glProgramNamedParameter4dNV GLEW_GET_FUN(__glewProgramNamedParameter4dNV)
+-#define glProgramNamedParameter4dvNV GLEW_GET_FUN(__glewProgramNamedParameter4dvNV)
+-#define glProgramNamedParameter4fNV GLEW_GET_FUN(__glewProgramNamedParameter4fNV)
+-#define glProgramNamedParameter4fvNV GLEW_GET_FUN(__glewProgramNamedParameter4fvNV)
+-
+-#define GLEW_NV_fragment_program GLEW_GET_VAR(__GLEW_NV_fragment_program)
+-
+-#endif /* GL_NV_fragment_program */
+-
+-/* ------------------------ GL_NV_fragment_program2 ------------------------ */
+-
+-#ifndef GL_NV_fragment_program2
+-#define GL_NV_fragment_program2 1
+-
+-#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
+-#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
+-#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
+-#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
+-#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
+-
+-#define GLEW_NV_fragment_program2 GLEW_GET_VAR(__GLEW_NV_fragment_program2)
+-
+-#endif /* GL_NV_fragment_program2 */
+-
+-/* ------------------------ GL_NV_fragment_program4 ------------------------ */
+-
+-#ifndef GL_NV_fragment_program4
+-#define GL_NV_fragment_program4 1
+-
+-#define GLEW_NV_fragment_program4 GLEW_GET_VAR(__GLEW_NV_fragment_program4)
+-
+-#endif /* GL_NV_fragment_program4 */
+-
+-/* --------------------- GL_NV_fragment_program_option --------------------- */
+-
+-#ifndef GL_NV_fragment_program_option
+-#define GL_NV_fragment_program_option 1
+-
+-#define GLEW_NV_fragment_program_option GLEW_GET_VAR(__GLEW_NV_fragment_program_option)
+-
+-#endif /* GL_NV_fragment_program_option */
+-
+-/* ----------------- GL_NV_framebuffer_multisample_coverage ---------------- */
+-
+-#ifndef GL_NV_framebuffer_multisample_coverage
+-#define GL_NV_framebuffer_multisample_coverage 1
+-
+-#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
+-#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
+-#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
+-#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
+-
+-typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+-
+-#define glRenderbufferStorageMultisampleCoverageNV GLEW_GET_FUN(__glewRenderbufferStorageMultisampleCoverageNV)
+-
+-#define GLEW_NV_framebuffer_multisample_coverage GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample_coverage)
+-
+-#endif /* GL_NV_framebuffer_multisample_coverage */
+-
+-/* ------------------------ GL_NV_geometry_program4 ------------------------ */
+-
+-#ifndef GL_NV_geometry_program4
+-#define GL_NV_geometry_program4 1
+-
+-#define GL_GEOMETRY_PROGRAM_NV 0x8C26
+-#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
+-#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
+-
+-typedef void (GLAPIENTRY * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
+-
+-#define glProgramVertexLimitNV GLEW_GET_FUN(__glewProgramVertexLimitNV)
+-
+-#define GLEW_NV_geometry_program4 GLEW_GET_VAR(__GLEW_NV_geometry_program4)
+-
+-#endif /* GL_NV_geometry_program4 */
+-
+-/* ------------------------- GL_NV_geometry_shader4 ------------------------ */
+-
+-#ifndef GL_NV_geometry_shader4
+-#define GL_NV_geometry_shader4 1
+-
+-#define GLEW_NV_geometry_shader4 GLEW_GET_VAR(__GLEW_NV_geometry_shader4)
+-
+-#endif /* GL_NV_geometry_shader4 */
+-
+-/* --------------------------- GL_NV_gpu_program4 -------------------------- */
+-
+-#ifndef GL_NV_gpu_program4
+-#define GL_NV_gpu_program4 1
+-
+-#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
+-#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
+-#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
+-#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
+-#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
+-#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
+-#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
+-#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
+-
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
+-
+-#define glProgramEnvParameterI4iNV GLEW_GET_FUN(__glewProgramEnvParameterI4iNV)
+-#define glProgramEnvParameterI4ivNV GLEW_GET_FUN(__glewProgramEnvParameterI4ivNV)
+-#define glProgramEnvParameterI4uiNV GLEW_GET_FUN(__glewProgramEnvParameterI4uiNV)
+-#define glProgramEnvParameterI4uivNV GLEW_GET_FUN(__glewProgramEnvParameterI4uivNV)
+-#define glProgramEnvParametersI4ivNV GLEW_GET_FUN(__glewProgramEnvParametersI4ivNV)
+-#define glProgramEnvParametersI4uivNV GLEW_GET_FUN(__glewProgramEnvParametersI4uivNV)
+-#define glProgramLocalParameterI4iNV GLEW_GET_FUN(__glewProgramLocalParameterI4iNV)
+-#define glProgramLocalParameterI4ivNV GLEW_GET_FUN(__glewProgramLocalParameterI4ivNV)
+-#define glProgramLocalParameterI4uiNV GLEW_GET_FUN(__glewProgramLocalParameterI4uiNV)
+-#define glProgramLocalParameterI4uivNV GLEW_GET_FUN(__glewProgramLocalParameterI4uivNV)
+-#define glProgramLocalParametersI4ivNV GLEW_GET_FUN(__glewProgramLocalParametersI4ivNV)
+-#define glProgramLocalParametersI4uivNV GLEW_GET_FUN(__glewProgramLocalParametersI4uivNV)
+-
+-#define GLEW_NV_gpu_program4 GLEW_GET_VAR(__GLEW_NV_gpu_program4)
+-
+-#endif /* GL_NV_gpu_program4 */
+-
+-/* ---------------------------- GL_NV_half_float --------------------------- */
+-
+-#ifndef GL_NV_half_float
+-#define GL_NV_half_float 1
+-
+-#define GL_HALF_FLOAT_NV 0x140B
+-
+-typedef unsigned short GLhalf;
+-
+-typedef void (GLAPIENTRY * PFNGLCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
+-typedef void (GLAPIENTRY * PFNGLCOLOR3HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4HNVPROC) (GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDHNVPROC) (GLhalf fog);
+-typedef void (GLAPIENTRY * PFNGLFOGCOORDHVNVPROC) (const GLhalf* fog);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalf s);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalf s, GLhalf t);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q);
+-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLNORMAL3HNVPROC) (GLhalf nx, GLhalf ny, GLhalf nz);
+-typedef void (GLAPIENTRY * PFNGLNORMAL3HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
+-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD1HNVPROC) (GLhalf s);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD1HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2HNVPROC) (GLhalf s, GLhalf t);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD3HNVPROC) (GLhalf s, GLhalf t, GLhalf r);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD3HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD4HNVPROC) (GLhalf s, GLhalf t, GLhalf r, GLhalf q);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD4HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEX2HNVPROC) (GLhalf x, GLhalf y);
+-typedef void (GLAPIENTRY * PFNGLVERTEX2HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEX3HNVPROC) (GLhalf x, GLhalf y, GLhalf z);
+-typedef void (GLAPIENTRY * PFNGLVERTEX3HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEX4HNVPROC) (GLhalf x, GLhalf y, GLhalf z, GLhalf w);
+-typedef void (GLAPIENTRY * PFNGLVERTEX4HVNVPROC) (const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalf x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalf x, GLhalf y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHNVPROC) (GLhalf weight);
+-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalf* weight);
+-
+-#define glColor3hNV GLEW_GET_FUN(__glewColor3hNV)
+-#define glColor3hvNV GLEW_GET_FUN(__glewColor3hvNV)
+-#define glColor4hNV GLEW_GET_FUN(__glewColor4hNV)
+-#define glColor4hvNV GLEW_GET_FUN(__glewColor4hvNV)
+-#define glFogCoordhNV GLEW_GET_FUN(__glewFogCoordhNV)
+-#define glFogCoordhvNV GLEW_GET_FUN(__glewFogCoordhvNV)
+-#define glMultiTexCoord1hNV GLEW_GET_FUN(__glewMultiTexCoord1hNV)
+-#define glMultiTexCoord1hvNV GLEW_GET_FUN(__glewMultiTexCoord1hvNV)
+-#define glMultiTexCoord2hNV GLEW_GET_FUN(__glewMultiTexCoord2hNV)
+-#define glMultiTexCoord2hvNV GLEW_GET_FUN(__glewMultiTexCoord2hvNV)
+-#define glMultiTexCoord3hNV GLEW_GET_FUN(__glewMultiTexCoord3hNV)
+-#define glMultiTexCoord3hvNV GLEW_GET_FUN(__glewMultiTexCoord3hvNV)
+-#define glMultiTexCoord4hNV GLEW_GET_FUN(__glewMultiTexCoord4hNV)
+-#define glMultiTexCoord4hvNV GLEW_GET_FUN(__glewMultiTexCoord4hvNV)
+-#define glNormal3hNV GLEW_GET_FUN(__glewNormal3hNV)
+-#define glNormal3hvNV GLEW_GET_FUN(__glewNormal3hvNV)
+-#define glSecondaryColor3hNV GLEW_GET_FUN(__glewSecondaryColor3hNV)
+-#define glSecondaryColor3hvNV GLEW_GET_FUN(__glewSecondaryColor3hvNV)
+-#define glTexCoord1hNV GLEW_GET_FUN(__glewTexCoord1hNV)
+-#define glTexCoord1hvNV GLEW_GET_FUN(__glewTexCoord1hvNV)
+-#define glTexCoord2hNV GLEW_GET_FUN(__glewTexCoord2hNV)
+-#define glTexCoord2hvNV GLEW_GET_FUN(__glewTexCoord2hvNV)
+-#define glTexCoord3hNV GLEW_GET_FUN(__glewTexCoord3hNV)
+-#define glTexCoord3hvNV GLEW_GET_FUN(__glewTexCoord3hvNV)
+-#define glTexCoord4hNV GLEW_GET_FUN(__glewTexCoord4hNV)
+-#define glTexCoord4hvNV GLEW_GET_FUN(__glewTexCoord4hvNV)
+-#define glVertex2hNV GLEW_GET_FUN(__glewVertex2hNV)
+-#define glVertex2hvNV GLEW_GET_FUN(__glewVertex2hvNV)
+-#define glVertex3hNV GLEW_GET_FUN(__glewVertex3hNV)
+-#define glVertex3hvNV GLEW_GET_FUN(__glewVertex3hvNV)
+-#define glVertex4hNV GLEW_GET_FUN(__glewVertex4hNV)
+-#define glVertex4hvNV GLEW_GET_FUN(__glewVertex4hvNV)
+-#define glVertexAttrib1hNV GLEW_GET_FUN(__glewVertexAttrib1hNV)
+-#define glVertexAttrib1hvNV GLEW_GET_FUN(__glewVertexAttrib1hvNV)
+-#define glVertexAttrib2hNV GLEW_GET_FUN(__glewVertexAttrib2hNV)
+-#define glVertexAttrib2hvNV GLEW_GET_FUN(__glewVertexAttrib2hvNV)
+-#define glVertexAttrib3hNV GLEW_GET_FUN(__glewVertexAttrib3hNV)
+-#define glVertexAttrib3hvNV GLEW_GET_FUN(__glewVertexAttrib3hvNV)
+-#define glVertexAttrib4hNV GLEW_GET_FUN(__glewVertexAttrib4hNV)
+-#define glVertexAttrib4hvNV GLEW_GET_FUN(__glewVertexAttrib4hvNV)
+-#define glVertexAttribs1hvNV GLEW_GET_FUN(__glewVertexAttribs1hvNV)
+-#define glVertexAttribs2hvNV GLEW_GET_FUN(__glewVertexAttribs2hvNV)
+-#define glVertexAttribs3hvNV GLEW_GET_FUN(__glewVertexAttribs3hvNV)
+-#define glVertexAttribs4hvNV GLEW_GET_FUN(__glewVertexAttribs4hvNV)
+-#define glVertexWeighthNV GLEW_GET_FUN(__glewVertexWeighthNV)
+-#define glVertexWeighthvNV GLEW_GET_FUN(__glewVertexWeighthvNV)
+-
+-#define GLEW_NV_half_float GLEW_GET_VAR(__GLEW_NV_half_float)
+-
+-#endif /* GL_NV_half_float */
+-
+-/* ------------------------ GL_NV_light_max_exponent ----------------------- */
+-
+-#ifndef GL_NV_light_max_exponent
+-#define GL_NV_light_max_exponent 1
+-
+-#define GL_MAX_SHININESS_NV 0x8504
+-#define GL_MAX_SPOT_EXPONENT_NV 0x8505
+-
+-#define GLEW_NV_light_max_exponent GLEW_GET_VAR(__GLEW_NV_light_max_exponent)
+-
+-#endif /* GL_NV_light_max_exponent */
+-
+-/* --------------------- GL_NV_multisample_filter_hint --------------------- */
+-
+-#ifndef GL_NV_multisample_filter_hint
+-#define GL_NV_multisample_filter_hint 1
+-
+-#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
+-
+-#define GLEW_NV_multisample_filter_hint GLEW_GET_VAR(__GLEW_NV_multisample_filter_hint)
+-
+-#endif /* GL_NV_multisample_filter_hint */
+-
+-/* ------------------------- GL_NV_occlusion_query ------------------------- */
+-
+-#ifndef GL_NV_occlusion_query
+-#define GL_NV_occlusion_query 1
+-
+-#define GL_PIXEL_COUNTER_BITS_NV 0x8864
+-#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
+-#define GL_PIXEL_COUNT_NV 0x8866
+-#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
+-
+-typedef void (GLAPIENTRY * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLENDOCCLUSIONQUERYNVPROC) (void);
+-typedef void (GLAPIENTRY * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
+-
+-#define glBeginOcclusionQueryNV GLEW_GET_FUN(__glewBeginOcclusionQueryNV)
+-#define glDeleteOcclusionQueriesNV GLEW_GET_FUN(__glewDeleteOcclusionQueriesNV)
+-#define glEndOcclusionQueryNV GLEW_GET_FUN(__glewEndOcclusionQueryNV)
+-#define glGenOcclusionQueriesNV GLEW_GET_FUN(__glewGenOcclusionQueriesNV)
+-#define glGetOcclusionQueryivNV GLEW_GET_FUN(__glewGetOcclusionQueryivNV)
+-#define glGetOcclusionQueryuivNV GLEW_GET_FUN(__glewGetOcclusionQueryuivNV)
+-#define glIsOcclusionQueryNV GLEW_GET_FUN(__glewIsOcclusionQueryNV)
+-
+-#define GLEW_NV_occlusion_query GLEW_GET_VAR(__GLEW_NV_occlusion_query)
+-
+-#endif /* GL_NV_occlusion_query */
+-
+-/* ----------------------- GL_NV_packed_depth_stencil ---------------------- */
+-
+-#ifndef GL_NV_packed_depth_stencil
+-#define GL_NV_packed_depth_stencil 1
+-
+-#define GL_DEPTH_STENCIL_NV 0x84F9
+-#define GL_UNSIGNED_INT_24_8_NV 0x84FA
+-
+-#define GLEW_NV_packed_depth_stencil GLEW_GET_VAR(__GLEW_NV_packed_depth_stencil)
+-
+-#endif /* GL_NV_packed_depth_stencil */
+-
+-/* --------------------- GL_NV_parameter_buffer_object --------------------- */
+-
+-#ifndef GL_NV_parameter_buffer_object
+-#define GL_NV_parameter_buffer_object 1
+-
+-#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
+-#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
+-#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
+-#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
+-#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
+-
+-typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
+-
+-#define glProgramBufferParametersIivNV GLEW_GET_FUN(__glewProgramBufferParametersIivNV)
+-#define glProgramBufferParametersIuivNV GLEW_GET_FUN(__glewProgramBufferParametersIuivNV)
+-#define glProgramBufferParametersfvNV GLEW_GET_FUN(__glewProgramBufferParametersfvNV)
+-
+-#define GLEW_NV_parameter_buffer_object GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object)
+-
+-#endif /* GL_NV_parameter_buffer_object */
+-
+-/* ------------------------- GL_NV_pixel_data_range ------------------------ */
+-
+-#ifndef GL_NV_pixel_data_range
+-#define GL_NV_pixel_data_range 1
+-
+-#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
+-#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
+-#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
+-#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
+-#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
+-#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
+-
+-typedef void (GLAPIENTRY * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
+-typedef void (GLAPIENTRY * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, void* pointer);
+-
+-#define glFlushPixelDataRangeNV GLEW_GET_FUN(__glewFlushPixelDataRangeNV)
+-#define glPixelDataRangeNV GLEW_GET_FUN(__glewPixelDataRangeNV)
+-
+-#define GLEW_NV_pixel_data_range GLEW_GET_VAR(__GLEW_NV_pixel_data_range)
+-
+-#endif /* GL_NV_pixel_data_range */
+-
+-/* --------------------------- GL_NV_point_sprite -------------------------- */
+-
+-#ifndef GL_NV_point_sprite
+-#define GL_NV_point_sprite 1
+-
+-#define GL_POINT_SPRITE_NV 0x8861
+-#define GL_COORD_REPLACE_NV 0x8862
+-#define GL_POINT_SPRITE_R_MODE_NV 0x8863
+-
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
+-
+-#define glPointParameteriNV GLEW_GET_FUN(__glewPointParameteriNV)
+-#define glPointParameterivNV GLEW_GET_FUN(__glewPointParameterivNV)
+-
+-#define GLEW_NV_point_sprite GLEW_GET_VAR(__GLEW_NV_point_sprite)
+-
+-#endif /* GL_NV_point_sprite */
+-
+-/* ------------------------ GL_NV_primitive_restart ------------------------ */
+-
+-#ifndef GL_NV_primitive_restart
+-#define GL_NV_primitive_restart 1
+-
+-#define GL_PRIMITIVE_RESTART_NV 0x8558
+-#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
+-
+-typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
+-typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTNVPROC) (void);
+-
+-#define glPrimitiveRestartIndexNV GLEW_GET_FUN(__glewPrimitiveRestartIndexNV)
+-#define glPrimitiveRestartNV GLEW_GET_FUN(__glewPrimitiveRestartNV)
+-
+-#define GLEW_NV_primitive_restart GLEW_GET_VAR(__GLEW_NV_primitive_restart)
+-
+-#endif /* GL_NV_primitive_restart */
+-
+-/* ------------------------ GL_NV_register_combiners ----------------------- */
+-
+-#ifndef GL_NV_register_combiners
+-#define GL_NV_register_combiners 1
+-
+-#define GL_REGISTER_COMBINERS_NV 0x8522
+-#define GL_VARIABLE_A_NV 0x8523
+-#define GL_VARIABLE_B_NV 0x8524
+-#define GL_VARIABLE_C_NV 0x8525
+-#define GL_VARIABLE_D_NV 0x8526
+-#define GL_VARIABLE_E_NV 0x8527
+-#define GL_VARIABLE_F_NV 0x8528
+-#define GL_VARIABLE_G_NV 0x8529
+-#define GL_CONSTANT_COLOR0_NV 0x852A
+-#define GL_CONSTANT_COLOR1_NV 0x852B
+-#define GL_PRIMARY_COLOR_NV 0x852C
+-#define GL_SECONDARY_COLOR_NV 0x852D
+-#define GL_SPARE0_NV 0x852E
+-#define GL_SPARE1_NV 0x852F
+-#define GL_DISCARD_NV 0x8530
+-#define GL_E_TIMES_F_NV 0x8531
+-#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
+-#define GL_UNSIGNED_IDENTITY_NV 0x8536
+-#define GL_UNSIGNED_INVERT_NV 0x8537
+-#define GL_EXPAND_NORMAL_NV 0x8538
+-#define GL_EXPAND_NEGATE_NV 0x8539
+-#define GL_HALF_BIAS_NORMAL_NV 0x853A
+-#define GL_HALF_BIAS_NEGATE_NV 0x853B
+-#define GL_SIGNED_IDENTITY_NV 0x853C
+-#define GL_SIGNED_NEGATE_NV 0x853D
+-#define GL_SCALE_BY_TWO_NV 0x853E
+-#define GL_SCALE_BY_FOUR_NV 0x853F
+-#define GL_SCALE_BY_ONE_HALF_NV 0x8540
+-#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
+-#define GL_COMBINER_INPUT_NV 0x8542
+-#define GL_COMBINER_MAPPING_NV 0x8543
+-#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
+-#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
+-#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
+-#define GL_COMBINER_MUX_SUM_NV 0x8547
+-#define GL_COMBINER_SCALE_NV 0x8548
+-#define GL_COMBINER_BIAS_NV 0x8549
+-#define GL_COMBINER_AB_OUTPUT_NV 0x854A
+-#define GL_COMBINER_CD_OUTPUT_NV 0x854B
+-#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
+-#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
+-#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
+-#define GL_COLOR_SUM_CLAMP_NV 0x854F
+-#define GL_COMBINER0_NV 0x8550
+-#define GL_COMBINER1_NV 0x8551
+-#define GL_COMBINER2_NV 0x8552
+-#define GL_COMBINER3_NV 0x8553
+-#define GL_COMBINER4_NV 0x8554
+-#define GL_COMBINER5_NV 0x8555
+-#define GL_COMBINER6_NV 0x8556
+-#define GL_COMBINER7_NV 0x8557
+-
+-typedef void (GLAPIENTRY * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+-typedef void (GLAPIENTRY * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
+-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+-typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint* params);
+-
+-#define glCombinerInputNV GLEW_GET_FUN(__glewCombinerInputNV)
+-#define glCombinerOutputNV GLEW_GET_FUN(__glewCombinerOutputNV)
+-#define glCombinerParameterfNV GLEW_GET_FUN(__glewCombinerParameterfNV)
+-#define glCombinerParameterfvNV GLEW_GET_FUN(__glewCombinerParameterfvNV)
+-#define glCombinerParameteriNV GLEW_GET_FUN(__glewCombinerParameteriNV)
+-#define glCombinerParameterivNV GLEW_GET_FUN(__glewCombinerParameterivNV)
+-#define glFinalCombinerInputNV GLEW_GET_FUN(__glewFinalCombinerInputNV)
+-#define glGetCombinerInputParameterfvNV GLEW_GET_FUN(__glewGetCombinerInputParameterfvNV)
+-#define glGetCombinerInputParameterivNV GLEW_GET_FUN(__glewGetCombinerInputParameterivNV)
+-#define glGetCombinerOutputParameterfvNV GLEW_GET_FUN(__glewGetCombinerOutputParameterfvNV)
+-#define glGetCombinerOutputParameterivNV GLEW_GET_FUN(__glewGetCombinerOutputParameterivNV)
+-#define glGetFinalCombinerInputParameterfvNV GLEW_GET_FUN(__glewGetFinalCombinerInputParameterfvNV)
+-#define glGetFinalCombinerInputParameterivNV GLEW_GET_FUN(__glewGetFinalCombinerInputParameterivNV)
+-
+-#define GLEW_NV_register_combiners GLEW_GET_VAR(__GLEW_NV_register_combiners)
+-
+-#endif /* GL_NV_register_combiners */
+-
+-/* ----------------------- GL_NV_register_combiners2 ----------------------- */
+-
+-#ifndef GL_NV_register_combiners2
+-#define GL_NV_register_combiners2 1
+-
+-#define GL_PER_STAGE_CONSTANTS_NV 0x8535
+-
+-typedef void (GLAPIENTRY * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat* params);
+-
+-#define glCombinerStageParameterfvNV GLEW_GET_FUN(__glewCombinerStageParameterfvNV)
+-#define glGetCombinerStageParameterfvNV GLEW_GET_FUN(__glewGetCombinerStageParameterfvNV)
+-
+-#define GLEW_NV_register_combiners2 GLEW_GET_VAR(__GLEW_NV_register_combiners2)
+-
+-#endif /* GL_NV_register_combiners2 */
+-
+-/* -------------------------- GL_NV_texgen_emboss -------------------------- */
+-
+-#ifndef GL_NV_texgen_emboss
+-#define GL_NV_texgen_emboss 1
+-
+-#define GL_EMBOSS_LIGHT_NV 0x855D
+-#define GL_EMBOSS_CONSTANT_NV 0x855E
+-#define GL_EMBOSS_MAP_NV 0x855F
+-
+-#define GLEW_NV_texgen_emboss GLEW_GET_VAR(__GLEW_NV_texgen_emboss)
+-
+-#endif /* GL_NV_texgen_emboss */
+-
+-/* ------------------------ GL_NV_texgen_reflection ------------------------ */
+-
+-#ifndef GL_NV_texgen_reflection
+-#define GL_NV_texgen_reflection 1
+-
+-#define GL_NORMAL_MAP_NV 0x8511
+-#define GL_REFLECTION_MAP_NV 0x8512
+-
+-#define GLEW_NV_texgen_reflection GLEW_GET_VAR(__GLEW_NV_texgen_reflection)
+-
+-#endif /* GL_NV_texgen_reflection */
+-
+-/* --------------------- GL_NV_texture_compression_vtc --------------------- */
+-
+-#ifndef GL_NV_texture_compression_vtc
+-#define GL_NV_texture_compression_vtc 1
+-
+-#define GLEW_NV_texture_compression_vtc GLEW_GET_VAR(__GLEW_NV_texture_compression_vtc)
+-
+-#endif /* GL_NV_texture_compression_vtc */
+-
+-/* ----------------------- GL_NV_texture_env_combine4 ---------------------- */
+-
+-#ifndef GL_NV_texture_env_combine4
+-#define GL_NV_texture_env_combine4 1
+-
+-#define GL_COMBINE4_NV 0x8503
+-#define GL_SOURCE3_RGB_NV 0x8583
+-#define GL_SOURCE3_ALPHA_NV 0x858B
+-#define GL_OPERAND3_RGB_NV 0x8593
+-#define GL_OPERAND3_ALPHA_NV 0x859B
+-
+-#define GLEW_NV_texture_env_combine4 GLEW_GET_VAR(__GLEW_NV_texture_env_combine4)
+-
+-#endif /* GL_NV_texture_env_combine4 */
+-
+-/* ---------------------- GL_NV_texture_expand_normal ---------------------- */
+-
+-#ifndef GL_NV_texture_expand_normal
+-#define GL_NV_texture_expand_normal 1
+-
+-#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
+-
+-#define GLEW_NV_texture_expand_normal GLEW_GET_VAR(__GLEW_NV_texture_expand_normal)
+-
+-#endif /* GL_NV_texture_expand_normal */
+-
+-/* ------------------------ GL_NV_texture_rectangle ------------------------ */
+-
+-#ifndef GL_NV_texture_rectangle
+-#define GL_NV_texture_rectangle 1
+-
+-#define GL_TEXTURE_RECTANGLE_NV 0x84F5
+-#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
+-#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
+-#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
+-
+-#define GLEW_NV_texture_rectangle GLEW_GET_VAR(__GLEW_NV_texture_rectangle)
+-
+-#endif /* GL_NV_texture_rectangle */
+-
+-/* -------------------------- GL_NV_texture_shader ------------------------- */
+-
+-#ifndef GL_NV_texture_shader
+-#define GL_NV_texture_shader 1
+-
+-#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
+-#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
+-#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
+-#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
+-#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
+-#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
+-#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
+-#define GL_SHADER_CONSISTENT_NV 0x86DD
+-#define GL_TEXTURE_SHADER_NV 0x86DE
+-#define GL_SHADER_OPERATION_NV 0x86DF
+-#define GL_CULL_MODES_NV 0x86E0
+-#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
+-#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
+-#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
+-#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
+-#define GL_CONST_EYE_NV 0x86E5
+-#define GL_PASS_THROUGH_NV 0x86E6
+-#define GL_CULL_FRAGMENT_NV 0x86E7
+-#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
+-#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
+-#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
+-#define GL_DOT_PRODUCT_NV 0x86EC
+-#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
+-#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
+-#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
+-#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
+-#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
+-#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
+-#define GL_HILO_NV 0x86F4
+-#define GL_DSDT_NV 0x86F5
+-#define GL_DSDT_MAG_NV 0x86F6
+-#define GL_DSDT_MAG_VIB_NV 0x86F7
+-#define GL_HILO16_NV 0x86F8
+-#define GL_SIGNED_HILO_NV 0x86F9
+-#define GL_SIGNED_HILO16_NV 0x86FA
+-#define GL_SIGNED_RGBA_NV 0x86FB
+-#define GL_SIGNED_RGBA8_NV 0x86FC
+-#define GL_SIGNED_RGB_NV 0x86FE
+-#define GL_SIGNED_RGB8_NV 0x86FF
+-#define GL_SIGNED_LUMINANCE_NV 0x8701
+-#define GL_SIGNED_LUMINANCE8_NV 0x8702
+-#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
+-#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
+-#define GL_SIGNED_ALPHA_NV 0x8705
+-#define GL_SIGNED_ALPHA8_NV 0x8706
+-#define GL_SIGNED_INTENSITY_NV 0x8707
+-#define GL_SIGNED_INTENSITY8_NV 0x8708
+-#define GL_DSDT8_NV 0x8709
+-#define GL_DSDT8_MAG8_NV 0x870A
+-#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
+-#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
+-#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
+-#define GL_HI_SCALE_NV 0x870E
+-#define GL_LO_SCALE_NV 0x870F
+-#define GL_DS_SCALE_NV 0x8710
+-#define GL_DT_SCALE_NV 0x8711
+-#define GL_MAGNITUDE_SCALE_NV 0x8712
+-#define GL_VIBRANCE_SCALE_NV 0x8713
+-#define GL_HI_BIAS_NV 0x8714
+-#define GL_LO_BIAS_NV 0x8715
+-#define GL_DS_BIAS_NV 0x8716
+-#define GL_DT_BIAS_NV 0x8717
+-#define GL_MAGNITUDE_BIAS_NV 0x8718
+-#define GL_VIBRANCE_BIAS_NV 0x8719
+-#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
+-#define GL_TEXTURE_HI_SIZE_NV 0x871B
+-#define GL_TEXTURE_LO_SIZE_NV 0x871C
+-#define GL_TEXTURE_DS_SIZE_NV 0x871D
+-#define GL_TEXTURE_DT_SIZE_NV 0x871E
+-#define GL_TEXTURE_MAG_SIZE_NV 0x871F
+-
+-#define GLEW_NV_texture_shader GLEW_GET_VAR(__GLEW_NV_texture_shader)
+-
+-#endif /* GL_NV_texture_shader */
+-
+-/* ------------------------- GL_NV_texture_shader2 ------------------------- */
+-
+-#ifndef GL_NV_texture_shader2
+-#define GL_NV_texture_shader2 1
+-
+-#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
+-#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
+-#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
+-#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
+-#define GL_HILO_NV 0x86F4
+-#define GL_DSDT_NV 0x86F5
+-#define GL_DSDT_MAG_NV 0x86F6
+-#define GL_DSDT_MAG_VIB_NV 0x86F7
+-#define GL_HILO16_NV 0x86F8
+-#define GL_SIGNED_HILO_NV 0x86F9
+-#define GL_SIGNED_HILO16_NV 0x86FA
+-#define GL_SIGNED_RGBA_NV 0x86FB
+-#define GL_SIGNED_RGBA8_NV 0x86FC
+-#define GL_SIGNED_RGB_NV 0x86FE
+-#define GL_SIGNED_RGB8_NV 0x86FF
+-#define GL_SIGNED_LUMINANCE_NV 0x8701
+-#define GL_SIGNED_LUMINANCE8_NV 0x8702
+-#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
+-#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
+-#define GL_SIGNED_ALPHA_NV 0x8705
+-#define GL_SIGNED_ALPHA8_NV 0x8706
+-#define GL_SIGNED_INTENSITY_NV 0x8707
+-#define GL_SIGNED_INTENSITY8_NV 0x8708
+-#define GL_DSDT8_NV 0x8709
+-#define GL_DSDT8_MAG8_NV 0x870A
+-#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
+-#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
+-#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
+-
+-#define GLEW_NV_texture_shader2 GLEW_GET_VAR(__GLEW_NV_texture_shader2)
+-
+-#endif /* GL_NV_texture_shader2 */
+-
+-/* ------------------------- GL_NV_texture_shader3 ------------------------- */
+-
+-#ifndef GL_NV_texture_shader3
+-#define GL_NV_texture_shader3 1
+-
+-#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
+-#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
+-#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
+-#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
+-#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
+-#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
+-#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
+-#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
+-#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
+-#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
+-#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
+-#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
+-#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
+-#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
+-#define GL_HILO8_NV 0x885E
+-#define GL_SIGNED_HILO8_NV 0x885F
+-#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
+-
+-#define GLEW_NV_texture_shader3 GLEW_GET_VAR(__GLEW_NV_texture_shader3)
+-
+-#endif /* GL_NV_texture_shader3 */
+-
+-/* ------------------------ GL_NV_transform_feedback ----------------------- */
+-
+-#ifndef GL_NV_transform_feedback
+-#define GL_NV_transform_feedback 1
+-
+-#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
+-#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
+-#define GL_TEXTURE_COORD_NV 0x8C79
+-#define GL_CLIP_DISTANCE_NV 0x8C7A
+-#define GL_VERTEX_ID_NV 0x8C7B
+-#define GL_PRIMITIVE_ID_NV 0x8C7C
+-#define GL_GENERIC_ATTRIB_NV 0x8C7D
+-#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
+-#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
+-#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
+-#define GL_ACTIVE_VARYINGS_NV 0x8C81
+-#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
+-#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
+-#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
+-#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
+-#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
+-#define GL_PRIMITIVES_GENERATED_NV 0x8C87
+-#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
+-#define GL_RASTERIZER_DISCARD_NV 0x8C89
+-#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
+-#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
+-#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
+-#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
+-#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
+-#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
+-
+-typedef void (GLAPIENTRY * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
+-typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
+-typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
+-typedef void (GLAPIENTRY * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+-typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+-typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
+-typedef void (GLAPIENTRY * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+-typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
+-typedef GLint (GLAPIENTRY * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
+-typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
+-typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
+-
+-#define glActiveVaryingNV GLEW_GET_FUN(__glewActiveVaryingNV)
+-#define glBeginTransformFeedbackNV GLEW_GET_FUN(__glewBeginTransformFeedbackNV)
+-#define glBindBufferBaseNV GLEW_GET_FUN(__glewBindBufferBaseNV)
+-#define glBindBufferOffsetNV GLEW_GET_FUN(__glewBindBufferOffsetNV)
+-#define glBindBufferRangeNV GLEW_GET_FUN(__glewBindBufferRangeNV)
+-#define glEndTransformFeedbackNV GLEW_GET_FUN(__glewEndTransformFeedbackNV)
+-#define glGetActiveVaryingNV GLEW_GET_FUN(__glewGetActiveVaryingNV)
+-#define glGetTransformFeedbackVaryingNV GLEW_GET_FUN(__glewGetTransformFeedbackVaryingNV)
+-#define glGetVaryingLocationNV GLEW_GET_FUN(__glewGetVaryingLocationNV)
+-#define glTransformFeedbackAttribsNV GLEW_GET_FUN(__glewTransformFeedbackAttribsNV)
+-#define glTransformFeedbackVaryingsNV GLEW_GET_FUN(__glewTransformFeedbackVaryingsNV)
+-
+-#define GLEW_NV_transform_feedback GLEW_GET_VAR(__GLEW_NV_transform_feedback)
+-
+-#endif /* GL_NV_transform_feedback */
+-
+-/* ------------------------ GL_NV_vertex_array_range ----------------------- */
+-
+-#ifndef GL_NV_vertex_array_range
+-#define GL_NV_vertex_array_range 1
+-
+-#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
+-#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
+-#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
+-#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
+-#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
+-
+-typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
+-typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, void* pointer);
+-
+-#define glFlushVertexArrayRangeNV GLEW_GET_FUN(__glewFlushVertexArrayRangeNV)
+-#define glVertexArrayRangeNV GLEW_GET_FUN(__glewVertexArrayRangeNV)
+-
+-#define GLEW_NV_vertex_array_range GLEW_GET_VAR(__GLEW_NV_vertex_array_range)
+-
+-#endif /* GL_NV_vertex_array_range */
+-
+-/* ----------------------- GL_NV_vertex_array_range2 ----------------------- */
+-
+-#ifndef GL_NV_vertex_array_range2
+-#define GL_NV_vertex_array_range2 1
+-
+-#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
+-
+-#define GLEW_NV_vertex_array_range2 GLEW_GET_VAR(__GLEW_NV_vertex_array_range2)
+-
+-#endif /* GL_NV_vertex_array_range2 */
+-
+-/* -------------------------- GL_NV_vertex_program ------------------------- */
+-
+-#ifndef GL_NV_vertex_program
+-#define GL_NV_vertex_program 1
+-
+-#define GL_VERTEX_PROGRAM_NV 0x8620
+-#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
+-#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
+-#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
+-#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
+-#define GL_CURRENT_ATTRIB_NV 0x8626
+-#define GL_PROGRAM_LENGTH_NV 0x8627
+-#define GL_PROGRAM_STRING_NV 0x8628
+-#define GL_MODELVIEW_PROJECTION_NV 0x8629
+-#define GL_IDENTITY_NV 0x862A
+-#define GL_INVERSE_NV 0x862B
+-#define GL_TRANSPOSE_NV 0x862C
+-#define GL_INVERSE_TRANSPOSE_NV 0x862D
+-#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
+-#define GL_MAX_TRACK_MATRICES_NV 0x862F
+-#define GL_MATRIX0_NV 0x8630
+-#define GL_MATRIX1_NV 0x8631
+-#define GL_MATRIX2_NV 0x8632
+-#define GL_MATRIX3_NV 0x8633
+-#define GL_MATRIX4_NV 0x8634
+-#define GL_MATRIX5_NV 0x8635
+-#define GL_MATRIX6_NV 0x8636
+-#define GL_MATRIX7_NV 0x8637
+-#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
+-#define GL_CURRENT_MATRIX_NV 0x8641
+-#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
+-#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
+-#define GL_PROGRAM_PARAMETER_NV 0x8644
+-#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
+-#define GL_PROGRAM_TARGET_NV 0x8646
+-#define GL_PROGRAM_RESIDENT_NV 0x8647
+-#define GL_TRACK_MATRIX_NV 0x8648
+-#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
+-#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
+-#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
+-#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
+-#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
+-#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
+-#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
+-#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
+-#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
+-#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
+-#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
+-#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
+-#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
+-#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
+-#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
+-#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
+-#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
+-#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
+-#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
+-#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
+-#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
+-#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
+-#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
+-#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
+-#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
+-#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
+-#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
+-#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
+-#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
+-#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
+-#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
+-#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
+-#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
+-#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
+-#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
+-#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
+-#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
+-#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
+-#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
+-#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
+-#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
+-#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
+-#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
+-#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
+-#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
+-#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
+-#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
+-#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
+-#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
+-#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
+-#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
+-
+-typedef GLboolean (GLAPIENTRY * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint* ids, GLboolean *residences);
+-typedef void (GLAPIENTRY * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
+-typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte* program);
+-typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid** pointer);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint* params);
+-typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMNVPROC) (GLuint id);
+-typedef void (GLAPIENTRY * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte* program);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint num, const GLdouble* params);
+-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint num, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
+-typedef void (GLAPIENTRY * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
+-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei n, const GLubyte* v);
+-
+-#define glAreProgramsResidentNV GLEW_GET_FUN(__glewAreProgramsResidentNV)
+-#define glBindProgramNV GLEW_GET_FUN(__glewBindProgramNV)
+-#define glDeleteProgramsNV GLEW_GET_FUN(__glewDeleteProgramsNV)
+-#define glExecuteProgramNV GLEW_GET_FUN(__glewExecuteProgramNV)
+-#define glGenProgramsNV GLEW_GET_FUN(__glewGenProgramsNV)
+-#define glGetProgramParameterdvNV GLEW_GET_FUN(__glewGetProgramParameterdvNV)
+-#define glGetProgramParameterfvNV GLEW_GET_FUN(__glewGetProgramParameterfvNV)
+-#define glGetProgramStringNV GLEW_GET_FUN(__glewGetProgramStringNV)
+-#define glGetProgramivNV GLEW_GET_FUN(__glewGetProgramivNV)
+-#define glGetTrackMatrixivNV GLEW_GET_FUN(__glewGetTrackMatrixivNV)
+-#define glGetVertexAttribPointervNV GLEW_GET_FUN(__glewGetVertexAttribPointervNV)
+-#define glGetVertexAttribdvNV GLEW_GET_FUN(__glewGetVertexAttribdvNV)
+-#define glGetVertexAttribfvNV GLEW_GET_FUN(__glewGetVertexAttribfvNV)
+-#define glGetVertexAttribivNV GLEW_GET_FUN(__glewGetVertexAttribivNV)
+-#define glIsProgramNV GLEW_GET_FUN(__glewIsProgramNV)
+-#define glLoadProgramNV GLEW_GET_FUN(__glewLoadProgramNV)
+-#define glProgramParameter4dNV GLEW_GET_FUN(__glewProgramParameter4dNV)
+-#define glProgramParameter4dvNV GLEW_GET_FUN(__glewProgramParameter4dvNV)
+-#define glProgramParameter4fNV GLEW_GET_FUN(__glewProgramParameter4fNV)
+-#define glProgramParameter4fvNV GLEW_GET_FUN(__glewProgramParameter4fvNV)
+-#define glProgramParameters4dvNV GLEW_GET_FUN(__glewProgramParameters4dvNV)
+-#define glProgramParameters4fvNV GLEW_GET_FUN(__glewProgramParameters4fvNV)
+-#define glRequestResidentProgramsNV GLEW_GET_FUN(__glewRequestResidentProgramsNV)
+-#define glTrackMatrixNV GLEW_GET_FUN(__glewTrackMatrixNV)
+-#define glVertexAttrib1dNV GLEW_GET_FUN(__glewVertexAttrib1dNV)
+-#define glVertexAttrib1dvNV GLEW_GET_FUN(__glewVertexAttrib1dvNV)
+-#define glVertexAttrib1fNV GLEW_GET_FUN(__glewVertexAttrib1fNV)
+-#define glVertexAttrib1fvNV GLEW_GET_FUN(__glewVertexAttrib1fvNV)
+-#define glVertexAttrib1sNV GLEW_GET_FUN(__glewVertexAttrib1sNV)
+-#define glVertexAttrib1svNV GLEW_GET_FUN(__glewVertexAttrib1svNV)
+-#define glVertexAttrib2dNV GLEW_GET_FUN(__glewVertexAttrib2dNV)
+-#define glVertexAttrib2dvNV GLEW_GET_FUN(__glewVertexAttrib2dvNV)
+-#define glVertexAttrib2fNV GLEW_GET_FUN(__glewVertexAttrib2fNV)
+-#define glVertexAttrib2fvNV GLEW_GET_FUN(__glewVertexAttrib2fvNV)
+-#define glVertexAttrib2sNV GLEW_GET_FUN(__glewVertexAttrib2sNV)
+-#define glVertexAttrib2svNV GLEW_GET_FUN(__glewVertexAttrib2svNV)
+-#define glVertexAttrib3dNV GLEW_GET_FUN(__glewVertexAttrib3dNV)
+-#define glVertexAttrib3dvNV GLEW_GET_FUN(__glewVertexAttrib3dvNV)
+-#define glVertexAttrib3fNV GLEW_GET_FUN(__glewVertexAttrib3fNV)
+-#define glVertexAttrib3fvNV GLEW_GET_FUN(__glewVertexAttrib3fvNV)
+-#define glVertexAttrib3sNV GLEW_GET_FUN(__glewVertexAttrib3sNV)
+-#define glVertexAttrib3svNV GLEW_GET_FUN(__glewVertexAttrib3svNV)
+-#define glVertexAttrib4dNV GLEW_GET_FUN(__glewVertexAttrib4dNV)
+-#define glVertexAttrib4dvNV GLEW_GET_FUN(__glewVertexAttrib4dvNV)
+-#define glVertexAttrib4fNV GLEW_GET_FUN(__glewVertexAttrib4fNV)
+-#define glVertexAttrib4fvNV GLEW_GET_FUN(__glewVertexAttrib4fvNV)
+-#define glVertexAttrib4sNV GLEW_GET_FUN(__glewVertexAttrib4sNV)
+-#define glVertexAttrib4svNV GLEW_GET_FUN(__glewVertexAttrib4svNV)
+-#define glVertexAttrib4ubNV GLEW_GET_FUN(__glewVertexAttrib4ubNV)
+-#define glVertexAttrib4ubvNV GLEW_GET_FUN(__glewVertexAttrib4ubvNV)
+-#define glVertexAttribPointerNV GLEW_GET_FUN(__glewVertexAttribPointerNV)
+-#define glVertexAttribs1dvNV GLEW_GET_FUN(__glewVertexAttribs1dvNV)
+-#define glVertexAttribs1fvNV GLEW_GET_FUN(__glewVertexAttribs1fvNV)
+-#define glVertexAttribs1svNV GLEW_GET_FUN(__glewVertexAttribs1svNV)
+-#define glVertexAttribs2dvNV GLEW_GET_FUN(__glewVertexAttribs2dvNV)
+-#define glVertexAttribs2fvNV GLEW_GET_FUN(__glewVertexAttribs2fvNV)
+-#define glVertexAttribs2svNV GLEW_GET_FUN(__glewVertexAttribs2svNV)
+-#define glVertexAttribs3dvNV GLEW_GET_FUN(__glewVertexAttribs3dvNV)
+-#define glVertexAttribs3fvNV GLEW_GET_FUN(__glewVertexAttribs3fvNV)
+-#define glVertexAttribs3svNV GLEW_GET_FUN(__glewVertexAttribs3svNV)
+-#define glVertexAttribs4dvNV GLEW_GET_FUN(__glewVertexAttribs4dvNV)
+-#define glVertexAttribs4fvNV GLEW_GET_FUN(__glewVertexAttribs4fvNV)
+-#define glVertexAttribs4svNV GLEW_GET_FUN(__glewVertexAttribs4svNV)
+-#define glVertexAttribs4ubvNV GLEW_GET_FUN(__glewVertexAttribs4ubvNV)
+-
+-#define GLEW_NV_vertex_program GLEW_GET_VAR(__GLEW_NV_vertex_program)
+-
+-#endif /* GL_NV_vertex_program */
+-
+-/* ------------------------ GL_NV_vertex_program1_1 ------------------------ */
+-
+-#ifndef GL_NV_vertex_program1_1
+-#define GL_NV_vertex_program1_1 1
+-
+-#define GLEW_NV_vertex_program1_1 GLEW_GET_VAR(__GLEW_NV_vertex_program1_1)
+-
+-#endif /* GL_NV_vertex_program1_1 */
+-
+-/* ------------------------- GL_NV_vertex_program2 ------------------------- */
+-
+-#ifndef GL_NV_vertex_program2
+-#define GL_NV_vertex_program2 1
+-
+-#define GLEW_NV_vertex_program2 GLEW_GET_VAR(__GLEW_NV_vertex_program2)
+-
+-#endif /* GL_NV_vertex_program2 */
+-
+-/* ---------------------- GL_NV_vertex_program2_option --------------------- */
+-
+-#ifndef GL_NV_vertex_program2_option
+-#define GL_NV_vertex_program2_option 1
+-
+-#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
+-#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
+-
+-#define GLEW_NV_vertex_program2_option GLEW_GET_VAR(__GLEW_NV_vertex_program2_option)
+-
+-#endif /* GL_NV_vertex_program2_option */
+-
+-/* ------------------------- GL_NV_vertex_program3 ------------------------- */
+-
+-#ifndef GL_NV_vertex_program3
+-#define GL_NV_vertex_program3 1
+-
+-#define MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
+-
+-#define GLEW_NV_vertex_program3 GLEW_GET_VAR(__GLEW_NV_vertex_program3)
+-
+-#endif /* GL_NV_vertex_program3 */
+-
+-/* ------------------------- GL_NV_vertex_program4 ------------------------- */
+-
+-#ifndef GL_NV_vertex_program4
+-#define GL_NV_vertex_program4 1
+-
+-#define GLEW_NV_vertex_program4 GLEW_GET_VAR(__GLEW_NV_vertex_program4)
+-
+-#endif /* GL_NV_vertex_program4 */
+-
+-/* ------------------------ GL_OES_byte_coordinates ------------------------ */
+-
+-#ifndef GL_OES_byte_coordinates
+-#define GL_OES_byte_coordinates 1
+-
+-#define GL_BYTE 0x1400
+-
+-#define GLEW_OES_byte_coordinates GLEW_GET_VAR(__GLEW_OES_byte_coordinates)
+-
+-#endif /* GL_OES_byte_coordinates */
+-
+-/* ------------------- GL_OES_compressed_paletted_texture ------------------ */
+-
+-#ifndef GL_OES_compressed_paletted_texture
+-#define GL_OES_compressed_paletted_texture 1
+-
+-#define GL_PALETTE4_RGB8_OES 0x8B90
+-#define GL_PALETTE4_RGBA8_OES 0x8B91
+-#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
+-#define GL_PALETTE4_RGBA4_OES 0x8B93
+-#define GL_PALETTE4_RGB5_A1_OES 0x8B94
+-#define GL_PALETTE8_RGB8_OES 0x8B95
+-#define GL_PALETTE8_RGBA8_OES 0x8B96
+-#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
+-#define GL_PALETTE8_RGBA4_OES 0x8B98
+-#define GL_PALETTE8_RGB5_A1_OES 0x8B99
+-
+-#define GLEW_OES_compressed_paletted_texture GLEW_GET_VAR(__GLEW_OES_compressed_paletted_texture)
+-
+-#endif /* GL_OES_compressed_paletted_texture */
+-
+-/* --------------------------- GL_OES_read_format -------------------------- */
+-
+-#ifndef GL_OES_read_format
+-#define GL_OES_read_format 1
+-
+-#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
+-#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
+-
+-#define GLEW_OES_read_format GLEW_GET_VAR(__GLEW_OES_read_format)
+-
+-#endif /* GL_OES_read_format */
+-
+-/* ------------------------ GL_OES_single_precision ------------------------ */
+-
+-#ifndef GL_OES_single_precision
+-#define GL_OES_single_precision 1
+-
+-typedef void (GLAPIENTRY * PFNGLCLEARDEPTHFOESPROC) (GLclampd depth);
+-typedef void (GLAPIENTRY * PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat* equation);
+-typedef void (GLAPIENTRY * PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);
+-typedef void (GLAPIENTRY * PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
+-typedef void (GLAPIENTRY * PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat* equation);
+-typedef void (GLAPIENTRY * PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
+-
+-#define glClearDepthfOES GLEW_GET_FUN(__glewClearDepthfOES)
+-#define glClipPlanefOES GLEW_GET_FUN(__glewClipPlanefOES)
+-#define glDepthRangefOES GLEW_GET_FUN(__glewDepthRangefOES)
+-#define glFrustumfOES GLEW_GET_FUN(__glewFrustumfOES)
+-#define glGetClipPlanefOES GLEW_GET_FUN(__glewGetClipPlanefOES)
+-#define glOrthofOES GLEW_GET_FUN(__glewOrthofOES)
+-
+-#define GLEW_OES_single_precision GLEW_GET_VAR(__GLEW_OES_single_precision)
+-
+-#endif /* GL_OES_single_precision */
+-
+-/* ---------------------------- GL_OML_interlace --------------------------- */
+-
+-#ifndef GL_OML_interlace
+-#define GL_OML_interlace 1
+-
+-#define GL_INTERLACE_OML 0x8980
+-#define GL_INTERLACE_READ_OML 0x8981
+-
+-#define GLEW_OML_interlace GLEW_GET_VAR(__GLEW_OML_interlace)
+-
+-#endif /* GL_OML_interlace */
+-
+-/* ---------------------------- GL_OML_resample ---------------------------- */
+-
+-#ifndef GL_OML_resample
+-#define GL_OML_resample 1
+-
+-#define GL_PACK_RESAMPLE_OML 0x8984
+-#define GL_UNPACK_RESAMPLE_OML 0x8985
+-#define GL_RESAMPLE_REPLICATE_OML 0x8986
+-#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
+-#define GL_RESAMPLE_AVERAGE_OML 0x8988
+-#define GL_RESAMPLE_DECIMATE_OML 0x8989
+-
+-#define GLEW_OML_resample GLEW_GET_VAR(__GLEW_OML_resample)
+-
+-#endif /* GL_OML_resample */
+-
+-/* ---------------------------- GL_OML_subsample --------------------------- */
+-
+-#ifndef GL_OML_subsample
+-#define GL_OML_subsample 1
+-
+-#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
+-#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
+-
+-#define GLEW_OML_subsample GLEW_GET_VAR(__GLEW_OML_subsample)
+-
+-#endif /* GL_OML_subsample */
+-
+-/* --------------------------- GL_PGI_misc_hints --------------------------- */
+-
+-#ifndef GL_PGI_misc_hints
+-#define GL_PGI_misc_hints 1
+-
+-#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 107000
+-#define GL_CONSERVE_MEMORY_HINT_PGI 107005
+-#define GL_RECLAIM_MEMORY_HINT_PGI 107006
+-#define GL_NATIVE_GRAPHICS_HANDLE_PGI 107010
+-#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 107011
+-#define GL_NATIVE_GRAPHICS_END_HINT_PGI 107012
+-#define GL_ALWAYS_FAST_HINT_PGI 107020
+-#define GL_ALWAYS_SOFT_HINT_PGI 107021
+-#define GL_ALLOW_DRAW_OBJ_HINT_PGI 107022
+-#define GL_ALLOW_DRAW_WIN_HINT_PGI 107023
+-#define GL_ALLOW_DRAW_FRG_HINT_PGI 107024
+-#define GL_ALLOW_DRAW_MEM_HINT_PGI 107025
+-#define GL_STRICT_DEPTHFUNC_HINT_PGI 107030
+-#define GL_STRICT_LIGHTING_HINT_PGI 107031
+-#define GL_STRICT_SCISSOR_HINT_PGI 107032
+-#define GL_FULL_STIPPLE_HINT_PGI 107033
+-#define GL_CLIP_NEAR_HINT_PGI 107040
+-#define GL_CLIP_FAR_HINT_PGI 107041
+-#define GL_WIDE_LINE_HINT_PGI 107042
+-#define GL_BACK_NORMALS_HINT_PGI 107043
+-
+-#define GLEW_PGI_misc_hints GLEW_GET_VAR(__GLEW_PGI_misc_hints)
+-
+-#endif /* GL_PGI_misc_hints */
+-
+-/* -------------------------- GL_PGI_vertex_hints -------------------------- */
+-
+-#ifndef GL_PGI_vertex_hints
+-#define GL_PGI_vertex_hints 1
+-
+-#define GL_VERTEX23_BIT_PGI 0x00000004
+-#define GL_VERTEX4_BIT_PGI 0x00000008
+-#define GL_COLOR3_BIT_PGI 0x00010000
+-#define GL_COLOR4_BIT_PGI 0x00020000
+-#define GL_EDGEFLAG_BIT_PGI 0x00040000
+-#define GL_INDEX_BIT_PGI 0x00080000
+-#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
+-#define GL_VERTEX_DATA_HINT_PGI 107050
+-#define GL_VERTEX_CONSISTENT_HINT_PGI 107051
+-#define GL_MATERIAL_SIDE_HINT_PGI 107052
+-#define GL_MAX_VERTEX_HINT_PGI 107053
+-#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
+-#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
+-#define GL_MAT_EMISSION_BIT_PGI 0x00800000
+-#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
+-#define GL_MAT_SHININESS_BIT_PGI 0x02000000
+-#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
+-#define GL_NORMAL_BIT_PGI 0x08000000
+-#define GL_TEXCOORD1_BIT_PGI 0x10000000
+-#define GL_TEXCOORD2_BIT_PGI 0x20000000
+-#define GL_TEXCOORD3_BIT_PGI 0x40000000
+-#define GL_TEXCOORD4_BIT_PGI 0x80000000
+-
+-#define GLEW_PGI_vertex_hints GLEW_GET_VAR(__GLEW_PGI_vertex_hints)
+-
+-#endif /* GL_PGI_vertex_hints */
+-
+-/* ----------------------- GL_REND_screen_coordinates ---------------------- */
+-
+-#ifndef GL_REND_screen_coordinates
+-#define GL_REND_screen_coordinates 1
+-
+-#define GL_SCREEN_COORDINATES_REND 0x8490
+-#define GL_INVERTED_SCREEN_W_REND 0x8491
+-
+-#define GLEW_REND_screen_coordinates GLEW_GET_VAR(__GLEW_REND_screen_coordinates)
+-
+-#endif /* GL_REND_screen_coordinates */
+-
+-/* ------------------------------- GL_S3_s3tc ------------------------------ */
+-
+-#ifndef GL_S3_s3tc
+-#define GL_S3_s3tc 1
+-
+-#define GL_RGB_S3TC 0x83A0
+-#define GL_RGB4_S3TC 0x83A1
+-#define GL_RGBA_S3TC 0x83A2
+-#define GL_RGBA4_S3TC 0x83A3
+-#define GL_RGBA_DXT5_S3TC 0x83A4
+-#define GL_RGBA4_DXT5_S3TC 0x83A5
+-
+-#define GLEW_S3_s3tc GLEW_GET_VAR(__GLEW_S3_s3tc)
+-
+-#endif /* GL_S3_s3tc */
+-
+-/* -------------------------- GL_SGIS_color_range -------------------------- */
+-
+-#ifndef GL_SGIS_color_range
+-#define GL_SGIS_color_range 1
+-
+-#define GL_EXTENDED_RANGE_SGIS 0x85A5
+-#define GL_MIN_RED_SGIS 0x85A6
+-#define GL_MAX_RED_SGIS 0x85A7
+-#define GL_MIN_GREEN_SGIS 0x85A8
+-#define GL_MAX_GREEN_SGIS 0x85A9
+-#define GL_MIN_BLUE_SGIS 0x85AA
+-#define GL_MAX_BLUE_SGIS 0x85AB
+-#define GL_MIN_ALPHA_SGIS 0x85AC
+-#define GL_MAX_ALPHA_SGIS 0x85AD
+-
+-#define GLEW_SGIS_color_range GLEW_GET_VAR(__GLEW_SGIS_color_range)
+-
+-#endif /* GL_SGIS_color_range */
+-
+-/* ------------------------- GL_SGIS_detail_texture ------------------------ */
+-
+-#ifndef GL_SGIS_detail_texture
+-#define GL_SGIS_detail_texture 1
+-
+-typedef void (GLAPIENTRY * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
+-typedef void (GLAPIENTRY * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
+-
+-#define glDetailTexFuncSGIS GLEW_GET_FUN(__glewDetailTexFuncSGIS)
+-#define glGetDetailTexFuncSGIS GLEW_GET_FUN(__glewGetDetailTexFuncSGIS)
+-
+-#define GLEW_SGIS_detail_texture GLEW_GET_VAR(__GLEW_SGIS_detail_texture)
+-
+-#endif /* GL_SGIS_detail_texture */
+-
+-/* -------------------------- GL_SGIS_fog_function ------------------------- */
+-
+-#ifndef GL_SGIS_fog_function
+-#define GL_SGIS_fog_function 1
+-
+-typedef void (GLAPIENTRY * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat* points);
+-typedef void (GLAPIENTRY * PFNGLGETFOGFUNCSGISPROC) (GLfloat* points);
+-
+-#define glFogFuncSGIS GLEW_GET_FUN(__glewFogFuncSGIS)
+-#define glGetFogFuncSGIS GLEW_GET_FUN(__glewGetFogFuncSGIS)
+-
+-#define GLEW_SGIS_fog_function GLEW_GET_VAR(__GLEW_SGIS_fog_function)
+-
+-#endif /* GL_SGIS_fog_function */
+-
+-/* ------------------------ GL_SGIS_generate_mipmap ------------------------ */
+-
+-#ifndef GL_SGIS_generate_mipmap
+-#define GL_SGIS_generate_mipmap 1
+-
+-#define GL_GENERATE_MIPMAP_SGIS 0x8191
+-#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
+-
+-#define GLEW_SGIS_generate_mipmap GLEW_GET_VAR(__GLEW_SGIS_generate_mipmap)
+-
+-#endif /* GL_SGIS_generate_mipmap */
+-
+-/* -------------------------- GL_SGIS_multisample -------------------------- */
+-
+-#ifndef GL_SGIS_multisample
+-#define GL_SGIS_multisample 1
+-
+-#define GL_MULTISAMPLE_SGIS 0x809D
+-#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
+-#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
+-#define GL_SAMPLE_MASK_SGIS 0x80A0
+-#define GL_1PASS_SGIS 0x80A1
+-#define GL_2PASS_0_SGIS 0x80A2
+-#define GL_2PASS_1_SGIS 0x80A3
+-#define GL_4PASS_0_SGIS 0x80A4
+-#define GL_4PASS_1_SGIS 0x80A5
+-#define GL_4PASS_2_SGIS 0x80A6
+-#define GL_4PASS_3_SGIS 0x80A7
+-#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
+-#define GL_SAMPLES_SGIS 0x80A9
+-#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
+-#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
+-#define GL_SAMPLE_PATTERN_SGIS 0x80AC
+-#define GL_MULTISAMPLE_BIT_EXT 0x20000000
+-
+-typedef void (GLAPIENTRY * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
+-typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
+-
+-#define glSampleMaskSGIS GLEW_GET_FUN(__glewSampleMaskSGIS)
+-#define glSamplePatternSGIS GLEW_GET_FUN(__glewSamplePatternSGIS)
+-
+-#define GLEW_SGIS_multisample GLEW_GET_VAR(__GLEW_SGIS_multisample)
+-
+-#endif /* GL_SGIS_multisample */
+-
+-/* ------------------------- GL_SGIS_pixel_texture ------------------------- */
+-
+-#ifndef GL_SGIS_pixel_texture
+-#define GL_SGIS_pixel_texture 1
+-
+-#define GLEW_SGIS_pixel_texture GLEW_GET_VAR(__GLEW_SGIS_pixel_texture)
+-
+-#endif /* GL_SGIS_pixel_texture */
+-
+-/* ------------------------ GL_SGIS_sharpen_texture ------------------------ */
+-
+-#ifndef GL_SGIS_sharpen_texture
+-#define GL_SGIS_sharpen_texture 1
+-
+-typedef void (GLAPIENTRY * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
+-typedef void (GLAPIENTRY * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
+-
+-#define glGetSharpenTexFuncSGIS GLEW_GET_FUN(__glewGetSharpenTexFuncSGIS)
+-#define glSharpenTexFuncSGIS GLEW_GET_FUN(__glewSharpenTexFuncSGIS)
+-
+-#define GLEW_SGIS_sharpen_texture GLEW_GET_VAR(__GLEW_SGIS_sharpen_texture)
+-
+-#endif /* GL_SGIS_sharpen_texture */
+-
+-/* --------------------------- GL_SGIS_texture4D --------------------------- */
+-
+-#ifndef GL_SGIS_texture4D
+-#define GL_SGIS_texture4D 1
+-
+-typedef void (GLAPIENTRY * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void* pixels);
+-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void* pixels);
+-
+-#define glTexImage4DSGIS GLEW_GET_FUN(__glewTexImage4DSGIS)
+-#define glTexSubImage4DSGIS GLEW_GET_FUN(__glewTexSubImage4DSGIS)
+-
+-#define GLEW_SGIS_texture4D GLEW_GET_VAR(__GLEW_SGIS_texture4D)
+-
+-#endif /* GL_SGIS_texture4D */
+-
+-/* ---------------------- GL_SGIS_texture_border_clamp --------------------- */
+-
+-#ifndef GL_SGIS_texture_border_clamp
+-#define GL_SGIS_texture_border_clamp 1
+-
+-#define GL_CLAMP_TO_BORDER_SGIS 0x812D
+-
+-#define GLEW_SGIS_texture_border_clamp GLEW_GET_VAR(__GLEW_SGIS_texture_border_clamp)
+-
+-#endif /* GL_SGIS_texture_border_clamp */
+-
+-/* ----------------------- GL_SGIS_texture_edge_clamp ---------------------- */
+-
+-#ifndef GL_SGIS_texture_edge_clamp
+-#define GL_SGIS_texture_edge_clamp 1
+-
+-#define GL_CLAMP_TO_EDGE_SGIS 0x812F
+-
+-#define GLEW_SGIS_texture_edge_clamp GLEW_GET_VAR(__GLEW_SGIS_texture_edge_clamp)
+-
+-#endif /* GL_SGIS_texture_edge_clamp */
+-
+-/* ------------------------ GL_SGIS_texture_filter4 ------------------------ */
+-
+-#ifndef GL_SGIS_texture_filter4
+-#define GL_SGIS_texture_filter4 1
+-
+-typedef void (GLAPIENTRY * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat* weights);
+-typedef void (GLAPIENTRY * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
+-
+-#define glGetTexFilterFuncSGIS GLEW_GET_FUN(__glewGetTexFilterFuncSGIS)
+-#define glTexFilterFuncSGIS GLEW_GET_FUN(__glewTexFilterFuncSGIS)
+-
+-#define GLEW_SGIS_texture_filter4 GLEW_GET_VAR(__GLEW_SGIS_texture_filter4)
+-
+-#endif /* GL_SGIS_texture_filter4 */
+-
+-/* -------------------------- GL_SGIS_texture_lod -------------------------- */
+-
+-#ifndef GL_SGIS_texture_lod
+-#define GL_SGIS_texture_lod 1
+-
+-#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
+-#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
+-#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
+-#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
+-
+-#define GLEW_SGIS_texture_lod GLEW_GET_VAR(__GLEW_SGIS_texture_lod)
+-
+-#endif /* GL_SGIS_texture_lod */
+-
+-/* ------------------------- GL_SGIS_texture_select ------------------------ */
+-
+-#ifndef GL_SGIS_texture_select
+-#define GL_SGIS_texture_select 1
+-
+-#define GLEW_SGIS_texture_select GLEW_GET_VAR(__GLEW_SGIS_texture_select)
+-
+-#endif /* GL_SGIS_texture_select */
+-
+-/* ----------------------------- GL_SGIX_async ----------------------------- */
+-
+-#ifndef GL_SGIX_async
+-#define GL_SGIX_async 1
+-
+-#define GL_ASYNC_MARKER_SGIX 0x8329
+-
+-typedef void (GLAPIENTRY * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
+-typedef void (GLAPIENTRY * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
+-typedef GLint (GLAPIENTRY * PFNGLFINISHASYNCSGIXPROC) (GLuint* markerp);
+-typedef GLuint (GLAPIENTRY * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
+-typedef GLboolean (GLAPIENTRY * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
+-typedef GLint (GLAPIENTRY * PFNGLPOLLASYNCSGIXPROC) (GLuint* markerp);
+-
+-#define glAsyncMarkerSGIX GLEW_GET_FUN(__glewAsyncMarkerSGIX)
+-#define glDeleteAsyncMarkersSGIX GLEW_GET_FUN(__glewDeleteAsyncMarkersSGIX)
+-#define glFinishAsyncSGIX GLEW_GET_FUN(__glewFinishAsyncSGIX)
+-#define glGenAsyncMarkersSGIX GLEW_GET_FUN(__glewGenAsyncMarkersSGIX)
+-#define glIsAsyncMarkerSGIX GLEW_GET_FUN(__glewIsAsyncMarkerSGIX)
+-#define glPollAsyncSGIX GLEW_GET_FUN(__glewPollAsyncSGIX)
+-
+-#define GLEW_SGIX_async GLEW_GET_VAR(__GLEW_SGIX_async)
+-
+-#endif /* GL_SGIX_async */
+-
+-/* ------------------------ GL_SGIX_async_histogram ------------------------ */
+-
+-#ifndef GL_SGIX_async_histogram
+-#define GL_SGIX_async_histogram 1
+-
+-#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
+-#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
+-
+-#define GLEW_SGIX_async_histogram GLEW_GET_VAR(__GLEW_SGIX_async_histogram)
+-
+-#endif /* GL_SGIX_async_histogram */
+-
+-/* -------------------------- GL_SGIX_async_pixel -------------------------- */
+-
+-#ifndef GL_SGIX_async_pixel
+-#define GL_SGIX_async_pixel 1
+-
+-#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
+-#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
+-#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
+-#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
+-#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
+-#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
+-
+-#define GLEW_SGIX_async_pixel GLEW_GET_VAR(__GLEW_SGIX_async_pixel)
+-
+-#endif /* GL_SGIX_async_pixel */
+-
+-/* ----------------------- GL_SGIX_blend_alpha_minmax ---------------------- */
+-
+-#ifndef GL_SGIX_blend_alpha_minmax
+-#define GL_SGIX_blend_alpha_minmax 1
+-
+-#define GL_ALPHA_MIN_SGIX 0x8320
+-#define GL_ALPHA_MAX_SGIX 0x8321
+-
+-#define GLEW_SGIX_blend_alpha_minmax GLEW_GET_VAR(__GLEW_SGIX_blend_alpha_minmax)
+-
+-#endif /* GL_SGIX_blend_alpha_minmax */
+-
+-/* ---------------------------- GL_SGIX_clipmap ---------------------------- */
+-
+-#ifndef GL_SGIX_clipmap
+-#define GL_SGIX_clipmap 1
+-
+-#define GLEW_SGIX_clipmap GLEW_GET_VAR(__GLEW_SGIX_clipmap)
+-
+-#endif /* GL_SGIX_clipmap */
+-
+-/* ------------------------- GL_SGIX_depth_texture ------------------------- */
+-
+-#ifndef GL_SGIX_depth_texture
+-#define GL_SGIX_depth_texture 1
+-
+-#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
+-#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
+-#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
+-
+-#define GLEW_SGIX_depth_texture GLEW_GET_VAR(__GLEW_SGIX_depth_texture)
+-
+-#endif /* GL_SGIX_depth_texture */
+-
+-/* -------------------------- GL_SGIX_flush_raster ------------------------- */
+-
+-#ifndef GL_SGIX_flush_raster
+-#define GL_SGIX_flush_raster 1
+-
+-typedef void (GLAPIENTRY * PFNGLFLUSHRASTERSGIXPROC) (void);
+-
+-#define glFlushRasterSGIX GLEW_GET_FUN(__glewFlushRasterSGIX)
+-
+-#define GLEW_SGIX_flush_raster GLEW_GET_VAR(__GLEW_SGIX_flush_raster)
+-
+-#endif /* GL_SGIX_flush_raster */
+-
+-/* --------------------------- GL_SGIX_fog_offset -------------------------- */
+-
+-#ifndef GL_SGIX_fog_offset
+-#define GL_SGIX_fog_offset 1
+-
+-#define GL_FOG_OFFSET_SGIX 0x8198
+-#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
+-
+-#define GLEW_SGIX_fog_offset GLEW_GET_VAR(__GLEW_SGIX_fog_offset)
+-
+-#endif /* GL_SGIX_fog_offset */
+-
+-/* -------------------------- GL_SGIX_fog_texture -------------------------- */
+-
+-#ifndef GL_SGIX_fog_texture
+-#define GL_SGIX_fog_texture 1
+-
+-#define GL_TEXTURE_FOG_SGIX 0
+-#define GL_FOG_PATCHY_FACTOR_SGIX 0
+-#define GL_FRAGMENT_FOG_SGIX 0
+-
+-typedef void (GLAPIENTRY * PFNGLTEXTUREFOGSGIXPROC) (GLenum pname);
+-
+-#define glTextureFogSGIX GLEW_GET_FUN(__glewTextureFogSGIX)
+-
+-#define GLEW_SGIX_fog_texture GLEW_GET_VAR(__GLEW_SGIX_fog_texture)
+-
+-#endif /* GL_SGIX_fog_texture */
+-
+-/* ------------------- GL_SGIX_fragment_specular_lighting ------------------ */
+-
+-#ifndef GL_SGIX_fragment_specular_lighting
+-#define GL_SGIX_fragment_specular_lighting 1
+-
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, const GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, const GLint param);
+-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum value, GLfloat* data);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum value, GLint* data);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* data);
+-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* data);
+-
+-#define glFragmentColorMaterialSGIX GLEW_GET_FUN(__glewFragmentColorMaterialSGIX)
+-#define glFragmentLightModelfSGIX GLEW_GET_FUN(__glewFragmentLightModelfSGIX)
+-#define glFragmentLightModelfvSGIX GLEW_GET_FUN(__glewFragmentLightModelfvSGIX)
+-#define glFragmentLightModeliSGIX GLEW_GET_FUN(__glewFragmentLightModeliSGIX)
+-#define glFragmentLightModelivSGIX GLEW_GET_FUN(__glewFragmentLightModelivSGIX)
+-#define glFragmentLightfSGIX GLEW_GET_FUN(__glewFragmentLightfSGIX)
+-#define glFragmentLightfvSGIX GLEW_GET_FUN(__glewFragmentLightfvSGIX)
+-#define glFragmentLightiSGIX GLEW_GET_FUN(__glewFragmentLightiSGIX)
+-#define glFragmentLightivSGIX GLEW_GET_FUN(__glewFragmentLightivSGIX)
+-#define glFragmentMaterialfSGIX GLEW_GET_FUN(__glewFragmentMaterialfSGIX)
+-#define glFragmentMaterialfvSGIX GLEW_GET_FUN(__glewFragmentMaterialfvSGIX)
+-#define glFragmentMaterialiSGIX GLEW_GET_FUN(__glewFragmentMaterialiSGIX)
+-#define glFragmentMaterialivSGIX GLEW_GET_FUN(__glewFragmentMaterialivSGIX)
+-#define glGetFragmentLightfvSGIX GLEW_GET_FUN(__glewGetFragmentLightfvSGIX)
+-#define glGetFragmentLightivSGIX GLEW_GET_FUN(__glewGetFragmentLightivSGIX)
+-#define glGetFragmentMaterialfvSGIX GLEW_GET_FUN(__glewGetFragmentMaterialfvSGIX)
+-#define glGetFragmentMaterialivSGIX GLEW_GET_FUN(__glewGetFragmentMaterialivSGIX)
+-
+-#define GLEW_SGIX_fragment_specular_lighting GLEW_GET_VAR(__GLEW_SGIX_fragment_specular_lighting)
+-
+-#endif /* GL_SGIX_fragment_specular_lighting */
+-
+-/* --------------------------- GL_SGIX_framezoom --------------------------- */
+-
+-#ifndef GL_SGIX_framezoom
+-#define GL_SGIX_framezoom 1
+-
+-typedef void (GLAPIENTRY * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
+-
+-#define glFrameZoomSGIX GLEW_GET_FUN(__glewFrameZoomSGIX)
+-
+-#define GLEW_SGIX_framezoom GLEW_GET_VAR(__GLEW_SGIX_framezoom)
+-
+-#endif /* GL_SGIX_framezoom */
+-
+-/* --------------------------- GL_SGIX_interlace --------------------------- */
+-
+-#ifndef GL_SGIX_interlace
+-#define GL_SGIX_interlace 1
+-
+-#define GL_INTERLACE_SGIX 0x8094
+-
+-#define GLEW_SGIX_interlace GLEW_GET_VAR(__GLEW_SGIX_interlace)
+-
+-#endif /* GL_SGIX_interlace */
+-
+-/* ------------------------- GL_SGIX_ir_instrument1 ------------------------ */
+-
+-#ifndef GL_SGIX_ir_instrument1
+-#define GL_SGIX_ir_instrument1 1
+-
+-#define GLEW_SGIX_ir_instrument1 GLEW_GET_VAR(__GLEW_SGIX_ir_instrument1)
+-
+-#endif /* GL_SGIX_ir_instrument1 */
+-
+-/* ------------------------- GL_SGIX_list_priority ------------------------- */
+-
+-#ifndef GL_SGIX_list_priority
+-#define GL_SGIX_list_priority 1
+-
+-#define GLEW_SGIX_list_priority GLEW_GET_VAR(__GLEW_SGIX_list_priority)
+-
+-#endif /* GL_SGIX_list_priority */
+-
+-/* ------------------------- GL_SGIX_pixel_texture ------------------------- */
+-
+-#ifndef GL_SGIX_pixel_texture
+-#define GL_SGIX_pixel_texture 1
+-
+-typedef void (GLAPIENTRY * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
+-
+-#define glPixelTexGenSGIX GLEW_GET_FUN(__glewPixelTexGenSGIX)
+-
+-#define GLEW_SGIX_pixel_texture GLEW_GET_VAR(__GLEW_SGIX_pixel_texture)
+-
+-#endif /* GL_SGIX_pixel_texture */
+-
+-/* ----------------------- GL_SGIX_pixel_texture_bits ---------------------- */
+-
+-#ifndef GL_SGIX_pixel_texture_bits
+-#define GL_SGIX_pixel_texture_bits 1
+-
+-#define GLEW_SGIX_pixel_texture_bits GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_bits)
+-
+-#endif /* GL_SGIX_pixel_texture_bits */
+-
+-/* ------------------------ GL_SGIX_reference_plane ------------------------ */
+-
+-#ifndef GL_SGIX_reference_plane
+-#define GL_SGIX_reference_plane 1
+-
+-typedef void (GLAPIENTRY * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble* equation);
+-
+-#define glReferencePlaneSGIX GLEW_GET_FUN(__glewReferencePlaneSGIX)
+-
+-#define GLEW_SGIX_reference_plane GLEW_GET_VAR(__GLEW_SGIX_reference_plane)
+-
+-#endif /* GL_SGIX_reference_plane */
+-
+-/* ---------------------------- GL_SGIX_resample --------------------------- */
+-
+-#ifndef GL_SGIX_resample
+-#define GL_SGIX_resample 1
+-
+-#define GL_PACK_RESAMPLE_SGIX 0x842E
+-#define GL_UNPACK_RESAMPLE_SGIX 0x842F
+-#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
+-#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
+-#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
+-
+-#define GLEW_SGIX_resample GLEW_GET_VAR(__GLEW_SGIX_resample)
+-
+-#endif /* GL_SGIX_resample */
+-
+-/* ----------------------------- GL_SGIX_shadow ---------------------------- */
+-
+-#ifndef GL_SGIX_shadow
+-#define GL_SGIX_shadow 1
+-
+-#define GL_TEXTURE_COMPARE_SGIX 0x819A
+-#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
+-#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
+-#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
+-
+-#define GLEW_SGIX_shadow GLEW_GET_VAR(__GLEW_SGIX_shadow)
+-
+-#endif /* GL_SGIX_shadow */
+-
+-/* ------------------------- GL_SGIX_shadow_ambient ------------------------ */
+-
+-#ifndef GL_SGIX_shadow_ambient
+-#define GL_SGIX_shadow_ambient 1
+-
+-#define GL_SHADOW_AMBIENT_SGIX 0x80BF
+-
+-#define GLEW_SGIX_shadow_ambient GLEW_GET_VAR(__GLEW_SGIX_shadow_ambient)
+-
+-#endif /* GL_SGIX_shadow_ambient */
+-
+-/* ----------------------------- GL_SGIX_sprite ---------------------------- */
+-
+-#ifndef GL_SGIX_sprite
+-#define GL_SGIX_sprite 1
+-
+-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
+-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
+-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, GLint* params);
+-
+-#define glSpriteParameterfSGIX GLEW_GET_FUN(__glewSpriteParameterfSGIX)
+-#define glSpriteParameterfvSGIX GLEW_GET_FUN(__glewSpriteParameterfvSGIX)
+-#define glSpriteParameteriSGIX GLEW_GET_FUN(__glewSpriteParameteriSGIX)
+-#define glSpriteParameterivSGIX GLEW_GET_FUN(__glewSpriteParameterivSGIX)
+-
+-#define GLEW_SGIX_sprite GLEW_GET_VAR(__GLEW_SGIX_sprite)
+-
+-#endif /* GL_SGIX_sprite */
+-
+-/* ----------------------- GL_SGIX_tag_sample_buffer ----------------------- */
+-
+-#ifndef GL_SGIX_tag_sample_buffer
+-#define GL_SGIX_tag_sample_buffer 1
+-
+-typedef void (GLAPIENTRY * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
+-
+-#define glTagSampleBufferSGIX GLEW_GET_FUN(__glewTagSampleBufferSGIX)
+-
+-#define GLEW_SGIX_tag_sample_buffer GLEW_GET_VAR(__GLEW_SGIX_tag_sample_buffer)
+-
+-#endif /* GL_SGIX_tag_sample_buffer */
+-
+-/* ------------------------ GL_SGIX_texture_add_env ------------------------ */
+-
+-#ifndef GL_SGIX_texture_add_env
+-#define GL_SGIX_texture_add_env 1
+-
+-#define GLEW_SGIX_texture_add_env GLEW_GET_VAR(__GLEW_SGIX_texture_add_env)
+-
+-#endif /* GL_SGIX_texture_add_env */
+-
+-/* -------------------- GL_SGIX_texture_coordinate_clamp ------------------- */
+-
+-#ifndef GL_SGIX_texture_coordinate_clamp
+-#define GL_SGIX_texture_coordinate_clamp 1
+-
+-#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
+-#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
+-#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
+-
+-#define GLEW_SGIX_texture_coordinate_clamp GLEW_GET_VAR(__GLEW_SGIX_texture_coordinate_clamp)
+-
+-#endif /* GL_SGIX_texture_coordinate_clamp */
+-
+-/* ------------------------ GL_SGIX_texture_lod_bias ----------------------- */
+-
+-#ifndef GL_SGIX_texture_lod_bias
+-#define GL_SGIX_texture_lod_bias 1
+-
+-#define GLEW_SGIX_texture_lod_bias GLEW_GET_VAR(__GLEW_SGIX_texture_lod_bias)
+-
+-#endif /* GL_SGIX_texture_lod_bias */
+-
+-/* ---------------------- GL_SGIX_texture_multi_buffer --------------------- */
+-
+-#ifndef GL_SGIX_texture_multi_buffer
+-#define GL_SGIX_texture_multi_buffer 1
+-
+-#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
+-
+-#define GLEW_SGIX_texture_multi_buffer GLEW_GET_VAR(__GLEW_SGIX_texture_multi_buffer)
+-
+-#endif /* GL_SGIX_texture_multi_buffer */
+-
+-/* ------------------------- GL_SGIX_texture_range ------------------------- */
+-
+-#ifndef GL_SGIX_texture_range
+-#define GL_SGIX_texture_range 1
+-
+-#define GL_RGB_SIGNED_SGIX 0x85E0
+-#define GL_RGBA_SIGNED_SGIX 0x85E1
+-#define GL_ALPHA_SIGNED_SGIX 0x85E2
+-#define GL_LUMINANCE_SIGNED_SGIX 0x85E3
+-#define GL_INTENSITY_SIGNED_SGIX 0x85E4
+-#define GL_LUMINANCE_ALPHA_SIGNED_SGIX 0x85E5
+-#define GL_RGB16_SIGNED_SGIX 0x85E6
+-#define GL_RGBA16_SIGNED_SGIX 0x85E7
+-#define GL_ALPHA16_SIGNED_SGIX 0x85E8
+-#define GL_LUMINANCE16_SIGNED_SGIX 0x85E9
+-#define GL_INTENSITY16_SIGNED_SGIX 0x85EA
+-#define GL_LUMINANCE16_ALPHA16_SIGNED_SGIX 0x85EB
+-#define GL_RGB_EXTENDED_RANGE_SGIX 0x85EC
+-#define GL_RGBA_EXTENDED_RANGE_SGIX 0x85ED
+-#define GL_ALPHA_EXTENDED_RANGE_SGIX 0x85EE
+-#define GL_LUMINANCE_EXTENDED_RANGE_SGIX 0x85EF
+-#define GL_INTENSITY_EXTENDED_RANGE_SGIX 0x85F0
+-#define GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX 0x85F1
+-#define GL_RGB16_EXTENDED_RANGE_SGIX 0x85F2
+-#define GL_RGBA16_EXTENDED_RANGE_SGIX 0x85F3
+-#define GL_ALPHA16_EXTENDED_RANGE_SGIX 0x85F4
+-#define GL_LUMINANCE16_EXTENDED_RANGE_SGIX 0x85F5
+-#define GL_INTENSITY16_EXTENDED_RANGE_SGIX 0x85F6
+-#define GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX 0x85F7
+-#define GL_MIN_LUMINANCE_SGIS 0x85F8
+-#define GL_MAX_LUMINANCE_SGIS 0x85F9
+-#define GL_MIN_INTENSITY_SGIS 0x85FA
+-#define GL_MAX_INTENSITY_SGIS 0x85FB
+-
+-#define GLEW_SGIX_texture_range GLEW_GET_VAR(__GLEW_SGIX_texture_range)
+-
+-#endif /* GL_SGIX_texture_range */
+-
+-/* ----------------------- GL_SGIX_texture_scale_bias ---------------------- */
+-
+-#ifndef GL_SGIX_texture_scale_bias
+-#define GL_SGIX_texture_scale_bias 1
+-
+-#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
+-#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
+-#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
+-#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
+-
+-#define GLEW_SGIX_texture_scale_bias GLEW_GET_VAR(__GLEW_SGIX_texture_scale_bias)
+-
+-#endif /* GL_SGIX_texture_scale_bias */
+-
+-/* ------------------------- GL_SGIX_vertex_preclip ------------------------ */
+-
+-#ifndef GL_SGIX_vertex_preclip
+-#define GL_SGIX_vertex_preclip 1
+-
+-#define GL_VERTEX_PRECLIP_SGIX 0x83EE
+-#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
+-
+-#define GLEW_SGIX_vertex_preclip GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip)
+-
+-#endif /* GL_SGIX_vertex_preclip */
+-
+-/* ---------------------- GL_SGIX_vertex_preclip_hint ---------------------- */
+-
+-#ifndef GL_SGIX_vertex_preclip_hint
+-#define GL_SGIX_vertex_preclip_hint 1
+-
+-#define GL_VERTEX_PRECLIP_SGIX 0x83EE
+-#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
+-
+-#define GLEW_SGIX_vertex_preclip_hint GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip_hint)
+-
+-#endif /* GL_SGIX_vertex_preclip_hint */
+-
+-/* ----------------------------- GL_SGIX_ycrcb ----------------------------- */
+-
+-#ifndef GL_SGIX_ycrcb
+-#define GL_SGIX_ycrcb 1
+-
+-#define GLEW_SGIX_ycrcb GLEW_GET_VAR(__GLEW_SGIX_ycrcb)
+-
+-#endif /* GL_SGIX_ycrcb */
+-
+-/* -------------------------- GL_SGI_color_matrix -------------------------- */
+-
+-#ifndef GL_SGI_color_matrix
+-#define GL_SGI_color_matrix 1
+-
+-#define GL_COLOR_MATRIX_SGI 0x80B1
+-#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
+-#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
+-#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
+-#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
+-#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
+-#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
+-#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
+-#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
+-#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
+-#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
+-
+-#define GLEW_SGI_color_matrix GLEW_GET_VAR(__GLEW_SGI_color_matrix)
+-
+-#endif /* GL_SGI_color_matrix */
+-
+-/* --------------------------- GL_SGI_color_table -------------------------- */
+-
+-#ifndef GL_SGI_color_table
+-#define GL_SGI_color_table 1
+-
+-#define GL_COLOR_TABLE_SGI 0x80D0
+-#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
+-#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
+-#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
+-#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
+-#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
+-#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
+-#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
+-#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
+-#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
+-#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
+-#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
+-#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
+-#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
+-#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
+-#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
+-
+-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint* params);
+-typedef void (GLAPIENTRY * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table);
+-typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat* params);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint* params);
+-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void* table);
+-
+-#define glColorTableParameterfvSGI GLEW_GET_FUN(__glewColorTableParameterfvSGI)
+-#define glColorTableParameterivSGI GLEW_GET_FUN(__glewColorTableParameterivSGI)
+-#define glColorTableSGI GLEW_GET_FUN(__glewColorTableSGI)
+-#define glCopyColorTableSGI GLEW_GET_FUN(__glewCopyColorTableSGI)
+-#define glGetColorTableParameterfvSGI GLEW_GET_FUN(__glewGetColorTableParameterfvSGI)
+-#define glGetColorTableParameterivSGI GLEW_GET_FUN(__glewGetColorTableParameterivSGI)
+-#define glGetColorTableSGI GLEW_GET_FUN(__glewGetColorTableSGI)
+-
+-#define GLEW_SGI_color_table GLEW_GET_VAR(__GLEW_SGI_color_table)
+-
+-#endif /* GL_SGI_color_table */
+-
+-/* ----------------------- GL_SGI_texture_color_table ---------------------- */
+-
+-#ifndef GL_SGI_texture_color_table
+-#define GL_SGI_texture_color_table 1
+-
+-#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
+-#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
+-
+-#define GLEW_SGI_texture_color_table GLEW_GET_VAR(__GLEW_SGI_texture_color_table)
+-
+-#endif /* GL_SGI_texture_color_table */
+-
+-/* ------------------------- GL_SUNX_constant_data ------------------------- */
+-
+-#ifndef GL_SUNX_constant_data
+-#define GL_SUNX_constant_data 1
+-
+-#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
+-#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
+-
+-typedef void (GLAPIENTRY * PFNGLFINISHTEXTURESUNXPROC) (void);
+-
+-#define glFinishTextureSUNX GLEW_GET_FUN(__glewFinishTextureSUNX)
+-
+-#define GLEW_SUNX_constant_data GLEW_GET_VAR(__GLEW_SUNX_constant_data)
+-
+-#endif /* GL_SUNX_constant_data */
+-
+-/* -------------------- GL_SUN_convolution_border_modes -------------------- */
+-
+-#ifndef GL_SUN_convolution_border_modes
+-#define GL_SUN_convolution_border_modes 1
+-
+-#define GL_WRAP_BORDER_SUN 0x81D4
+-
+-#define GLEW_SUN_convolution_border_modes GLEW_GET_VAR(__GLEW_SUN_convolution_border_modes)
+-
+-#endif /* GL_SUN_convolution_border_modes */
+-
+-/* -------------------------- GL_SUN_global_alpha -------------------------- */
+-
+-#ifndef GL_SUN_global_alpha
+-#define GL_SUN_global_alpha 1
+-
+-#define GL_GLOBAL_ALPHA_SUN 0x81D9
+-#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
+-
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
+-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
+-
+-#define glGlobalAlphaFactorbSUN GLEW_GET_FUN(__glewGlobalAlphaFactorbSUN)
+-#define glGlobalAlphaFactordSUN GLEW_GET_FUN(__glewGlobalAlphaFactordSUN)
+-#define glGlobalAlphaFactorfSUN GLEW_GET_FUN(__glewGlobalAlphaFactorfSUN)
+-#define glGlobalAlphaFactoriSUN GLEW_GET_FUN(__glewGlobalAlphaFactoriSUN)
+-#define glGlobalAlphaFactorsSUN GLEW_GET_FUN(__glewGlobalAlphaFactorsSUN)
+-#define glGlobalAlphaFactorubSUN GLEW_GET_FUN(__glewGlobalAlphaFactorubSUN)
+-#define glGlobalAlphaFactoruiSUN GLEW_GET_FUN(__glewGlobalAlphaFactoruiSUN)
+-#define glGlobalAlphaFactorusSUN GLEW_GET_FUN(__glewGlobalAlphaFactorusSUN)
+-
+-#define GLEW_SUN_global_alpha GLEW_GET_VAR(__GLEW_SUN_global_alpha)
+-
+-#endif /* GL_SUN_global_alpha */
+-
+-/* --------------------------- GL_SUN_mesh_array --------------------------- */
+-
+-#ifndef GL_SUN_mesh_array
+-#define GL_SUN_mesh_array 1
+-
+-#define GL_QUAD_MESH_SUN 0x8614
+-#define GL_TRIANGLE_MESH_SUN 0x8615
+-
+-#define GLEW_SUN_mesh_array GLEW_GET_VAR(__GLEW_SUN_mesh_array)
+-
+-#endif /* GL_SUN_mesh_array */
+-
+-/* ------------------------ GL_SUN_read_video_pixels ----------------------- */
+-
+-#ifndef GL_SUN_read_video_pixels
+-#define GL_SUN_read_video_pixels 1
+-
+-typedef void (GLAPIENTRY * PFNGLREADVIDEOPIXELSSUNPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
+-
+-#define glReadVideoPixelsSUN GLEW_GET_FUN(__glewReadVideoPixelsSUN)
+-
+-#define GLEW_SUN_read_video_pixels GLEW_GET_VAR(__GLEW_SUN_read_video_pixels)
+-
+-#endif /* GL_SUN_read_video_pixels */
+-
+-/* --------------------------- GL_SUN_slice_accum -------------------------- */
+-
+-#ifndef GL_SUN_slice_accum
+-#define GL_SUN_slice_accum 1
+-
+-#define GL_SLICE_ACCUM_SUN 0x85CC
+-
+-#define GLEW_SUN_slice_accum GLEW_GET_VAR(__GLEW_SUN_slice_accum)
+-
+-#endif /* GL_SUN_slice_accum */
+-
+-/* -------------------------- GL_SUN_triangle_list ------------------------- */
+-
+-#ifndef GL_SUN_triangle_list
+-#define GL_SUN_triangle_list 1
+-
+-#define GL_RESTART_SUN 0x01
+-#define GL_REPLACE_MIDDLE_SUN 0x02
+-#define GL_REPLACE_OLDEST_SUN 0x03
+-#define GL_TRIANGLE_LIST_SUN 0x81D7
+-#define GL_REPLACEMENT_CODE_SUN 0x81D8
+-#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
+-#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
+-#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
+-#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
+-#define GL_R1UI_V3F_SUN 0x85C4
+-#define GL_R1UI_C4UB_V3F_SUN 0x85C5
+-#define GL_R1UI_C3F_V3F_SUN 0x85C6
+-#define GL_R1UI_N3F_V3F_SUN 0x85C7
+-#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
+-#define GL_R1UI_T2F_V3F_SUN 0x85C9
+-#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
+-#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
+-
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void* pointer);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte* code);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint* code);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort* code);
+-
+-#define glReplacementCodePointerSUN GLEW_GET_FUN(__glewReplacementCodePointerSUN)
+-#define glReplacementCodeubSUN GLEW_GET_FUN(__glewReplacementCodeubSUN)
+-#define glReplacementCodeubvSUN GLEW_GET_FUN(__glewReplacementCodeubvSUN)
+-#define glReplacementCodeuiSUN GLEW_GET_FUN(__glewReplacementCodeuiSUN)
+-#define glReplacementCodeuivSUN GLEW_GET_FUN(__glewReplacementCodeuivSUN)
+-#define glReplacementCodeusSUN GLEW_GET_FUN(__glewReplacementCodeusSUN)
+-#define glReplacementCodeusvSUN GLEW_GET_FUN(__glewReplacementCodeusvSUN)
+-
+-#define GLEW_SUN_triangle_list GLEW_GET_VAR(__GLEW_SUN_triangle_list)
+-
+-#endif /* GL_SUN_triangle_list */
+-
+-/* ----------------------------- GL_SUN_vertex ----------------------------- */
+-
+-#ifndef GL_SUN_vertex
+-#define GL_SUN_vertex 1
+-
+-typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte* c, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte* c, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint* rc, const GLubyte *c, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat* tc, const GLubyte *c, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
+-
+-#define glColor3fVertex3fSUN GLEW_GET_FUN(__glewColor3fVertex3fSUN)
+-#define glColor3fVertex3fvSUN GLEW_GET_FUN(__glewColor3fVertex3fvSUN)
+-#define glColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewColor4fNormal3fVertex3fSUN)
+-#define glColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewColor4fNormal3fVertex3fvSUN)
+-#define glColor4ubVertex2fSUN GLEW_GET_FUN(__glewColor4ubVertex2fSUN)
+-#define glColor4ubVertex2fvSUN GLEW_GET_FUN(__glewColor4ubVertex2fvSUN)
+-#define glColor4ubVertex3fSUN GLEW_GET_FUN(__glewColor4ubVertex3fSUN)
+-#define glColor4ubVertex3fvSUN GLEW_GET_FUN(__glewColor4ubVertex3fvSUN)
+-#define glNormal3fVertex3fSUN GLEW_GET_FUN(__glewNormal3fVertex3fSUN)
+-#define glNormal3fVertex3fvSUN GLEW_GET_FUN(__glewNormal3fVertex3fvSUN)
+-#define glReplacementCodeuiColor3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fSUN)
+-#define glReplacementCodeuiColor3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fvSUN)
+-#define glReplacementCodeuiColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fSUN)
+-#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN)
+-#define glReplacementCodeuiColor4ubVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fSUN)
+-#define glReplacementCodeuiColor4ubVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fvSUN)
+-#define glReplacementCodeuiNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fSUN)
+-#define glReplacementCodeuiNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fvSUN)
+-#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
+-#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
+-#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
+-#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
+-#define glReplacementCodeuiTexCoord2fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fSUN)
+-#define glReplacementCodeuiTexCoord2fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fvSUN)
+-#define glReplacementCodeuiVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiVertex3fSUN)
+-#define glReplacementCodeuiVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiVertex3fvSUN)
+-#define glTexCoord2fColor3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fSUN)
+-#define glTexCoord2fColor3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fvSUN)
+-#define glTexCoord2fColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fSUN)
+-#define glTexCoord2fColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fvSUN)
+-#define glTexCoord2fColor4ubVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fSUN)
+-#define glTexCoord2fColor4ubVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fvSUN)
+-#define glTexCoord2fNormal3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fSUN)
+-#define glTexCoord2fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fvSUN)
+-#define glTexCoord2fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fVertex3fSUN)
+-#define glTexCoord2fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fVertex3fvSUN)
+-#define glTexCoord4fColor4fNormal3fVertex4fSUN GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fSUN)
+-#define glTexCoord4fColor4fNormal3fVertex4fvSUN GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fvSUN)
+-#define glTexCoord4fVertex4fSUN GLEW_GET_FUN(__glewTexCoord4fVertex4fSUN)
+-#define glTexCoord4fVertex4fvSUN GLEW_GET_FUN(__glewTexCoord4fVertex4fvSUN)
+-
+-#define GLEW_SUN_vertex GLEW_GET_VAR(__GLEW_SUN_vertex)
+-
+-#endif /* GL_SUN_vertex */
+-
+-/* -------------------------- GL_WIN_phong_shading ------------------------- */
+-
+-#ifndef GL_WIN_phong_shading
+-#define GL_WIN_phong_shading 1
+-
+-#define GL_PHONG_WIN 0x80EA
+-#define GL_PHONG_HINT_WIN 0x80EB
+-
+-#define GLEW_WIN_phong_shading GLEW_GET_VAR(__GLEW_WIN_phong_shading)
+-
+-#endif /* GL_WIN_phong_shading */
+-
+-/* -------------------------- GL_WIN_specular_fog -------------------------- */
+-
+-#ifndef GL_WIN_specular_fog
+-#define GL_WIN_specular_fog 1
+-
+-#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
+-
+-#define GLEW_WIN_specular_fog GLEW_GET_VAR(__GLEW_WIN_specular_fog)
+-
+-#endif /* GL_WIN_specular_fog */
+-
+-/* ---------------------------- GL_WIN_swap_hint --------------------------- */
+-
+-#ifndef GL_WIN_swap_hint
+-#define GL_WIN_swap_hint 1
+-
+-typedef void (GLAPIENTRY * PFNGLADDSWAPHINTRECTWINPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
+-
+-#define glAddSwapHintRectWIN GLEW_GET_FUN(__glewAddSwapHintRectWIN)
+-
+-#define GLEW_WIN_swap_hint GLEW_GET_VAR(__GLEW_WIN_swap_hint)
+-
+-#endif /* GL_WIN_swap_hint */
+-
+-/* ------------------------------------------------------------------------- */
+-
+-#if defined(GLEW_MX) && defined(_WIN32)
+-#define GLEW_FUN_EXPORT
+-#else
+-#define GLEW_FUN_EXPORT GLEWAPI
+-#endif /* GLEW_MX */
+-
+-#if defined(GLEW_MX)
+-#define GLEW_VAR_EXPORT
+-#else
+-#define GLEW_VAR_EXPORT GLEWAPI
+-#endif /* GLEW_MX */
+-
+-#if defined(GLEW_MX) && defined(_WIN32)
+-struct GLEWContextStruct
+-{
+-#endif /* GLEW_MX */
+-
+-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DPROC __glewCopyTexSubImage3D;
+-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSPROC __glewDrawRangeElements;
+-GLEW_FUN_EXPORT PFNGLTEXIMAGE3DPROC __glewTexImage3D;
+-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE3DPROC __glewTexSubImage3D;
+-
+-GLEW_FUN_EXPORT PFNGLACTIVETEXTUREPROC __glewActiveTexture;
+-GLEW_FUN_EXPORT PFNGLCLIENTACTIVETEXTUREPROC __glewClientActiveTexture;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DPROC __glewCompressedTexImage1D;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DPROC __glewCompressedTexImage2D;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DPROC __glewCompressedTexImage3D;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glewCompressedTexSubImage1D;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glewCompressedTexSubImage2D;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glewCompressedTexSubImage3D;
+-GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEPROC __glewGetCompressedTexImage;
+-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXDPROC __glewLoadTransposeMatrixd;
+-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXFPROC __glewLoadTransposeMatrixf;
+-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXDPROC __glewMultTransposeMatrixd;
+-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXFPROC __glewMultTransposeMatrixf;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DPROC __glewMultiTexCoord1d;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DVPROC __glewMultiTexCoord1dv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FPROC __glewMultiTexCoord1f;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FVPROC __glewMultiTexCoord1fv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IPROC __glewMultiTexCoord1i;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IVPROC __glewMultiTexCoord1iv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SPROC __glewMultiTexCoord1s;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SVPROC __glewMultiTexCoord1sv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DPROC __glewMultiTexCoord2d;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DVPROC __glewMultiTexCoord2dv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FPROC __glewMultiTexCoord2f;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FVPROC __glewMultiTexCoord2fv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IPROC __glewMultiTexCoord2i;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IVPROC __glewMultiTexCoord2iv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SPROC __glewMultiTexCoord2s;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SVPROC __glewMultiTexCoord2sv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DPROC __glewMultiTexCoord3d;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DVPROC __glewMultiTexCoord3dv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FPROC __glewMultiTexCoord3f;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FVPROC __glewMultiTexCoord3fv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IPROC __glewMultiTexCoord3i;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IVPROC __glewMultiTexCoord3iv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SPROC __glewMultiTexCoord3s;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SVPROC __glewMultiTexCoord3sv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DPROC __glewMultiTexCoord4d;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DVPROC __glewMultiTexCoord4dv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FPROC __glewMultiTexCoord4f;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FVPROC __glewMultiTexCoord4fv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IPROC __glewMultiTexCoord4i;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IVPROC __glewMultiTexCoord4iv;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SPROC __glewMultiTexCoord4s;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SVPROC __glewMultiTexCoord4sv;
+-GLEW_FUN_EXPORT PFNGLSAMPLECOVERAGEPROC __glewSampleCoverage;
+-
+-GLEW_FUN_EXPORT PFNGLBLENDCOLORPROC __glewBlendColor;
+-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONPROC __glewBlendEquation;
+-GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEPROC __glewBlendFuncSeparate;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTERPROC __glewFogCoordPointer;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDDPROC __glewFogCoordd;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDDVPROC __glewFogCoorddv;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDFPROC __glewFogCoordf;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDFVPROC __glewFogCoordfv;
+-GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSPROC __glewMultiDrawArrays;
+-GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSPROC __glewMultiDrawElements;
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFPROC __glewPointParameterf;
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVPROC __glewPointParameterfv;
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIPROC __glewPointParameteri;
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIVPROC __glewPointParameteriv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BPROC __glewSecondaryColor3b;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BVPROC __glewSecondaryColor3bv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DPROC __glewSecondaryColor3d;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DVPROC __glewSecondaryColor3dv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FPROC __glewSecondaryColor3f;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FVPROC __glewSecondaryColor3fv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IPROC __glewSecondaryColor3i;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IVPROC __glewSecondaryColor3iv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SPROC __glewSecondaryColor3s;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SVPROC __glewSecondaryColor3sv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBPROC __glewSecondaryColor3ub;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBVPROC __glewSecondaryColor3ubv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIPROC __glewSecondaryColor3ui;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIVPROC __glewSecondaryColor3uiv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USPROC __glewSecondaryColor3us;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USVPROC __glewSecondaryColor3usv;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTERPROC __glewSecondaryColorPointer;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DPROC __glewWindowPos2d;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVPROC __glewWindowPos2dv;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FPROC __glewWindowPos2f;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVPROC __glewWindowPos2fv;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IPROC __glewWindowPos2i;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVPROC __glewWindowPos2iv;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SPROC __glewWindowPos2s;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVPROC __glewWindowPos2sv;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DPROC __glewWindowPos3d;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVPROC __glewWindowPos3dv;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FPROC __glewWindowPos3f;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVPROC __glewWindowPos3fv;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IPROC __glewWindowPos3i;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVPROC __glewWindowPos3iv;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SPROC __glewWindowPos3s;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVPROC __glewWindowPos3sv;
+-
+-GLEW_FUN_EXPORT PFNGLBEGINQUERYPROC __glewBeginQuery;
+-GLEW_FUN_EXPORT PFNGLBINDBUFFERPROC __glewBindBuffer;
+-GLEW_FUN_EXPORT PFNGLBUFFERDATAPROC __glewBufferData;
+-GLEW_FUN_EXPORT PFNGLBUFFERSUBDATAPROC __glewBufferSubData;
+-GLEW_FUN_EXPORT PFNGLDELETEBUFFERSPROC __glewDeleteBuffers;
+-GLEW_FUN_EXPORT PFNGLDELETEQUERIESPROC __glewDeleteQueries;
+-GLEW_FUN_EXPORT PFNGLENDQUERYPROC __glewEndQuery;
+-GLEW_FUN_EXPORT PFNGLGENBUFFERSPROC __glewGenBuffers;
+-GLEW_FUN_EXPORT PFNGLGENQUERIESPROC __glewGenQueries;
+-GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERIVPROC __glewGetBufferParameteriv;
+-GLEW_FUN_EXPORT PFNGLGETBUFFERPOINTERVPROC __glewGetBufferPointerv;
+-GLEW_FUN_EXPORT PFNGLGETBUFFERSUBDATAPROC __glewGetBufferSubData;
+-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTIVPROC __glewGetQueryObjectiv;
+-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUIVPROC __glewGetQueryObjectuiv;
+-GLEW_FUN_EXPORT PFNGLGETQUERYIVPROC __glewGetQueryiv;
+-GLEW_FUN_EXPORT PFNGLISBUFFERPROC __glewIsBuffer;
+-GLEW_FUN_EXPORT PFNGLISQUERYPROC __glewIsQuery;
+-GLEW_FUN_EXPORT PFNGLMAPBUFFERPROC __glewMapBuffer;
+-GLEW_FUN_EXPORT PFNGLUNMAPBUFFERPROC __glewUnmapBuffer;
+-
+-GLEW_FUN_EXPORT PFNGLATTACHSHADERPROC __glewAttachShader;
+-GLEW_FUN_EXPORT PFNGLBINDATTRIBLOCATIONPROC __glewBindAttribLocation;
+-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEPROC __glewBlendEquationSeparate;
+-GLEW_FUN_EXPORT PFNGLCOMPILESHADERPROC __glewCompileShader;
+-GLEW_FUN_EXPORT PFNGLCREATEPROGRAMPROC __glewCreateProgram;
+-GLEW_FUN_EXPORT PFNGLCREATESHADERPROC __glewCreateShader;
+-GLEW_FUN_EXPORT PFNGLDELETEPROGRAMPROC __glewDeleteProgram;
+-GLEW_FUN_EXPORT PFNGLDELETESHADERPROC __glewDeleteShader;
+-GLEW_FUN_EXPORT PFNGLDETACHSHADERPROC __glewDetachShader;
+-GLEW_FUN_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYPROC __glewDisableVertexAttribArray;
+-GLEW_FUN_EXPORT PFNGLDRAWBUFFERSPROC __glewDrawBuffers;
+-GLEW_FUN_EXPORT PFNGLENABLEVERTEXATTRIBARRAYPROC __glewEnableVertexAttribArray;
+-GLEW_FUN_EXPORT PFNGLGETACTIVEATTRIBPROC __glewGetActiveAttrib;
+-GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMPROC __glewGetActiveUniform;
+-GLEW_FUN_EXPORT PFNGLGETATTACHEDSHADERSPROC __glewGetAttachedShaders;
+-GLEW_FUN_EXPORT PFNGLGETATTRIBLOCATIONPROC __glewGetAttribLocation;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMINFOLOGPROC __glewGetProgramInfoLog;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMIVPROC __glewGetProgramiv;
+-GLEW_FUN_EXPORT PFNGLGETSHADERINFOLOGPROC __glewGetShaderInfoLog;
+-GLEW_FUN_EXPORT PFNGLGETSHADERSOURCEPROC __glewGetShaderSource;
+-GLEW_FUN_EXPORT PFNGLGETSHADERIVPROC __glewGetShaderiv;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMLOCATIONPROC __glewGetUniformLocation;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMFVPROC __glewGetUniformfv;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMIVPROC __glewGetUniformiv;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVPROC __glewGetVertexAttribPointerv;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVPROC __glewGetVertexAttribdv;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVPROC __glewGetVertexAttribfv;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVPROC __glewGetVertexAttribiv;
+-GLEW_FUN_EXPORT PFNGLISPROGRAMPROC __glewIsProgram;
+-GLEW_FUN_EXPORT PFNGLISSHADERPROC __glewIsShader;
+-GLEW_FUN_EXPORT PFNGLLINKPROGRAMPROC __glewLinkProgram;
+-GLEW_FUN_EXPORT PFNGLSHADERSOURCEPROC __glewShaderSource;
+-GLEW_FUN_EXPORT PFNGLSTENCILFUNCSEPARATEPROC __glewStencilFuncSeparate;
+-GLEW_FUN_EXPORT PFNGLSTENCILMASKSEPARATEPROC __glewStencilMaskSeparate;
+-GLEW_FUN_EXPORT PFNGLSTENCILOPSEPARATEPROC __glewStencilOpSeparate;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1FPROC __glewUniform1f;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1FVPROC __glewUniform1fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1IPROC __glewUniform1i;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1IVPROC __glewUniform1iv;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2FPROC __glewUniform2f;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2FVPROC __glewUniform2fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2IPROC __glewUniform2i;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2IVPROC __glewUniform2iv;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3FPROC __glewUniform3f;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3FVPROC __glewUniform3fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3IPROC __glewUniform3i;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3IVPROC __glewUniform3iv;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4FPROC __glewUniform4f;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4FVPROC __glewUniform4fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4IPROC __glewUniform4i;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4IVPROC __glewUniform4iv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2FVPROC __glewUniformMatrix2fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3FVPROC __glewUniformMatrix3fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4FVPROC __glewUniformMatrix4fv;
+-GLEW_FUN_EXPORT PFNGLUSEPROGRAMPROC __glewUseProgram;
+-GLEW_FUN_EXPORT PFNGLVALIDATEPROGRAMPROC __glewValidateProgram;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DPROC __glewVertexAttrib1d;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVPROC __glewVertexAttrib1dv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FPROC __glewVertexAttrib1f;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVPROC __glewVertexAttrib1fv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SPROC __glewVertexAttrib1s;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVPROC __glewVertexAttrib1sv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DPROC __glewVertexAttrib2d;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVPROC __glewVertexAttrib2dv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FPROC __glewVertexAttrib2f;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVPROC __glewVertexAttrib2fv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SPROC __glewVertexAttrib2s;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVPROC __glewVertexAttrib2sv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DPROC __glewVertexAttrib3d;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVPROC __glewVertexAttrib3dv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FPROC __glewVertexAttrib3f;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVPROC __glewVertexAttrib3fv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SPROC __glewVertexAttrib3s;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVPROC __glewVertexAttrib3sv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NBVPROC __glewVertexAttrib4Nbv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NIVPROC __glewVertexAttrib4Niv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NSVPROC __glewVertexAttrib4Nsv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBPROC __glewVertexAttrib4Nub;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBVPROC __glewVertexAttrib4Nubv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUIVPROC __glewVertexAttrib4Nuiv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUSVPROC __glewVertexAttrib4Nusv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4BVPROC __glewVertexAttrib4bv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DPROC __glewVertexAttrib4d;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVPROC __glewVertexAttrib4dv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FPROC __glewVertexAttrib4f;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVPROC __glewVertexAttrib4fv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4IVPROC __glewVertexAttrib4iv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SPROC __glewVertexAttrib4s;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVPROC __glewVertexAttrib4sv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVPROC __glewVertexAttrib4ubv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UIVPROC __glewVertexAttrib4uiv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4USVPROC __glewVertexAttrib4usv;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERPROC __glewVertexAttribPointer;
+-
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X3FVPROC __glewUniformMatrix2x3fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X4FVPROC __glewUniformMatrix2x4fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X2FVPROC __glewUniformMatrix3x2fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X4FVPROC __glewUniformMatrix3x4fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X2FVPROC __glewUniformMatrix4x2fv;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X3FVPROC __glewUniformMatrix4x3fv;
+-
+-GLEW_FUN_EXPORT PFNGLTBUFFERMASK3DFXPROC __glewTbufferMask3DFX;
+-
+-GLEW_FUN_EXPORT PFNGLDRAWELEMENTARRAYAPPLEPROC __glewDrawElementArrayAPPLE;
+-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glewDrawRangeElementArrayAPPLE;
+-GLEW_FUN_EXPORT PFNGLELEMENTPOINTERAPPLEPROC __glewElementPointerAPPLE;
+-GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glewMultiDrawElementArrayAPPLE;
+-GLEW_FUN_EXPORT PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glewMultiDrawRangeElementArrayAPPLE;
+-
+-GLEW_FUN_EXPORT PFNGLDELETEFENCESAPPLEPROC __glewDeleteFencesAPPLE;
+-GLEW_FUN_EXPORT PFNGLFINISHFENCEAPPLEPROC __glewFinishFenceAPPLE;
+-GLEW_FUN_EXPORT PFNGLFINISHOBJECTAPPLEPROC __glewFinishObjectAPPLE;
+-GLEW_FUN_EXPORT PFNGLGENFENCESAPPLEPROC __glewGenFencesAPPLE;
+-GLEW_FUN_EXPORT PFNGLISFENCEAPPLEPROC __glewIsFenceAPPLE;
+-GLEW_FUN_EXPORT PFNGLSETFENCEAPPLEPROC __glewSetFenceAPPLE;
+-GLEW_FUN_EXPORT PFNGLTESTFENCEAPPLEPROC __glewTestFenceAPPLE;
+-GLEW_FUN_EXPORT PFNGLTESTOBJECTAPPLEPROC __glewTestObjectAPPLE;
+-
+-GLEW_FUN_EXPORT PFNGLBUFFERPARAMETERIAPPLEPROC __glewBufferParameteriAPPLE;
+-GLEW_FUN_EXPORT PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glewFlushMappedBufferRangeAPPLE;
+-
+-GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glewGetTexParameterPointervAPPLE;
+-GLEW_FUN_EXPORT PFNGLTEXTURERANGEAPPLEPROC __glewTextureRangeAPPLE;
+-
+-GLEW_FUN_EXPORT PFNGLBINDVERTEXARRAYAPPLEPROC __glewBindVertexArrayAPPLE;
+-GLEW_FUN_EXPORT PFNGLDELETEVERTEXARRAYSAPPLEPROC __glewDeleteVertexArraysAPPLE;
+-GLEW_FUN_EXPORT PFNGLGENVERTEXARRAYSAPPLEPROC __glewGenVertexArraysAPPLE;
+-GLEW_FUN_EXPORT PFNGLISVERTEXARRAYAPPLEPROC __glewIsVertexArrayAPPLE;
+-
+-GLEW_FUN_EXPORT PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glewFlushVertexArrayRangeAPPLE;
+-GLEW_FUN_EXPORT PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glewVertexArrayParameteriAPPLE;
+-GLEW_FUN_EXPORT PFNGLVERTEXARRAYRANGEAPPLEPROC __glewVertexArrayRangeAPPLE;
+-
+-GLEW_FUN_EXPORT PFNGLCLAMPCOLORARBPROC __glewClampColorARB;
+-
+-GLEW_FUN_EXPORT PFNGLDRAWBUFFERSARBPROC __glewDrawBuffersARB;
+-
+-GLEW_FUN_EXPORT PFNGLCOLORSUBTABLEPROC __glewColorSubTable;
+-GLEW_FUN_EXPORT PFNGLCOLORTABLEPROC __glewColorTable;
+-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERFVPROC __glewColorTableParameterfv;
+-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERIVPROC __glewColorTableParameteriv;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER1DPROC __glewConvolutionFilter1D;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER2DPROC __glewConvolutionFilter2D;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFPROC __glewConvolutionParameterf;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFVPROC __glewConvolutionParameterfv;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIPROC __glewConvolutionParameteri;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIVPROC __glewConvolutionParameteriv;
+-GLEW_FUN_EXPORT PFNGLCOPYCOLORSUBTABLEPROC __glewCopyColorSubTable;
+-GLEW_FUN_EXPORT PFNGLCOPYCOLORTABLEPROC __glewCopyColorTable;
+-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DPROC __glewCopyConvolutionFilter1D;
+-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DPROC __glewCopyConvolutionFilter2D;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPROC __glewGetColorTable;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVPROC __glewGetColorTableParameterfv;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVPROC __glewGetColorTableParameteriv;
+-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONFILTERPROC __glewGetConvolutionFilter;
+-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVPROC __glewGetConvolutionParameterfv;
+-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVPROC __glewGetConvolutionParameteriv;
+-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPROC __glewGetHistogram;
+-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERFVPROC __glewGetHistogramParameterfv;
+-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERIVPROC __glewGetHistogramParameteriv;
+-GLEW_FUN_EXPORT PFNGLGETMINMAXPROC __glewGetMinmax;
+-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERFVPROC __glewGetMinmaxParameterfv;
+-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERIVPROC __glewGetMinmaxParameteriv;
+-GLEW_FUN_EXPORT PFNGLGETSEPARABLEFILTERPROC __glewGetSeparableFilter;
+-GLEW_FUN_EXPORT PFNGLHISTOGRAMPROC __glewHistogram;
+-GLEW_FUN_EXPORT PFNGLMINMAXPROC __glewMinmax;
+-GLEW_FUN_EXPORT PFNGLRESETHISTOGRAMPROC __glewResetHistogram;
+-GLEW_FUN_EXPORT PFNGLRESETMINMAXPROC __glewResetMinmax;
+-GLEW_FUN_EXPORT PFNGLSEPARABLEFILTER2DPROC __glewSeparableFilter2D;
+-
+-GLEW_FUN_EXPORT PFNGLCURRENTPALETTEMATRIXARBPROC __glewCurrentPaletteMatrixARB;
+-GLEW_FUN_EXPORT PFNGLMATRIXINDEXPOINTERARBPROC __glewMatrixIndexPointerARB;
+-GLEW_FUN_EXPORT PFNGLMATRIXINDEXUBVARBPROC __glewMatrixIndexubvARB;
+-GLEW_FUN_EXPORT PFNGLMATRIXINDEXUIVARBPROC __glewMatrixIndexuivARB;
+-GLEW_FUN_EXPORT PFNGLMATRIXINDEXUSVARBPROC __glewMatrixIndexusvARB;
+-
+-GLEW_FUN_EXPORT PFNGLSAMPLECOVERAGEARBPROC __glewSampleCoverageARB;
+-
+-GLEW_FUN_EXPORT PFNGLACTIVETEXTUREARBPROC __glewActiveTextureARB;
+-GLEW_FUN_EXPORT PFNGLCLIENTACTIVETEXTUREARBPROC __glewClientActiveTextureARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DARBPROC __glewMultiTexCoord1dARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DVARBPROC __glewMultiTexCoord1dvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FARBPROC __glewMultiTexCoord1fARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FVARBPROC __glewMultiTexCoord1fvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IARBPROC __glewMultiTexCoord1iARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IVARBPROC __glewMultiTexCoord1ivARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SARBPROC __glewMultiTexCoord1sARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SVARBPROC __glewMultiTexCoord1svARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DARBPROC __glewMultiTexCoord2dARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DVARBPROC __glewMultiTexCoord2dvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FARBPROC __glewMultiTexCoord2fARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FVARBPROC __glewMultiTexCoord2fvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IARBPROC __glewMultiTexCoord2iARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IVARBPROC __glewMultiTexCoord2ivARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SARBPROC __glewMultiTexCoord2sARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SVARBPROC __glewMultiTexCoord2svARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DARBPROC __glewMultiTexCoord3dARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DVARBPROC __glewMultiTexCoord3dvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FARBPROC __glewMultiTexCoord3fARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FVARBPROC __glewMultiTexCoord3fvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IARBPROC __glewMultiTexCoord3iARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IVARBPROC __glewMultiTexCoord3ivARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SARBPROC __glewMultiTexCoord3sARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SVARBPROC __glewMultiTexCoord3svARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DARBPROC __glewMultiTexCoord4dARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DVARBPROC __glewMultiTexCoord4dvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FARBPROC __glewMultiTexCoord4fARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FVARBPROC __glewMultiTexCoord4fvARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IARBPROC __glewMultiTexCoord4iARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IVARBPROC __glewMultiTexCoord4ivARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SARBPROC __glewMultiTexCoord4sARB;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SVARBPROC __glewMultiTexCoord4svARB;
+-
+-GLEW_FUN_EXPORT PFNGLBEGINQUERYARBPROC __glewBeginQueryARB;
+-GLEW_FUN_EXPORT PFNGLDELETEQUERIESARBPROC __glewDeleteQueriesARB;
+-GLEW_FUN_EXPORT PFNGLENDQUERYARBPROC __glewEndQueryARB;
+-GLEW_FUN_EXPORT PFNGLGENQUERIESARBPROC __glewGenQueriesARB;
+-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTIVARBPROC __glewGetQueryObjectivARB;
+-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUIVARBPROC __glewGetQueryObjectuivARB;
+-GLEW_FUN_EXPORT PFNGLGETQUERYIVARBPROC __glewGetQueryivARB;
+-GLEW_FUN_EXPORT PFNGLISQUERYARBPROC __glewIsQueryARB;
+-
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFARBPROC __glewPointParameterfARB;
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVARBPROC __glewPointParameterfvARB;
+-
+-GLEW_FUN_EXPORT PFNGLATTACHOBJECTARBPROC __glewAttachObjectARB;
+-GLEW_FUN_EXPORT PFNGLCOMPILESHADERARBPROC __glewCompileShaderARB;
+-GLEW_FUN_EXPORT PFNGLCREATEPROGRAMOBJECTARBPROC __glewCreateProgramObjectARB;
+-GLEW_FUN_EXPORT PFNGLCREATESHADEROBJECTARBPROC __glewCreateShaderObjectARB;
+-GLEW_FUN_EXPORT PFNGLDELETEOBJECTARBPROC __glewDeleteObjectARB;
+-GLEW_FUN_EXPORT PFNGLDETACHOBJECTARBPROC __glewDetachObjectARB;
+-GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMARBPROC __glewGetActiveUniformARB;
+-GLEW_FUN_EXPORT PFNGLGETATTACHEDOBJECTSARBPROC __glewGetAttachedObjectsARB;
+-GLEW_FUN_EXPORT PFNGLGETHANDLEARBPROC __glewGetHandleARB;
+-GLEW_FUN_EXPORT PFNGLGETINFOLOGARBPROC __glewGetInfoLogARB;
+-GLEW_FUN_EXPORT PFNGLGETOBJECTPARAMETERFVARBPROC __glewGetObjectParameterfvARB;
+-GLEW_FUN_EXPORT PFNGLGETOBJECTPARAMETERIVARBPROC __glewGetObjectParameterivARB;
+-GLEW_FUN_EXPORT PFNGLGETSHADERSOURCEARBPROC __glewGetShaderSourceARB;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMLOCATIONARBPROC __glewGetUniformLocationARB;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMFVARBPROC __glewGetUniformfvARB;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMIVARBPROC __glewGetUniformivARB;
+-GLEW_FUN_EXPORT PFNGLLINKPROGRAMARBPROC __glewLinkProgramARB;
+-GLEW_FUN_EXPORT PFNGLSHADERSOURCEARBPROC __glewShaderSourceARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1FARBPROC __glewUniform1fARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1FVARBPROC __glewUniform1fvARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1IARBPROC __glewUniform1iARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1IVARBPROC __glewUniform1ivARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2FARBPROC __glewUniform2fARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2FVARBPROC __glewUniform2fvARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2IARBPROC __glewUniform2iARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2IVARBPROC __glewUniform2ivARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3FARBPROC __glewUniform3fARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3FVARBPROC __glewUniform3fvARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3IARBPROC __glewUniform3iARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3IVARBPROC __glewUniform3ivARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4FARBPROC __glewUniform4fARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4FVARBPROC __glewUniform4fvARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4IARBPROC __glewUniform4iARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4IVARBPROC __glewUniform4ivARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2FVARBPROC __glewUniformMatrix2fvARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3FVARBPROC __glewUniformMatrix3fvARB;
+-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4FVARBPROC __glewUniformMatrix4fvARB;
+-GLEW_FUN_EXPORT PFNGLUSEPROGRAMOBJECTARBPROC __glewUseProgramObjectARB;
+-GLEW_FUN_EXPORT PFNGLVALIDATEPROGRAMARBPROC __glewValidateProgramARB;
+-
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glewCompressedTexImage1DARB;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glewCompressedTexImage2DARB;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glewCompressedTexImage3DARB;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glewCompressedTexSubImage1DARB;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glewCompressedTexSubImage2DARB;
+-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glewCompressedTexSubImage3DARB;
+-GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glewGetCompressedTexImageARB;
+-
+-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXDARBPROC __glewLoadTransposeMatrixdARB;
+-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXFARBPROC __glewLoadTransposeMatrixfARB;
+-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXDARBPROC __glewMultTransposeMatrixdARB;
+-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXFARBPROC __glewMultTransposeMatrixfARB;
+-
+-GLEW_FUN_EXPORT PFNGLVERTEXBLENDARBPROC __glewVertexBlendARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTPOINTERARBPROC __glewWeightPointerARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTBVARBPROC __glewWeightbvARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTDVARBPROC __glewWeightdvARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTFVARBPROC __glewWeightfvARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTIVARBPROC __glewWeightivARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTSVARBPROC __glewWeightsvARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTUBVARBPROC __glewWeightubvARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTUIVARBPROC __glewWeightuivARB;
+-GLEW_FUN_EXPORT PFNGLWEIGHTUSVARBPROC __glewWeightusvARB;
+-
+-GLEW_FUN_EXPORT PFNGLBINDBUFFERARBPROC __glewBindBufferARB;
+-GLEW_FUN_EXPORT PFNGLBUFFERDATAARBPROC __glewBufferDataARB;
+-GLEW_FUN_EXPORT PFNGLBUFFERSUBDATAARBPROC __glewBufferSubDataARB;
+-GLEW_FUN_EXPORT PFNGLDELETEBUFFERSARBPROC __glewDeleteBuffersARB;
+-GLEW_FUN_EXPORT PFNGLGENBUFFERSARBPROC __glewGenBuffersARB;
+-GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERIVARBPROC __glewGetBufferParameterivARB;
+-GLEW_FUN_EXPORT PFNGLGETBUFFERPOINTERVARBPROC __glewGetBufferPointervARB;
+-GLEW_FUN_EXPORT PFNGLGETBUFFERSUBDATAARBPROC __glewGetBufferSubDataARB;
+-GLEW_FUN_EXPORT PFNGLISBUFFERARBPROC __glewIsBufferARB;
+-GLEW_FUN_EXPORT PFNGLMAPBUFFERARBPROC __glewMapBufferARB;
+-GLEW_FUN_EXPORT PFNGLUNMAPBUFFERARBPROC __glewUnmapBufferARB;
+-
+-GLEW_FUN_EXPORT PFNGLBINDPROGRAMARBPROC __glewBindProgramARB;
+-GLEW_FUN_EXPORT PFNGLDELETEPROGRAMSARBPROC __glewDeleteProgramsARB;
+-GLEW_FUN_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glewDisableVertexAttribArrayARB;
+-GLEW_FUN_EXPORT PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glewEnableVertexAttribArrayARB;
+-GLEW_FUN_EXPORT PFNGLGENPROGRAMSARBPROC __glewGenProgramsARB;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glewGetProgramEnvParameterdvARB;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glewGetProgramEnvParameterfvARB;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glewGetProgramLocalParameterdvARB;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glewGetProgramLocalParameterfvARB;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMSTRINGARBPROC __glewGetProgramStringARB;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMIVARBPROC __glewGetProgramivARB;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glewGetVertexAttribPointervARB;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVARBPROC __glewGetVertexAttribdvARB;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVARBPROC __glewGetVertexAttribfvARB;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVARBPROC __glewGetVertexAttribivARB;
+-GLEW_FUN_EXPORT PFNGLISPROGRAMARBPROC __glewIsProgramARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4DARBPROC __glewProgramEnvParameter4dARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4DVARBPROC __glewProgramEnvParameter4dvARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4FARBPROC __glewProgramEnvParameter4fARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4FVARBPROC __glewProgramEnvParameter4fvARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glewProgramLocalParameter4dARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glewProgramLocalParameter4dvARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glewProgramLocalParameter4fARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glewProgramLocalParameter4fvARB;
+-GLEW_FUN_EXPORT PFNGLPROGRAMSTRINGARBPROC __glewProgramStringARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DARBPROC __glewVertexAttrib1dARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVARBPROC __glewVertexAttrib1dvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FARBPROC __glewVertexAttrib1fARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVARBPROC __glewVertexAttrib1fvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SARBPROC __glewVertexAttrib1sARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVARBPROC __glewVertexAttrib1svARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DARBPROC __glewVertexAttrib2dARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVARBPROC __glewVertexAttrib2dvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FARBPROC __glewVertexAttrib2fARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVARBPROC __glewVertexAttrib2fvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SARBPROC __glewVertexAttrib2sARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVARBPROC __glewVertexAttrib2svARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DARBPROC __glewVertexAttrib3dARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVARBPROC __glewVertexAttrib3dvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FARBPROC __glewVertexAttrib3fARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVARBPROC __glewVertexAttrib3fvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SARBPROC __glewVertexAttrib3sARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVARBPROC __glewVertexAttrib3svARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NBVARBPROC __glewVertexAttrib4NbvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NIVARBPROC __glewVertexAttrib4NivARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NSVARBPROC __glewVertexAttrib4NsvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBARBPROC __glewVertexAttrib4NubARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBVARBPROC __glewVertexAttrib4NubvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUIVARBPROC __glewVertexAttrib4NuivARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUSVARBPROC __glewVertexAttrib4NusvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4BVARBPROC __glewVertexAttrib4bvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DARBPROC __glewVertexAttrib4dARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVARBPROC __glewVertexAttrib4dvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FARBPROC __glewVertexAttrib4fARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVARBPROC __glewVertexAttrib4fvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4IVARBPROC __glewVertexAttrib4ivARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SARBPROC __glewVertexAttrib4sARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVARBPROC __glewVertexAttrib4svARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVARBPROC __glewVertexAttrib4ubvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UIVARBPROC __glewVertexAttrib4uivARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4USVARBPROC __glewVertexAttrib4usvARB;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERARBPROC __glewVertexAttribPointerARB;
+-
+-GLEW_FUN_EXPORT PFNGLBINDATTRIBLOCATIONARBPROC __glewBindAttribLocationARB;
+-GLEW_FUN_EXPORT PFNGLGETACTIVEATTRIBARBPROC __glewGetActiveAttribARB;
+-GLEW_FUN_EXPORT PFNGLGETATTRIBLOCATIONARBPROC __glewGetAttribLocationARB;
+-
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DARBPROC __glewWindowPos2dARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVARBPROC __glewWindowPos2dvARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FARBPROC __glewWindowPos2fARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVARBPROC __glewWindowPos2fvARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IARBPROC __glewWindowPos2iARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVARBPROC __glewWindowPos2ivARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SARBPROC __glewWindowPos2sARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVARBPROC __glewWindowPos2svARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DARBPROC __glewWindowPos3dARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVARBPROC __glewWindowPos3dvARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FARBPROC __glewWindowPos3fARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVARBPROC __glewWindowPos3fvARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IARBPROC __glewWindowPos3iARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVARBPROC __glewWindowPos3ivARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SARBPROC __glewWindowPos3sARB;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVARBPROC __glewWindowPos3svARB;
+-
+-GLEW_FUN_EXPORT PFNGLDRAWBUFFERSATIPROC __glewDrawBuffersATI;
+-
+-GLEW_FUN_EXPORT PFNGLDRAWELEMENTARRAYATIPROC __glewDrawElementArrayATI;
+-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTARRAYATIPROC __glewDrawRangeElementArrayATI;
+-GLEW_FUN_EXPORT PFNGLELEMENTPOINTERATIPROC __glewElementPointerATI;
+-
+-GLEW_FUN_EXPORT PFNGLGETTEXBUMPPARAMETERFVATIPROC __glewGetTexBumpParameterfvATI;
+-GLEW_FUN_EXPORT PFNGLGETTEXBUMPPARAMETERIVATIPROC __glewGetTexBumpParameterivATI;
+-GLEW_FUN_EXPORT PFNGLTEXBUMPPARAMETERFVATIPROC __glewTexBumpParameterfvATI;
+-GLEW_FUN_EXPORT PFNGLTEXBUMPPARAMETERIVATIPROC __glewTexBumpParameterivATI;
+-
+-GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP1ATIPROC __glewAlphaFragmentOp1ATI;
+-GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP2ATIPROC __glewAlphaFragmentOp2ATI;
+-GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP3ATIPROC __glewAlphaFragmentOp3ATI;
+-GLEW_FUN_EXPORT PFNGLBEGINFRAGMENTSHADERATIPROC __glewBeginFragmentShaderATI;
+-GLEW_FUN_EXPORT PFNGLBINDFRAGMENTSHADERATIPROC __glewBindFragmentShaderATI;
+-GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP1ATIPROC __glewColorFragmentOp1ATI;
+-GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP2ATIPROC __glewColorFragmentOp2ATI;
+-GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP3ATIPROC __glewColorFragmentOp3ATI;
+-GLEW_FUN_EXPORT PFNGLDELETEFRAGMENTSHADERATIPROC __glewDeleteFragmentShaderATI;
+-GLEW_FUN_EXPORT PFNGLENDFRAGMENTSHADERATIPROC __glewEndFragmentShaderATI;
+-GLEW_FUN_EXPORT PFNGLGENFRAGMENTSHADERSATIPROC __glewGenFragmentShadersATI;
+-GLEW_FUN_EXPORT PFNGLPASSTEXCOORDATIPROC __glewPassTexCoordATI;
+-GLEW_FUN_EXPORT PFNGLSAMPLEMAPATIPROC __glewSampleMapATI;
+-GLEW_FUN_EXPORT PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glewSetFragmentShaderConstantATI;
+-
+-GLEW_FUN_EXPORT PFNGLMAPOBJECTBUFFERATIPROC __glewMapObjectBufferATI;
+-GLEW_FUN_EXPORT PFNGLUNMAPOBJECTBUFFERATIPROC __glewUnmapObjectBufferATI;
+-
+-GLEW_FUN_EXPORT PFNGLPNTRIANGLESFATIPROC __glPNTrianglewesfATI;
+-GLEW_FUN_EXPORT PFNGLPNTRIANGLESIATIPROC __glPNTrianglewesiATI;
+-
+-GLEW_FUN_EXPORT PFNGLSTENCILFUNCSEPARATEATIPROC __glewStencilFuncSeparateATI;
+-GLEW_FUN_EXPORT PFNGLSTENCILOPSEPARATEATIPROC __glewStencilOpSeparateATI;
+-
+-GLEW_FUN_EXPORT PFNGLARRAYOBJECTATIPROC __glewArrayObjectATI;
+-GLEW_FUN_EXPORT PFNGLFREEOBJECTBUFFERATIPROC __glewFreeObjectBufferATI;
+-GLEW_FUN_EXPORT PFNGLGETARRAYOBJECTFVATIPROC __glewGetArrayObjectfvATI;
+-GLEW_FUN_EXPORT PFNGLGETARRAYOBJECTIVATIPROC __glewGetArrayObjectivATI;
+-GLEW_FUN_EXPORT PFNGLGETOBJECTBUFFERFVATIPROC __glewGetObjectBufferfvATI;
+-GLEW_FUN_EXPORT PFNGLGETOBJECTBUFFERIVATIPROC __glewGetObjectBufferivATI;
+-GLEW_FUN_EXPORT PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glewGetVariantArrayObjectfvATI;
+-GLEW_FUN_EXPORT PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glewGetVariantArrayObjectivATI;
+-GLEW_FUN_EXPORT PFNGLISOBJECTBUFFERATIPROC __glewIsObjectBufferATI;
+-GLEW_FUN_EXPORT PFNGLNEWOBJECTBUFFERATIPROC __glewNewObjectBufferATI;
+-GLEW_FUN_EXPORT PFNGLUPDATEOBJECTBUFFERATIPROC __glewUpdateObjectBufferATI;
+-GLEW_FUN_EXPORT PFNGLVARIANTARRAYOBJECTATIPROC __glewVariantArrayObjectATI;
+-
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glewGetVertexAttribArrayObjectfvATI;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glewGetVertexAttribArrayObjectivATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glewVertexAttribArrayObjectATI;
+-
+-GLEW_FUN_EXPORT PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glewClientActiveVertexStreamATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3BATIPROC __glewNormalStream3bATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3BVATIPROC __glewNormalStream3bvATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3DATIPROC __glewNormalStream3dATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3DVATIPROC __glewNormalStream3dvATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3FATIPROC __glewNormalStream3fATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3FVATIPROC __glewNormalStream3fvATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3IATIPROC __glewNormalStream3iATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3IVATIPROC __glewNormalStream3ivATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3SATIPROC __glewNormalStream3sATI;
+-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3SVATIPROC __glewNormalStream3svATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXBLENDENVFATIPROC __glewVertexBlendEnvfATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXBLENDENVIATIPROC __glewVertexBlendEnviATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2DATIPROC __glewVertexStream2dATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2DVATIPROC __glewVertexStream2dvATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2FATIPROC __glewVertexStream2fATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2FVATIPROC __glewVertexStream2fvATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2IATIPROC __glewVertexStream2iATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2IVATIPROC __glewVertexStream2ivATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2SATIPROC __glewVertexStream2sATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2SVATIPROC __glewVertexStream2svATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3DATIPROC __glewVertexStream3dATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3DVATIPROC __glewVertexStream3dvATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3FATIPROC __glewVertexStream3fATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3FVATIPROC __glewVertexStream3fvATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3IATIPROC __glewVertexStream3iATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3IVATIPROC __glewVertexStream3ivATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3SATIPROC __glewVertexStream3sATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3SVATIPROC __glewVertexStream3svATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4DATIPROC __glewVertexStream4dATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4DVATIPROC __glewVertexStream4dvATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4FATIPROC __glewVertexStream4fATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4FVATIPROC __glewVertexStream4fvATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4IATIPROC __glewVertexStream4iATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4IVATIPROC __glewVertexStream4ivATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4SATIPROC __glewVertexStream4sATI;
+-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4SVATIPROC __glewVertexStream4svATI;
+-
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glewGetUniformBufferSizeEXT;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMOFFSETEXTPROC __glewGetUniformOffsetEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORMBUFFEREXTPROC __glewUniformBufferEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBLENDCOLOREXTPROC __glewBlendColorEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEEXTPROC __glewBlendEquationSeparateEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEEXTPROC __glewBlendFuncSeparateEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONEXTPROC __glewBlendEquationEXT;
+-
+-GLEW_FUN_EXPORT PFNGLCOLORSUBTABLEEXTPROC __glewColorSubTableEXT;
+-GLEW_FUN_EXPORT PFNGLCOPYCOLORSUBTABLEEXTPROC __glewCopyColorSubTableEXT;
+-
+-GLEW_FUN_EXPORT PFNGLLOCKARRAYSEXTPROC __glewLockArraysEXT;
+-GLEW_FUN_EXPORT PFNGLUNLOCKARRAYSEXTPROC __glewUnlockArraysEXT;
+-
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER1DEXTPROC __glewConvolutionFilter1DEXT;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER2DEXTPROC __glewConvolutionFilter2DEXT;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFEXTPROC __glewConvolutionParameterfEXT;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glewConvolutionParameterfvEXT;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIEXTPROC __glewConvolutionParameteriEXT;
+-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glewConvolutionParameterivEXT;
+-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glewCopyConvolutionFilter1DEXT;
+-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glewCopyConvolutionFilter2DEXT;
+-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONFILTEREXTPROC __glewGetConvolutionFilterEXT;
+-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glewGetConvolutionParameterfvEXT;
+-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glewGetConvolutionParameterivEXT;
+-GLEW_FUN_EXPORT PFNGLGETSEPARABLEFILTEREXTPROC __glewGetSeparableFilterEXT;
+-GLEW_FUN_EXPORT PFNGLSEPARABLEFILTER2DEXTPROC __glewSeparableFilter2DEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBINORMALPOINTEREXTPROC __glewBinormalPointerEXT;
+-GLEW_FUN_EXPORT PFNGLTANGENTPOINTEREXTPROC __glewTangentPointerEXT;
+-
+-GLEW_FUN_EXPORT PFNGLCOPYTEXIMAGE1DEXTPROC __glewCopyTexImage1DEXT;
+-GLEW_FUN_EXPORT PFNGLCOPYTEXIMAGE2DEXTPROC __glewCopyTexImage2DEXT;
+-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glewCopyTexSubImage1DEXT;
+-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glewCopyTexSubImage2DEXT;
+-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glewCopyTexSubImage3DEXT;
+-
+-GLEW_FUN_EXPORT PFNGLCULLPARAMETERDVEXTPROC __glewCullParameterdvEXT;
+-GLEW_FUN_EXPORT PFNGLCULLPARAMETERFVEXTPROC __glewCullParameterfvEXT;
+-
+-GLEW_FUN_EXPORT PFNGLDEPTHBOUNDSEXTPROC __glewDepthBoundsEXT;
+-
+-GLEW_FUN_EXPORT PFNGLCOLORMASKINDEXEDEXTPROC __glewColorMaskIndexedEXT;
+-GLEW_FUN_EXPORT PFNGLDISABLEINDEXEDEXTPROC __glewDisableIndexedEXT;
+-GLEW_FUN_EXPORT PFNGLENABLEINDEXEDEXTPROC __glewEnableIndexedEXT;
+-GLEW_FUN_EXPORT PFNGLGETBOOLEANINDEXEDVEXTPROC __glewGetBooleanIndexedvEXT;
+-GLEW_FUN_EXPORT PFNGLGETINTEGERINDEXEDVEXTPROC __glewGetIntegerIndexedvEXT;
+-GLEW_FUN_EXPORT PFNGLISENABLEDINDEXEDEXTPROC __glewIsEnabledIndexedEXT;
+-
+-GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDEXTPROC __glewDrawArraysInstancedEXT;
+-GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glewDrawElementsInstancedEXT;
+-
+-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSEXTPROC __glewDrawRangeElementsEXT;
+-
+-GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTEREXTPROC __glewFogCoordPointerEXT;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDDEXTPROC __glewFogCoorddEXT;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDDVEXTPROC __glewFogCoorddvEXT;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDFEXTPROC __glewFogCoordfEXT;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDFVEXTPROC __glewFogCoordfvEXT;
+-
+-GLEW_FUN_EXPORT PFNGLFRAGMENTCOLORMATERIALEXTPROC __glewFragmentColorMaterialEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFEXTPROC __glewFragmentLightModelfEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFVEXTPROC __glewFragmentLightModelfvEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIEXTPROC __glewFragmentLightModeliEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIVEXTPROC __glewFragmentLightModelivEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFEXTPROC __glewFragmentLightfEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFVEXTPROC __glewFragmentLightfvEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIEXTPROC __glewFragmentLightiEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIVEXTPROC __glewFragmentLightivEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFEXTPROC __glewFragmentMaterialfEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFVEXTPROC __glewFragmentMaterialfvEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIEXTPROC __glewFragmentMaterialiEXT;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIVEXTPROC __glewFragmentMaterialivEXT;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTFVEXTPROC __glewGetFragmentLightfvEXT;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTIVEXTPROC __glewGetFragmentLightivEXT;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALFVEXTPROC __glewGetFragmentMaterialfvEXT;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALIVEXTPROC __glewGetFragmentMaterialivEXT;
+-GLEW_FUN_EXPORT PFNGLLIGHTENVIEXTPROC __glewLightEnviEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBLITFRAMEBUFFEREXTPROC __glewBlitFramebufferEXT;
+-
+-GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewRenderbufferStorageMultisampleEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBINDFRAMEBUFFEREXTPROC __glewBindFramebufferEXT;
+-GLEW_FUN_EXPORT PFNGLBINDRENDERBUFFEREXTPROC __glewBindRenderbufferEXT;
+-GLEW_FUN_EXPORT PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glewCheckFramebufferStatusEXT;
+-GLEW_FUN_EXPORT PFNGLDELETEFRAMEBUFFERSEXTPROC __glewDeleteFramebuffersEXT;
+-GLEW_FUN_EXPORT PFNGLDELETERENDERBUFFERSEXTPROC __glewDeleteRenderbuffersEXT;
+-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glewFramebufferRenderbufferEXT;
+-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glewFramebufferTexture1DEXT;
+-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glewFramebufferTexture2DEXT;
+-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glewFramebufferTexture3DEXT;
+-GLEW_FUN_EXPORT PFNGLGENFRAMEBUFFERSEXTPROC __glewGenFramebuffersEXT;
+-GLEW_FUN_EXPORT PFNGLGENRENDERBUFFERSEXTPROC __glewGenRenderbuffersEXT;
+-GLEW_FUN_EXPORT PFNGLGENERATEMIPMAPEXTPROC __glewGenerateMipmapEXT;
+-GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetFramebufferAttachmentParameterivEXT;
+-GLEW_FUN_EXPORT PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glewGetRenderbufferParameterivEXT;
+-GLEW_FUN_EXPORT PFNGLISFRAMEBUFFEREXTPROC __glewIsFramebufferEXT;
+-GLEW_FUN_EXPORT PFNGLISRENDERBUFFEREXTPROC __glewIsRenderbufferEXT;
+-GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEEXTPROC __glewRenderbufferStorageEXT;
+-
+-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREEXTPROC __glewFramebufferTextureEXT;
+-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glewFramebufferTextureFaceEXT;
+-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glewFramebufferTextureLayerEXT;
+-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERIEXTPROC __glewProgramParameteriEXT;
+-
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glewProgramEnvParameters4fvEXT;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glewProgramLocalParameters4fvEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBINDFRAGDATALOCATIONEXTPROC __glewBindFragDataLocationEXT;
+-GLEW_FUN_EXPORT PFNGLGETFRAGDATALOCATIONEXTPROC __glewGetFragDataLocationEXT;
+-GLEW_FUN_EXPORT PFNGLGETUNIFORMUIVEXTPROC __glewGetUniformuivEXT;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIIVEXTPROC __glewGetVertexAttribIivEXT;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIUIVEXTPROC __glewGetVertexAttribIuivEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1UIEXTPROC __glewUniform1uiEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM1UIVEXTPROC __glewUniform1uivEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2UIEXTPROC __glewUniform2uiEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM2UIVEXTPROC __glewUniform2uivEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3UIEXTPROC __glewUniform3uiEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM3UIVEXTPROC __glewUniform3uivEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4UIEXTPROC __glewUniform4uiEXT;
+-GLEW_FUN_EXPORT PFNGLUNIFORM4UIVEXTPROC __glewUniform4uivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IEXTPROC __glewVertexAttribI1iEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IVEXTPROC __glewVertexAttribI1ivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIEXTPROC __glewVertexAttribI1uiEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIVEXTPROC __glewVertexAttribI1uivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IEXTPROC __glewVertexAttribI2iEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IVEXTPROC __glewVertexAttribI2ivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIEXTPROC __glewVertexAttribI2uiEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIVEXTPROC __glewVertexAttribI2uivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IEXTPROC __glewVertexAttribI3iEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IVEXTPROC __glewVertexAttribI3ivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIEXTPROC __glewVertexAttribI3uiEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIVEXTPROC __glewVertexAttribI3uivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4BVEXTPROC __glewVertexAttribI4bvEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IEXTPROC __glewVertexAttribI4iEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IVEXTPROC __glewVertexAttribI4ivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4SVEXTPROC __glewVertexAttribI4svEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UBVEXTPROC __glewVertexAttribI4ubvEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIEXTPROC __glewVertexAttribI4uiEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIVEXTPROC __glewVertexAttribI4uivEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4USVEXTPROC __glewVertexAttribI4usvEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTEREXTPROC __glewVertexAttribIPointerEXT;
+-
+-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMEXTPROC __glewGetHistogramEXT;
+-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glewGetHistogramParameterfvEXT;
+-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glewGetHistogramParameterivEXT;
+-GLEW_FUN_EXPORT PFNGLGETMINMAXEXTPROC __glewGetMinmaxEXT;
+-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERFVEXTPROC __glewGetMinmaxParameterfvEXT;
+-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERIVEXTPROC __glewGetMinmaxParameterivEXT;
+-GLEW_FUN_EXPORT PFNGLHISTOGRAMEXTPROC __glewHistogramEXT;
+-GLEW_FUN_EXPORT PFNGLMINMAXEXTPROC __glewMinmaxEXT;
+-GLEW_FUN_EXPORT PFNGLRESETHISTOGRAMEXTPROC __glewResetHistogramEXT;
+-GLEW_FUN_EXPORT PFNGLRESETMINMAXEXTPROC __glewResetMinmaxEXT;
+-
+-GLEW_FUN_EXPORT PFNGLINDEXFUNCEXTPROC __glewIndexFuncEXT;
+-
+-GLEW_FUN_EXPORT PFNGLINDEXMATERIALEXTPROC __glewIndexMaterialEXT;
+-
+-GLEW_FUN_EXPORT PFNGLAPPLYTEXTUREEXTPROC __glewApplyTextureEXT;
+-GLEW_FUN_EXPORT PFNGLTEXTURELIGHTEXTPROC __glewTextureLightEXT;
+-GLEW_FUN_EXPORT PFNGLTEXTUREMATERIALEXTPROC __glewTextureMaterialEXT;
+-
+-GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSEXTPROC __glewMultiDrawArraysEXT;
+-GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSEXTPROC __glewMultiDrawElementsEXT;
+-
+-GLEW_FUN_EXPORT PFNGLSAMPLEMASKEXTPROC __glewSampleMaskEXT;
+-GLEW_FUN_EXPORT PFNGLSAMPLEPATTERNEXTPROC __glewSamplePatternEXT;
+-
+-GLEW_FUN_EXPORT PFNGLCOLORTABLEEXTPROC __glewColorTableEXT;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEEXTPROC __glewGetColorTableEXT;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glewGetColorTableParameterfvEXT;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glewGetColorTableParameterivEXT;
+-
+-GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glewGetPixelTransformParameterfvEXT;
+-GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glewGetPixelTransformParameterivEXT;
+-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glewPixelTransformParameterfEXT;
+-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glewPixelTransformParameterfvEXT;
+-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glewPixelTransformParameteriEXT;
+-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glewPixelTransformParameterivEXT;
+-
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFEXTPROC __glewPointParameterfEXT;
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVEXTPROC __glewPointParameterfvEXT;
+-
+-GLEW_FUN_EXPORT PFNGLPOLYGONOFFSETEXTPROC __glewPolygonOffsetEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBEGINSCENEEXTPROC __glewBeginSceneEXT;
+-GLEW_FUN_EXPORT PFNGLENDSCENEEXTPROC __glewEndSceneEXT;
+-
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BEXTPROC __glewSecondaryColor3bEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BVEXTPROC __glewSecondaryColor3bvEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DEXTPROC __glewSecondaryColor3dEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DVEXTPROC __glewSecondaryColor3dvEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FEXTPROC __glewSecondaryColor3fEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FVEXTPROC __glewSecondaryColor3fvEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IEXTPROC __glewSecondaryColor3iEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IVEXTPROC __glewSecondaryColor3ivEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SEXTPROC __glewSecondaryColor3sEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SVEXTPROC __glewSecondaryColor3svEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBEXTPROC __glewSecondaryColor3ubEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBVEXTPROC __glewSecondaryColor3ubvEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIEXTPROC __glewSecondaryColor3uiEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIVEXTPROC __glewSecondaryColor3uivEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USEXTPROC __glewSecondaryColor3usEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USVEXTPROC __glewSecondaryColor3usvEXT;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTEREXTPROC __glewSecondaryColorPointerEXT;
+-
+-GLEW_FUN_EXPORT PFNGLACTIVESTENCILFACEEXTPROC __glewActiveStencilFaceEXT;
+-
+-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE1DEXTPROC __glewTexSubImage1DEXT;
+-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE2DEXTPROC __glewTexSubImage2DEXT;
+-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE3DEXTPROC __glewTexSubImage3DEXT;
+-
+-GLEW_FUN_EXPORT PFNGLTEXIMAGE3DEXTPROC __glewTexImage3DEXT;
+-
+-GLEW_FUN_EXPORT PFNGLTEXBUFFEREXTPROC __glewTexBufferEXT;
+-
+-GLEW_FUN_EXPORT PFNGLCLEARCOLORIIEXTPROC __glewClearColorIiEXT;
+-GLEW_FUN_EXPORT PFNGLCLEARCOLORIUIEXTPROC __glewClearColorIuiEXT;
+-GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIIVEXTPROC __glewGetTexParameterIivEXT;
+-GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIUIVEXTPROC __glewGetTexParameterIuivEXT;
+-GLEW_FUN_EXPORT PFNGLTEXPARAMETERIIVEXTPROC __glewTexParameterIivEXT;
+-GLEW_FUN_EXPORT PFNGLTEXPARAMETERIUIVEXTPROC __glewTexParameterIuivEXT;
+-
+-GLEW_FUN_EXPORT PFNGLARETEXTURESRESIDENTEXTPROC __glewAreTexturesResidentEXT;
+-GLEW_FUN_EXPORT PFNGLBINDTEXTUREEXTPROC __glewBindTextureEXT;
+-GLEW_FUN_EXPORT PFNGLDELETETEXTURESEXTPROC __glewDeleteTexturesEXT;
+-GLEW_FUN_EXPORT PFNGLGENTEXTURESEXTPROC __glewGenTexturesEXT;
+-GLEW_FUN_EXPORT PFNGLISTEXTUREEXTPROC __glewIsTextureEXT;
+-GLEW_FUN_EXPORT PFNGLPRIORITIZETEXTURESEXTPROC __glewPrioritizeTexturesEXT;
+-
+-GLEW_FUN_EXPORT PFNGLTEXTURENORMALEXTPROC __glewTextureNormalEXT;
+-
+-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTI64VEXTPROC __glewGetQueryObjecti64vEXT;
+-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUI64VEXTPROC __glewGetQueryObjectui64vEXT;
+-
+-GLEW_FUN_EXPORT PFNGLARRAYELEMENTEXTPROC __glewArrayElementEXT;
+-GLEW_FUN_EXPORT PFNGLCOLORPOINTEREXTPROC __glewColorPointerEXT;
+-GLEW_FUN_EXPORT PFNGLDRAWARRAYSEXTPROC __glewDrawArraysEXT;
+-GLEW_FUN_EXPORT PFNGLEDGEFLAGPOINTEREXTPROC __glewEdgeFlagPointerEXT;
+-GLEW_FUN_EXPORT PFNGLGETPOINTERVEXTPROC __glewGetPointervEXT;
+-GLEW_FUN_EXPORT PFNGLINDEXPOINTEREXTPROC __glewIndexPointerEXT;
+-GLEW_FUN_EXPORT PFNGLNORMALPOINTEREXTPROC __glewNormalPointerEXT;
+-GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTEREXTPROC __glewTexCoordPointerEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXPOINTEREXTPROC __glewVertexPointerEXT;
+-
+-GLEW_FUN_EXPORT PFNGLBEGINVERTEXSHADEREXTPROC __glewBeginVertexShaderEXT;
+-GLEW_FUN_EXPORT PFNGLBINDLIGHTPARAMETEREXTPROC __glewBindLightParameterEXT;
+-GLEW_FUN_EXPORT PFNGLBINDMATERIALPARAMETEREXTPROC __glewBindMaterialParameterEXT;
+-GLEW_FUN_EXPORT PFNGLBINDPARAMETEREXTPROC __glewBindParameterEXT;
+-GLEW_FUN_EXPORT PFNGLBINDTEXGENPARAMETEREXTPROC __glewBindTexGenParameterEXT;
+-GLEW_FUN_EXPORT PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glewBindTextureUnitParameterEXT;
+-GLEW_FUN_EXPORT PFNGLBINDVERTEXSHADEREXTPROC __glewBindVertexShaderEXT;
+-GLEW_FUN_EXPORT PFNGLDELETEVERTEXSHADEREXTPROC __glewDeleteVertexShaderEXT;
+-GLEW_FUN_EXPORT PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glewDisableVariantClientStateEXT;
+-GLEW_FUN_EXPORT PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glewEnableVariantClientStateEXT;
+-GLEW_FUN_EXPORT PFNGLENDVERTEXSHADEREXTPROC __glewEndVertexShaderEXT;
+-GLEW_FUN_EXPORT PFNGLEXTRACTCOMPONENTEXTPROC __glewExtractComponentEXT;
+-GLEW_FUN_EXPORT PFNGLGENSYMBOLSEXTPROC __glewGenSymbolsEXT;
+-GLEW_FUN_EXPORT PFNGLGENVERTEXSHADERSEXTPROC __glewGenVertexShadersEXT;
+-GLEW_FUN_EXPORT PFNGLGETINVARIANTBOOLEANVEXTPROC __glewGetInvariantBooleanvEXT;
+-GLEW_FUN_EXPORT PFNGLGETINVARIANTFLOATVEXTPROC __glewGetInvariantFloatvEXT;
+-GLEW_FUN_EXPORT PFNGLGETINVARIANTINTEGERVEXTPROC __glewGetInvariantIntegervEXT;
+-GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glewGetLocalConstantBooleanvEXT;
+-GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glewGetLocalConstantFloatvEXT;
+-GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glewGetLocalConstantIntegervEXT;
+-GLEW_FUN_EXPORT PFNGLGETVARIANTBOOLEANVEXTPROC __glewGetVariantBooleanvEXT;
+-GLEW_FUN_EXPORT PFNGLGETVARIANTFLOATVEXTPROC __glewGetVariantFloatvEXT;
+-GLEW_FUN_EXPORT PFNGLGETVARIANTINTEGERVEXTPROC __glewGetVariantIntegervEXT;
+-GLEW_FUN_EXPORT PFNGLGETVARIANTPOINTERVEXTPROC __glewGetVariantPointervEXT;
+-GLEW_FUN_EXPORT PFNGLINSERTCOMPONENTEXTPROC __glewInsertComponentEXT;
+-GLEW_FUN_EXPORT PFNGLISVARIANTENABLEDEXTPROC __glewIsVariantEnabledEXT;
+-GLEW_FUN_EXPORT PFNGLSETINVARIANTEXTPROC __glewSetInvariantEXT;
+-GLEW_FUN_EXPORT PFNGLSETLOCALCONSTANTEXTPROC __glewSetLocalConstantEXT;
+-GLEW_FUN_EXPORT PFNGLSHADEROP1EXTPROC __glewShaderOp1EXT;
+-GLEW_FUN_EXPORT PFNGLSHADEROP2EXTPROC __glewShaderOp2EXT;
+-GLEW_FUN_EXPORT PFNGLSHADEROP3EXTPROC __glewShaderOp3EXT;
+-GLEW_FUN_EXPORT PFNGLSWIZZLEEXTPROC __glewSwizzleEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTPOINTEREXTPROC __glewVariantPointerEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTBVEXTPROC __glewVariantbvEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTDVEXTPROC __glewVariantdvEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTFVEXTPROC __glewVariantfvEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTIVEXTPROC __glewVariantivEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTSVEXTPROC __glewVariantsvEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTUBVEXTPROC __glewVariantubvEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTUIVEXTPROC __glewVariantuivEXT;
+-GLEW_FUN_EXPORT PFNGLVARIANTUSVEXTPROC __glewVariantusvEXT;
+-GLEW_FUN_EXPORT PFNGLWRITEMASKEXTPROC __glewWriteMaskEXT;
+-
+-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTPOINTEREXTPROC __glewVertexWeightPointerEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTFEXTPROC __glewVertexWeightfEXT;
+-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTFVEXTPROC __glewVertexWeightfvEXT;
+-
+-GLEW_FUN_EXPORT PFNGLFRAMETERMINATORGREMEDYPROC __glewFrameTerminatorGREMEDY;
+-
+-GLEW_FUN_EXPORT PFNGLSTRINGMARKERGREMEDYPROC __glewStringMarkerGREMEDY;
+-
+-GLEW_FUN_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glewGetImageTransformParameterfvHP;
+-GLEW_FUN_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glewGetImageTransformParameterivHP;
+-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glewImageTransformParameterfHP;
+-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glewImageTransformParameterfvHP;
+-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glewImageTransformParameteriHP;
+-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glewImageTransformParameterivHP;
+-
+-GLEW_FUN_EXPORT PFNGLMULTIMODEDRAWARRAYSIBMPROC __glewMultiModeDrawArraysIBM;
+-GLEW_FUN_EXPORT PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glewMultiModeDrawElementsIBM;
+-
+-GLEW_FUN_EXPORT PFNGLCOLORPOINTERLISTIBMPROC __glewColorPointerListIBM;
+-GLEW_FUN_EXPORT PFNGLEDGEFLAGPOINTERLISTIBMPROC __glewEdgeFlagPointerListIBM;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTERLISTIBMPROC __glewFogCoordPointerListIBM;
+-GLEW_FUN_EXPORT PFNGLINDEXPOINTERLISTIBMPROC __glewIndexPointerListIBM;
+-GLEW_FUN_EXPORT PFNGLNORMALPOINTERLISTIBMPROC __glewNormalPointerListIBM;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glewSecondaryColorPointerListIBM;
+-GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTERLISTIBMPROC __glewTexCoordPointerListIBM;
+-GLEW_FUN_EXPORT PFNGLVERTEXPOINTERLISTIBMPROC __glewVertexPointerListIBM;
+-
+-GLEW_FUN_EXPORT PFNGLCOLORPOINTERVINTELPROC __glewColorPointervINTEL;
+-GLEW_FUN_EXPORT PFNGLNORMALPOINTERVINTELPROC __glewNormalPointervINTEL;
+-GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTERVINTELPROC __glewTexCoordPointervINTEL;
+-GLEW_FUN_EXPORT PFNGLVERTEXPOINTERVINTELPROC __glewVertexPointervINTEL;
+-
+-GLEW_FUN_EXPORT PFNGLTEXSCISSORFUNCINTELPROC __glewTexScissorFuncINTEL;
+-GLEW_FUN_EXPORT PFNGLTEXSCISSORINTELPROC __glewTexScissorINTEL;
+-
+-GLEW_FUN_EXPORT PFNGLBUFFERREGIONENABLEDEXTPROC __glewBufferRegionEnabledEXT;
+-GLEW_FUN_EXPORT PFNGLDELETEBUFFERREGIONEXTPROC __glewDeleteBufferRegionEXT;
+-GLEW_FUN_EXPORT PFNGLDRAWBUFFERREGIONEXTPROC __glewDrawBufferRegionEXT;
+-GLEW_FUN_EXPORT PFNGLNEWBUFFERREGIONEXTPROC __glewNewBufferRegionEXT;
+-GLEW_FUN_EXPORT PFNGLREADBUFFERREGIONEXTPROC __glewReadBufferRegionEXT;
+-
+-GLEW_FUN_EXPORT PFNGLRESIZEBUFFERSMESAPROC __glewResizeBuffersMESA;
+-
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DMESAPROC __glewWindowPos2dMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVMESAPROC __glewWindowPos2dvMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FMESAPROC __glewWindowPos2fMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVMESAPROC __glewWindowPos2fvMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IMESAPROC __glewWindowPos2iMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVMESAPROC __glewWindowPos2ivMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SMESAPROC __glewWindowPos2sMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVMESAPROC __glewWindowPos2svMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DMESAPROC __glewWindowPos3dMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVMESAPROC __glewWindowPos3dvMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FMESAPROC __glewWindowPos3fMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVMESAPROC __glewWindowPos3fvMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IMESAPROC __glewWindowPos3iMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVMESAPROC __glewWindowPos3ivMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SMESAPROC __glewWindowPos3sMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVMESAPROC __glewWindowPos3svMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4DMESAPROC __glewWindowPos4dMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4DVMESAPROC __glewWindowPos4dvMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4FMESAPROC __glewWindowPos4fMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4FVMESAPROC __glewWindowPos4fvMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4IMESAPROC __glewWindowPos4iMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4IVMESAPROC __glewWindowPos4ivMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4SMESAPROC __glewWindowPos4sMESA;
+-GLEW_FUN_EXPORT PFNGLWINDOWPOS4SVMESAPROC __glewWindowPos4svMESA;
+-
+-GLEW_FUN_EXPORT PFNGLCLEARDEPTHDNVPROC __glewClearDepthdNV;
+-GLEW_FUN_EXPORT PFNGLDEPTHBOUNDSDNVPROC __glewDepthBoundsdNV;
+-GLEW_FUN_EXPORT PFNGLDEPTHRANGEDNVPROC __glewDepthRangedNV;
+-
+-GLEW_FUN_EXPORT PFNGLEVALMAPSNVPROC __glewEvalMapsNV;
+-GLEW_FUN_EXPORT PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glewGetMapAttribParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glewGetMapAttribParameterivNV;
+-GLEW_FUN_EXPORT PFNGLGETMAPCONTROLPOINTSNVPROC __glewGetMapControlPointsNV;
+-GLEW_FUN_EXPORT PFNGLGETMAPPARAMETERFVNVPROC __glewGetMapParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLGETMAPPARAMETERIVNVPROC __glewGetMapParameterivNV;
+-GLEW_FUN_EXPORT PFNGLMAPCONTROLPOINTSNVPROC __glewMapControlPointsNV;
+-GLEW_FUN_EXPORT PFNGLMAPPARAMETERFVNVPROC __glewMapParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLMAPPARAMETERIVNVPROC __glewMapParameterivNV;
+-
+-GLEW_FUN_EXPORT PFNGLDELETEFENCESNVPROC __glewDeleteFencesNV;
+-GLEW_FUN_EXPORT PFNGLFINISHFENCENVPROC __glewFinishFenceNV;
+-GLEW_FUN_EXPORT PFNGLGENFENCESNVPROC __glewGenFencesNV;
+-GLEW_FUN_EXPORT PFNGLGETFENCEIVNVPROC __glewGetFenceivNV;
+-GLEW_FUN_EXPORT PFNGLISFENCENVPROC __glewIsFenceNV;
+-GLEW_FUN_EXPORT PFNGLSETFENCENVPROC __glewSetFenceNV;
+-GLEW_FUN_EXPORT PFNGLTESTFENCENVPROC __glewTestFenceNV;
+-
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glewGetProgramNamedParameterdvNV;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glewGetProgramNamedParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glewProgramNamedParameter4dNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glewProgramNamedParameter4dvNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glewProgramNamedParameter4fNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glewProgramNamedParameter4fvNV;
+-
+-GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glewRenderbufferStorageMultisampleCoverageNV;
+-
+-GLEW_FUN_EXPORT PFNGLPROGRAMVERTEXLIMITNVPROC __glewProgramVertexLimitNV;
+-
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4INVPROC __glewProgramEnvParameterI4iNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glewProgramEnvParameterI4ivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4UINVPROC __glewProgramEnvParameterI4uiNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glewProgramEnvParameterI4uivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glewProgramEnvParametersI4ivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glewProgramEnvParametersI4uivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glewProgramLocalParameterI4iNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glewProgramLocalParameterI4ivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glewProgramLocalParameterI4uiNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glewProgramLocalParameterI4uivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glewProgramLocalParametersI4ivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glewProgramLocalParametersI4uivNV;
+-
+-GLEW_FUN_EXPORT PFNGLCOLOR3HNVPROC __glewColor3hNV;
+-GLEW_FUN_EXPORT PFNGLCOLOR3HVNVPROC __glewColor3hvNV;
+-GLEW_FUN_EXPORT PFNGLCOLOR4HNVPROC __glewColor4hNV;
+-GLEW_FUN_EXPORT PFNGLCOLOR4HVNVPROC __glewColor4hvNV;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDHNVPROC __glewFogCoordhNV;
+-GLEW_FUN_EXPORT PFNGLFOGCOORDHVNVPROC __glewFogCoordhvNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1HNVPROC __glewMultiTexCoord1hNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1HVNVPROC __glewMultiTexCoord1hvNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2HNVPROC __glewMultiTexCoord2hNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2HVNVPROC __glewMultiTexCoord2hvNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3HNVPROC __glewMultiTexCoord3hNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3HVNVPROC __glewMultiTexCoord3hvNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4HNVPROC __glewMultiTexCoord4hNV;
+-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4HVNVPROC __glewMultiTexCoord4hvNV;
+-GLEW_FUN_EXPORT PFNGLNORMAL3HNVPROC __glewNormal3hNV;
+-GLEW_FUN_EXPORT PFNGLNORMAL3HVNVPROC __glewNormal3hvNV;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3HNVPROC __glewSecondaryColor3hNV;
+-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3HVNVPROC __glewSecondaryColor3hvNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD1HNVPROC __glewTexCoord1hNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD1HVNVPROC __glewTexCoord1hvNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2HNVPROC __glewTexCoord2hNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2HVNVPROC __glewTexCoord2hvNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD3HNVPROC __glewTexCoord3hNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD3HVNVPROC __glewTexCoord3hvNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD4HNVPROC __glewTexCoord4hNV;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD4HVNVPROC __glewTexCoord4hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEX2HNVPROC __glewVertex2hNV;
+-GLEW_FUN_EXPORT PFNGLVERTEX2HVNVPROC __glewVertex2hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEX3HNVPROC __glewVertex3hNV;
+-GLEW_FUN_EXPORT PFNGLVERTEX3HVNVPROC __glewVertex3hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEX4HNVPROC __glewVertex4hNV;
+-GLEW_FUN_EXPORT PFNGLVERTEX4HVNVPROC __glewVertex4hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1HNVPROC __glewVertexAttrib1hNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1HVNVPROC __glewVertexAttrib1hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2HNVPROC __glewVertexAttrib2hNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2HVNVPROC __glewVertexAttrib2hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3HNVPROC __glewVertexAttrib3hNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3HVNVPROC __glewVertexAttrib3hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4HNVPROC __glewVertexAttrib4hNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4HVNVPROC __glewVertexAttrib4hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1HVNVPROC __glewVertexAttribs1hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2HVNVPROC __glewVertexAttribs2hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3HVNVPROC __glewVertexAttribs3hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4HVNVPROC __glewVertexAttribs4hvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTHNVPROC __glewVertexWeighthNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTHVNVPROC __glewVertexWeighthvNV;
+-
+-GLEW_FUN_EXPORT PFNGLBEGINOCCLUSIONQUERYNVPROC __glewBeginOcclusionQueryNV;
+-GLEW_FUN_EXPORT PFNGLDELETEOCCLUSIONQUERIESNVPROC __glewDeleteOcclusionQueriesNV;
+-GLEW_FUN_EXPORT PFNGLENDOCCLUSIONQUERYNVPROC __glewEndOcclusionQueryNV;
+-GLEW_FUN_EXPORT PFNGLGENOCCLUSIONQUERIESNVPROC __glewGenOcclusionQueriesNV;
+-GLEW_FUN_EXPORT PFNGLGETOCCLUSIONQUERYIVNVPROC __glewGetOcclusionQueryivNV;
+-GLEW_FUN_EXPORT PFNGLGETOCCLUSIONQUERYUIVNVPROC __glewGetOcclusionQueryuivNV;
+-GLEW_FUN_EXPORT PFNGLISOCCLUSIONQUERYNVPROC __glewIsOcclusionQueryNV;
+-
+-GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glewProgramBufferParametersIivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glewProgramBufferParametersIuivNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glewProgramBufferParametersfvNV;
+-
+-GLEW_FUN_EXPORT PFNGLFLUSHPIXELDATARANGENVPROC __glewFlushPixelDataRangeNV;
+-GLEW_FUN_EXPORT PFNGLPIXELDATARANGENVPROC __glewPixelDataRangeNV;
+-
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERINVPROC __glewPointParameteriNV;
+-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIVNVPROC __glewPointParameterivNV;
+-
+-GLEW_FUN_EXPORT PFNGLPRIMITIVERESTARTINDEXNVPROC __glewPrimitiveRestartIndexNV;
+-GLEW_FUN_EXPORT PFNGLPRIMITIVERESTARTNVPROC __glewPrimitiveRestartNV;
+-
+-GLEW_FUN_EXPORT PFNGLCOMBINERINPUTNVPROC __glewCombinerInputNV;
+-GLEW_FUN_EXPORT PFNGLCOMBINEROUTPUTNVPROC __glewCombinerOutputNV;
+-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERFNVPROC __glewCombinerParameterfNV;
+-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERFVNVPROC __glewCombinerParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERINVPROC __glewCombinerParameteriNV;
+-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERIVNVPROC __glewCombinerParameterivNV;
+-GLEW_FUN_EXPORT PFNGLFINALCOMBINERINPUTNVPROC __glewFinalCombinerInputNV;
+-GLEW_FUN_EXPORT PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glewGetCombinerInputParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glewGetCombinerInputParameterivNV;
+-GLEW_FUN_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glewGetCombinerOutputParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glewGetCombinerOutputParameterivNV;
+-GLEW_FUN_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glewGetFinalCombinerInputParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glewGetFinalCombinerInputParameterivNV;
+-
+-GLEW_FUN_EXPORT PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glewCombinerStageParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glewGetCombinerStageParameterfvNV;
+-
+-GLEW_FUN_EXPORT PFNGLACTIVEVARYINGNVPROC __glewActiveVaryingNV;
+-GLEW_FUN_EXPORT PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glewBeginTransformFeedbackNV;
+-GLEW_FUN_EXPORT PFNGLBINDBUFFERBASENVPROC __glewBindBufferBaseNV;
+-GLEW_FUN_EXPORT PFNGLBINDBUFFEROFFSETNVPROC __glewBindBufferOffsetNV;
+-GLEW_FUN_EXPORT PFNGLBINDBUFFERRANGENVPROC __glewBindBufferRangeNV;
+-GLEW_FUN_EXPORT PFNGLENDTRANSFORMFEEDBACKNVPROC __glewEndTransformFeedbackNV;
+-GLEW_FUN_EXPORT PFNGLGETACTIVEVARYINGNVPROC __glewGetActiveVaryingNV;
+-GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glewGetTransformFeedbackVaryingNV;
+-GLEW_FUN_EXPORT PFNGLGETVARYINGLOCATIONNVPROC __glewGetVaryingLocationNV;
+-GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glewTransformFeedbackAttribsNV;
+-GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glewTransformFeedbackVaryingsNV;
+-
+-GLEW_FUN_EXPORT PFNGLFLUSHVERTEXARRAYRANGENVPROC __glewFlushVertexArrayRangeNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXARRAYRANGENVPROC __glewVertexArrayRangeNV;
+-
+-GLEW_FUN_EXPORT PFNGLAREPROGRAMSRESIDENTNVPROC __glewAreProgramsResidentNV;
+-GLEW_FUN_EXPORT PFNGLBINDPROGRAMNVPROC __glewBindProgramNV;
+-GLEW_FUN_EXPORT PFNGLDELETEPROGRAMSNVPROC __glewDeleteProgramsNV;
+-GLEW_FUN_EXPORT PFNGLEXECUTEPROGRAMNVPROC __glewExecuteProgramNV;
+-GLEW_FUN_EXPORT PFNGLGENPROGRAMSNVPROC __glewGenProgramsNV;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMPARAMETERDVNVPROC __glewGetProgramParameterdvNV;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMPARAMETERFVNVPROC __glewGetProgramParameterfvNV;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMSTRINGNVPROC __glewGetProgramStringNV;
+-GLEW_FUN_EXPORT PFNGLGETPROGRAMIVNVPROC __glewGetProgramivNV;
+-GLEW_FUN_EXPORT PFNGLGETTRACKMATRIXIVNVPROC __glewGetTrackMatrixivNV;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glewGetVertexAttribPointervNV;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVNVPROC __glewGetVertexAttribdvNV;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVNVPROC __glewGetVertexAttribfvNV;
+-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVNVPROC __glewGetVertexAttribivNV;
+-GLEW_FUN_EXPORT PFNGLISPROGRAMNVPROC __glewIsProgramNV;
+-GLEW_FUN_EXPORT PFNGLLOADPROGRAMNVPROC __glewLoadProgramNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4DNVPROC __glewProgramParameter4dNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4DVNVPROC __glewProgramParameter4dvNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4FNVPROC __glewProgramParameter4fNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4FVNVPROC __glewProgramParameter4fvNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERS4DVNVPROC __glewProgramParameters4dvNV;
+-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERS4FVNVPROC __glewProgramParameters4fvNV;
+-GLEW_FUN_EXPORT PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glewRequestResidentProgramsNV;
+-GLEW_FUN_EXPORT PFNGLTRACKMATRIXNVPROC __glewTrackMatrixNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DNVPROC __glewVertexAttrib1dNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVNVPROC __glewVertexAttrib1dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FNVPROC __glewVertexAttrib1fNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVNVPROC __glewVertexAttrib1fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SNVPROC __glewVertexAttrib1sNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVNVPROC __glewVertexAttrib1svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DNVPROC __glewVertexAttrib2dNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVNVPROC __glewVertexAttrib2dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FNVPROC __glewVertexAttrib2fNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVNVPROC __glewVertexAttrib2fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SNVPROC __glewVertexAttrib2sNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVNVPROC __glewVertexAttrib2svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DNVPROC __glewVertexAttrib3dNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVNVPROC __glewVertexAttrib3dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FNVPROC __glewVertexAttrib3fNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVNVPROC __glewVertexAttrib3fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SNVPROC __glewVertexAttrib3sNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVNVPROC __glewVertexAttrib3svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DNVPROC __glewVertexAttrib4dNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVNVPROC __glewVertexAttrib4dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FNVPROC __glewVertexAttrib4fNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVNVPROC __glewVertexAttrib4fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SNVPROC __glewVertexAttrib4sNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVNVPROC __glewVertexAttrib4svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBNVPROC __glewVertexAttrib4ubNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVNVPROC __glewVertexAttrib4ubvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERNVPROC __glewVertexAttribPointerNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1DVNVPROC __glewVertexAttribs1dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1FVNVPROC __glewVertexAttribs1fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1SVNVPROC __glewVertexAttribs1svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2DVNVPROC __glewVertexAttribs2dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2FVNVPROC __glewVertexAttribs2fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2SVNVPROC __glewVertexAttribs2svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3DVNVPROC __glewVertexAttribs3dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3FVNVPROC __glewVertexAttribs3fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3SVNVPROC __glewVertexAttribs3svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4DVNVPROC __glewVertexAttribs4dvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4FVNVPROC __glewVertexAttribs4fvNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4SVNVPROC __glewVertexAttribs4svNV;
+-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4UBVNVPROC __glewVertexAttribs4ubvNV;
+-
+-GLEW_FUN_EXPORT PFNGLCLEARDEPTHFOESPROC __glewClearDepthfOES;
+-GLEW_FUN_EXPORT PFNGLCLIPPLANEFOESPROC __glewClipPlanefOES;
+-GLEW_FUN_EXPORT PFNGLDEPTHRANGEFOESPROC __glewDepthRangefOES;
+-GLEW_FUN_EXPORT PFNGLFRUSTUMFOESPROC __glewFrustumfOES;
+-GLEW_FUN_EXPORT PFNGLGETCLIPPLANEFOESPROC __glewGetClipPlanefOES;
+-GLEW_FUN_EXPORT PFNGLORTHOFOESPROC __glewOrthofOES;
+-
+-GLEW_FUN_EXPORT PFNGLDETAILTEXFUNCSGISPROC __glewDetailTexFuncSGIS;
+-GLEW_FUN_EXPORT PFNGLGETDETAILTEXFUNCSGISPROC __glewGetDetailTexFuncSGIS;
+-
+-GLEW_FUN_EXPORT PFNGLFOGFUNCSGISPROC __glewFogFuncSGIS;
+-GLEW_FUN_EXPORT PFNGLGETFOGFUNCSGISPROC __glewGetFogFuncSGIS;
+-
+-GLEW_FUN_EXPORT PFNGLSAMPLEMASKSGISPROC __glewSampleMaskSGIS;
+-GLEW_FUN_EXPORT PFNGLSAMPLEPATTERNSGISPROC __glewSamplePatternSGIS;
+-
+-GLEW_FUN_EXPORT PFNGLGETSHARPENTEXFUNCSGISPROC __glewGetSharpenTexFuncSGIS;
+-GLEW_FUN_EXPORT PFNGLSHARPENTEXFUNCSGISPROC __glewSharpenTexFuncSGIS;
+-
+-GLEW_FUN_EXPORT PFNGLTEXIMAGE4DSGISPROC __glewTexImage4DSGIS;
+-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE4DSGISPROC __glewTexSubImage4DSGIS;
+-
+-GLEW_FUN_EXPORT PFNGLGETTEXFILTERFUNCSGISPROC __glewGetTexFilterFuncSGIS;
+-GLEW_FUN_EXPORT PFNGLTEXFILTERFUNCSGISPROC __glewTexFilterFuncSGIS;
+-
+-GLEW_FUN_EXPORT PFNGLASYNCMARKERSGIXPROC __glewAsyncMarkerSGIX;
+-GLEW_FUN_EXPORT PFNGLDELETEASYNCMARKERSSGIXPROC __glewDeleteAsyncMarkersSGIX;
+-GLEW_FUN_EXPORT PFNGLFINISHASYNCSGIXPROC __glewFinishAsyncSGIX;
+-GLEW_FUN_EXPORT PFNGLGENASYNCMARKERSSGIXPROC __glewGenAsyncMarkersSGIX;
+-GLEW_FUN_EXPORT PFNGLISASYNCMARKERSGIXPROC __glewIsAsyncMarkerSGIX;
+-GLEW_FUN_EXPORT PFNGLPOLLASYNCSGIXPROC __glewPollAsyncSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLFLUSHRASTERSGIXPROC __glewFlushRasterSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLTEXTUREFOGSGIXPROC __glewTextureFogSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glewFragmentColorMaterialSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glewFragmentLightModelfSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glewFragmentLightModelfvSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELISGIXPROC __glewFragmentLightModeliSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glewFragmentLightModelivSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFSGIXPROC __glewFragmentLightfSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFVSGIXPROC __glewFragmentLightfvSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTISGIXPROC __glewFragmentLightiSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIVSGIXPROC __glewFragmentLightivSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFSGIXPROC __glewFragmentMaterialfSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFVSGIXPROC __glewFragmentMaterialfvSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALISGIXPROC __glewFragmentMaterialiSGIX;
+-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIVSGIXPROC __glewFragmentMaterialivSGIX;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glewGetFragmentLightfvSGIX;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glewGetFragmentLightivSGIX;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glewGetFragmentMaterialfvSGIX;
+-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glewGetFragmentMaterialivSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLFRAMEZOOMSGIXPROC __glewFrameZoomSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLPIXELTEXGENSGIXPROC __glewPixelTexGenSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLREFERENCEPLANESGIXPROC __glewReferencePlaneSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERFSGIXPROC __glewSpriteParameterfSGIX;
+-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERFVSGIXPROC __glewSpriteParameterfvSGIX;
+-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERISGIXPROC __glewSpriteParameteriSGIX;
+-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERIVSGIXPROC __glewSpriteParameterivSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLTAGSAMPLEBUFFERSGIXPROC __glewTagSampleBufferSGIX;
+-
+-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERFVSGIPROC __glewColorTableParameterfvSGI;
+-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERIVSGIPROC __glewColorTableParameterivSGI;
+-GLEW_FUN_EXPORT PFNGLCOLORTABLESGIPROC __glewColorTableSGI;
+-GLEW_FUN_EXPORT PFNGLCOPYCOLORTABLESGIPROC __glewCopyColorTableSGI;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glewGetColorTableParameterfvSGI;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glewGetColorTableParameterivSGI;
+-GLEW_FUN_EXPORT PFNGLGETCOLORTABLESGIPROC __glewGetColorTableSGI;
+-
+-GLEW_FUN_EXPORT PFNGLFINISHTEXTURESUNXPROC __glewFinishTextureSUNX;
+-
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORBSUNPROC __glewGlobalAlphaFactorbSUN;
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORDSUNPROC __glewGlobalAlphaFactordSUN;
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORFSUNPROC __glewGlobalAlphaFactorfSUN;
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORISUNPROC __glewGlobalAlphaFactoriSUN;
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORSSUNPROC __glewGlobalAlphaFactorsSUN;
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUBSUNPROC __glewGlobalAlphaFactorubSUN;
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUISUNPROC __glewGlobalAlphaFactoruiSUN;
+-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUSSUNPROC __glewGlobalAlphaFactorusSUN;
+-
+-GLEW_FUN_EXPORT PFNGLREADVIDEOPIXELSSUNPROC __glewReadVideoPixelsSUN;
+-
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEPOINTERSUNPROC __glewReplacementCodePointerSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUBSUNPROC __glewReplacementCodeubSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUBVSUNPROC __glewReplacementCodeubvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUISUNPROC __glewReplacementCodeuiSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVSUNPROC __glewReplacementCodeuivSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUSSUNPROC __glewReplacementCodeusSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUSVSUNPROC __glewReplacementCodeusvSUN;
+-
+-GLEW_FUN_EXPORT PFNGLCOLOR3FVERTEX3FSUNPROC __glewColor3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLCOLOR3FVERTEX3FVSUNPROC __glewColor3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewColor4fNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewColor4fNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX2FSUNPROC __glewColor4ubVertex2fSUN;
+-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX2FVSUNPROC __glewColor4ubVertex2fvSUN;
+-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX3FSUNPROC __glewColor4ubVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX3FVSUNPROC __glewColor4ubVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLNORMAL3FVERTEX3FSUNPROC __glewNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLNORMAL3FVERTEX3FVSUNPROC __glewNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glewReplacementCodeuiColor3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glewReplacementCodeuiColor4ubVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glewReplacementCodeuiColor4ubVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glewReplacementCodeuiVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glewReplacementCodeuiVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glewTexCoord2fColor3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glewTexCoord2fColor3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glewTexCoord2fColor4ubVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glewTexCoord2fColor4ubVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fNormal3fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fNormal3fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FVERTEX3FSUNPROC __glewTexCoord2fVertex3fSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glewTexCoord2fVertex3fvSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fvSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD4FVERTEX4FSUNPROC __glewTexCoord4fVertex4fSUN;
+-GLEW_FUN_EXPORT PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glewTexCoord4fVertex4fvSUN;
+-
+-GLEW_FUN_EXPORT PFNGLADDSWAPHINTRECTWINPROC __glewAddSwapHintRectWIN;
+-
+-#if defined(GLEW_MX) && !defined(_WIN32)
+-struct GLEWContextStruct
+-{
+-#endif /* GLEW_MX */
+-
+-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_1;
+-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_2;
+-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_3;
+-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_5;
+-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_2_0;
+-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_2_1;
+-GLEW_VAR_EXPORT GLboolean __GLEW_3DFX_multisample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_3DFX_tbuffer;
+-GLEW_VAR_EXPORT GLboolean __GLEW_3DFX_texture_compression_FXT1;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_client_storage;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_element_array;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_fence;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_float_pixels;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_flush_buffer_range;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_pixel_buffer;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_specular_vector;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_texture_range;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_transform_hint;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_vertex_array_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_vertex_array_range;
+-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_ycbcr_422;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_color_buffer_float;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_depth_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_draw_buffers;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_fragment_program;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_fragment_program_shadow;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_fragment_shader;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_half_float_pixel;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_imaging;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_matrix_palette;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_multisample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_multitexture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_occlusion_query;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_pixel_buffer_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_point_parameters;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_point_sprite;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shader_objects;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shading_language_100;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shadow;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shadow_ambient;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_border_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_compression;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_cube_map;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_add;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_combine;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_crossbar;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_dot3;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_float;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_mirrored_repeat;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_non_power_of_two;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_rectangle;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_transpose_matrix;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_blend;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_buffer_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_program;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_shader;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_window_pos;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_point_sprites;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_texture_env_combine3;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_texture_env_route;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_vertex_shader_output_point_size;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_draw_buffers;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_element_array;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_envmap_bumpmap;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_fragment_shader;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_map_object_buffer;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_pn_triangles;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_separate_stencil;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_shader_texture_lod;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_text_fragment_shader;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_compression_3dc;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_env_combine3;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_float;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_mirror_once;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_vertex_array_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_vertex_attrib_array_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_vertex_streams;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_422_pixels;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_Cg_shader;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_abgr;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_bgra;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_bindable_uniform;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_color;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_equation_separate;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_func_separate;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_logic_op;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_minmax;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_subtract;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_clip_volume_hint;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_cmyka;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_color_subtable;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_compiled_vertex_array;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_convolution;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_coordinate_frame;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_copy_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_cull_vertex;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_depth_bounds_test;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_draw_buffers2;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_draw_instanced;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_draw_range_elements;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_fog_coord;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_fragment_lighting;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_blit;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_multisample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_sRGB;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_geometry_shader4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_gpu_program_parameters;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_gpu_shader4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_histogram;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_array_formats;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_func;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_material;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_light_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_misc_attribute;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_multi_draw_arrays;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_multisample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_packed_depth_stencil;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_packed_float;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_packed_pixels;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_paletted_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_pixel_buffer_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_pixel_transform;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_pixel_transform_color_table;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_point_parameters;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_polygon_offset;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_rescale_normal;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_scene_marker;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_secondary_color;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_separate_specular_color;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_shadow_funcs;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_shared_texture_palette;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_stencil_clear_tag;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_stencil_two_side;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_stencil_wrap;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_subtexture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture3D;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_array;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_buffer_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_dxt1;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_latc;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_rgtc;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_s3tc;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_cube_map;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_edge_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env_add;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env_combine;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env_dot3;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_filter_anisotropic;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_integer;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_lod_bias;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_mirror_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_perturb_normal;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_rectangle;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_sRGB;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_shared_exponent;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_timer_query;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_vertex_array;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_vertex_shader;
+-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_vertex_weighting;
+-GLEW_VAR_EXPORT GLboolean __GLEW_GREMEDY_frame_terminator;
+-GLEW_VAR_EXPORT GLboolean __GLEW_GREMEDY_string_marker;
+-GLEW_VAR_EXPORT GLboolean __GLEW_HP_convolution_border_modes;
+-GLEW_VAR_EXPORT GLboolean __GLEW_HP_image_transform;
+-GLEW_VAR_EXPORT GLboolean __GLEW_HP_occlusion_test;
+-GLEW_VAR_EXPORT GLboolean __GLEW_HP_texture_lighting;
+-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_cull_vertex;
+-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_multimode_draw_arrays;
+-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_rasterpos_clip;
+-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_static_data;
+-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_texture_mirrored_repeat;
+-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_vertex_array_lists;
+-GLEW_VAR_EXPORT GLboolean __GLEW_INGR_color_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_INGR_interlace_read;
+-GLEW_VAR_EXPORT GLboolean __GLEW_INTEL_parallel_arrays;
+-GLEW_VAR_EXPORT GLboolean __GLEW_INTEL_texture_scissor;
+-GLEW_VAR_EXPORT GLboolean __GLEW_KTX_buffer_region;
+-GLEW_VAR_EXPORT GLboolean __GLEW_MESAX_texture_stack;
+-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_pack_invert;
+-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_resize_buffers;
+-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_window_pos;
+-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_ycbcr_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_blend_square;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_copy_depth_to_color;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_depth_buffer_float;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_depth_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_depth_range_unclamped;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_evaluators;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fence;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_float_buffer;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fog_distance;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program2;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program_option;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_framebuffer_multisample_coverage;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_geometry_program4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_geometry_shader4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_gpu_program4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_half_float;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_light_max_exponent;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_multisample_filter_hint;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_occlusion_query;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_packed_depth_stencil;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_parameter_buffer_object;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_pixel_data_range;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_point_sprite;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_primitive_restart;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_register_combiners;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_register_combiners2;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texgen_emboss;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texgen_reflection;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_compression_vtc;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_env_combine4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_expand_normal;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_rectangle;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_shader;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_shader2;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_shader3;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_transform_feedback;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_array_range;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_array_range2;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program1_1;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program2;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program2_option;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program3;
+-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_OES_byte_coordinates;
+-GLEW_VAR_EXPORT GLboolean __GLEW_OES_compressed_paletted_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_OES_read_format;
+-GLEW_VAR_EXPORT GLboolean __GLEW_OES_single_precision;
+-GLEW_VAR_EXPORT GLboolean __GLEW_OML_interlace;
+-GLEW_VAR_EXPORT GLboolean __GLEW_OML_resample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_OML_subsample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_PGI_misc_hints;
+-GLEW_VAR_EXPORT GLboolean __GLEW_PGI_vertex_hints;
+-GLEW_VAR_EXPORT GLboolean __GLEW_REND_screen_coordinates;
+-GLEW_VAR_EXPORT GLboolean __GLEW_S3_s3tc;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_color_range;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_detail_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_fog_function;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_generate_mipmap;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_multisample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_pixel_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_sharpen_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture4D;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_border_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_edge_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_filter4;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_lod;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_select;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_async;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_async_histogram;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_async_pixel;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_blend_alpha_minmax;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_clipmap;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_depth_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_flush_raster;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_fog_offset;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_fog_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_fragment_specular_lighting;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_framezoom;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_interlace;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_ir_instrument1;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_list_priority;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_pixel_texture;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_pixel_texture_bits;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_reference_plane;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_resample;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_shadow;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_shadow_ambient;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_sprite;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_tag_sample_buffer;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_add_env;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_coordinate_clamp;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_lod_bias;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_multi_buffer;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_range;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_scale_bias;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_vertex_preclip;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_vertex_preclip_hint;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_ycrcb;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGI_color_matrix;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGI_color_table;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SGI_texture_color_table;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUNX_constant_data;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_convolution_border_modes;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_global_alpha;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_mesh_array;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_read_video_pixels;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_slice_accum;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_triangle_list;
+-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_vertex;
+-GLEW_VAR_EXPORT GLboolean __GLEW_WIN_phong_shading;
+-GLEW_VAR_EXPORT GLboolean __GLEW_WIN_specular_fog;
+-GLEW_VAR_EXPORT GLboolean __GLEW_WIN_swap_hint;
+-
+-#ifdef GLEW_MX
+-}; /* GLEWContextStruct */
+-#endif /* GLEW_MX */
+-
+-/* ------------------------------------------------------------------------- */
+-
+-/* error codes */
+-#define GLEW_OK 0
+-#define GLEW_NO_ERROR 0
+-#define GLEW_ERROR_NO_GL_VERSION 1  /* missing GL version */
+-#define GLEW_ERROR_GL_VERSION_10_ONLY 2  /* GL 1.1 and up are not supported */
+-#define GLEW_ERROR_GLX_VERSION_11_ONLY 3  /* GLX 1.2 and up are not supported */
+-
+-/* string codes */
+-#define GLEW_VERSION 1
+-#define GLEW_VERSION_MAJOR 2
+-#define GLEW_VERSION_MINOR 3
+-#define GLEW_VERSION_MICRO 4
+-
+-/* API */
+-#ifdef GLEW_MX
+-
+-typedef struct GLEWContextStruct GLEWContext;
+-GLEWAPI GLenum glewContextInit (GLEWContext* ctx);
+-GLEWAPI GLboolean glewContextIsSupported (GLEWContext* ctx, const char* name);
+-
+-#define glewInit() glewContextInit(glewGetContext())
+-#define glewIsSupported(x) glewContextIsSupported(glewGetContext(), x)
+-#define glewIsExtensionSupported(x) glewIsSupported(x)
+-
+-#define GLEW_GET_VAR(x) (*(const GLboolean*)&(glewGetContext()->x))
+-#ifdef _WIN32
+-#  define GLEW_GET_FUN(x) glewGetContext()->x
+-#else
+-#  define GLEW_GET_FUN(x) x
+-#endif
+-
+-#else /* GLEW_MX */
+-
+-GLEWAPI GLenum glewInit ();
+-GLEWAPI GLboolean glewIsSupported (const char* name);
+-#define glewIsExtensionSupported(x) glewIsSupported(x)
+-
+-#define GLEW_GET_VAR(x) (*(const GLboolean*)&x)
+-#define GLEW_GET_FUN(x) x
+-
+-#endif /* GLEW_MX */
+-
+-GLEWAPI GLboolean glewExperimental;
+-GLEWAPI GLboolean glewGetExtension (const char* name);
+-GLEWAPI const GLubyte* glewGetErrorString (GLenum error);
+-GLEWAPI const GLubyte* glewGetString (GLenum name);
+-
+-#ifdef __cplusplus
+-}
+-#endif
+-
+-#ifdef GLEW_APIENTRY_DEFINED
+-#undef GLEW_APIENTRY_DEFINED
+-#undef APIENTRY
+-#undef GLAPIENTRY
+-#endif
+-
+-#ifdef GLEW_CALLBACK_DEFINED
+-#undef GLEW_CALLBACK_DEFINED
+-#undef CALLBACK
+-#endif
+-
+-#ifdef GLEW_WINGDIAPI_DEFINED
+-#undef GLEW_WINGDIAPI_DEFINED
+-#undef WINGDIAPI
+-#endif
+-
+-#undef GLAPI
+-/* #undef GLEWAPI */
+-
+-#endif /* __glew_h__ */
+diff --git a/nvcommon/GLEW/include/GL/glxew.h b/nvcommon/GLEW/include/GL/glxew.h
+deleted file mode 100644
+index 6f00e3f..0000000
+--- a/nvcommon/GLEW/include/GL/glxew.h
++++ /dev/null
+@@ -1,1264 +0,0 @@
+-/*
+-** The OpenGL Extension Wrangler Library
+-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
+-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
+-** Copyright (C) 2002, Lev Povalahev
+-** All rights reserved.
+-** 
+-** Redistribution and use in source and binary forms, with or without 
+-** modification, are permitted provided that the following conditions are met:
+-** 
+-** * Redistributions of source code must retain the above copyright notice, 
+-**   this list of conditions and the following disclaimer.
+-** * Redistributions in binary form must reproduce the above copyright notice, 
+-**   this list of conditions and the following disclaimer in the documentation 
+-**   and/or other materials provided with the distribution.
+-** * The name of the author may be used to endorse or promote products 
+-**   derived from this software without specific prior written permission.
+-**
+-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
+-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
+-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+-** THE POSSIBILITY OF SUCH DAMAGE.
+-*/
+-
+-/*
+- * Mesa 3-D graphics library
+- * Version:  7.0
+- *
+- * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
+- *
+- * Permission is hereby granted, free of charge, to any person obtaining a
+- * copy of this software and associated documentation files (the "Software"),
+- * to deal in the Software without restriction, including without limitation
+- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+- * and/or sell copies of the Software, and to permit persons to whom the
+- * Software is furnished to do so, subject to the following conditions:
+- *
+- * The above copyright notice and this permission notice shall be included
+- * in all copies or substantial portions of the Software.
+- *
+- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+- * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+- * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
+- * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+- */
+-
+-/*
+-** Copyright (c) 2007 The Khronos Group Inc.
+-** 
+-** Permission is hereby granted, free of charge, to any person obtaining a
+-** copy of this software and/or associated documentation files (the
+-** "Materials"), to deal in the Materials without restriction, including
+-** without limitation the rights to use, copy, modify, merge, publish,
+-** distribute, sublicense, and/or sell copies of the Materials, and to
+-** permit persons to whom the Materials are furnished to do so, subject to
+-** the following conditions:
+-** 
+-** The above copyright notice and this permission notice shall be included
+-** in all copies or substantial portions of the Materials.
+-** 
+-** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+-** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+-** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+-** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+-** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+-** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+-** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
+-*/
+-
+-#ifndef __glxew_h__
+-#define __glxew_h__
+-#define __GLXEW_H__
+-
+-#ifdef __glxext_h_
+-#error glxext.h included before glxew.h
+-#endif
+-#ifdef GLX_H
+-#error glx.h included before glxew.h
+-#endif
+-
+-#define __glxext_h_
+-#define __GLX_glx_h__
+-#define GLX_H
+-
+-#include <X11/Xlib.h>
+-#include <X11/Xutil.h>
+-#include <X11/Xmd.h>
+-#include <GL/glew.h>
+-
+-#ifdef __cplusplus
+-extern "C" {
+-#endif
+-
+-/* ---------------------------- GLX_VERSION_1_0 --------------------------- */
+-
+-#ifndef GLX_VERSION_1_0
+-#define GLX_VERSION_1_0 1
+-
+-#define GLX_USE_GL 1
+-#define GLX_BUFFER_SIZE 2
+-#define GLX_LEVEL 3
+-#define GLX_RGBA 4
+-#define GLX_DOUBLEBUFFER 5
+-#define GLX_STEREO 6
+-#define GLX_AUX_BUFFERS 7
+-#define GLX_RED_SIZE 8
+-#define GLX_GREEN_SIZE 9
+-#define GLX_BLUE_SIZE 10
+-#define GLX_ALPHA_SIZE 11
+-#define GLX_DEPTH_SIZE 12
+-#define GLX_STENCIL_SIZE 13
+-#define GLX_ACCUM_RED_SIZE 14
+-#define GLX_ACCUM_GREEN_SIZE 15
+-#define GLX_ACCUM_BLUE_SIZE 16
+-#define GLX_ACCUM_ALPHA_SIZE 17
+-#define GLX_BAD_SCREEN 1
+-#define GLX_BAD_ATTRIBUTE 2
+-#define GLX_NO_EXTENSION 3
+-#define GLX_BAD_VISUAL 4
+-#define GLX_BAD_CONTEXT 5
+-#define GLX_BAD_VALUE 6
+-#define GLX_BAD_ENUM 7
+-
+-typedef XID GLXDrawable;
+-typedef XID GLXPixmap;
+-#ifdef __sun
+-typedef struct __glXContextRec *GLXContext;
+-#else
+-typedef struct __GLXcontextRec *GLXContext;
+-#endif
+-
+-extern Bool glXQueryExtension (Display *dpy, int *errorBase, int *eventBase);
+-extern Bool glXQueryVersion (Display *dpy, int *major, int *minor);
+-extern int glXGetConfig (Display *dpy, XVisualInfo *vis, int attrib, int *value);
+-extern XVisualInfo* glXChooseVisual (Display *dpy, int screen, int *attribList);
+-extern GLXPixmap glXCreateGLXPixmap (Display *dpy, XVisualInfo *vis, Pixmap pixmap);
+-extern void glXDestroyGLXPixmap (Display *dpy, GLXPixmap pix);
+-extern GLXContext glXCreateContext (Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct);
+-extern void glXDestroyContext (Display *dpy, GLXContext ctx);
+-extern Bool glXIsDirect (Display *dpy, GLXContext ctx);
+-extern void glXCopyContext (Display *dpy, GLXContext src, GLXContext dst, GLulong mask);
+-extern Bool glXMakeCurrent (Display *dpy, GLXDrawable drawable, GLXContext ctx);
+-extern GLXContext glXGetCurrentContext (void);
+-extern GLXDrawable glXGetCurrentDrawable (void);
+-extern void glXWaitGL (void);
+-extern void glXWaitX (void);
+-extern void glXSwapBuffers (Display *dpy, GLXDrawable drawable);
+-extern void glXUseXFont (Font font, int first, int count, int listBase);
+-
+-#define GLXEW_VERSION_1_0 GLXEW_GET_VAR(__GLXEW_VERSION_1_0)
+-
+-#endif /* GLX_VERSION_1_0 */
+-
+-/* ---------------------------- GLX_VERSION_1_1 --------------------------- */
+-
+-#ifndef GLX_VERSION_1_1
+-#define GLX_VERSION_1_1
+-
+-#define GLX_VENDOR 0x1
+-#define GLX_VERSION 0x2
+-#define GLX_EXTENSIONS 0x3
+-
+-extern const char* glXQueryExtensionsString (Display *dpy, int screen);
+-extern const char* glXGetClientString (Display *dpy, int name);
+-extern const char* glXQueryServerString (Display *dpy, int screen, int name);
+-
+-#define GLXEW_VERSION_1_1 GLXEW_GET_VAR(__GLXEW_VERSION_1_1)
+-
+-#endif /* GLX_VERSION_1_1 */
+-
+-/* ---------------------------- GLX_VERSION_1_2 ---------------------------- */
+-
+-#ifndef GLX_VERSION_1_2
+-#define GLX_VERSION_1_2 1
+-
+-typedef Display* ( * PFNGLXGETCURRENTDISPLAYPROC) (void);
+-
+-#define glXGetCurrentDisplay GLXEW_GET_FUN(__glewXGetCurrentDisplay)
+-
+-#define GLXEW_VERSION_1_2 GLXEW_GET_VAR(__GLXEW_VERSION_1_2)
+-
+-#endif /* GLX_VERSION_1_2 */
+-
+-/* ---------------------------- GLX_VERSION_1_3 ---------------------------- */
+-
+-#ifndef GLX_VERSION_1_3
+-#define GLX_VERSION_1_3 1
+-
+-#define GLX_RGBA_BIT 0x00000001
+-#define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
+-#define GLX_WINDOW_BIT 0x00000001
+-#define GLX_COLOR_INDEX_BIT 0x00000002
+-#define GLX_PIXMAP_BIT 0x00000002
+-#define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
+-#define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
+-#define GLX_PBUFFER_BIT 0x00000004
+-#define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
+-#define GLX_AUX_BUFFERS_BIT 0x00000010
+-#define GLX_CONFIG_CAVEAT 0x20
+-#define GLX_DEPTH_BUFFER_BIT 0x00000020
+-#define GLX_X_VISUAL_TYPE 0x22
+-#define GLX_TRANSPARENT_TYPE 0x23
+-#define GLX_TRANSPARENT_INDEX_VALUE 0x24
+-#define GLX_TRANSPARENT_RED_VALUE 0x25
+-#define GLX_TRANSPARENT_GREEN_VALUE 0x26
+-#define GLX_TRANSPARENT_BLUE_VALUE 0x27
+-#define GLX_TRANSPARENT_ALPHA_VALUE 0x28
+-#define GLX_STENCIL_BUFFER_BIT 0x00000040
+-#define GLX_ACCUM_BUFFER_BIT 0x00000080
+-#define GLX_NONE 0x8000
+-#define GLX_SLOW_CONFIG 0x8001
+-#define GLX_TRUE_COLOR 0x8002
+-#define GLX_DIRECT_COLOR 0x8003
+-#define GLX_PSEUDO_COLOR 0x8004
+-#define GLX_STATIC_COLOR 0x8005
+-#define GLX_GRAY_SCALE 0x8006
+-#define GLX_STATIC_GRAY 0x8007
+-#define GLX_TRANSPARENT_RGB 0x8008
+-#define GLX_TRANSPARENT_INDEX 0x8009
+-#define GLX_VISUAL_ID 0x800B
+-#define GLX_SCREEN 0x800C
+-#define GLX_NON_CONFORMANT_CONFIG 0x800D
+-#define GLX_DRAWABLE_TYPE 0x8010
+-#define GLX_RENDER_TYPE 0x8011
+-#define GLX_X_RENDERABLE 0x8012
+-#define GLX_FBCONFIG_ID 0x8013
+-#define GLX_RGBA_TYPE 0x8014
+-#define GLX_COLOR_INDEX_TYPE 0x8015
+-#define GLX_MAX_PBUFFER_WIDTH 0x8016
+-#define GLX_MAX_PBUFFER_HEIGHT 0x8017
+-#define GLX_MAX_PBUFFER_PIXELS 0x8018
+-#define GLX_PRESERVED_CONTENTS 0x801B
+-#define GLX_LARGEST_PBUFFER 0x801C
+-#define GLX_WIDTH 0x801D
+-#define GLX_HEIGHT 0x801E
+-#define GLX_EVENT_MASK 0x801F
+-#define GLX_DAMAGED 0x8020
+-#define GLX_SAVED 0x8021
+-#define GLX_WINDOW 0x8022
+-#define GLX_PBUFFER 0x8023
+-#define GLX_PBUFFER_HEIGHT 0x8040
+-#define GLX_PBUFFER_WIDTH 0x8041
+-#define GLX_PBUFFER_CLOBBER_MASK 0x08000000
+-#define GLX_DONT_CARE 0xFFFFFFFF
+-
+-typedef XID GLXFBConfigID;
+-typedef XID GLXWindow;
+-typedef XID GLXPbuffer;
+-typedef struct __GLXFBConfigRec *GLXFBConfig;
+-
+-typedef struct {
+-  int event_type; 
+-  int draw_type; 
+-  unsigned long serial; 
+-  Bool send_event; 
+-  Display *display; 
+-  GLXDrawable drawable; 
+-  unsigned int buffer_mask; 
+-  unsigned int aux_buffer; 
+-  int x, y; 
+-  int width, height; 
+-  int count; 
+-} GLXPbufferClobberEvent;
+-typedef union __GLXEvent {
+-  GLXPbufferClobberEvent glxpbufferclobber; 
+-  long pad[24]; 
+-} GLXEvent;
+-
+-typedef GLXFBConfig* ( * PFNGLXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
+-typedef GLXContext ( * PFNGLXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
+-typedef GLXPbuffer ( * PFNGLXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
+-typedef GLXPixmap ( * PFNGLXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
+-typedef GLXWindow ( * PFNGLXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
+-typedef void ( * PFNGLXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
+-typedef void ( * PFNGLXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
+-typedef void ( * PFNGLXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
+-typedef GLXDrawable ( * PFNGLXGETCURRENTREADDRAWABLEPROC) (void);
+-typedef int ( * PFNGLXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
+-typedef GLXFBConfig* ( * PFNGLXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
+-typedef void ( * PFNGLXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
+-typedef XVisualInfo* ( * PFNGLXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
+-typedef Bool ( * PFNGLXMAKECONTEXTCURRENTPROC) (Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
+-typedef int ( * PFNGLXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
+-typedef void ( * PFNGLXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
+-typedef void ( * PFNGLXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
+-
+-#define glXChooseFBConfig GLXEW_GET_FUN(__glewXChooseFBConfig)
+-#define glXCreateNewContext GLXEW_GET_FUN(__glewXCreateNewContext)
+-#define glXCreatePbuffer GLXEW_GET_FUN(__glewXCreatePbuffer)
+-#define glXCreatePixmap GLXEW_GET_FUN(__glewXCreatePixmap)
+-#define glXCreateWindow GLXEW_GET_FUN(__glewXCreateWindow)
+-#define glXDestroyPbuffer GLXEW_GET_FUN(__glewXDestroyPbuffer)
+-#define glXDestroyPixmap GLXEW_GET_FUN(__glewXDestroyPixmap)
+-#define glXDestroyWindow GLXEW_GET_FUN(__glewXDestroyWindow)
+-#define glXGetCurrentReadDrawable GLXEW_GET_FUN(__glewXGetCurrentReadDrawable)
+-#define glXGetFBConfigAttrib GLXEW_GET_FUN(__glewXGetFBConfigAttrib)
+-#define glXGetFBConfigs GLXEW_GET_FUN(__glewXGetFBConfigs)
+-#define glXGetSelectedEvent GLXEW_GET_FUN(__glewXGetSelectedEvent)
+-#define glXGetVisualFromFBConfig GLXEW_GET_FUN(__glewXGetVisualFromFBConfig)
+-#define glXMakeContextCurrent GLXEW_GET_FUN(__glewXMakeContextCurrent)
+-#define glXQueryContext GLXEW_GET_FUN(__glewXQueryContext)
+-#define glXQueryDrawable GLXEW_GET_FUN(__glewXQueryDrawable)
+-#define glXSelectEvent GLXEW_GET_FUN(__glewXSelectEvent)
+-
+-#define GLXEW_VERSION_1_3 GLXEW_GET_VAR(__GLXEW_VERSION_1_3)
+-
+-#endif /* GLX_VERSION_1_3 */
+-
+-/* ---------------------------- GLX_VERSION_1_4 ---------------------------- */
+-
+-#ifndef GLX_VERSION_1_4
+-#define GLX_VERSION_1_4 1
+-
+-#define GLX_SAMPLE_BUFFERS 100000
+-#define GLX_SAMPLES 100001
+-
+-extern void ( * glXGetProcAddress (const GLubyte *procName)) (void);
+-
+-#define GLXEW_VERSION_1_4 GLXEW_GET_VAR(__GLXEW_VERSION_1_4)
+-
+-#endif /* GLX_VERSION_1_4 */
+-
+-/* -------------------------- GLX_3DFX_multisample ------------------------- */
+-
+-#ifndef GLX_3DFX_multisample
+-#define GLX_3DFX_multisample 1
+-
+-#define GLX_SAMPLE_BUFFERS_3DFX 0x8050
+-#define GLX_SAMPLES_3DFX 0x8051
+-
+-#define GLXEW_3DFX_multisample GLXEW_GET_VAR(__GLXEW_3DFX_multisample)
+-
+-#endif /* GLX_3DFX_multisample */
+-
+-/* ------------------------- GLX_ARB_fbconfig_float ------------------------ */
+-
+-#ifndef GLX_ARB_fbconfig_float
+-#define GLX_ARB_fbconfig_float 1
+-
+-#define GLX_RGBA_FLOAT_BIT 0x00000004
+-#define GLX_RGBA_FLOAT_TYPE 0x20B9
+-
+-#define GLXEW_ARB_fbconfig_float GLXEW_GET_VAR(__GLXEW_ARB_fbconfig_float)
+-
+-#endif /* GLX_ARB_fbconfig_float */
+-
+-/* ------------------------ GLX_ARB_get_proc_address ----------------------- */
+-
+-#ifndef GLX_ARB_get_proc_address
+-#define GLX_ARB_get_proc_address 1
+-
+-extern void ( * glXGetProcAddressARB (const GLubyte *procName)) (void);
+-
+-#define GLXEW_ARB_get_proc_address GLXEW_GET_VAR(__GLXEW_ARB_get_proc_address)
+-
+-#endif /* GLX_ARB_get_proc_address */
+-
+-/* -------------------------- GLX_ARB_multisample -------------------------- */
+-
+-#ifndef GLX_ARB_multisample
+-#define GLX_ARB_multisample 1
+-
+-#define GLX_SAMPLE_BUFFERS_ARB 100000
+-#define GLX_SAMPLES_ARB 100001
+-
+-#define GLXEW_ARB_multisample GLXEW_GET_VAR(__GLXEW_ARB_multisample)
+-
+-#endif /* GLX_ARB_multisample */
+-
+-/* ----------------------- GLX_ATI_pixel_format_float ---------------------- */
+-
+-#ifndef GLX_ATI_pixel_format_float
+-#define GLX_ATI_pixel_format_float 1
+-
+-#define GLX_RGBA_FLOAT_ATI_BIT 0x00000100
+-
+-#define GLXEW_ATI_pixel_format_float GLXEW_GET_VAR(__GLXEW_ATI_pixel_format_float)
+-
+-#endif /* GLX_ATI_pixel_format_float */
+-
+-/* ------------------------- GLX_ATI_render_texture ------------------------ */
+-
+-#ifndef GLX_ATI_render_texture
+-#define GLX_ATI_render_texture 1
+-
+-#define GLX_BIND_TO_TEXTURE_RGB_ATI 0x9800
+-#define GLX_BIND_TO_TEXTURE_RGBA_ATI 0x9801
+-#define GLX_TEXTURE_FORMAT_ATI 0x9802
+-#define GLX_TEXTURE_TARGET_ATI 0x9803
+-#define GLX_MIPMAP_TEXTURE_ATI 0x9804
+-#define GLX_TEXTURE_RGB_ATI 0x9805
+-#define GLX_TEXTURE_RGBA_ATI 0x9806
+-#define GLX_NO_TEXTURE_ATI 0x9807
+-#define GLX_TEXTURE_CUBE_MAP_ATI 0x9808
+-#define GLX_TEXTURE_1D_ATI 0x9809
+-#define GLX_TEXTURE_2D_ATI 0x980A
+-#define GLX_MIPMAP_LEVEL_ATI 0x980B
+-#define GLX_CUBE_MAP_FACE_ATI 0x980C
+-#define GLX_TEXTURE_CUBE_MAP_POSITIVE_X_ATI 0x980D
+-#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_X_ATI 0x980E
+-#define GLX_TEXTURE_CUBE_MAP_POSITIVE_Y_ATI 0x980F
+-#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_Y_ATI 0x9810
+-#define GLX_TEXTURE_CUBE_MAP_POSITIVE_Z_ATI 0x9811
+-#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_Z_ATI 0x9812
+-#define GLX_FRONT_LEFT_ATI 0x9813
+-#define GLX_FRONT_RIGHT_ATI 0x9814
+-#define GLX_BACK_LEFT_ATI 0x9815
+-#define GLX_BACK_RIGHT_ATI 0x9816
+-#define GLX_AUX0_ATI 0x9817
+-#define GLX_AUX1_ATI 0x9818
+-#define GLX_AUX2_ATI 0x9819
+-#define GLX_AUX3_ATI 0x981A
+-#define GLX_AUX4_ATI 0x981B
+-#define GLX_AUX5_ATI 0x981C
+-#define GLX_AUX6_ATI 0x981D
+-#define GLX_AUX7_ATI 0x981E
+-#define GLX_AUX8_ATI 0x981F
+-#define GLX_AUX9_ATI 0x9820
+-#define GLX_BIND_TO_TEXTURE_LUMINANCE_ATI 0x9821
+-#define GLX_BIND_TO_TEXTURE_INTENSITY_ATI 0x9822
+-
+-typedef void ( * PFNGLXBINDTEXIMAGEATIPROC) (Display *dpy, GLXPbuffer pbuf, int buffer);
+-typedef void ( * PFNGLXDRAWABLEATTRIBATIPROC) (Display *dpy, GLXDrawable draw, const int *attrib_list);
+-typedef void ( * PFNGLXRELEASETEXIMAGEATIPROC) (Display *dpy, GLXPbuffer pbuf, int buffer);
+-
+-#define glXBindTexImageATI GLXEW_GET_FUN(__glewXBindTexImageATI)
+-#define glXDrawableAttribATI GLXEW_GET_FUN(__glewXDrawableAttribATI)
+-#define glXReleaseTexImageATI GLXEW_GET_FUN(__glewXReleaseTexImageATI)
+-
+-#define GLXEW_ATI_render_texture GLXEW_GET_VAR(__GLXEW_ATI_render_texture)
+-
+-#endif /* GLX_ATI_render_texture */
+-
+-/* --------------------- GLX_EXT_fbconfig_packed_float --------------------- */
+-
+-#ifndef GLX_EXT_fbconfig_packed_float
+-#define GLX_EXT_fbconfig_packed_float 1
+-
+-#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT 0x00000008
+-#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT 0x20B1
+-
+-#define GLXEW_EXT_fbconfig_packed_float GLXEW_GET_VAR(__GLXEW_EXT_fbconfig_packed_float)
+-
+-#endif /* GLX_EXT_fbconfig_packed_float */
+-
+-/* ------------------------ GLX_EXT_framebuffer_sRGB ----------------------- */
+-
+-#ifndef GLX_EXT_framebuffer_sRGB
+-#define GLX_EXT_framebuffer_sRGB 1
+-
+-#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20B2
+-
+-#define GLXEW_EXT_framebuffer_sRGB GLXEW_GET_VAR(__GLXEW_EXT_framebuffer_sRGB)
+-
+-#endif /* GLX_EXT_framebuffer_sRGB */
+-
+-/* ------------------------- GLX_EXT_import_context ------------------------ */
+-
+-#ifndef GLX_EXT_import_context
+-#define GLX_EXT_import_context 1
+-
+-#define GLX_SHARE_CONTEXT_EXT 0x800A
+-#define GLX_VISUAL_ID_EXT 0x800B
+-#define GLX_SCREEN_EXT 0x800C
+-
+-typedef XID GLXContextID;
+-
+-typedef void ( * PFNGLXFREECONTEXTEXTPROC) (Display* dpy, GLXContext context);
+-typedef GLXContextID ( * PFNGLXGETCONTEXTIDEXTPROC) (const GLXContext context);
+-typedef GLXContext ( * PFNGLXIMPORTCONTEXTEXTPROC) (Display* dpy, GLXContextID contextID);
+-typedef int ( * PFNGLXQUERYCONTEXTINFOEXTPROC) (Display* dpy, GLXContext context, int attribute,int *value);
+-
+-#define glXFreeContextEXT GLXEW_GET_FUN(__glewXFreeContextEXT)
+-#define glXGetContextIDEXT GLXEW_GET_FUN(__glewXGetContextIDEXT)
+-#define glXImportContextEXT GLXEW_GET_FUN(__glewXImportContextEXT)
+-#define glXQueryContextInfoEXT GLXEW_GET_FUN(__glewXQueryContextInfoEXT)
+-
+-#define GLXEW_EXT_import_context GLXEW_GET_VAR(__GLXEW_EXT_import_context)
+-
+-#endif /* GLX_EXT_import_context */
+-
+-/* -------------------------- GLX_EXT_scene_marker ------------------------- */
+-
+-#ifndef GLX_EXT_scene_marker
+-#define GLX_EXT_scene_marker 1
+-
+-#define GLXEW_EXT_scene_marker GLXEW_GET_VAR(__GLXEW_EXT_scene_marker)
+-
+-#endif /* GLX_EXT_scene_marker */
+-
+-/* ---------------------- GLX_EXT_texture_from_pixmap ---------------------- */
+-
+-#ifndef GLX_EXT_texture_from_pixmap
+-#define GLX_EXT_texture_from_pixmap 1
+-
+-#define GLX_TEXTURE_1D_BIT_EXT 0x00000001
+-#define GLX_TEXTURE_2D_BIT_EXT 0x00000002
+-#define GLX_TEXTURE_RECTANGLE_BIT_EXT 0x00000004
+-#define GLX_BIND_TO_TEXTURE_RGB_EXT 0x20D0
+-#define GLX_BIND_TO_TEXTURE_RGBA_EXT 0x20D1
+-#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT 0x20D2
+-#define GLX_BIND_TO_TEXTURE_TARGETS_EXT 0x20D3
+-#define GLX_Y_INVERTED_EXT 0x20D4
+-#define GLX_TEXTURE_FORMAT_EXT 0x20D5
+-#define GLX_TEXTURE_TARGET_EXT 0x20D6
+-#define GLX_MIPMAP_TEXTURE_EXT 0x20D7
+-#define GLX_TEXTURE_FORMAT_NONE_EXT 0x20D8
+-#define GLX_TEXTURE_FORMAT_RGB_EXT 0x20D9
+-#define GLX_TEXTURE_FORMAT_RGBA_EXT 0x20DA
+-#define GLX_TEXTURE_1D_EXT 0x20DB
+-#define GLX_TEXTURE_2D_EXT 0x20DC
+-#define GLX_TEXTURE_RECTANGLE_EXT 0x20DD
+-#define GLX_FRONT_LEFT_EXT 0x20DE
+-#define GLX_FRONT_RIGHT_EXT 0x20DF
+-#define GLX_BACK_LEFT_EXT 0x20E0
+-#define GLX_BACK_RIGHT_EXT 0x20E1
+-#define GLX_AUX0_EXT 0x20E2
+-#define GLX_AUX1_EXT 0x20E3
+-#define GLX_AUX2_EXT 0x20E4
+-#define GLX_AUX3_EXT 0x20E5
+-#define GLX_AUX4_EXT 0x20E6
+-#define GLX_AUX5_EXT 0x20E7
+-#define GLX_AUX6_EXT 0x20E8
+-#define GLX_AUX7_EXT 0x20E9
+-#define GLX_AUX8_EXT 0x20EA
+-#define GLX_AUX9_EXT 0x20EB
+-
+-typedef void ( * PFNGLXBINDTEXIMAGEEXTPROC) (Display* display, GLXDrawable drawable, int buffer, const int *attrib_list);
+-typedef void ( * PFNGLXRELEASETEXIMAGEEXTPROC) (Display* display, GLXDrawable drawable, int buffer);
+-
+-#define glXBindTexImageEXT GLXEW_GET_FUN(__glewXBindTexImageEXT)
+-#define glXReleaseTexImageEXT GLXEW_GET_FUN(__glewXReleaseTexImageEXT)
+-
+-#define GLXEW_EXT_texture_from_pixmap GLXEW_GET_VAR(__GLXEW_EXT_texture_from_pixmap)
+-
+-#endif /* GLX_EXT_texture_from_pixmap */
+-
+-/* -------------------------- GLX_EXT_visual_info -------------------------- */
+-
+-#ifndef GLX_EXT_visual_info
+-#define GLX_EXT_visual_info 1
+-
+-#define GLX_X_VISUAL_TYPE_EXT 0x22
+-#define GLX_TRANSPARENT_TYPE_EXT 0x23
+-#define GLX_TRANSPARENT_INDEX_VALUE_EXT 0x24
+-#define GLX_TRANSPARENT_RED_VALUE_EXT 0x25
+-#define GLX_TRANSPARENT_GREEN_VALUE_EXT 0x26
+-#define GLX_TRANSPARENT_BLUE_VALUE_EXT 0x27
+-#define GLX_TRANSPARENT_ALPHA_VALUE_EXT 0x28
+-#define GLX_NONE_EXT 0x8000
+-#define GLX_TRUE_COLOR_EXT 0x8002
+-#define GLX_DIRECT_COLOR_EXT 0x8003
+-#define GLX_PSEUDO_COLOR_EXT 0x8004
+-#define GLX_STATIC_COLOR_EXT 0x8005
+-#define GLX_GRAY_SCALE_EXT 0x8006
+-#define GLX_STATIC_GRAY_EXT 0x8007
+-#define GLX_TRANSPARENT_RGB_EXT 0x8008
+-#define GLX_TRANSPARENT_INDEX_EXT 0x8009
+-
+-#define GLXEW_EXT_visual_info GLXEW_GET_VAR(__GLXEW_EXT_visual_info)
+-
+-#endif /* GLX_EXT_visual_info */
+-
+-/* ------------------------- GLX_EXT_visual_rating ------------------------- */
+-
+-#ifndef GLX_EXT_visual_rating
+-#define GLX_EXT_visual_rating 1
+-
+-#define GLX_VISUAL_CAVEAT_EXT 0x20
+-#define GLX_SLOW_VISUAL_EXT 0x8001
+-#define GLX_NON_CONFORMANT_VISUAL_EXT 0x800D
+-
+-#define GLXEW_EXT_visual_rating GLXEW_GET_VAR(__GLXEW_EXT_visual_rating)
+-
+-#endif /* GLX_EXT_visual_rating */
+-
+-/* -------------------------- GLX_MESA_agp_offset -------------------------- */
+-
+-#ifndef GLX_MESA_agp_offset
+-#define GLX_MESA_agp_offset 1
+-
+-typedef unsigned int ( * PFNGLXGETAGPOFFSETMESAPROC) (const void* pointer);
+-
+-#define glXGetAGPOffsetMESA GLXEW_GET_FUN(__glewXGetAGPOffsetMESA)
+-
+-#define GLXEW_MESA_agp_offset GLXEW_GET_VAR(__GLXEW_MESA_agp_offset)
+-
+-#endif /* GLX_MESA_agp_offset */
+-
+-/* ------------------------ GLX_MESA_copy_sub_buffer ----------------------- */
+-
+-#ifndef GLX_MESA_copy_sub_buffer
+-#define GLX_MESA_copy_sub_buffer 1
+-
+-typedef void ( * PFNGLXCOPYSUBBUFFERMESAPROC) (Display* dpy, GLXDrawable drawable, int x, int y, int width, int height);
+-
+-#define glXCopySubBufferMESA GLXEW_GET_FUN(__glewXCopySubBufferMESA)
+-
+-#define GLXEW_MESA_copy_sub_buffer GLXEW_GET_VAR(__GLXEW_MESA_copy_sub_buffer)
+-
+-#endif /* GLX_MESA_copy_sub_buffer */
+-
+-/* ------------------------ GLX_MESA_pixmap_colormap ----------------------- */
+-
+-#ifndef GLX_MESA_pixmap_colormap
+-#define GLX_MESA_pixmap_colormap 1
+-
+-typedef GLXPixmap ( * PFNGLXCREATEGLXPIXMAPMESAPROC) (Display* dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
+-
+-#define glXCreateGLXPixmapMESA GLXEW_GET_FUN(__glewXCreateGLXPixmapMESA)
+-
+-#define GLXEW_MESA_pixmap_colormap GLXEW_GET_VAR(__GLXEW_MESA_pixmap_colormap)
+-
+-#endif /* GLX_MESA_pixmap_colormap */
+-
+-/* ------------------------ GLX_MESA_release_buffers ----------------------- */
+-
+-#ifndef GLX_MESA_release_buffers
+-#define GLX_MESA_release_buffers 1
+-
+-typedef Bool ( * PFNGLXRELEASEBUFFERSMESAPROC) (Display* dpy, GLXDrawable d);
+-
+-#define glXReleaseBuffersMESA GLXEW_GET_FUN(__glewXReleaseBuffersMESA)
+-
+-#define GLXEW_MESA_release_buffers GLXEW_GET_VAR(__GLXEW_MESA_release_buffers)
+-
+-#endif /* GLX_MESA_release_buffers */
+-
+-/* ------------------------- GLX_MESA_set_3dfx_mode ------------------------ */
+-
+-#ifndef GLX_MESA_set_3dfx_mode
+-#define GLX_MESA_set_3dfx_mode 1
+-
+-#define GLX_3DFX_WINDOW_MODE_MESA 0x1
+-#define GLX_3DFX_FULLSCREEN_MODE_MESA 0x2
+-
+-typedef GLboolean ( * PFNGLXSET3DFXMODEMESAPROC) (GLint mode);
+-
+-#define glXSet3DfxModeMESA GLXEW_GET_FUN(__glewXSet3DfxModeMESA)
+-
+-#define GLXEW_MESA_set_3dfx_mode GLXEW_GET_VAR(__GLXEW_MESA_set_3dfx_mode)
+-
+-#endif /* GLX_MESA_set_3dfx_mode */
+-
+-/* -------------------------- GLX_NV_float_buffer -------------------------- */
+-
+-#ifndef GLX_NV_float_buffer
+-#define GLX_NV_float_buffer 1
+-
+-#define GLX_FLOAT_COMPONENTS_NV 0x20B0
+-
+-#define GLXEW_NV_float_buffer GLXEW_GET_VAR(__GLXEW_NV_float_buffer)
+-
+-#endif /* GLX_NV_float_buffer */
+-
+-/* ----------------------- GLX_NV_vertex_array_range ----------------------- */
+-
+-#ifndef GLX_NV_vertex_array_range
+-#define GLX_NV_vertex_array_range 1
+-
+-typedef void * ( * PFNGLXALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
+-typedef void ( * PFNGLXFREEMEMORYNVPROC) (void *pointer);
+-
+-#define glXAllocateMemoryNV GLXEW_GET_FUN(__glewXAllocateMemoryNV)
+-#define glXFreeMemoryNV GLXEW_GET_FUN(__glewXFreeMemoryNV)
+-
+-#define GLXEW_NV_vertex_array_range GLXEW_GET_VAR(__GLXEW_NV_vertex_array_range)
+-
+-#endif /* GLX_NV_vertex_array_range */
+-
+-/* -------------------------- GLX_OML_swap_method -------------------------- */
+-
+-#ifndef GLX_OML_swap_method
+-#define GLX_OML_swap_method 1
+-
+-#define GLX_SWAP_METHOD_OML 0x8060
+-#define GLX_SWAP_EXCHANGE_OML 0x8061
+-#define GLX_SWAP_COPY_OML 0x8062
+-#define GLX_SWAP_UNDEFINED_OML 0x8063
+-
+-#define GLXEW_OML_swap_method GLXEW_GET_VAR(__GLXEW_OML_swap_method)
+-
+-#endif /* GLX_OML_swap_method */
+-
+-/* -------------------------- GLX_OML_sync_control ------------------------- */
+-
+-#ifndef GLX_OML_sync_control
+-#define GLX_OML_sync_control 1
+-
+-typedef Bool ( * PFNGLXGETMSCRATEOMLPROC) (Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator);
+-typedef Bool ( * PFNGLXGETSYNCVALUESOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc);
+-typedef int64_t ( * PFNGLXSWAPBUFFERSMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
+-typedef Bool ( * PFNGLXWAITFORMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc);
+-typedef Bool ( * PFNGLXWAITFORSBCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc);
+-
+-#define glXGetMscRateOML GLXEW_GET_FUN(__glewXGetMscRateOML)
+-#define glXGetSyncValuesOML GLXEW_GET_FUN(__glewXGetSyncValuesOML)
+-#define glXSwapBuffersMscOML GLXEW_GET_FUN(__glewXSwapBuffersMscOML)
+-#define glXWaitForMscOML GLXEW_GET_FUN(__glewXWaitForMscOML)
+-#define glXWaitForSbcOML GLXEW_GET_FUN(__glewXWaitForSbcOML)
+-
+-#define GLXEW_OML_sync_control GLXEW_GET_VAR(__GLXEW_OML_sync_control)
+-
+-#endif /* GLX_OML_sync_control */
+-
+-/* ------------------------ GLX_SGIS_blended_overlay ----------------------- */
+-
+-#ifndef GLX_SGIS_blended_overlay
+-#define GLX_SGIS_blended_overlay 1
+-
+-#define GLX_BLENDED_RGBA_SGIS 0x8025
+-
+-#define GLXEW_SGIS_blended_overlay GLXEW_GET_VAR(__GLXEW_SGIS_blended_overlay)
+-
+-#endif /* GLX_SGIS_blended_overlay */
+-
+-/* -------------------------- GLX_SGIS_color_range ------------------------- */
+-
+-#ifndef GLX_SGIS_color_range
+-#define GLX_SGIS_color_range 1
+-
+-#define GLX_MIN_RED_SGIS 0
+-#define GLX_MAX_GREEN_SGIS 0
+-#define GLX_MIN_BLUE_SGIS 0
+-#define GLX_MAX_ALPHA_SGIS 0
+-#define GLX_MIN_GREEN_SGIS 0
+-#define GLX_MIN_ALPHA_SGIS 0
+-#define GLX_MAX_RED_SGIS 0
+-#define GLX_EXTENDED_RANGE_SGIS 0
+-#define GLX_MAX_BLUE_SGIS 0
+-
+-#define GLXEW_SGIS_color_range GLXEW_GET_VAR(__GLXEW_SGIS_color_range)
+-
+-#endif /* GLX_SGIS_color_range */
+-
+-/* -------------------------- GLX_SGIS_multisample ------------------------- */
+-
+-#ifndef GLX_SGIS_multisample
+-#define GLX_SGIS_multisample 1
+-
+-#define GLX_SAMPLE_BUFFERS_SGIS 100000
+-#define GLX_SAMPLES_SGIS 100001
+-
+-#define GLXEW_SGIS_multisample GLXEW_GET_VAR(__GLXEW_SGIS_multisample)
+-
+-#endif /* GLX_SGIS_multisample */
+-
+-/* ---------------------- GLX_SGIS_shared_multisample ---------------------- */
+-
+-#ifndef GLX_SGIS_shared_multisample
+-#define GLX_SGIS_shared_multisample 1
+-
+-#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS 0x8026
+-#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS 0x8027
+-
+-#define GLXEW_SGIS_shared_multisample GLXEW_GET_VAR(__GLXEW_SGIS_shared_multisample)
+-
+-#endif /* GLX_SGIS_shared_multisample */
+-
+-/* --------------------------- GLX_SGIX_fbconfig --------------------------- */
+-
+-#ifndef GLX_SGIX_fbconfig
+-#define GLX_SGIX_fbconfig 1
+-
+-#define GLX_WINDOW_BIT_SGIX 0x00000001
+-#define GLX_RGBA_BIT_SGIX 0x00000001
+-#define GLX_PIXMAP_BIT_SGIX 0x00000002
+-#define GLX_COLOR_INDEX_BIT_SGIX 0x00000002
+-#define GLX_SCREEN_EXT 0x800C
+-#define GLX_DRAWABLE_TYPE_SGIX 0x8010
+-#define GLX_RENDER_TYPE_SGIX 0x8011
+-#define GLX_X_RENDERABLE_SGIX 0x8012
+-#define GLX_FBCONFIG_ID_SGIX 0x8013
+-#define GLX_RGBA_TYPE_SGIX 0x8014
+-#define GLX_COLOR_INDEX_TYPE_SGIX 0x8015
+-
+-typedef XID GLXFBConfigIDSGIX;
+-typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
+-
+-typedef GLXFBConfigSGIX* ( * PFNGLXCHOOSEFBCONFIGSGIXPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
+-typedef GLXContext ( * PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) (Display* dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
+-typedef GLXPixmap ( * PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) (Display* dpy, GLXFBConfig config, Pixmap pixmap);
+-typedef int ( * PFNGLXGETFBCONFIGATTRIBSGIXPROC) (Display* dpy, GLXFBConfigSGIX config, int attribute, int *value);
+-typedef GLXFBConfigSGIX ( * PFNGLXGETFBCONFIGFROMVISUALSGIXPROC) (Display* dpy, XVisualInfo *vis);
+-typedef XVisualInfo* ( * PFNGLXGETVISUALFROMFBCONFIGSGIXPROC) (Display *dpy, GLXFBConfig config);
+-
+-#define glXChooseFBConfigSGIX GLXEW_GET_FUN(__glewXChooseFBConfigSGIX)
+-#define glXCreateContextWithConfigSGIX GLXEW_GET_FUN(__glewXCreateContextWithConfigSGIX)
+-#define glXCreateGLXPixmapWithConfigSGIX GLXEW_GET_FUN(__glewXCreateGLXPixmapWithConfigSGIX)
+-#define glXGetFBConfigAttribSGIX GLXEW_GET_FUN(__glewXGetFBConfigAttribSGIX)
+-#define glXGetFBConfigFromVisualSGIX GLXEW_GET_FUN(__glewXGetFBConfigFromVisualSGIX)
+-#define glXGetVisualFromFBConfigSGIX GLXEW_GET_FUN(__glewXGetVisualFromFBConfigSGIX)
+-
+-#define GLXEW_SGIX_fbconfig GLXEW_GET_VAR(__GLXEW_SGIX_fbconfig)
+-
+-#endif /* GLX_SGIX_fbconfig */
+-
+-/* --------------------------- GLX_SGIX_hyperpipe -------------------------- */
+-
+-#ifndef GLX_SGIX_hyperpipe
+-#define GLX_SGIX_hyperpipe 1
+-
+-#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX 0x00000001
+-#define GLX_PIPE_RECT_SGIX 0x00000001
+-#define GLX_PIPE_RECT_LIMITS_SGIX 0x00000002
+-#define GLX_HYPERPIPE_RENDER_PIPE_SGIX 0x00000002
+-#define GLX_HYPERPIPE_STEREO_SGIX 0x00000003
+-#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX 0x00000004
+-#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
+-#define GLX_BAD_HYPERPIPE_CONFIG_SGIX 91
+-#define GLX_BAD_HYPERPIPE_SGIX 92
+-#define GLX_HYPERPIPE_ID_SGIX 0x8030
+-
+-typedef struct {
+-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
+-  int  networkId; 
+-} GLXHyperpipeNetworkSGIX;
+-typedef struct {
+-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
+-  int XOrigin; 
+-  int YOrigin; 
+-  int maxHeight; 
+-  int maxWidth; 
+-} GLXPipeRectLimits;
+-typedef struct {
+-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
+-  int channel; 
+-  unsigned int participationType; 
+-  int timeSlice; 
+-} GLXHyperpipeConfigSGIX;
+-typedef struct {
+-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
+-  int srcXOrigin; 
+-  int srcYOrigin; 
+-  int srcWidth; 
+-  int srcHeight; 
+-  int destXOrigin; 
+-  int destYOrigin; 
+-  int destWidth; 
+-  int destHeight; 
+-} GLXPipeRect;
+-
+-typedef int ( * PFNGLXBINDHYPERPIPESGIXPROC) (Display *dpy, int hpId);
+-typedef int ( * PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId);
+-typedef int ( * PFNGLXHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList);
+-typedef int ( * PFNGLXHYPERPIPECONFIGSGIXPROC) (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
+-typedef int ( * PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
+-typedef int ( * PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
+-typedef GLXHyperpipeConfigSGIX * ( * PFNGLXQUERYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId, int *npipes);
+-typedef GLXHyperpipeNetworkSGIX * ( * PFNGLXQUERYHYPERPIPENETWORKSGIXPROC) (Display *dpy, int *npipes);
+-
+-#define glXBindHyperpipeSGIX GLXEW_GET_FUN(__glewXBindHyperpipeSGIX)
+-#define glXDestroyHyperpipeConfigSGIX GLXEW_GET_FUN(__glewXDestroyHyperpipeConfigSGIX)
+-#define glXHyperpipeAttribSGIX GLXEW_GET_FUN(__glewXHyperpipeAttribSGIX)
+-#define glXHyperpipeConfigSGIX GLXEW_GET_FUN(__glewXHyperpipeConfigSGIX)
+-#define glXQueryHyperpipeAttribSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeAttribSGIX)
+-#define glXQueryHyperpipeBestAttribSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeBestAttribSGIX)
+-#define glXQueryHyperpipeConfigSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeConfigSGIX)
+-#define glXQueryHyperpipeNetworkSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeNetworkSGIX)
+-
+-#define GLXEW_SGIX_hyperpipe GLXEW_GET_VAR(__GLXEW_SGIX_hyperpipe)
+-
+-#endif /* GLX_SGIX_hyperpipe */
+-
+-/* ---------------------------- GLX_SGIX_pbuffer --------------------------- */
+-
+-#ifndef GLX_SGIX_pbuffer
+-#define GLX_SGIX_pbuffer 1
+-
+-#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX 0x00000001
+-#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX 0x00000002
+-#define GLX_PBUFFER_BIT_SGIX 0x00000004
+-#define GLX_BACK_LEFT_BUFFER_BIT_SGIX 0x00000004
+-#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX 0x00000008
+-#define GLX_AUX_BUFFERS_BIT_SGIX 0x00000010
+-#define GLX_DEPTH_BUFFER_BIT_SGIX 0x00000020
+-#define GLX_STENCIL_BUFFER_BIT_SGIX 0x00000040
+-#define GLX_ACCUM_BUFFER_BIT_SGIX 0x00000080
+-#define GLX_SAMPLE_BUFFERS_BIT_SGIX 0x00000100
+-#define GLX_MAX_PBUFFER_WIDTH_SGIX 0x8016
+-#define GLX_MAX_PBUFFER_HEIGHT_SGIX 0x8017
+-#define GLX_MAX_PBUFFER_PIXELS_SGIX 0x8018
+-#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX 0x8019
+-#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX 0x801A
+-#define GLX_PRESERVED_CONTENTS_SGIX 0x801B
+-#define GLX_LARGEST_PBUFFER_SGIX 0x801C
+-#define GLX_WIDTH_SGIX 0x801D
+-#define GLX_HEIGHT_SGIX 0x801E
+-#define GLX_EVENT_MASK_SGIX 0x801F
+-#define GLX_DAMAGED_SGIX 0x8020
+-#define GLX_SAVED_SGIX 0x8021
+-#define GLX_WINDOW_SGIX 0x8022
+-#define GLX_PBUFFER_SGIX 0x8023
+-#define GLX_BUFFER_CLOBBER_MASK_SGIX 0x08000000
+-
+-typedef XID GLXPbufferSGIX;
+-typedef struct { int type; unsigned long serial; Bool send_event; Display *display; GLXDrawable drawable; int event_type; int draw_type; unsigned int mask; int x, y; int width, height; int count; } GLXBufferClobberEventSGIX;
+-
+-typedef GLXPbuffer ( * PFNGLXCREATEGLXPBUFFERSGIXPROC) (Display* dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list);
+-typedef void ( * PFNGLXDESTROYGLXPBUFFERSGIXPROC) (Display* dpy, GLXPbuffer pbuf);
+-typedef void ( * PFNGLXGETSELECTEDEVENTSGIXPROC) (Display* dpy, GLXDrawable drawable, unsigned long *mask);
+-typedef void ( * PFNGLXQUERYGLXPBUFFERSGIXPROC) (Display* dpy, GLXPbuffer pbuf, int attribute, unsigned int *value);
+-typedef void ( * PFNGLXSELECTEVENTSGIXPROC) (Display* dpy, GLXDrawable drawable, unsigned long mask);
+-
+-#define glXCreateGLXPbufferSGIX GLXEW_GET_FUN(__glewXCreateGLXPbufferSGIX)
+-#define glXDestroyGLXPbufferSGIX GLXEW_GET_FUN(__glewXDestroyGLXPbufferSGIX)
+-#define glXGetSelectedEventSGIX GLXEW_GET_FUN(__glewXGetSelectedEventSGIX)
+-#define glXQueryGLXPbufferSGIX GLXEW_GET_FUN(__glewXQueryGLXPbufferSGIX)
+-#define glXSelectEventSGIX GLXEW_GET_FUN(__glewXSelectEventSGIX)
+-
+-#define GLXEW_SGIX_pbuffer GLXEW_GET_VAR(__GLXEW_SGIX_pbuffer)
+-
+-#endif /* GLX_SGIX_pbuffer */
+-
+-/* ------------------------- GLX_SGIX_swap_barrier ------------------------- */
+-
+-#ifndef GLX_SGIX_swap_barrier
+-#define GLX_SGIX_swap_barrier 1
+-
+-typedef void ( * PFNGLXBINDSWAPBARRIERSGIXPROC) (Display *dpy, GLXDrawable drawable, int barrier);
+-typedef Bool ( * PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) (Display *dpy, int screen, int *max);
+-
+-#define glXBindSwapBarrierSGIX GLXEW_GET_FUN(__glewXBindSwapBarrierSGIX)
+-#define glXQueryMaxSwapBarriersSGIX GLXEW_GET_FUN(__glewXQueryMaxSwapBarriersSGIX)
+-
+-#define GLXEW_SGIX_swap_barrier GLXEW_GET_VAR(__GLXEW_SGIX_swap_barrier)
+-
+-#endif /* GLX_SGIX_swap_barrier */
+-
+-/* -------------------------- GLX_SGIX_swap_group -------------------------- */
+-
+-#ifndef GLX_SGIX_swap_group
+-#define GLX_SGIX_swap_group 1
+-
+-typedef void ( * PFNGLXJOINSWAPGROUPSGIXPROC) (Display *dpy, GLXDrawable drawable, GLXDrawable member);
+-
+-#define glXJoinSwapGroupSGIX GLXEW_GET_FUN(__glewXJoinSwapGroupSGIX)
+-
+-#define GLXEW_SGIX_swap_group GLXEW_GET_VAR(__GLXEW_SGIX_swap_group)
+-
+-#endif /* GLX_SGIX_swap_group */
+-
+-/* ------------------------- GLX_SGIX_video_resize ------------------------- */
+-
+-#ifndef GLX_SGIX_video_resize
+-#define GLX_SGIX_video_resize 1
+-
+-#define GLX_SYNC_FRAME_SGIX 0x00000000
+-#define GLX_SYNC_SWAP_SGIX 0x00000001
+-
+-typedef int ( * PFNGLXBINDCHANNELTOWINDOWSGIXPROC) (Display* display, int screen, int channel, Window window);
+-typedef int ( * PFNGLXCHANNELRECTSGIXPROC) (Display* display, int screen, int channel, int x, int y, int w, int h);
+-typedef int ( * PFNGLXCHANNELRECTSYNCSGIXPROC) (Display* display, int screen, int channel, GLenum synctype);
+-typedef int ( * PFNGLXQUERYCHANNELDELTASSGIXPROC) (Display* display, int screen, int channel, int *x, int *y, int *w, int *h);
+-typedef int ( * PFNGLXQUERYCHANNELRECTSGIXPROC) (Display* display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
+-
+-#define glXBindChannelToWindowSGIX GLXEW_GET_FUN(__glewXBindChannelToWindowSGIX)
+-#define glXChannelRectSGIX GLXEW_GET_FUN(__glewXChannelRectSGIX)
+-#define glXChannelRectSyncSGIX GLXEW_GET_FUN(__glewXChannelRectSyncSGIX)
+-#define glXQueryChannelDeltasSGIX GLXEW_GET_FUN(__glewXQueryChannelDeltasSGIX)
+-#define glXQueryChannelRectSGIX GLXEW_GET_FUN(__glewXQueryChannelRectSGIX)
+-
+-#define GLXEW_SGIX_video_resize GLXEW_GET_VAR(__GLXEW_SGIX_video_resize)
+-
+-#endif /* GLX_SGIX_video_resize */
+-
+-/* ---------------------- GLX_SGIX_visual_select_group --------------------- */
+-
+-#ifndef GLX_SGIX_visual_select_group
+-#define GLX_SGIX_visual_select_group 1
+-
+-#define GLX_VISUAL_SELECT_GROUP_SGIX 0x8028
+-
+-#define GLXEW_SGIX_visual_select_group GLXEW_GET_VAR(__GLXEW_SGIX_visual_select_group)
+-
+-#endif /* GLX_SGIX_visual_select_group */
+-
+-/* ---------------------------- GLX_SGI_cushion ---------------------------- */
+-
+-#ifndef GLX_SGI_cushion
+-#define GLX_SGI_cushion 1
+-
+-typedef void ( * PFNGLXCUSHIONSGIPROC) (Display* dpy, Window window, float cushion);
+-
+-#define glXCushionSGI GLXEW_GET_FUN(__glewXCushionSGI)
+-
+-#define GLXEW_SGI_cushion GLXEW_GET_VAR(__GLXEW_SGI_cushion)
+-
+-#endif /* GLX_SGI_cushion */
+-
+-/* ----------------------- GLX_SGI_make_current_read ----------------------- */
+-
+-#ifndef GLX_SGI_make_current_read
+-#define GLX_SGI_make_current_read 1
+-
+-typedef GLXDrawable ( * PFNGLXGETCURRENTREADDRAWABLESGIPROC) (void);
+-typedef Bool ( * PFNGLXMAKECURRENTREADSGIPROC) (Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
+-
+-#define glXGetCurrentReadDrawableSGI GLXEW_GET_FUN(__glewXGetCurrentReadDrawableSGI)
+-#define glXMakeCurrentReadSGI GLXEW_GET_FUN(__glewXMakeCurrentReadSGI)
+-
+-#define GLXEW_SGI_make_current_read GLXEW_GET_VAR(__GLXEW_SGI_make_current_read)
+-
+-#endif /* GLX_SGI_make_current_read */
+-
+-/* -------------------------- GLX_SGI_swap_control ------------------------- */
+-
+-#ifndef GLX_SGI_swap_control
+-#define GLX_SGI_swap_control 1
+-
+-typedef int ( * PFNGLXSWAPINTERVALSGIPROC) (int interval);
+-
+-#define glXSwapIntervalSGI GLXEW_GET_FUN(__glewXSwapIntervalSGI)
+-
+-#define GLXEW_SGI_swap_control GLXEW_GET_VAR(__GLXEW_SGI_swap_control)
+-
+-#endif /* GLX_SGI_swap_control */
+-
+-/* --------------------------- GLX_SGI_video_sync -------------------------- */
+-
+-#ifndef GLX_SGI_video_sync
+-#define GLX_SGI_video_sync 1
+-
+-typedef int ( * PFNGLXGETVIDEOSYNCSGIPROC) (uint* count);
+-typedef int ( * PFNGLXWAITVIDEOSYNCSGIPROC) (int divisor, int remainder, unsigned int* count);
+-
+-#define glXGetVideoSyncSGI GLXEW_GET_FUN(__glewXGetVideoSyncSGI)
+-#define glXWaitVideoSyncSGI GLXEW_GET_FUN(__glewXWaitVideoSyncSGI)
+-
+-#define GLXEW_SGI_video_sync GLXEW_GET_VAR(__GLXEW_SGI_video_sync)
+-
+-#endif /* GLX_SGI_video_sync */
+-
+-/* --------------------- GLX_SUN_get_transparent_index --------------------- */
+-
+-#ifndef GLX_SUN_get_transparent_index
+-#define GLX_SUN_get_transparent_index 1
+-
+-typedef Status ( * PFNGLXGETTRANSPARENTINDEXSUNPROC) (Display* dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex);
+-
+-#define glXGetTransparentIndexSUN GLXEW_GET_FUN(__glewXGetTransparentIndexSUN)
+-
+-#define GLXEW_SUN_get_transparent_index GLXEW_GET_VAR(__GLXEW_SUN_get_transparent_index)
+-
+-#endif /* GLX_SUN_get_transparent_index */
+-
+-/* -------------------------- GLX_SUN_video_resize ------------------------- */
+-
+-#ifndef GLX_SUN_video_resize
+-#define GLX_SUN_video_resize 1
+-
+-#define GLX_VIDEO_RESIZE_SUN 0x8171
+-#define GL_VIDEO_RESIZE_COMPENSATION_SUN 0x85CD
+-
+-typedef int ( * PFNGLXGETVIDEORESIZESUNPROC) (Display* display, GLXDrawable window, float* factor);
+-typedef int ( * PFNGLXVIDEORESIZESUNPROC) (Display* display, GLXDrawable window, float factor);
+-
+-#define glXGetVideoResizeSUN GLXEW_GET_FUN(__glewXGetVideoResizeSUN)
+-#define glXVideoResizeSUN GLXEW_GET_FUN(__glewXVideoResizeSUN)
+-
+-#define GLXEW_SUN_video_resize GLXEW_GET_VAR(__GLXEW_SUN_video_resize)
+-
+-#endif /* GLX_SUN_video_resize */
+-
+-/* ------------------------------------------------------------------------- */
+-
+-#ifdef GLEW_MX
+-#define GLXEW_EXPORT
+-#else
+-#define GLXEW_EXPORT extern
+-#endif /* GLEW_MX */
+-
+-extern PFNGLXGETCURRENTDISPLAYPROC __glewXGetCurrentDisplay;
+-
+-extern PFNGLXCHOOSEFBCONFIGPROC __glewXChooseFBConfig;
+-extern PFNGLXCREATENEWCONTEXTPROC __glewXCreateNewContext;
+-extern PFNGLXCREATEPBUFFERPROC __glewXCreatePbuffer;
+-extern PFNGLXCREATEPIXMAPPROC __glewXCreatePixmap;
+-extern PFNGLXCREATEWINDOWPROC __glewXCreateWindow;
+-extern PFNGLXDESTROYPBUFFERPROC __glewXDestroyPbuffer;
+-extern PFNGLXDESTROYPIXMAPPROC __glewXDestroyPixmap;
+-extern PFNGLXDESTROYWINDOWPROC __glewXDestroyWindow;
+-extern PFNGLXGETCURRENTREADDRAWABLEPROC __glewXGetCurrentReadDrawable;
+-extern PFNGLXGETFBCONFIGATTRIBPROC __glewXGetFBConfigAttrib;
+-extern PFNGLXGETFBCONFIGSPROC __glewXGetFBConfigs;
+-extern PFNGLXGETSELECTEDEVENTPROC __glewXGetSelectedEvent;
+-extern PFNGLXGETVISUALFROMFBCONFIGPROC __glewXGetVisualFromFBConfig;
+-extern PFNGLXMAKECONTEXTCURRENTPROC __glewXMakeContextCurrent;
+-extern PFNGLXQUERYCONTEXTPROC __glewXQueryContext;
+-extern PFNGLXQUERYDRAWABLEPROC __glewXQueryDrawable;
+-extern PFNGLXSELECTEVENTPROC __glewXSelectEvent;
+-
+-extern PFNGLXBINDTEXIMAGEATIPROC __glewXBindTexImageATI;
+-extern PFNGLXDRAWABLEATTRIBATIPROC __glewXDrawableAttribATI;
+-extern PFNGLXRELEASETEXIMAGEATIPROC __glewXReleaseTexImageATI;
+-
+-extern PFNGLXFREECONTEXTEXTPROC __glewXFreeContextEXT;
+-extern PFNGLXGETCONTEXTIDEXTPROC __glewXGetContextIDEXT;
+-extern PFNGLXIMPORTCONTEXTEXTPROC __glewXImportContextEXT;
+-extern PFNGLXQUERYCONTEXTINFOEXTPROC __glewXQueryContextInfoEXT;
+-
+-extern PFNGLXBINDTEXIMAGEEXTPROC __glewXBindTexImageEXT;
+-extern PFNGLXRELEASETEXIMAGEEXTPROC __glewXReleaseTexImageEXT;
+-
+-extern PFNGLXGETAGPOFFSETMESAPROC __glewXGetAGPOffsetMESA;
+-
+-extern PFNGLXCOPYSUBBUFFERMESAPROC __glewXCopySubBufferMESA;
+-
+-extern PFNGLXCREATEGLXPIXMAPMESAPROC __glewXCreateGLXPixmapMESA;
+-
+-extern PFNGLXRELEASEBUFFERSMESAPROC __glewXReleaseBuffersMESA;
+-
+-extern PFNGLXSET3DFXMODEMESAPROC __glewXSet3DfxModeMESA;
+-
+-extern PFNGLXALLOCATEMEMORYNVPROC __glewXAllocateMemoryNV;
+-extern PFNGLXFREEMEMORYNVPROC __glewXFreeMemoryNV;
+-
+-extern PFNGLXGETMSCRATEOMLPROC __glewXGetMscRateOML;
+-extern PFNGLXGETSYNCVALUESOMLPROC __glewXGetSyncValuesOML;
+-extern PFNGLXSWAPBUFFERSMSCOMLPROC __glewXSwapBuffersMscOML;
+-extern PFNGLXWAITFORMSCOMLPROC __glewXWaitForMscOML;
+-extern PFNGLXWAITFORSBCOMLPROC __glewXWaitForSbcOML;
+-
+-extern PFNGLXCHOOSEFBCONFIGSGIXPROC __glewXChooseFBConfigSGIX;
+-extern PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC __glewXCreateContextWithConfigSGIX;
+-extern PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC __glewXCreateGLXPixmapWithConfigSGIX;
+-extern PFNGLXGETFBCONFIGATTRIBSGIXPROC __glewXGetFBConfigAttribSGIX;
+-extern PFNGLXGETFBCONFIGFROMVISUALSGIXPROC __glewXGetFBConfigFromVisualSGIX;
+-extern PFNGLXGETVISUALFROMFBCONFIGSGIXPROC __glewXGetVisualFromFBConfigSGIX;
+-
+-extern PFNGLXBINDHYPERPIPESGIXPROC __glewXBindHyperpipeSGIX;
+-extern PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC __glewXDestroyHyperpipeConfigSGIX;
+-extern PFNGLXHYPERPIPEATTRIBSGIXPROC __glewXHyperpipeAttribSGIX;
+-extern PFNGLXHYPERPIPECONFIGSGIXPROC __glewXHyperpipeConfigSGIX;
+-extern PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC __glewXQueryHyperpipeAttribSGIX;
+-extern PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC __glewXQueryHyperpipeBestAttribSGIX;
+-extern PFNGLXQUERYHYPERPIPECONFIGSGIXPROC __glewXQueryHyperpipeConfigSGIX;
+-extern PFNGLXQUERYHYPERPIPENETWORKSGIXPROC __glewXQueryHyperpipeNetworkSGIX;
+-
+-extern PFNGLXCREATEGLXPBUFFERSGIXPROC __glewXCreateGLXPbufferSGIX;
+-extern PFNGLXDESTROYGLXPBUFFERSGIXPROC __glewXDestroyGLXPbufferSGIX;
+-extern PFNGLXGETSELECTEDEVENTSGIXPROC __glewXGetSelectedEventSGIX;
+-extern PFNGLXQUERYGLXPBUFFERSGIXPROC __glewXQueryGLXPbufferSGIX;
+-extern PFNGLXSELECTEVENTSGIXPROC __glewXSelectEventSGIX;
+-
+-extern PFNGLXBINDSWAPBARRIERSGIXPROC __glewXBindSwapBarrierSGIX;
+-extern PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC __glewXQueryMaxSwapBarriersSGIX;
+-
+-extern PFNGLXJOINSWAPGROUPSGIXPROC __glewXJoinSwapGroupSGIX;
+-
+-extern PFNGLXBINDCHANNELTOWINDOWSGIXPROC __glewXBindChannelToWindowSGIX;
+-extern PFNGLXCHANNELRECTSGIXPROC __glewXChannelRectSGIX;
+-extern PFNGLXCHANNELRECTSYNCSGIXPROC __glewXChannelRectSyncSGIX;
+-extern PFNGLXQUERYCHANNELDELTASSGIXPROC __glewXQueryChannelDeltasSGIX;
+-extern PFNGLXQUERYCHANNELRECTSGIXPROC __glewXQueryChannelRectSGIX;
+-
+-extern PFNGLXCUSHIONSGIPROC __glewXCushionSGI;
+-
+-extern PFNGLXGETCURRENTREADDRAWABLESGIPROC __glewXGetCurrentReadDrawableSGI;
+-extern PFNGLXMAKECURRENTREADSGIPROC __glewXMakeCurrentReadSGI;
+-
+-extern PFNGLXSWAPINTERVALSGIPROC __glewXSwapIntervalSGI;
+-
+-extern PFNGLXGETVIDEOSYNCSGIPROC __glewXGetVideoSyncSGI;
+-extern PFNGLXWAITVIDEOSYNCSGIPROC __glewXWaitVideoSyncSGI;
+-
+-extern PFNGLXGETTRANSPARENTINDEXSUNPROC __glewXGetTransparentIndexSUN;
+-
+-extern PFNGLXGETVIDEORESIZESUNPROC __glewXGetVideoResizeSUN;
+-extern PFNGLXVIDEORESIZESUNPROC __glewXVideoResizeSUN;
+-
+-#if defined(GLEW_MX)
+-struct GLXEWContextStruct
+-{
+-#endif /* GLEW_MX */
+-
+-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_0;
+-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_1;
+-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_2;
+-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_3;
+-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_4;
+-GLXEW_EXPORT GLboolean __GLXEW_3DFX_multisample;
+-GLXEW_EXPORT GLboolean __GLXEW_ARB_fbconfig_float;
+-GLXEW_EXPORT GLboolean __GLXEW_ARB_get_proc_address;
+-GLXEW_EXPORT GLboolean __GLXEW_ARB_multisample;
+-GLXEW_EXPORT GLboolean __GLXEW_ATI_pixel_format_float;
+-GLXEW_EXPORT GLboolean __GLXEW_ATI_render_texture;
+-GLXEW_EXPORT GLboolean __GLXEW_EXT_fbconfig_packed_float;
+-GLXEW_EXPORT GLboolean __GLXEW_EXT_framebuffer_sRGB;
+-GLXEW_EXPORT GLboolean __GLXEW_EXT_import_context;
+-GLXEW_EXPORT GLboolean __GLXEW_EXT_scene_marker;
+-GLXEW_EXPORT GLboolean __GLXEW_EXT_texture_from_pixmap;
+-GLXEW_EXPORT GLboolean __GLXEW_EXT_visual_info;
+-GLXEW_EXPORT GLboolean __GLXEW_EXT_visual_rating;
+-GLXEW_EXPORT GLboolean __GLXEW_MESA_agp_offset;
+-GLXEW_EXPORT GLboolean __GLXEW_MESA_copy_sub_buffer;
+-GLXEW_EXPORT GLboolean __GLXEW_MESA_pixmap_colormap;
+-GLXEW_EXPORT GLboolean __GLXEW_MESA_release_buffers;
+-GLXEW_EXPORT GLboolean __GLXEW_MESA_set_3dfx_mode;
+-GLXEW_EXPORT GLboolean __GLXEW_NV_float_buffer;
+-GLXEW_EXPORT GLboolean __GLXEW_NV_vertex_array_range;
+-GLXEW_EXPORT GLboolean __GLXEW_OML_swap_method;
+-GLXEW_EXPORT GLboolean __GLXEW_OML_sync_control;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIS_blended_overlay;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIS_color_range;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIS_multisample;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIS_shared_multisample;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIX_fbconfig;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIX_hyperpipe;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIX_pbuffer;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIX_swap_barrier;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIX_swap_group;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIX_video_resize;
+-GLXEW_EXPORT GLboolean __GLXEW_SGIX_visual_select_group;
+-GLXEW_EXPORT GLboolean __GLXEW_SGI_cushion;
+-GLXEW_EXPORT GLboolean __GLXEW_SGI_make_current_read;
+-GLXEW_EXPORT GLboolean __GLXEW_SGI_swap_control;
+-GLXEW_EXPORT GLboolean __GLXEW_SGI_video_sync;
+-GLXEW_EXPORT GLboolean __GLXEW_SUN_get_transparent_index;
+-GLXEW_EXPORT GLboolean __GLXEW_SUN_video_resize;
+-
+-#ifdef GLEW_MX
+-}; /* GLXEWContextStruct */
+-#endif /* GLEW_MX */
+-
+-/* ------------------------------------------------------------------------ */
+-
+-#ifdef GLEW_MX
+-
+-typedef struct GLXEWContextStruct GLXEWContext;
+-extern GLenum glxewContextInit (GLXEWContext* ctx);
+-extern GLboolean glxewContextIsSupported (GLXEWContext* ctx, const char* name);
+-
+-#define glxewInit() glxewContextInit(glxewGetContext())
+-#define glxewIsSupported(x) glxewContextIsSupported(glxewGetContext(), x)
+-
+-#define GLXEW_GET_VAR(x) (*(const GLboolean*)&(glxewGetContext()->x))
+-#define GLXEW_GET_FUN(x) x
+-
+-#else /* GLEW_MX */
+-
+-#define GLXEW_GET_VAR(x) (*(const GLboolean*)&x)
+-#define GLXEW_GET_FUN(x) x
+-
+-extern GLboolean glxewIsSupported (const char* name);
+-
+-#endif /* GLEW_MX */
+-
+-extern GLboolean glxewGetExtension (const char* name);
+-
+-#ifdef __cplusplus
+-}
+-#endif
+-
+-#endif /* __glxew_h__ */
+diff --git a/nvcommon/GLEW/include/GL/wglew.h b/nvcommon/GLEW/include/GL/wglew.h
+deleted file mode 100644
+index b304814..0000000
+--- a/nvcommon/GLEW/include/GL/wglew.h
++++ /dev/null
+@@ -1,1026 +0,0 @@
+-/*
+-** The OpenGL Extension Wrangler Library
+-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
+-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
+-** Copyright (C) 2002, Lev Povalahev
+-** All rights reserved.
+-** 
+-** Redistribution and use in source and binary forms, with or without 
+-** modification, are permitted provided that the following conditions are met:
+-** 
+-** * Redistributions of source code must retain the above copyright notice, 
+-**   this list of conditions and the following disclaimer.
+-** * Redistributions in binary form must reproduce the above copyright notice, 
+-**   this list of conditions and the following disclaimer in the documentation 
+-**   and/or other materials provided with the distribution.
+-** * The name of the author may be used to endorse or promote products 
+-**   derived from this software without specific prior written permission.
+-**
+-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
+-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
+-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+-** THE POSSIBILITY OF SUCH DAMAGE.
+-*/
+-
+-/*
+-** Copyright (c) 2007 The Khronos Group Inc.
+-** 
+-** Permission is hereby granted, free of charge, to any person obtaining a
+-** copy of this software and/or associated documentation files (the
+-** "Materials"), to deal in the Materials without restriction, including
+-** without limitation the rights to use, copy, modify, merge, publish,
+-** distribute, sublicense, and/or sell copies of the Materials, and to
+-** permit persons to whom the Materials are furnished to do so, subject to
+-** the following conditions:
+-** 
+-** The above copyright notice and this permission notice shall be included
+-** in all copies or substantial portions of the Materials.
+-** 
+-** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+-** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+-** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+-** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+-** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+-** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+-** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
+-*/
+-
+-#ifndef __wglew_h__
+-#define __wglew_h__
+-#define __WGLEW_H__
+-
+-#ifdef __wglext_h_
+-#error wglext.h included before wglew.h
+-#endif
+-
+-#define __wglext_h_
+-
+-#if !defined(APIENTRY) && !defined(__CYGWIN__)
+-#  ifndef WIN32_LEAN_AND_MEAN
+-#    define WIN32_LEAN_AND_MEAN 1
+-#  endif
+-#include <windows.h>
+-#endif
+-
+-/*
+- * GLEW_STATIC needs to be set when using the static version.
+- * GLEW_BUILD is set when building the DLL version.
+- */
+-#ifdef GLEW_STATIC
+-#  define GLEWAPI extern
+-#else
+-#  ifdef GLEW_BUILD
+-#    define GLEWAPI extern __declspec(dllexport)
+-#  else
+-#    define GLEWAPI extern __declspec(dllimport)
+-#  endif
+-#endif
+-
+-#ifdef __cplusplus
+-extern "C" {
+-#endif
+-
+-/* -------------------------- WGL_3DFX_multisample ------------------------- */
+-
+-#ifndef WGL_3DFX_multisample
+-#define WGL_3DFX_multisample 1
+-
+-#define WGL_SAMPLE_BUFFERS_3DFX 0x2060
+-#define WGL_SAMPLES_3DFX 0x2061
+-
+-#define WGLEW_3DFX_multisample WGLEW_GET_VAR(__WGLEW_3DFX_multisample)
+-
+-#endif /* WGL_3DFX_multisample */
+-
+-/* ------------------------- WGL_3DL_stereo_control ------------------------ */
+-
+-#ifndef WGL_3DL_stereo_control
+-#define WGL_3DL_stereo_control 1
+-
+-#define WGL_STEREO_EMITTER_ENABLE_3DL 0x2055
+-#define WGL_STEREO_EMITTER_DISABLE_3DL 0x2056
+-#define WGL_STEREO_POLARITY_NORMAL_3DL 0x2057
+-#define WGL_STEREO_POLARITY_INVERT_3DL 0x2058
+-
+-typedef BOOL (WINAPI * PFNWGLSETSTEREOEMITTERSTATE3DLPROC) (HDC hDC, UINT uState);
+-
+-#define wglSetStereoEmitterState3DL WGLEW_GET_FUN(__wglewSetStereoEmitterState3DL)
+-
+-#define WGLEW_3DL_stereo_control WGLEW_GET_VAR(__WGLEW_3DL_stereo_control)
+-
+-#endif /* WGL_3DL_stereo_control */
+-
+-/* ------------------------- WGL_ARB_buffer_region ------------------------- */
+-
+-#ifndef WGL_ARB_buffer_region
+-#define WGL_ARB_buffer_region 1
+-
+-#define WGL_FRONT_COLOR_BUFFER_BIT_ARB 0x00000001
+-#define WGL_BACK_COLOR_BUFFER_BIT_ARB 0x00000002
+-#define WGL_DEPTH_BUFFER_BIT_ARB 0x00000004
+-#define WGL_STENCIL_BUFFER_BIT_ARB 0x00000008
+-
+-typedef HANDLE (WINAPI * PFNWGLCREATEBUFFERREGIONARBPROC) (HDC hDC, int iLayerPlane, UINT uType);
+-typedef VOID (WINAPI * PFNWGLDELETEBUFFERREGIONARBPROC) (HANDLE hRegion);
+-typedef BOOL (WINAPI * PFNWGLRESTOREBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
+-typedef BOOL (WINAPI * PFNWGLSAVEBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height);
+-
+-#define wglCreateBufferRegionARB WGLEW_GET_FUN(__wglewCreateBufferRegionARB)
+-#define wglDeleteBufferRegionARB WGLEW_GET_FUN(__wglewDeleteBufferRegionARB)
+-#define wglRestoreBufferRegionARB WGLEW_GET_FUN(__wglewRestoreBufferRegionARB)
+-#define wglSaveBufferRegionARB WGLEW_GET_FUN(__wglewSaveBufferRegionARB)
+-
+-#define WGLEW_ARB_buffer_region WGLEW_GET_VAR(__WGLEW_ARB_buffer_region)
+-
+-#endif /* WGL_ARB_buffer_region */
+-
+-/* ----------------------- WGL_ARB_extensions_string ----------------------- */
+-
+-#ifndef WGL_ARB_extensions_string
+-#define WGL_ARB_extensions_string 1
+-
+-typedef const char* (WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC hdc);
+-
+-#define wglGetExtensionsStringARB WGLEW_GET_FUN(__wglewGetExtensionsStringARB)
+-
+-#define WGLEW_ARB_extensions_string WGLEW_GET_VAR(__WGLEW_ARB_extensions_string)
+-
+-#endif /* WGL_ARB_extensions_string */
+-
+-/* ----------------------- WGL_ARB_make_current_read ----------------------- */
+-
+-#ifndef WGL_ARB_make_current_read
+-#define WGL_ARB_make_current_read 1
+-
+-#define ERROR_INVALID_PIXEL_TYPE_ARB 0x2043
+-#define ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB 0x2054
+-
+-typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCARBPROC) (VOID);
+-typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTARBPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
+-
+-#define wglGetCurrentReadDCARB WGLEW_GET_FUN(__wglewGetCurrentReadDCARB)
+-#define wglMakeContextCurrentARB WGLEW_GET_FUN(__wglewMakeContextCurrentARB)
+-
+-#define WGLEW_ARB_make_current_read WGLEW_GET_VAR(__WGLEW_ARB_make_current_read)
+-
+-#endif /* WGL_ARB_make_current_read */
+-
+-/* -------------------------- WGL_ARB_multisample -------------------------- */
+-
+-#ifndef WGL_ARB_multisample
+-#define WGL_ARB_multisample 1
+-
+-#define WGL_SAMPLE_BUFFERS_ARB 0x2041
+-#define WGL_SAMPLES_ARB 0x2042
+-
+-#define WGLEW_ARB_multisample WGLEW_GET_VAR(__WGLEW_ARB_multisample)
+-
+-#endif /* WGL_ARB_multisample */
+-
+-/* ---------------------------- WGL_ARB_pbuffer ---------------------------- */
+-
+-#ifndef WGL_ARB_pbuffer
+-#define WGL_ARB_pbuffer 1
+-
+-#define WGL_DRAW_TO_PBUFFER_ARB 0x202D
+-#define WGL_MAX_PBUFFER_PIXELS_ARB 0x202E
+-#define WGL_MAX_PBUFFER_WIDTH_ARB 0x202F
+-#define WGL_MAX_PBUFFER_HEIGHT_ARB 0x2030
+-#define WGL_PBUFFER_LARGEST_ARB 0x2033
+-#define WGL_PBUFFER_WIDTH_ARB 0x2034
+-#define WGL_PBUFFER_HEIGHT_ARB 0x2035
+-#define WGL_PBUFFER_LOST_ARB 0x2036
+-
+-DECLARE_HANDLE(HPBUFFERARB);
+-
+-typedef HPBUFFERARB (WINAPI * PFNWGLCREATEPBUFFERARBPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
+-typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFERARBPROC) (HPBUFFERARB hPbuffer);
+-typedef HDC (WINAPI * PFNWGLGETPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer);
+-typedef BOOL (WINAPI * PFNWGLQUERYPBUFFERARBPROC) (HPBUFFERARB hPbuffer, int iAttribute, int* piValue);
+-typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer, HDC hDC);
+-
+-#define wglCreatePbufferARB WGLEW_GET_FUN(__wglewCreatePbufferARB)
+-#define wglDestroyPbufferARB WGLEW_GET_FUN(__wglewDestroyPbufferARB)
+-#define wglGetPbufferDCARB WGLEW_GET_FUN(__wglewGetPbufferDCARB)
+-#define wglQueryPbufferARB WGLEW_GET_FUN(__wglewQueryPbufferARB)
+-#define wglReleasePbufferDCARB WGLEW_GET_FUN(__wglewReleasePbufferDCARB)
+-
+-#define WGLEW_ARB_pbuffer WGLEW_GET_VAR(__WGLEW_ARB_pbuffer)
+-
+-#endif /* WGL_ARB_pbuffer */
+-
+-/* -------------------------- WGL_ARB_pixel_format ------------------------- */
+-
+-#ifndef WGL_ARB_pixel_format
+-#define WGL_ARB_pixel_format 1
+-
+-#define WGL_NUMBER_PIXEL_FORMATS_ARB 0x2000
+-#define WGL_DRAW_TO_WINDOW_ARB 0x2001
+-#define WGL_DRAW_TO_BITMAP_ARB 0x2002
+-#define WGL_ACCELERATION_ARB 0x2003
+-#define WGL_NEED_PALETTE_ARB 0x2004
+-#define WGL_NEED_SYSTEM_PALETTE_ARB 0x2005
+-#define WGL_SWAP_LAYER_BUFFERS_ARB 0x2006
+-#define WGL_SWAP_METHOD_ARB 0x2007
+-#define WGL_NUMBER_OVERLAYS_ARB 0x2008
+-#define WGL_NUMBER_UNDERLAYS_ARB 0x2009
+-#define WGL_TRANSPARENT_ARB 0x200A
+-#define WGL_SHARE_DEPTH_ARB 0x200C
+-#define WGL_SHARE_STENCIL_ARB 0x200D
+-#define WGL_SHARE_ACCUM_ARB 0x200E
+-#define WGL_SUPPORT_GDI_ARB 0x200F
+-#define WGL_SUPPORT_OPENGL_ARB 0x2010
+-#define WGL_DOUBLE_BUFFER_ARB 0x2011
+-#define WGL_STEREO_ARB 0x2012
+-#define WGL_PIXEL_TYPE_ARB 0x2013
+-#define WGL_COLOR_BITS_ARB 0x2014
+-#define WGL_RED_BITS_ARB 0x2015
+-#define WGL_RED_SHIFT_ARB 0x2016
+-#define WGL_GREEN_BITS_ARB 0x2017
+-#define WGL_GREEN_SHIFT_ARB 0x2018
+-#define WGL_BLUE_BITS_ARB 0x2019
+-#define WGL_BLUE_SHIFT_ARB 0x201A
+-#define WGL_ALPHA_BITS_ARB 0x201B
+-#define WGL_ALPHA_SHIFT_ARB 0x201C
+-#define WGL_ACCUM_BITS_ARB 0x201D
+-#define WGL_ACCUM_RED_BITS_ARB 0x201E
+-#define WGL_ACCUM_GREEN_BITS_ARB 0x201F
+-#define WGL_ACCUM_BLUE_BITS_ARB 0x2020
+-#define WGL_ACCUM_ALPHA_BITS_ARB 0x2021
+-#define WGL_DEPTH_BITS_ARB 0x2022
+-#define WGL_STENCIL_BITS_ARB 0x2023
+-#define WGL_AUX_BUFFERS_ARB 0x2024
+-#define WGL_NO_ACCELERATION_ARB 0x2025
+-#define WGL_GENERIC_ACCELERATION_ARB 0x2026
+-#define WGL_FULL_ACCELERATION_ARB 0x2027
+-#define WGL_SWAP_EXCHANGE_ARB 0x2028
+-#define WGL_SWAP_COPY_ARB 0x2029
+-#define WGL_SWAP_UNDEFINED_ARB 0x202A
+-#define WGL_TYPE_RGBA_ARB 0x202B
+-#define WGL_TYPE_COLORINDEX_ARB 0x202C
+-#define WGL_TRANSPARENT_RED_VALUE_ARB 0x2037
+-#define WGL_TRANSPARENT_GREEN_VALUE_ARB 0x2038
+-#define WGL_TRANSPARENT_BLUE_VALUE_ARB 0x2039
+-#define WGL_TRANSPARENT_ALPHA_VALUE_ARB 0x203A
+-#define WGL_TRANSPARENT_INDEX_VALUE_ARB 0x203B
+-
+-typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int* piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
+-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, FLOAT *pfValues);
+-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, int *piValues);
+-
+-#define wglChoosePixelFormatARB WGLEW_GET_FUN(__wglewChoosePixelFormatARB)
+-#define wglGetPixelFormatAttribfvARB WGLEW_GET_FUN(__wglewGetPixelFormatAttribfvARB)
+-#define wglGetPixelFormatAttribivARB WGLEW_GET_FUN(__wglewGetPixelFormatAttribivARB)
+-
+-#define WGLEW_ARB_pixel_format WGLEW_GET_VAR(__WGLEW_ARB_pixel_format)
+-
+-#endif /* WGL_ARB_pixel_format */
+-
+-/* ----------------------- WGL_ARB_pixel_format_float ---------------------- */
+-
+-#ifndef WGL_ARB_pixel_format_float
+-#define WGL_ARB_pixel_format_float 1
+-
+-#define WGL_TYPE_RGBA_FLOAT_ARB 0x21A0
+-
+-#define WGLEW_ARB_pixel_format_float WGLEW_GET_VAR(__WGLEW_ARB_pixel_format_float)
+-
+-#endif /* WGL_ARB_pixel_format_float */
+-
+-/* ------------------------- WGL_ARB_render_texture ------------------------ */
+-
+-#ifndef WGL_ARB_render_texture
+-#define WGL_ARB_render_texture 1
+-
+-#define WGL_BIND_TO_TEXTURE_RGB_ARB 0x2070
+-#define WGL_BIND_TO_TEXTURE_RGBA_ARB 0x2071
+-#define WGL_TEXTURE_FORMAT_ARB 0x2072
+-#define WGL_TEXTURE_TARGET_ARB 0x2073
+-#define WGL_MIPMAP_TEXTURE_ARB 0x2074
+-#define WGL_TEXTURE_RGB_ARB 0x2075
+-#define WGL_TEXTURE_RGBA_ARB 0x2076
+-#define WGL_NO_TEXTURE_ARB 0x2077
+-#define WGL_TEXTURE_CUBE_MAP_ARB 0x2078
+-#define WGL_TEXTURE_1D_ARB 0x2079
+-#define WGL_TEXTURE_2D_ARB 0x207A
+-#define WGL_MIPMAP_LEVEL_ARB 0x207B
+-#define WGL_CUBE_MAP_FACE_ARB 0x207C
+-#define WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x207D
+-#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x207E
+-#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x207F
+-#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x2080
+-#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x2081
+-#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x2082
+-#define WGL_FRONT_LEFT_ARB 0x2083
+-#define WGL_FRONT_RIGHT_ARB 0x2084
+-#define WGL_BACK_LEFT_ARB 0x2085
+-#define WGL_BACK_RIGHT_ARB 0x2086
+-#define WGL_AUX0_ARB 0x2087
+-#define WGL_AUX1_ARB 0x2088
+-#define WGL_AUX2_ARB 0x2089
+-#define WGL_AUX3_ARB 0x208A
+-#define WGL_AUX4_ARB 0x208B
+-#define WGL_AUX5_ARB 0x208C
+-#define WGL_AUX6_ARB 0x208D
+-#define WGL_AUX7_ARB 0x208E
+-#define WGL_AUX8_ARB 0x208F
+-#define WGL_AUX9_ARB 0x2090
+-
+-typedef BOOL (WINAPI * PFNWGLBINDTEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
+-typedef BOOL (WINAPI * PFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
+-typedef BOOL (WINAPI * PFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB hPbuffer, const int* piAttribList);
+-
+-#define wglBindTexImageARB WGLEW_GET_FUN(__wglewBindTexImageARB)
+-#define wglReleaseTexImageARB WGLEW_GET_FUN(__wglewReleaseTexImageARB)
+-#define wglSetPbufferAttribARB WGLEW_GET_FUN(__wglewSetPbufferAttribARB)
+-
+-#define WGLEW_ARB_render_texture WGLEW_GET_VAR(__WGLEW_ARB_render_texture)
+-
+-#endif /* WGL_ARB_render_texture */
+-
+-/* ----------------------- WGL_ATI_pixel_format_float ---------------------- */
+-
+-#ifndef WGL_ATI_pixel_format_float
+-#define WGL_ATI_pixel_format_float 1
+-
+-#define WGL_TYPE_RGBA_FLOAT_ATI 0x21A0
+-#define GL_RGBA_FLOAT_MODE_ATI 0x8820
+-#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
+-
+-#define WGLEW_ATI_pixel_format_float WGLEW_GET_VAR(__WGLEW_ATI_pixel_format_float)
+-
+-#endif /* WGL_ATI_pixel_format_float */
+-
+-/* -------------------- WGL_ATI_render_texture_rectangle ------------------- */
+-
+-#ifndef WGL_ATI_render_texture_rectangle
+-#define WGL_ATI_render_texture_rectangle 1
+-
+-#define WGL_TEXTURE_RECTANGLE_ATI 0x21A5
+-
+-#define WGLEW_ATI_render_texture_rectangle WGLEW_GET_VAR(__WGLEW_ATI_render_texture_rectangle)
+-
+-#endif /* WGL_ATI_render_texture_rectangle */
+-
+-/* -------------------------- WGL_EXT_depth_float -------------------------- */
+-
+-#ifndef WGL_EXT_depth_float
+-#define WGL_EXT_depth_float 1
+-
+-#define WGL_DEPTH_FLOAT_EXT 0x2040
+-
+-#define WGLEW_EXT_depth_float WGLEW_GET_VAR(__WGLEW_EXT_depth_float)
+-
+-#endif /* WGL_EXT_depth_float */
+-
+-/* ---------------------- WGL_EXT_display_color_table ---------------------- */
+-
+-#ifndef WGL_EXT_display_color_table
+-#define WGL_EXT_display_color_table 1
+-
+-typedef GLboolean (WINAPI * PFNWGLBINDDISPLAYCOLORTABLEEXTPROC) (GLushort id);
+-typedef GLboolean (WINAPI * PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) (GLushort id);
+-typedef void (WINAPI * PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) (GLushort id);
+-typedef GLboolean (WINAPI * PFNWGLLOADDISPLAYCOLORTABLEEXTPROC) (GLushort* table, GLuint length);
+-
+-#define wglBindDisplayColorTableEXT WGLEW_GET_FUN(__wglewBindDisplayColorTableEXT)
+-#define wglCreateDisplayColorTableEXT WGLEW_GET_FUN(__wglewCreateDisplayColorTableEXT)
+-#define wglDestroyDisplayColorTableEXT WGLEW_GET_FUN(__wglewDestroyDisplayColorTableEXT)
+-#define wglLoadDisplayColorTableEXT WGLEW_GET_FUN(__wglewLoadDisplayColorTableEXT)
+-
+-#define WGLEW_EXT_display_color_table WGLEW_GET_VAR(__WGLEW_EXT_display_color_table)
+-
+-#endif /* WGL_EXT_display_color_table */
+-
+-/* ----------------------- WGL_EXT_extensions_string ----------------------- */
+-
+-#ifndef WGL_EXT_extensions_string
+-#define WGL_EXT_extensions_string 1
+-
+-typedef const char* (WINAPI * PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);
+-
+-#define wglGetExtensionsStringEXT WGLEW_GET_FUN(__wglewGetExtensionsStringEXT)
+-
+-#define WGLEW_EXT_extensions_string WGLEW_GET_VAR(__WGLEW_EXT_extensions_string)
+-
+-#endif /* WGL_EXT_extensions_string */
+-
+-/* ------------------------ WGL_EXT_framebuffer_sRGB ----------------------- */
+-
+-#ifndef WGL_EXT_framebuffer_sRGB
+-#define WGL_EXT_framebuffer_sRGB 1
+-
+-#define WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20A9
+-
+-#define WGLEW_EXT_framebuffer_sRGB WGLEW_GET_VAR(__WGLEW_EXT_framebuffer_sRGB)
+-
+-#endif /* WGL_EXT_framebuffer_sRGB */
+-
+-/* ----------------------- WGL_EXT_make_current_read ----------------------- */
+-
+-#ifndef WGL_EXT_make_current_read
+-#define WGL_EXT_make_current_read 1
+-
+-#define ERROR_INVALID_PIXEL_TYPE_EXT 0x2043
+-
+-typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCEXTPROC) (VOID);
+-typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTEXTPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
+-
+-#define wglGetCurrentReadDCEXT WGLEW_GET_FUN(__wglewGetCurrentReadDCEXT)
+-#define wglMakeContextCurrentEXT WGLEW_GET_FUN(__wglewMakeContextCurrentEXT)
+-
+-#define WGLEW_EXT_make_current_read WGLEW_GET_VAR(__WGLEW_EXT_make_current_read)
+-
+-#endif /* WGL_EXT_make_current_read */
+-
+-/* -------------------------- WGL_EXT_multisample -------------------------- */
+-
+-#ifndef WGL_EXT_multisample
+-#define WGL_EXT_multisample 1
+-
+-#define WGL_SAMPLE_BUFFERS_EXT 0x2041
+-#define WGL_SAMPLES_EXT 0x2042
+-
+-#define WGLEW_EXT_multisample WGLEW_GET_VAR(__WGLEW_EXT_multisample)
+-
+-#endif /* WGL_EXT_multisample */
+-
+-/* ---------------------------- WGL_EXT_pbuffer ---------------------------- */
+-
+-#ifndef WGL_EXT_pbuffer
+-#define WGL_EXT_pbuffer 1
+-
+-#define WGL_DRAW_TO_PBUFFER_EXT 0x202D
+-#define WGL_MAX_PBUFFER_PIXELS_EXT 0x202E
+-#define WGL_MAX_PBUFFER_WIDTH_EXT 0x202F
+-#define WGL_MAX_PBUFFER_HEIGHT_EXT 0x2030
+-#define WGL_OPTIMAL_PBUFFER_WIDTH_EXT 0x2031
+-#define WGL_OPTIMAL_PBUFFER_HEIGHT_EXT 0x2032
+-#define WGL_PBUFFER_LARGEST_EXT 0x2033
+-#define WGL_PBUFFER_WIDTH_EXT 0x2034
+-#define WGL_PBUFFER_HEIGHT_EXT 0x2035
+-
+-DECLARE_HANDLE(HPBUFFEREXT);
+-
+-typedef HPBUFFEREXT (WINAPI * PFNWGLCREATEPBUFFEREXTPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
+-typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer);
+-typedef HDC (WINAPI * PFNWGLGETPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer);
+-typedef BOOL (WINAPI * PFNWGLQUERYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer, int iAttribute, int* piValue);
+-typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer, HDC hDC);
+-
+-#define wglCreatePbufferEXT WGLEW_GET_FUN(__wglewCreatePbufferEXT)
+-#define wglDestroyPbufferEXT WGLEW_GET_FUN(__wglewDestroyPbufferEXT)
+-#define wglGetPbufferDCEXT WGLEW_GET_FUN(__wglewGetPbufferDCEXT)
+-#define wglQueryPbufferEXT WGLEW_GET_FUN(__wglewQueryPbufferEXT)
+-#define wglReleasePbufferDCEXT WGLEW_GET_FUN(__wglewReleasePbufferDCEXT)
+-
+-#define WGLEW_EXT_pbuffer WGLEW_GET_VAR(__WGLEW_EXT_pbuffer)
+-
+-#endif /* WGL_EXT_pbuffer */
+-
+-/* -------------------------- WGL_EXT_pixel_format ------------------------- */
+-
+-#ifndef WGL_EXT_pixel_format
+-#define WGL_EXT_pixel_format 1
+-
+-#define WGL_NUMBER_PIXEL_FORMATS_EXT 0x2000
+-#define WGL_DRAW_TO_WINDOW_EXT 0x2001
+-#define WGL_DRAW_TO_BITMAP_EXT 0x2002
+-#define WGL_ACCELERATION_EXT 0x2003
+-#define WGL_NEED_PALETTE_EXT 0x2004
+-#define WGL_NEED_SYSTEM_PALETTE_EXT 0x2005
+-#define WGL_SWAP_LAYER_BUFFERS_EXT 0x2006
+-#define WGL_SWAP_METHOD_EXT 0x2007
+-#define WGL_NUMBER_OVERLAYS_EXT 0x2008
+-#define WGL_NUMBER_UNDERLAYS_EXT 0x2009
+-#define WGL_TRANSPARENT_EXT 0x200A
+-#define WGL_TRANSPARENT_VALUE_EXT 0x200B
+-#define WGL_SHARE_DEPTH_EXT 0x200C
+-#define WGL_SHARE_STENCIL_EXT 0x200D
+-#define WGL_SHARE_ACCUM_EXT 0x200E
+-#define WGL_SUPPORT_GDI_EXT 0x200F
+-#define WGL_SUPPORT_OPENGL_EXT 0x2010
+-#define WGL_DOUBLE_BUFFER_EXT 0x2011
+-#define WGL_STEREO_EXT 0x2012
+-#define WGL_PIXEL_TYPE_EXT 0x2013
+-#define WGL_COLOR_BITS_EXT 0x2014
+-#define WGL_RED_BITS_EXT 0x2015
+-#define WGL_RED_SHIFT_EXT 0x2016
+-#define WGL_GREEN_BITS_EXT 0x2017
+-#define WGL_GREEN_SHIFT_EXT 0x2018
+-#define WGL_BLUE_BITS_EXT 0x2019
+-#define WGL_BLUE_SHIFT_EXT 0x201A
+-#define WGL_ALPHA_BITS_EXT 0x201B
+-#define WGL_ALPHA_SHIFT_EXT 0x201C
+-#define WGL_ACCUM_BITS_EXT 0x201D
+-#define WGL_ACCUM_RED_BITS_EXT 0x201E
+-#define WGL_ACCUM_GREEN_BITS_EXT 0x201F
+-#define WGL_ACCUM_BLUE_BITS_EXT 0x2020
+-#define WGL_ACCUM_ALPHA_BITS_EXT 0x2021
+-#define WGL_DEPTH_BITS_EXT 0x2022
+-#define WGL_STENCIL_BITS_EXT 0x2023
+-#define WGL_AUX_BUFFERS_EXT 0x2024
+-#define WGL_NO_ACCELERATION_EXT 0x2025
+-#define WGL_GENERIC_ACCELERATION_EXT 0x2026
+-#define WGL_FULL_ACCELERATION_EXT 0x2027
+-#define WGL_SWAP_EXCHANGE_EXT 0x2028
+-#define WGL_SWAP_COPY_EXT 0x2029
+-#define WGL_SWAP_UNDEFINED_EXT 0x202A
+-#define WGL_TYPE_RGBA_EXT 0x202B
+-#define WGL_TYPE_COLORINDEX_EXT 0x202C
+-
+-typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATEXTPROC) (HDC hdc, const int* piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
+-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, FLOAT *pfValues);
+-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, int *piValues);
+-
+-#define wglChoosePixelFormatEXT WGLEW_GET_FUN(__wglewChoosePixelFormatEXT)
+-#define wglGetPixelFormatAttribfvEXT WGLEW_GET_FUN(__wglewGetPixelFormatAttribfvEXT)
+-#define wglGetPixelFormatAttribivEXT WGLEW_GET_FUN(__wglewGetPixelFormatAttribivEXT)
+-
+-#define WGLEW_EXT_pixel_format WGLEW_GET_VAR(__WGLEW_EXT_pixel_format)
+-
+-#endif /* WGL_EXT_pixel_format */
+-
+-/* ------------------- WGL_EXT_pixel_format_packed_float ------------------- */
+-
+-#ifndef WGL_EXT_pixel_format_packed_float
+-#define WGL_EXT_pixel_format_packed_float 1
+-
+-#define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT 0x20A8
+-
+-#define WGLEW_EXT_pixel_format_packed_float WGLEW_GET_VAR(__WGLEW_EXT_pixel_format_packed_float)
+-
+-#endif /* WGL_EXT_pixel_format_packed_float */
+-
+-/* -------------------------- WGL_EXT_swap_control ------------------------- */
+-
+-#ifndef WGL_EXT_swap_control
+-#define WGL_EXT_swap_control 1
+-
+-typedef int (WINAPI * PFNWGLGETSWAPINTERVALEXTPROC) (void);
+-typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC) (int interval);
+-
+-#define wglGetSwapIntervalEXT WGLEW_GET_FUN(__wglewGetSwapIntervalEXT)
+-#define wglSwapIntervalEXT WGLEW_GET_FUN(__wglewSwapIntervalEXT)
+-
+-#define WGLEW_EXT_swap_control WGLEW_GET_VAR(__WGLEW_EXT_swap_control)
+-
+-#endif /* WGL_EXT_swap_control */
+-
+-/* --------------------- WGL_I3D_digital_video_control --------------------- */
+-
+-#ifndef WGL_I3D_digital_video_control
+-#define WGL_I3D_digital_video_control 1
+-
+-#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D 0x2050
+-#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D 0x2051
+-#define WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D 0x2052
+-#define WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D 0x2053
+-
+-typedef BOOL (WINAPI * PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int* piValue);
+-typedef BOOL (WINAPI * PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int* piValue);
+-
+-#define wglGetDigitalVideoParametersI3D WGLEW_GET_FUN(__wglewGetDigitalVideoParametersI3D)
+-#define wglSetDigitalVideoParametersI3D WGLEW_GET_FUN(__wglewSetDigitalVideoParametersI3D)
+-
+-#define WGLEW_I3D_digital_video_control WGLEW_GET_VAR(__WGLEW_I3D_digital_video_control)
+-
+-#endif /* WGL_I3D_digital_video_control */
+-
+-/* ----------------------------- WGL_I3D_gamma ----------------------------- */
+-
+-#ifndef WGL_I3D_gamma
+-#define WGL_I3D_gamma 1
+-
+-#define WGL_GAMMA_TABLE_SIZE_I3D 0x204E
+-#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D 0x204F
+-
+-typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, USHORT* puRed, USHORT *puGreen, USHORT *puBlue);
+-typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int* piValue);
+-typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, const USHORT* puRed, const USHORT *puGreen, const USHORT *puBlue);
+-typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int* piValue);
+-
+-#define wglGetGammaTableI3D WGLEW_GET_FUN(__wglewGetGammaTableI3D)
+-#define wglGetGammaTableParametersI3D WGLEW_GET_FUN(__wglewGetGammaTableParametersI3D)
+-#define wglSetGammaTableI3D WGLEW_GET_FUN(__wglewSetGammaTableI3D)
+-#define wglSetGammaTableParametersI3D WGLEW_GET_FUN(__wglewSetGammaTableParametersI3D)
+-
+-#define WGLEW_I3D_gamma WGLEW_GET_VAR(__WGLEW_I3D_gamma)
+-
+-#endif /* WGL_I3D_gamma */
+-
+-/* ---------------------------- WGL_I3D_genlock ---------------------------- */
+-
+-#ifndef WGL_I3D_genlock
+-#define WGL_I3D_genlock 1
+-
+-#define WGL_GENLOCK_SOURCE_MULTIVIEW_I3D 0x2044
+-#define WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D 0x2045
+-#define WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D 0x2046
+-#define WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D 0x2047
+-#define WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D 0x2048
+-#define WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D 0x2049
+-#define WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D 0x204A
+-#define WGL_GENLOCK_SOURCE_EDGE_RISING_I3D 0x204B
+-#define WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D 0x204C
+-
+-typedef BOOL (WINAPI * PFNWGLDISABLEGENLOCKI3DPROC) (HDC hDC);
+-typedef BOOL (WINAPI * PFNWGLENABLEGENLOCKI3DPROC) (HDC hDC);
+-typedef BOOL (WINAPI * PFNWGLGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT uRate);
+-typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT uDelay);
+-typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT uEdge);
+-typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEI3DPROC) (HDC hDC, UINT uSource);
+-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT* uRate);
+-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT* uDelay);
+-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT* uEdge);
+-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEI3DPROC) (HDC hDC, UINT* uSource);
+-typedef BOOL (WINAPI * PFNWGLISENABLEDGENLOCKI3DPROC) (HDC hDC, BOOL* pFlag);
+-typedef BOOL (WINAPI * PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) (HDC hDC, UINT* uMaxLineDelay, UINT *uMaxPixelDelay);
+-
+-#define wglDisableGenlockI3D WGLEW_GET_FUN(__wglewDisableGenlockI3D)
+-#define wglEnableGenlockI3D WGLEW_GET_FUN(__wglewEnableGenlockI3D)
+-#define wglGenlockSampleRateI3D WGLEW_GET_FUN(__wglewGenlockSampleRateI3D)
+-#define wglGenlockSourceDelayI3D WGLEW_GET_FUN(__wglewGenlockSourceDelayI3D)
+-#define wglGenlockSourceEdgeI3D WGLEW_GET_FUN(__wglewGenlockSourceEdgeI3D)
+-#define wglGenlockSourceI3D WGLEW_GET_FUN(__wglewGenlockSourceI3D)
+-#define wglGetGenlockSampleRateI3D WGLEW_GET_FUN(__wglewGetGenlockSampleRateI3D)
+-#define wglGetGenlockSourceDelayI3D WGLEW_GET_FUN(__wglewGetGenlockSourceDelayI3D)
+-#define wglGetGenlockSourceEdgeI3D WGLEW_GET_FUN(__wglewGetGenlockSourceEdgeI3D)
+-#define wglGetGenlockSourceI3D WGLEW_GET_FUN(__wglewGetGenlockSourceI3D)
+-#define wglIsEnabledGenlockI3D WGLEW_GET_FUN(__wglewIsEnabledGenlockI3D)
+-#define wglQueryGenlockMaxSourceDelayI3D WGLEW_GET_FUN(__wglewQueryGenlockMaxSourceDelayI3D)
+-
+-#define WGLEW_I3D_genlock WGLEW_GET_VAR(__WGLEW_I3D_genlock)
+-
+-#endif /* WGL_I3D_genlock */
+-
+-/* -------------------------- WGL_I3D_image_buffer ------------------------- */
+-
+-#ifndef WGL_I3D_image_buffer
+-#define WGL_I3D_image_buffer 1
+-
+-#define WGL_IMAGE_BUFFER_MIN_ACCESS_I3D 0x00000001
+-#define WGL_IMAGE_BUFFER_LOCK_I3D 0x00000002
+-
+-typedef BOOL (WINAPI * PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) (HDC hdc, HANDLE* pEvent, LPVOID *pAddress, DWORD *pSize, UINT count);
+-typedef LPVOID (WINAPI * PFNWGLCREATEIMAGEBUFFERI3DPROC) (HDC hDC, DWORD dwSize, UINT uFlags);
+-typedef BOOL (WINAPI * PFNWGLDESTROYIMAGEBUFFERI3DPROC) (HDC hDC, LPVOID pAddress);
+-typedef BOOL (WINAPI * PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) (HDC hdc, LPVOID* pAddress, UINT count);
+-
+-#define wglAssociateImageBufferEventsI3D WGLEW_GET_FUN(__wglewAssociateImageBufferEventsI3D)
+-#define wglCreateImageBufferI3D WGLEW_GET_FUN(__wglewCreateImageBufferI3D)
+-#define wglDestroyImageBufferI3D WGLEW_GET_FUN(__wglewDestroyImageBufferI3D)
+-#define wglReleaseImageBufferEventsI3D WGLEW_GET_FUN(__wglewReleaseImageBufferEventsI3D)
+-
+-#define WGLEW_I3D_image_buffer WGLEW_GET_VAR(__WGLEW_I3D_image_buffer)
+-
+-#endif /* WGL_I3D_image_buffer */
+-
+-/* ------------------------ WGL_I3D_swap_frame_lock ------------------------ */
+-
+-#ifndef WGL_I3D_swap_frame_lock
+-#define WGL_I3D_swap_frame_lock 1
+-
+-typedef BOOL (WINAPI * PFNWGLDISABLEFRAMELOCKI3DPROC) (VOID);
+-typedef BOOL (WINAPI * PFNWGLENABLEFRAMELOCKI3DPROC) (VOID);
+-typedef BOOL (WINAPI * PFNWGLISENABLEDFRAMELOCKI3DPROC) (BOOL* pFlag);
+-typedef BOOL (WINAPI * PFNWGLQUERYFRAMELOCKMASTERI3DPROC) (BOOL* pFlag);
+-
+-#define wglDisableFrameLockI3D WGLEW_GET_FUN(__wglewDisableFrameLockI3D)
+-#define wglEnableFrameLockI3D WGLEW_GET_FUN(__wglewEnableFrameLockI3D)
+-#define wglIsEnabledFrameLockI3D WGLEW_GET_FUN(__wglewIsEnabledFrameLockI3D)
+-#define wglQueryFrameLockMasterI3D WGLEW_GET_FUN(__wglewQueryFrameLockMasterI3D)
+-
+-#define WGLEW_I3D_swap_frame_lock WGLEW_GET_VAR(__WGLEW_I3D_swap_frame_lock)
+-
+-#endif /* WGL_I3D_swap_frame_lock */
+-
+-/* ------------------------ WGL_I3D_swap_frame_usage ----------------------- */
+-
+-#ifndef WGL_I3D_swap_frame_usage
+-#define WGL_I3D_swap_frame_usage 1
+-
+-typedef BOOL (WINAPI * PFNWGLBEGINFRAMETRACKINGI3DPROC) (void);
+-typedef BOOL (WINAPI * PFNWGLENDFRAMETRACKINGI3DPROC) (void);
+-typedef BOOL (WINAPI * PFNWGLGETFRAMEUSAGEI3DPROC) (float* pUsage);
+-typedef BOOL (WINAPI * PFNWGLQUERYFRAMETRACKINGI3DPROC) (DWORD* pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
+-
+-#define wglBeginFrameTrackingI3D WGLEW_GET_FUN(__wglewBeginFrameTrackingI3D)
+-#define wglEndFrameTrackingI3D WGLEW_GET_FUN(__wglewEndFrameTrackingI3D)
+-#define wglGetFrameUsageI3D WGLEW_GET_FUN(__wglewGetFrameUsageI3D)
+-#define wglQueryFrameTrackingI3D WGLEW_GET_FUN(__wglewQueryFrameTrackingI3D)
+-
+-#define WGLEW_I3D_swap_frame_usage WGLEW_GET_VAR(__WGLEW_I3D_swap_frame_usage)
+-
+-#endif /* WGL_I3D_swap_frame_usage */
+-
+-/* -------------------------- WGL_NV_float_buffer -------------------------- */
+-
+-#ifndef WGL_NV_float_buffer
+-#define WGL_NV_float_buffer 1
+-
+-#define WGL_FLOAT_COMPONENTS_NV 0x20B0
+-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV 0x20B1
+-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV 0x20B2
+-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV 0x20B3
+-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV 0x20B4
+-#define WGL_TEXTURE_FLOAT_R_NV 0x20B5
+-#define WGL_TEXTURE_FLOAT_RG_NV 0x20B6
+-#define WGL_TEXTURE_FLOAT_RGB_NV 0x20B7
+-#define WGL_TEXTURE_FLOAT_RGBA_NV 0x20B8
+-
+-#define WGLEW_NV_float_buffer WGLEW_GET_VAR(__WGLEW_NV_float_buffer)
+-
+-#endif /* WGL_NV_float_buffer */
+-
+-/* -------------------------- WGL_NV_gpu_affinity -------------------------- */
+-
+-#ifndef WGL_NV_gpu_affinity
+-#define WGL_NV_gpu_affinity 1
+-
+-#define WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV 0x20D0
+-#define WGL_ERROR_MISSING_AFFINITY_MASK_NV 0x20D1
+-
+-DECLARE_HANDLE(HGPUNV);
+-typedef struct _GPU_DEVICE {
+-  DWORD cb; 
+-  CHAR DeviceName[32]; 
+-  CHAR DeviceString[128]; 
+-  DWORD Flags; 
+-  RECT rcVirtualScreen; 
+-} GPU_DEVICE, *PGPU_DEVICE;
+-
+-typedef HDC (WINAPI * PFNWGLCREATEAFFINITYDCNVPROC) (const HGPUNV *phGpuList);
+-typedef BOOL (WINAPI * PFNWGLDELETEDCNVPROC) (HDC hdc);
+-typedef BOOL (WINAPI * PFNWGLENUMGPUDEVICESNVPROC) (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
+-typedef BOOL (WINAPI * PFNWGLENUMGPUSFROMAFFINITYDCNVPROC) (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
+-typedef BOOL (WINAPI * PFNWGLENUMGPUSNVPROC) (UINT iGpuIndex, HGPUNV *phGpu);
+-
+-#define wglCreateAffinityDCNV WGLEW_GET_FUN(__wglewCreateAffinityDCNV)
+-#define wglDeleteDCNV WGLEW_GET_FUN(__wglewDeleteDCNV)
+-#define wglEnumGpuDevicesNV WGLEW_GET_FUN(__wglewEnumGpuDevicesNV)
+-#define wglEnumGpusFromAffinityDCNV WGLEW_GET_FUN(__wglewEnumGpusFromAffinityDCNV)
+-#define wglEnumGpusNV WGLEW_GET_FUN(__wglewEnumGpusNV)
+-
+-#define WGLEW_NV_gpu_affinity WGLEW_GET_VAR(__WGLEW_NV_gpu_affinity)
+-
+-#endif /* WGL_NV_gpu_affinity */
+-
+-/* ---------------------- WGL_NV_render_depth_texture ---------------------- */
+-
+-#ifndef WGL_NV_render_depth_texture
+-#define WGL_NV_render_depth_texture 1
+-
+-#define WGL_NO_TEXTURE_ARB 0x2077
+-#define WGL_BIND_TO_TEXTURE_DEPTH_NV 0x20A3
+-#define WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV 0x20A4
+-#define WGL_DEPTH_TEXTURE_FORMAT_NV 0x20A5
+-#define WGL_TEXTURE_DEPTH_COMPONENT_NV 0x20A6
+-#define WGL_DEPTH_COMPONENT_NV 0x20A7
+-
+-#define WGLEW_NV_render_depth_texture WGLEW_GET_VAR(__WGLEW_NV_render_depth_texture)
+-
+-#endif /* WGL_NV_render_depth_texture */
+-
+-/* -------------------- WGL_NV_render_texture_rectangle -------------------- */
+-
+-#ifndef WGL_NV_render_texture_rectangle
+-#define WGL_NV_render_texture_rectangle 1
+-
+-#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV 0x20A0
+-#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV 0x20A1
+-#define WGL_TEXTURE_RECTANGLE_NV 0x20A2
+-
+-#define WGLEW_NV_render_texture_rectangle WGLEW_GET_VAR(__WGLEW_NV_render_texture_rectangle)
+-
+-#endif /* WGL_NV_render_texture_rectangle */
+-
+-/* ----------------------- WGL_NV_vertex_array_range ----------------------- */
+-
+-#ifndef WGL_NV_vertex_array_range
+-#define WGL_NV_vertex_array_range 1
+-
+-typedef void * (WINAPI * PFNWGLALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
+-typedef void (WINAPI * PFNWGLFREEMEMORYNVPROC) (void *pointer);
+-
+-#define wglAllocateMemoryNV WGLEW_GET_FUN(__wglewAllocateMemoryNV)
+-#define wglFreeMemoryNV WGLEW_GET_FUN(__wglewFreeMemoryNV)
+-
+-#define WGLEW_NV_vertex_array_range WGLEW_GET_VAR(__WGLEW_NV_vertex_array_range)
+-
+-#endif /* WGL_NV_vertex_array_range */
+-
+-/* -------------------------- WGL_OML_sync_control ------------------------- */
+-
+-#ifndef WGL_OML_sync_control
+-#define WGL_OML_sync_control 1
+-
+-typedef BOOL (WINAPI * PFNWGLGETMSCRATEOMLPROC) (HDC hdc, INT32* numerator, INT32 *denominator);
+-typedef BOOL (WINAPI * PFNWGLGETSYNCVALUESOMLPROC) (HDC hdc, INT64* ust, INT64 *msc, INT64 *sbc);
+-typedef INT64 (WINAPI * PFNWGLSWAPBUFFERSMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
+-typedef INT64 (WINAPI * PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) (HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
+-typedef BOOL (WINAPI * PFNWGLWAITFORMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64* ust, INT64 *msc, INT64 *sbc);
+-typedef BOOL (WINAPI * PFNWGLWAITFORSBCOMLPROC) (HDC hdc, INT64 target_sbc, INT64* ust, INT64 *msc, INT64 *sbc);
+-
+-#define wglGetMscRateOML WGLEW_GET_FUN(__wglewGetMscRateOML)
+-#define wglGetSyncValuesOML WGLEW_GET_FUN(__wglewGetSyncValuesOML)
+-#define wglSwapBuffersMscOML WGLEW_GET_FUN(__wglewSwapBuffersMscOML)
+-#define wglSwapLayerBuffersMscOML WGLEW_GET_FUN(__wglewSwapLayerBuffersMscOML)
+-#define wglWaitForMscOML WGLEW_GET_FUN(__wglewWaitForMscOML)
+-#define wglWaitForSbcOML WGLEW_GET_FUN(__wglewWaitForSbcOML)
+-
+-#define WGLEW_OML_sync_control WGLEW_GET_VAR(__WGLEW_OML_sync_control)
+-
+-#endif /* WGL_OML_sync_control */
+-
+-/* ------------------------------------------------------------------------- */
+-
+-#ifdef GLEW_MX
+-#define WGLEW_EXPORT
+-#else
+-#define WGLEW_EXPORT GLEWAPI
+-#endif /* GLEW_MX */
+-
+-#ifdef GLEW_MX
+-struct WGLEWContextStruct
+-{
+-#endif /* GLEW_MX */
+-
+-WGLEW_EXPORT PFNWGLSETSTEREOEMITTERSTATE3DLPROC __wglewSetStereoEmitterState3DL;
+-
+-WGLEW_EXPORT PFNWGLCREATEBUFFERREGIONARBPROC __wglewCreateBufferRegionARB;
+-WGLEW_EXPORT PFNWGLDELETEBUFFERREGIONARBPROC __wglewDeleteBufferRegionARB;
+-WGLEW_EXPORT PFNWGLRESTOREBUFFERREGIONARBPROC __wglewRestoreBufferRegionARB;
+-WGLEW_EXPORT PFNWGLSAVEBUFFERREGIONARBPROC __wglewSaveBufferRegionARB;
+-
+-WGLEW_EXPORT PFNWGLGETEXTENSIONSSTRINGARBPROC __wglewGetExtensionsStringARB;
+-
+-WGLEW_EXPORT PFNWGLGETCURRENTREADDCARBPROC __wglewGetCurrentReadDCARB;
+-WGLEW_EXPORT PFNWGLMAKECONTEXTCURRENTARBPROC __wglewMakeContextCurrentARB;
+-
+-WGLEW_EXPORT PFNWGLCREATEPBUFFERARBPROC __wglewCreatePbufferARB;
+-WGLEW_EXPORT PFNWGLDESTROYPBUFFERARBPROC __wglewDestroyPbufferARB;
+-WGLEW_EXPORT PFNWGLGETPBUFFERDCARBPROC __wglewGetPbufferDCARB;
+-WGLEW_EXPORT PFNWGLQUERYPBUFFERARBPROC __wglewQueryPbufferARB;
+-WGLEW_EXPORT PFNWGLRELEASEPBUFFERDCARBPROC __wglewReleasePbufferDCARB;
+-
+-WGLEW_EXPORT PFNWGLCHOOSEPIXELFORMATARBPROC __wglewChoosePixelFormatARB;
+-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBFVARBPROC __wglewGetPixelFormatAttribfvARB;
+-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBIVARBPROC __wglewGetPixelFormatAttribivARB;
+-
+-WGLEW_EXPORT PFNWGLBINDTEXIMAGEARBPROC __wglewBindTexImageARB;
+-WGLEW_EXPORT PFNWGLRELEASETEXIMAGEARBPROC __wglewReleaseTexImageARB;
+-WGLEW_EXPORT PFNWGLSETPBUFFERATTRIBARBPROC __wglewSetPbufferAttribARB;
+-
+-WGLEW_EXPORT PFNWGLBINDDISPLAYCOLORTABLEEXTPROC __wglewBindDisplayColorTableEXT;
+-WGLEW_EXPORT PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC __wglewCreateDisplayColorTableEXT;
+-WGLEW_EXPORT PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC __wglewDestroyDisplayColorTableEXT;
+-WGLEW_EXPORT PFNWGLLOADDISPLAYCOLORTABLEEXTPROC __wglewLoadDisplayColorTableEXT;
+-
+-WGLEW_EXPORT PFNWGLGETEXTENSIONSSTRINGEXTPROC __wglewGetExtensionsStringEXT;
+-
+-WGLEW_EXPORT PFNWGLGETCURRENTREADDCEXTPROC __wglewGetCurrentReadDCEXT;
+-WGLEW_EXPORT PFNWGLMAKECONTEXTCURRENTEXTPROC __wglewMakeContextCurrentEXT;
+-
+-WGLEW_EXPORT PFNWGLCREATEPBUFFEREXTPROC __wglewCreatePbufferEXT;
+-WGLEW_EXPORT PFNWGLDESTROYPBUFFEREXTPROC __wglewDestroyPbufferEXT;
+-WGLEW_EXPORT PFNWGLGETPBUFFERDCEXTPROC __wglewGetPbufferDCEXT;
+-WGLEW_EXPORT PFNWGLQUERYPBUFFEREXTPROC __wglewQueryPbufferEXT;
+-WGLEW_EXPORT PFNWGLRELEASEPBUFFERDCEXTPROC __wglewReleasePbufferDCEXT;
+-
+-WGLEW_EXPORT PFNWGLCHOOSEPIXELFORMATEXTPROC __wglewChoosePixelFormatEXT;
+-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBFVEXTPROC __wglewGetPixelFormatAttribfvEXT;
+-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBIVEXTPROC __wglewGetPixelFormatAttribivEXT;
+-
+-WGLEW_EXPORT PFNWGLGETSWAPINTERVALEXTPROC __wglewGetSwapIntervalEXT;
+-WGLEW_EXPORT PFNWGLSWAPINTERVALEXTPROC __wglewSwapIntervalEXT;
+-
+-WGLEW_EXPORT PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC __wglewGetDigitalVideoParametersI3D;
+-WGLEW_EXPORT PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC __wglewSetDigitalVideoParametersI3D;
+-
+-WGLEW_EXPORT PFNWGLGETGAMMATABLEI3DPROC __wglewGetGammaTableI3D;
+-WGLEW_EXPORT PFNWGLGETGAMMATABLEPARAMETERSI3DPROC __wglewGetGammaTableParametersI3D;
+-WGLEW_EXPORT PFNWGLSETGAMMATABLEI3DPROC __wglewSetGammaTableI3D;
+-WGLEW_EXPORT PFNWGLSETGAMMATABLEPARAMETERSI3DPROC __wglewSetGammaTableParametersI3D;
+-
+-WGLEW_EXPORT PFNWGLDISABLEGENLOCKI3DPROC __wglewDisableGenlockI3D;
+-WGLEW_EXPORT PFNWGLENABLEGENLOCKI3DPROC __wglewEnableGenlockI3D;
+-WGLEW_EXPORT PFNWGLGENLOCKSAMPLERATEI3DPROC __wglewGenlockSampleRateI3D;
+-WGLEW_EXPORT PFNWGLGENLOCKSOURCEDELAYI3DPROC __wglewGenlockSourceDelayI3D;
+-WGLEW_EXPORT PFNWGLGENLOCKSOURCEEDGEI3DPROC __wglewGenlockSourceEdgeI3D;
+-WGLEW_EXPORT PFNWGLGENLOCKSOURCEI3DPROC __wglewGenlockSourceI3D;
+-WGLEW_EXPORT PFNWGLGETGENLOCKSAMPLERATEI3DPROC __wglewGetGenlockSampleRateI3D;
+-WGLEW_EXPORT PFNWGLGETGENLOCKSOURCEDELAYI3DPROC __wglewGetGenlockSourceDelayI3D;
+-WGLEW_EXPORT PFNWGLGETGENLOCKSOURCEEDGEI3DPROC __wglewGetGenlockSourceEdgeI3D;
+-WGLEW_EXPORT PFNWGLGETGENLOCKSOURCEI3DPROC __wglewGetGenlockSourceI3D;
+-WGLEW_EXPORT PFNWGLISENABLEDGENLOCKI3DPROC __wglewIsEnabledGenlockI3D;
+-WGLEW_EXPORT PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC __wglewQueryGenlockMaxSourceDelayI3D;
+-
+-WGLEW_EXPORT PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC __wglewAssociateImageBufferEventsI3D;
+-WGLEW_EXPORT PFNWGLCREATEIMAGEBUFFERI3DPROC __wglewCreateImageBufferI3D;
+-WGLEW_EXPORT PFNWGLDESTROYIMAGEBUFFERI3DPROC __wglewDestroyImageBufferI3D;
+-WGLEW_EXPORT PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC __wglewReleaseImageBufferEventsI3D;
+-
+-WGLEW_EXPORT PFNWGLDISABLEFRAMELOCKI3DPROC __wglewDisableFrameLockI3D;
+-WGLEW_EXPORT PFNWGLENABLEFRAMELOCKI3DPROC __wglewEnableFrameLockI3D;
+-WGLEW_EXPORT PFNWGLISENABLEDFRAMELOCKI3DPROC __wglewIsEnabledFrameLockI3D;
+-WGLEW_EXPORT PFNWGLQUERYFRAMELOCKMASTERI3DPROC __wglewQueryFrameLockMasterI3D;
+-
+-WGLEW_EXPORT PFNWGLBEGINFRAMETRACKINGI3DPROC __wglewBeginFrameTrackingI3D;
+-WGLEW_EXPORT PFNWGLENDFRAMETRACKINGI3DPROC __wglewEndFrameTrackingI3D;
+-WGLEW_EXPORT PFNWGLGETFRAMEUSAGEI3DPROC __wglewGetFrameUsageI3D;
+-WGLEW_EXPORT PFNWGLQUERYFRAMETRACKINGI3DPROC __wglewQueryFrameTrackingI3D;
+-
+-WGLEW_EXPORT PFNWGLCREATEAFFINITYDCNVPROC __wglewCreateAffinityDCNV;
+-WGLEW_EXPORT PFNWGLDELETEDCNVPROC __wglewDeleteDCNV;
+-WGLEW_EXPORT PFNWGLENUMGPUDEVICESNVPROC __wglewEnumGpuDevicesNV;
+-WGLEW_EXPORT PFNWGLENUMGPUSFROMAFFINITYDCNVPROC __wglewEnumGpusFromAffinityDCNV;
+-WGLEW_EXPORT PFNWGLENUMGPUSNVPROC __wglewEnumGpusNV;
+-
+-WGLEW_EXPORT PFNWGLALLOCATEMEMORYNVPROC __wglewAllocateMemoryNV;
+-WGLEW_EXPORT PFNWGLFREEMEMORYNVPROC __wglewFreeMemoryNV;
+-
+-WGLEW_EXPORT PFNWGLGETMSCRATEOMLPROC __wglewGetMscRateOML;
+-WGLEW_EXPORT PFNWGLGETSYNCVALUESOMLPROC __wglewGetSyncValuesOML;
+-WGLEW_EXPORT PFNWGLSWAPBUFFERSMSCOMLPROC __wglewSwapBuffersMscOML;
+-WGLEW_EXPORT PFNWGLSWAPLAYERBUFFERSMSCOMLPROC __wglewSwapLayerBuffersMscOML;
+-WGLEW_EXPORT PFNWGLWAITFORMSCOMLPROC __wglewWaitForMscOML;
+-WGLEW_EXPORT PFNWGLWAITFORSBCOMLPROC __wglewWaitForSbcOML;
+-WGLEW_EXPORT GLboolean __WGLEW_3DFX_multisample;
+-WGLEW_EXPORT GLboolean __WGLEW_3DL_stereo_control;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_buffer_region;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_extensions_string;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_make_current_read;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_multisample;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_pbuffer;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_pixel_format;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_pixel_format_float;
+-WGLEW_EXPORT GLboolean __WGLEW_ARB_render_texture;
+-WGLEW_EXPORT GLboolean __WGLEW_ATI_pixel_format_float;
+-WGLEW_EXPORT GLboolean __WGLEW_ATI_render_texture_rectangle;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_depth_float;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_display_color_table;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_extensions_string;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_framebuffer_sRGB;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_make_current_read;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_multisample;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_pbuffer;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_pixel_format;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_pixel_format_packed_float;
+-WGLEW_EXPORT GLboolean __WGLEW_EXT_swap_control;
+-WGLEW_EXPORT GLboolean __WGLEW_I3D_digital_video_control;
+-WGLEW_EXPORT GLboolean __WGLEW_I3D_gamma;
+-WGLEW_EXPORT GLboolean __WGLEW_I3D_genlock;
+-WGLEW_EXPORT GLboolean __WGLEW_I3D_image_buffer;
+-WGLEW_EXPORT GLboolean __WGLEW_I3D_swap_frame_lock;
+-WGLEW_EXPORT GLboolean __WGLEW_I3D_swap_frame_usage;
+-WGLEW_EXPORT GLboolean __WGLEW_NV_float_buffer;
+-WGLEW_EXPORT GLboolean __WGLEW_NV_gpu_affinity;
+-WGLEW_EXPORT GLboolean __WGLEW_NV_render_depth_texture;
+-WGLEW_EXPORT GLboolean __WGLEW_NV_render_texture_rectangle;
+-WGLEW_EXPORT GLboolean __WGLEW_NV_vertex_array_range;
+-WGLEW_EXPORT GLboolean __WGLEW_OML_sync_control;
+-
+-#ifdef GLEW_MX
+-}; /* WGLEWContextStruct */
+-#endif /* GLEW_MX */
+-
+-/* ------------------------------------------------------------------------- */
+-
+-#ifdef GLEW_MX
+-
+-typedef struct WGLEWContextStruct WGLEWContext;
+-GLEWAPI GLenum wglewContextInit (WGLEWContext* ctx);
+-GLEWAPI GLboolean wglewContextIsSupported (WGLEWContext* ctx, const char* name);
+-
+-#define wglewInit() wglewContextInit(wglewGetContext())
+-#define wglewIsSupported(x) wglewContextIsSupported(wglewGetContext(), x)
+-
+-#define WGLEW_GET_VAR(x) (*(const GLboolean*)&(wglewGetContext()->x))
+-#define WGLEW_GET_FUN(x) wglewGetContext()->x
+-
+-#else /* GLEW_MX */
+-
+-#define WGLEW_GET_VAR(x) (*(const GLboolean*)&x)
+-#define WGLEW_GET_FUN(x) x
+-
+-GLEWAPI GLboolean wglewIsSupported (const char* name);
+-
+-#endif /* GLEW_MX */
+-
+-GLEWAPI GLboolean wglewGetExtension (const char* name);
+-
+-#ifdef __cplusplus
+-}
+-#endif
+-
+-#undef GLEWAPI
+-
+-#endif /* __wglew_h__ */
+diff --git a/nvcommon/GLEW/src/glew.c b/nvcommon/GLEW/src/glew.c
+deleted file mode 100644
+index 63b0d95..0000000
+--- a/nvcommon/GLEW/src/glew.c
++++ /dev/null
+@@ -1,10828 +0,0 @@
+-/*
+-** The OpenGL Extension Wrangler Library
+-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
+-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
+-** Copyright (C) 2002, Lev Povalahev
+-** All rights reserved.
+-** 
+-** Redistribution and use in source and binary forms, with or without 
+-** modification, are permitted provided that the following conditions are met:
+-** 
+-** * Redistributions of source code must retain the above copyright notice, 
+-**   this list of conditions and the following disclaimer.
+-** * Redistributions in binary form must reproduce the above copyright notice, 
+-**   this list of conditions and the following disclaimer in the documentation 
+-**   and/or other materials provided with the distribution.
+-** * The name of the author may be used to endorse or promote products 
+-**   derived from this software without specific prior written permission.
+-**
+-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
+-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
+-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+-** THE POSSIBILITY OF SUCH DAMAGE.
+-*/
+-
+-#include <GL/glew.h>
+-#if defined(_WIN32)
+-#  include <GL/wglew.h>
+-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)
+-#  include <GL/glxew.h>
+-#endif
+-
+-/*
+- * Define glewGetContext and related helper macros.
+- */
+-#ifdef GLEW_MX
+-#  define glewGetContext() ctx
+-#  ifdef _WIN32
+-#    define GLEW_CONTEXT_ARG_DEF_INIT GLEWContext* ctx
+-#    define GLEW_CONTEXT_ARG_VAR_INIT ctx
+-#    define wglewGetContext() ctx
+-#    define WGLEW_CONTEXT_ARG_DEF_INIT WGLEWContext* ctx
+-#    define WGLEW_CONTEXT_ARG_DEF_LIST WGLEWContext* ctx
+-#  else /* _WIN32 */
+-#    define GLEW_CONTEXT_ARG_DEF_INIT void
+-#    define GLEW_CONTEXT_ARG_VAR_INIT
+-#    define glxewGetContext() ctx
+-#    define GLXEW_CONTEXT_ARG_DEF_INIT void
+-#    define GLXEW_CONTEXT_ARG_DEF_LIST GLXEWContext* ctx
+-#  endif /* _WIN32 */
+-#  define GLEW_CONTEXT_ARG_DEF_LIST GLEWContext* ctx
+-#else /* GLEW_MX */
+-#  define GLEW_CONTEXT_ARG_DEF_INIT void
+-#  define GLEW_CONTEXT_ARG_VAR_INIT
+-#  define GLEW_CONTEXT_ARG_DEF_LIST void
+-#  define WGLEW_CONTEXT_ARG_DEF_INIT void
+-#  define WGLEW_CONTEXT_ARG_DEF_LIST void
+-#  define GLXEW_CONTEXT_ARG_DEF_INIT void
+-#  define GLXEW_CONTEXT_ARG_DEF_LIST void
+-#endif /* GLEW_MX */
+-
+-#if defined(__APPLE__)
+-#include <mach-o/dyld.h>
+-#include <stdlib.h>
+-#include <string.h>
+-
+-void* NSGLGetProcAddress (const GLubyte *name)
+-{
+-  static const struct mach_header* image = NULL;
+-  NSSymbol symbol;
+-  char* symbolName;
+-  if (NULL == image)
+-  {
+-    image = NSAddImage("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", NSADDIMAGE_OPTION_RETURN_ON_ERROR);
+-  }
+-  /* prepend a '_' for the Unix C symbol mangling convention */
+-  symbolName = malloc(strlen((const char*)name) + 2);
+-  strcpy(symbolName+1, (const char*)name);
+-  symbolName[0] = '_';
+-  symbol = NULL;
+-  /* if (NSIsSymbolNameDefined(symbolName))
+-	 symbol = NSLookupAndBindSymbol(symbolName); */
+-  symbol = image ? NSLookupSymbolInImage(image, symbolName, NSLOOKUPSYMBOLINIMAGE_OPTION_BIND | NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR) : NULL;
+-  free(symbolName);
+-  return symbol ? NSAddressOfSymbol(symbol) : NULL;
+-}
+-#endif /* __APPLE__ */
+-
+-#if defined(__sgi) || defined (__sun)
+-#include <dlfcn.h>
+-#include <stdio.h>
+-#include <stdlib.h>
+-
+-void* dlGetProcAddress (const GLubyte* name)
+-{
+-  static void* h = NULL;
+-  static void* gpa;
+-
+-  if (h == NULL)
+-  {
+-    if ((h = dlopen(NULL, RTLD_LAZY | RTLD_LOCAL)) == NULL) return NULL;
+-    gpa = dlsym(h, "glXGetProcAddress");
+-  }
+-
+-  if (gpa != NULL)
+-    return ((void*(*)(const GLubyte*))gpa)(name);
+-  else
+-    return dlsym(h, (const char*)name);
+-}
+-#endif /* __sgi || __sun */
+-
+-/*
+- * Define glewGetProcAddress.
+- */
+-#if defined(_WIN32)
+-#  define glewGetProcAddress(name) wglGetProcAddress((LPCSTR)name)
+-#else
+-#  if defined(__APPLE__)
+-#    define glewGetProcAddress(name) NSGLGetProcAddress(name)
+-#  else
+-#    if defined(__sgi) || defined(__sun)
+-#      define glewGetProcAddress(name) dlGetProcAddress(name)
+-#    else /* __linux */
+-#      define glewGetProcAddress(name) (*glXGetProcAddressARB)(name)
+-#    endif
+-#  endif
+-#endif
+-
+-/*
+- * Define GLboolean const cast.
+- */
+-#define CONST_CAST(x) (*(GLboolean*)&x)
+-
+-/*
+- * GLEW, just like OpenGL or GLU, does not rely on the standard C library.
+- * These functions implement the functionality required in this file.
+- */
+-static GLuint _glewStrLen (const GLubyte* s)
+-{
+-  GLuint i=0;
+-  if (s == NULL) return 0;
+-  while (s[i] != '\0') i++;
+-  return i;
+-}
+-
+-static GLuint _glewStrCLen (const GLubyte* s, GLubyte c)
+-{
+-  GLuint i=0;
+-  if (s == NULL) return 0;
+-  while (s[i] != '\0' && s[i] != c) i++;
+-  return s[i] == c ? i : 0;
+-}
+-
+-static GLboolean _glewStrSame (const GLubyte* a, const GLubyte* b, GLuint n)
+-{
+-  GLuint i=0;
+-  if(a == NULL || b == NULL)
+-    return (a == NULL && b == NULL && n == 0) ? GL_TRUE : GL_FALSE;
+-  while (i < n && a[i] != '\0' && b[i] != '\0' && a[i] == b[i]) i++;
+-  return i == n ? GL_TRUE : GL_FALSE;
+-}
+-
+-static GLboolean _glewStrSame1 (GLubyte** a, GLuint* na, const GLubyte* b, GLuint nb)
+-{
+-  while (*na > 0 && (**a == ' ' || **a == '\n' || **a == '\r' || **a == '\t'))
+-  {
+-    (*a)++;
+-    (*na)--;
+-  }
+-  if(*na >= nb)
+-  {
+-    GLuint i=0;
+-    while (i < nb && (*a)+i != NULL && b+i != NULL && (*a)[i] == b[i]) i++;
+-	if(i == nb)
+-	{
+-		*a = *a + nb;
+-		*na = *na - nb;
+-		return GL_TRUE;
+-	}
+-  }
+-  return GL_FALSE;
+-}
+-
+-static GLboolean _glewStrSame2 (GLubyte** a, GLuint* na, const GLubyte* b, GLuint nb)
+-{
+-  if(*na >= nb)
+-  {
+-    GLuint i=0;
+-    while (i < nb && (*a)+i != NULL && b+i != NULL && (*a)[i] == b[i]) i++;
+-	if(i == nb)
+-	{
+-		*a = *a + nb;
+-		*na = *na - nb;
+-		return GL_TRUE;
+-	}
+-  }
+-  return GL_FALSE;
+-}
+-
+-static GLboolean _glewStrSame3 (GLubyte** a, GLuint* na, const GLubyte* b, GLuint nb)
+-{
+-  if(*na >= nb)
+-  {
+-    GLuint i=0;
+-    while (i < nb && (*a)+i != NULL && b+i != NULL && (*a)[i] == b[i]) i++;
+-    if (i == nb && (*na == nb || (*a)[i] == ' ' || (*a)[i] == '\n' || (*a)[i] == '\r' || (*a)[i] == '\t'))
+-    {
+-      *a = *a + nb;
+-      *na = *na - nb;
+-      return GL_TRUE;
+-    }
+-  }
+-  return GL_FALSE;
+-}
+-
+-#if !defined(_WIN32) || !defined(GLEW_MX)
+-
+-PFNGLCOPYTEXSUBIMAGE3DPROC __glewCopyTexSubImage3D = NULL;
+-PFNGLDRAWRANGEELEMENTSPROC __glewDrawRangeElements = NULL;
+-PFNGLTEXIMAGE3DPROC __glewTexImage3D = NULL;
+-PFNGLTEXSUBIMAGE3DPROC __glewTexSubImage3D = NULL;
+-
+-PFNGLACTIVETEXTUREPROC __glewActiveTexture = NULL;
+-PFNGLCLIENTACTIVETEXTUREPROC __glewClientActiveTexture = NULL;
+-PFNGLCOMPRESSEDTEXIMAGE1DPROC __glewCompressedTexImage1D = NULL;
+-PFNGLCOMPRESSEDTEXIMAGE2DPROC __glewCompressedTexImage2D = NULL;
+-PFNGLCOMPRESSEDTEXIMAGE3DPROC __glewCompressedTexImage3D = NULL;
+-PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glewCompressedTexSubImage1D = NULL;
+-PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glewCompressedTexSubImage2D = NULL;
+-PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glewCompressedTexSubImage3D = NULL;
+-PFNGLGETCOMPRESSEDTEXIMAGEPROC __glewGetCompressedTexImage = NULL;
+-PFNGLLOADTRANSPOSEMATRIXDPROC __glewLoadTransposeMatrixd = NULL;
+-PFNGLLOADTRANSPOSEMATRIXFPROC __glewLoadTransposeMatrixf = NULL;
+-PFNGLMULTTRANSPOSEMATRIXDPROC __glewMultTransposeMatrixd = NULL;
+-PFNGLMULTTRANSPOSEMATRIXFPROC __glewMultTransposeMatrixf = NULL;
+-PFNGLMULTITEXCOORD1DPROC __glewMultiTexCoord1d = NULL;
+-PFNGLMULTITEXCOORD1DVPROC __glewMultiTexCoord1dv = NULL;
+-PFNGLMULTITEXCOORD1FPROC __glewMultiTexCoord1f = NULL;
+-PFNGLMULTITEXCOORD1FVPROC __glewMultiTexCoord1fv = NULL;
+-PFNGLMULTITEXCOORD1IPROC __glewMultiTexCoord1i = NULL;
+-PFNGLMULTITEXCOORD1IVPROC __glewMultiTexCoord1iv = NULL;
+-PFNGLMULTITEXCOORD1SPROC __glewMultiTexCoord1s = NULL;
+-PFNGLMULTITEXCOORD1SVPROC __glewMultiTexCoord1sv = NULL;
+-PFNGLMULTITEXCOORD2DPROC __glewMultiTexCoord2d = NULL;
+-PFNGLMULTITEXCOORD2DVPROC __glewMultiTexCoord2dv = NULL;
+-PFNGLMULTITEXCOORD2FPROC __glewMultiTexCoord2f = NULL;
+-PFNGLMULTITEXCOORD2FVPROC __glewMultiTexCoord2fv = NULL;
+-PFNGLMULTITEXCOORD2IPROC __glewMultiTexCoord2i = NULL;
+-PFNGLMULTITEXCOORD2IVPROC __glewMultiTexCoord2iv = NULL;
+-PFNGLMULTITEXCOORD2SPROC __glewMultiTexCoord2s = NULL;
+-PFNGLMULTITEXCOORD2SVPROC __glewMultiTexCoord2sv = NULL;
+-PFNGLMULTITEXCOORD3DPROC __glewMultiTexCoord3d = NULL;
+-PFNGLMULTITEXCOORD3DVPROC __glewMultiTexCoord3dv = NULL;
+-PFNGLMULTITEXCOORD3FPROC __glewMultiTexCoord3f = NULL;
+-PFNGLMULTITEXCOORD3FVPROC __glewMultiTexCoord3fv = NULL;
+-PFNGLMULTITEXCOORD3IPROC __glewMultiTexCoord3i = NULL;
+-PFNGLMULTITEXCOORD3IVPROC __glewMultiTexCoord3iv = NULL;
+-PFNGLMULTITEXCOORD3SPROC __glewMultiTexCoord3s = NULL;
+-PFNGLMULTITEXCOORD3SVPROC __glewMultiTexCoord3sv = NULL;
+-PFNGLMULTITEXCOORD4DPROC __glewMultiTexCoord4d = NULL;
+-PFNGLMULTITEXCOORD4DVPROC __glewMultiTexCoord4dv = NULL;
+-PFNGLMULTITEXCOORD4FPROC __glewMultiTexCoord4f = NULL;
+-PFNGLMULTITEXCOORD4FVPROC __glewMultiTexCoord4fv = NULL;
+-PFNGLMULTITEXCOORD4IPROC __glewMultiTexCoord4i = NULL;
+-PFNGLMULTITEXCOORD4IVPROC __glewMultiTexCoord4iv = NULL;
+-PFNGLMULTITEXCOORD4SPROC __glewMultiTexCoord4s = NULL;
+-PFNGLMULTITEXCOORD4SVPROC __glewMultiTexCoord4sv = NULL;
+-PFNGLSAMPLECOVERAGEPROC __glewSampleCoverage = NULL;
+-
+-PFNGLBLENDCOLORPROC __glewBlendColor = NULL;
+-PFNGLBLENDEQUATIONPROC __glewBlendEquation = NULL;
+-PFNGLBLENDFUNCSEPARATEPROC __glewBlendFuncSeparate = NULL;
+-PFNGLFOGCOORDPOINTERPROC __glewFogCoordPointer = NULL;
+-PFNGLFOGCOORDDPROC __glewFogCoordd = NULL;
+-PFNGLFOGCOORDDVPROC __glewFogCoorddv = NULL;
+-PFNGLFOGCOORDFPROC __glewFogCoordf = NULL;
+-PFNGLFOGCOORDFVPROC __glewFogCoordfv = NULL;
+-PFNGLMULTIDRAWARRAYSPROC __glewMultiDrawArrays = NULL;
+-PFNGLMULTIDRAWELEMENTSPROC __glewMultiDrawElements = NULL;
+-PFNGLPOINTPARAMETERFPROC __glewPointParameterf = NULL;
+-PFNGLPOINTPARAMETERFVPROC __glewPointParameterfv = NULL;
+-PFNGLPOINTPARAMETERIPROC __glewPointParameteri = NULL;
+-PFNGLPOINTPARAMETERIVPROC __glewPointParameteriv = NULL;
+-PFNGLSECONDARYCOLOR3BPROC __glewSecondaryColor3b = NULL;
+-PFNGLSECONDARYCOLOR3BVPROC __glewSecondaryColor3bv = NULL;
+-PFNGLSECONDARYCOLOR3DPROC __glewSecondaryColor3d = NULL;
+-PFNGLSECONDARYCOLOR3DVPROC __glewSecondaryColor3dv = NULL;
+-PFNGLSECONDARYCOLOR3FPROC __glewSecondaryColor3f = NULL;
+-PFNGLSECONDARYCOLOR3FVPROC __glewSecondaryColor3fv = NULL;
+-PFNGLSECONDARYCOLOR3IPROC __glewSecondaryColor3i = NULL;
+-PFNGLSECONDARYCOLOR3IVPROC __glewSecondaryColor3iv = NULL;
+-PFNGLSECONDARYCOLOR3SPROC __glewSecondaryColor3s = NULL;
+-PFNGLSECONDARYCOLOR3SVPROC __glewSecondaryColor3sv = NULL;
+-PFNGLSECONDARYCOLOR3UBPROC __glewSecondaryColor3ub = NULL;
+-PFNGLSECONDARYCOLOR3UBVPROC __glewSecondaryColor3ubv = NULL;
+-PFNGLSECONDARYCOLOR3UIPROC __glewSecondaryColor3ui = NULL;
+-PFNGLSECONDARYCOLOR3UIVPROC __glewSecondaryColor3uiv = NULL;
+-PFNGLSECONDARYCOLOR3USPROC __glewSecondaryColor3us = NULL;
+-PFNGLSECONDARYCOLOR3USVPROC __glewSecondaryColor3usv = NULL;
+-PFNGLSECONDARYCOLORPOINTERPROC __glewSecondaryColorPointer = NULL;
+-PFNGLWINDOWPOS2DPROC __glewWindowPos2d = NULL;
+-PFNGLWINDOWPOS2DVPROC __glewWindowPos2dv = NULL;
+-PFNGLWINDOWPOS2FPROC __glewWindowPos2f = NULL;
+-PFNGLWINDOWPOS2FVPROC __glewWindowPos2fv = NULL;
+-PFNGLWINDOWPOS2IPROC __glewWindowPos2i = NULL;
+-PFNGLWINDOWPOS2IVPROC __glewWindowPos2iv = NULL;
+-PFNGLWINDOWPOS2SPROC __glewWindowPos2s = NULL;
+-PFNGLWINDOWPOS2SVPROC __glewWindowPos2sv = NULL;
+-PFNGLWINDOWPOS3DPROC __glewWindowPos3d = NULL;
+-PFNGLWINDOWPOS3DVPROC __glewWindowPos3dv = NULL;
+-PFNGLWINDOWPOS3FPROC __glewWindowPos3f = NULL;
+-PFNGLWINDOWPOS3FVPROC __glewWindowPos3fv = NULL;
+-PFNGLWINDOWPOS3IPROC __glewWindowPos3i = NULL;
+-PFNGLWINDOWPOS3IVPROC __glewWindowPos3iv = NULL;
+-PFNGLWINDOWPOS3SPROC __glewWindowPos3s = NULL;
+-PFNGLWINDOWPOS3SVPROC __glewWindowPos3sv = NULL;
+-
+-PFNGLBEGINQUERYPROC __glewBeginQuery = NULL;
+-PFNGLBINDBUFFERPROC __glewBindBuffer = NULL;
+-PFNGLBUFFERDATAPROC __glewBufferData = NULL;
+-PFNGLBUFFERSUBDATAPROC __glewBufferSubData = NULL;
+-PFNGLDELETEBUFFERSPROC __glewDeleteBuffers = NULL;
+-PFNGLDELETEQUERIESPROC __glewDeleteQueries = NULL;
+-PFNGLENDQUERYPROC __glewEndQuery = NULL;
+-PFNGLGENBUFFERSPROC __glewGenBuffers = NULL;
+-PFNGLGENQUERIESPROC __glewGenQueries = NULL;
+-PFNGLGETBUFFERPARAMETERIVPROC __glewGetBufferParameteriv = NULL;
+-PFNGLGETBUFFERPOINTERVPROC __glewGetBufferPointerv = NULL;
+-PFNGLGETBUFFERSUBDATAPROC __glewGetBufferSubData = NULL;
+-PFNGLGETQUERYOBJECTIVPROC __glewGetQueryObjectiv = NULL;
+-PFNGLGETQUERYOBJECTUIVPROC __glewGetQueryObjectuiv = NULL;
+-PFNGLGETQUERYIVPROC __glewGetQueryiv = NULL;
+-PFNGLISBUFFERPROC __glewIsBuffer = NULL;
+-PFNGLISQUERYPROC __glewIsQuery = NULL;
+-PFNGLMAPBUFFERPROC __glewMapBuffer = NULL;
+-PFNGLUNMAPBUFFERPROC __glewUnmapBuffer = NULL;
+-
+-PFNGLATTACHSHADERPROC __glewAttachShader = NULL;
+-PFNGLBINDATTRIBLOCATIONPROC __glewBindAttribLocation = NULL;
+-PFNGLBLENDEQUATIONSEPARATEPROC __glewBlendEquationSeparate = NULL;
+-PFNGLCOMPILESHADERPROC __glewCompileShader = NULL;
+-PFNGLCREATEPROGRAMPROC __glewCreateProgram = NULL;
+-PFNGLCREATESHADERPROC __glewCreateShader = NULL;
+-PFNGLDELETEPROGRAMPROC __glewDeleteProgram = NULL;
+-PFNGLDELETESHADERPROC __glewDeleteShader = NULL;
+-PFNGLDETACHSHADERPROC __glewDetachShader = NULL;
+-PFNGLDISABLEVERTEXATTRIBARRAYPROC __glewDisableVertexAttribArray = NULL;
+-PFNGLDRAWBUFFERSPROC __glewDrawBuffers = NULL;
+-PFNGLENABLEVERTEXATTRIBARRAYPROC __glewEnableVertexAttribArray = NULL;
+-PFNGLGETACTIVEATTRIBPROC __glewGetActiveAttrib = NULL;
+-PFNGLGETACTIVEUNIFORMPROC __glewGetActiveUniform = NULL;
+-PFNGLGETATTACHEDSHADERSPROC __glewGetAttachedShaders = NULL;
+-PFNGLGETATTRIBLOCATIONPROC __glewGetAttribLocation = NULL;
+-PFNGLGETPROGRAMINFOLOGPROC __glewGetProgramInfoLog = NULL;
+-PFNGLGETPROGRAMIVPROC __glewGetProgramiv = NULL;
+-PFNGLGETSHADERINFOLOGPROC __glewGetShaderInfoLog = NULL;
+-PFNGLGETSHADERSOURCEPROC __glewGetShaderSource = NULL;
+-PFNGLGETSHADERIVPROC __glewGetShaderiv = NULL;
+-PFNGLGETUNIFORMLOCATIONPROC __glewGetUniformLocation = NULL;
+-PFNGLGETUNIFORMFVPROC __glewGetUniformfv = NULL;
+-PFNGLGETUNIFORMIVPROC __glewGetUniformiv = NULL;
+-PFNGLGETVERTEXATTRIBPOINTERVPROC __glewGetVertexAttribPointerv = NULL;
+-PFNGLGETVERTEXATTRIBDVPROC __glewGetVertexAttribdv = NULL;
+-PFNGLGETVERTEXATTRIBFVPROC __glewGetVertexAttribfv = NULL;
+-PFNGLGETVERTEXATTRIBIVPROC __glewGetVertexAttribiv = NULL;
+-PFNGLISPROGRAMPROC __glewIsProgram = NULL;
+-PFNGLISSHADERPROC __glewIsShader = NULL;
+-PFNGLLINKPROGRAMPROC __glewLinkProgram = NULL;
+-PFNGLSHADERSOURCEPROC __glewShaderSource = NULL;
+-PFNGLSTENCILFUNCSEPARATEPROC __glewStencilFuncSeparate = NULL;
+-PFNGLSTENCILMASKSEPARATEPROC __glewStencilMaskSeparate = NULL;
+-PFNGLSTENCILOPSEPARATEPROC __glewStencilOpSeparate = NULL;
+-PFNGLUNIFORM1FPROC __glewUniform1f = NULL;
+-PFNGLUNIFORM1FVPROC __glewUniform1fv = NULL;
+-PFNGLUNIFORM1IPROC __glewUniform1i = NULL;
+-PFNGLUNIFORM1IVPROC __glewUniform1iv = NULL;
+-PFNGLUNIFORM2FPROC __glewUniform2f = NULL;
+-PFNGLUNIFORM2FVPROC __glewUniform2fv = NULL;
+-PFNGLUNIFORM2IPROC __glewUniform2i = NULL;
+-PFNGLUNIFORM2IVPROC __glewUniform2iv = NULL;
+-PFNGLUNIFORM3FPROC __glewUniform3f = NULL;
+-PFNGLUNIFORM3FVPROC __glewUniform3fv = NULL;
+-PFNGLUNIFORM3IPROC __glewUniform3i = NULL;
+-PFNGLUNIFORM3IVPROC __glewUniform3iv = NULL;
+-PFNGLUNIFORM4FPROC __glewUniform4f = NULL;
+-PFNGLUNIFORM4FVPROC __glewUniform4fv = NULL;
+-PFNGLUNIFORM4IPROC __glewUniform4i = NULL;
+-PFNGLUNIFORM4IVPROC __glewUniform4iv = NULL;
+-PFNGLUNIFORMMATRIX2FVPROC __glewUniformMatrix2fv = NULL;
+-PFNGLUNIFORMMATRIX3FVPROC __glewUniformMatrix3fv = NULL;
+-PFNGLUNIFORMMATRIX4FVPROC __glewUniformMatrix4fv = NULL;
+-PFNGLUSEPROGRAMPROC __glewUseProgram = NULL;
+-PFNGLVALIDATEPROGRAMPROC __glewValidateProgram = NULL;
+-PFNGLVERTEXATTRIB1DPROC __glewVertexAttrib1d = NULL;
+-PFNGLVERTEXATTRIB1DVPROC __glewVertexAttrib1dv = NULL;
+-PFNGLVERTEXATTRIB1FPROC __glewVertexAttrib1f = NULL;
+-PFNGLVERTEXATTRIB1FVPROC __glewVertexAttrib1fv = NULL;
+-PFNGLVERTEXATTRIB1SPROC __glewVertexAttrib1s = NULL;
+-PFNGLVERTEXATTRIB1SVPROC __glewVertexAttrib1sv = NULL;
+-PFNGLVERTEXATTRIB2DPROC __glewVertexAttrib2d = NULL;
+-PFNGLVERTEXATTRIB2DVPROC __glewVertexAttrib2dv = NULL;
+-PFNGLVERTEXATTRIB2FPROC __glewVertexAttrib2f = NULL;
+-PFNGLVERTEXATTRIB2FVPROC __glewVertexAttrib2fv = NULL;
+-PFNGLVERTEXATTRIB2SPROC __glewVertexAttrib2s = NULL;
+-PFNGLVERTEXATTRIB2SVPROC __glewVertexAttrib2sv = NULL;
+-PFNGLVERTEXATTRIB3DPROC __glewVertexAttrib3d = NULL;
+-PFNGLVERTEXATTRIB3DVPROC __glewVertexAttrib3dv = NULL;
+-PFNGLVERTEXATTRIB3FPROC __glewVertexAttrib3f = NULL;
+-PFNGLVERTEXATTRIB3FVPROC __glewVertexAttrib3fv = NULL;
+-PFNGLVERTEXATTRIB3SPROC __glewVertexAttrib3s = NULL;
+-PFNGLVERTEXATTRIB3SVPROC __glewVertexAttrib3sv = NULL;
+-PFNGLVERTEXATTRIB4NBVPROC __glewVertexAttrib4Nbv = NULL;
+-PFNGLVERTEXATTRIB4NIVPROC __glewVertexAttrib4Niv = NULL;
+-PFNGLVERTEXATTRIB4NSVPROC __glewVertexAttrib4Nsv = NULL;
+-PFNGLVERTEXATTRIB4NUBPROC __glewVertexAttrib4Nub = NULL;
+-PFNGLVERTEXATTRIB4NUBVPROC __glewVertexAttrib4Nubv = NULL;
+-PFNGLVERTEXATTRIB4NUIVPROC __glewVertexAttrib4Nuiv = NULL;
+-PFNGLVERTEXATTRIB4NUSVPROC __glewVertexAttrib4Nusv = NULL;
+-PFNGLVERTEXATTRIB4BVPROC __glewVertexAttrib4bv = NULL;
+-PFNGLVERTEXATTRIB4DPROC __glewVertexAttrib4d = NULL;
+-PFNGLVERTEXATTRIB4DVPROC __glewVertexAttrib4dv = NULL;
+-PFNGLVERTEXATTRIB4FPROC __glewVertexAttrib4f = NULL;
+-PFNGLVERTEXATTRIB4FVPROC __glewVertexAttrib4fv = NULL;
+-PFNGLVERTEXATTRIB4IVPROC __glewVertexAttrib4iv = NULL;
+-PFNGLVERTEXATTRIB4SPROC __glewVertexAttrib4s = NULL;
+-PFNGLVERTEXATTRIB4SVPROC __glewVertexAttrib4sv = NULL;
+-PFNGLVERTEXATTRIB4UBVPROC __glewVertexAttrib4ubv = NULL;
+-PFNGLVERTEXATTRIB4UIVPROC __glewVertexAttrib4uiv = NULL;
+-PFNGLVERTEXATTRIB4USVPROC __glewVertexAttrib4usv = NULL;
+-PFNGLVERTEXATTRIBPOINTERPROC __glewVertexAttribPointer = NULL;
+-
+-PFNGLUNIFORMMATRIX2X3FVPROC __glewUniformMatrix2x3fv = NULL;
+-PFNGLUNIFORMMATRIX2X4FVPROC __glewUniformMatrix2x4fv = NULL;
+-PFNGLUNIFORMMATRIX3X2FVPROC __glewUniformMatrix3x2fv = NULL;
+-PFNGLUNIFORMMATRIX3X4FVPROC __glewUniformMatrix3x4fv = NULL;
+-PFNGLUNIFORMMATRIX4X2FVPROC __glewUniformMatrix4x2fv = NULL;
+-PFNGLUNIFORMMATRIX4X3FVPROC __glewUniformMatrix4x3fv = NULL;
+-
+-PFNGLTBUFFERMASK3DFXPROC __glewTbufferMask3DFX = NULL;
+-
+-PFNGLDRAWELEMENTARRAYAPPLEPROC __glewDrawElementArrayAPPLE = NULL;
+-PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glewDrawRangeElementArrayAPPLE = NULL;
+-PFNGLELEMENTPOINTERAPPLEPROC __glewElementPointerAPPLE = NULL;
+-PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glewMultiDrawElementArrayAPPLE = NULL;
+-PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glewMultiDrawRangeElementArrayAPPLE = NULL;
+-
+-PFNGLDELETEFENCESAPPLEPROC __glewDeleteFencesAPPLE = NULL;
+-PFNGLFINISHFENCEAPPLEPROC __glewFinishFenceAPPLE = NULL;
+-PFNGLFINISHOBJECTAPPLEPROC __glewFinishObjectAPPLE = NULL;
+-PFNGLGENFENCESAPPLEPROC __glewGenFencesAPPLE = NULL;
+-PFNGLISFENCEAPPLEPROC __glewIsFenceAPPLE = NULL;
+-PFNGLSETFENCEAPPLEPROC __glewSetFenceAPPLE = NULL;
+-PFNGLTESTFENCEAPPLEPROC __glewTestFenceAPPLE = NULL;
+-PFNGLTESTOBJECTAPPLEPROC __glewTestObjectAPPLE = NULL;
+-
+-PFNGLBUFFERPARAMETERIAPPLEPROC __glewBufferParameteriAPPLE = NULL;
+-PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glewFlushMappedBufferRangeAPPLE = NULL;
+-
+-PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glewGetTexParameterPointervAPPLE = NULL;
+-PFNGLTEXTURERANGEAPPLEPROC __glewTextureRangeAPPLE = NULL;
+-
+-PFNGLBINDVERTEXARRAYAPPLEPROC __glewBindVertexArrayAPPLE = NULL;
+-PFNGLDELETEVERTEXARRAYSAPPLEPROC __glewDeleteVertexArraysAPPLE = NULL;
+-PFNGLGENVERTEXARRAYSAPPLEPROC __glewGenVertexArraysAPPLE = NULL;
+-PFNGLISVERTEXARRAYAPPLEPROC __glewIsVertexArrayAPPLE = NULL;
+-
+-PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glewFlushVertexArrayRangeAPPLE = NULL;
+-PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glewVertexArrayParameteriAPPLE = NULL;
+-PFNGLVERTEXARRAYRANGEAPPLEPROC __glewVertexArrayRangeAPPLE = NULL;
+-
+-PFNGLCLAMPCOLORARBPROC __glewClampColorARB = NULL;
+-
+-PFNGLDRAWBUFFERSARBPROC __glewDrawBuffersARB = NULL;
+-
+-PFNGLCOLORSUBTABLEPROC __glewColorSubTable = NULL;
+-PFNGLCOLORTABLEPROC __glewColorTable = NULL;
+-PFNGLCOLORTABLEPARAMETERFVPROC __glewColorTableParameterfv = NULL;
+-PFNGLCOLORTABLEPARAMETERIVPROC __glewColorTableParameteriv = NULL;
+-PFNGLCONVOLUTIONFILTER1DPROC __glewConvolutionFilter1D = NULL;
+-PFNGLCONVOLUTIONFILTER2DPROC __glewConvolutionFilter2D = NULL;
+-PFNGLCONVOLUTIONPARAMETERFPROC __glewConvolutionParameterf = NULL;
+-PFNGLCONVOLUTIONPARAMETERFVPROC __glewConvolutionParameterfv = NULL;
+-PFNGLCONVOLUTIONPARAMETERIPROC __glewConvolutionParameteri = NULL;
+-PFNGLCONVOLUTIONPARAMETERIVPROC __glewConvolutionParameteriv = NULL;
+-PFNGLCOPYCOLORSUBTABLEPROC __glewCopyColorSubTable = NULL;
+-PFNGLCOPYCOLORTABLEPROC __glewCopyColorTable = NULL;
+-PFNGLCOPYCONVOLUTIONFILTER1DPROC __glewCopyConvolutionFilter1D = NULL;
+-PFNGLCOPYCONVOLUTIONFILTER2DPROC __glewCopyConvolutionFilter2D = NULL;
+-PFNGLGETCOLORTABLEPROC __glewGetColorTable = NULL;
+-PFNGLGETCOLORTABLEPARAMETERFVPROC __glewGetColorTableParameterfv = NULL;
+-PFNGLGETCOLORTABLEPARAMETERIVPROC __glewGetColorTableParameteriv = NULL;
+-PFNGLGETCONVOLUTIONFILTERPROC __glewGetConvolutionFilter = NULL;
+-PFNGLGETCONVOLUTIONPARAMETERFVPROC __glewGetConvolutionParameterfv = NULL;
+-PFNGLGETCONVOLUTIONPARAMETERIVPROC __glewGetConvolutionParameteriv = NULL;
+-PFNGLGETHISTOGRAMPROC __glewGetHistogram = NULL;
+-PFNGLGETHISTOGRAMPARAMETERFVPROC __glewGetHistogramParameterfv = NULL;
+-PFNGLGETHISTOGRAMPARAMETERIVPROC __glewGetHistogramParameteriv = NULL;
+-PFNGLGETMINMAXPROC __glewGetMinmax = NULL;
+-PFNGLGETMINMAXPARAMETERFVPROC __glewGetMinmaxParameterfv = NULL;
+-PFNGLGETMINMAXPARAMETERIVPROC __glewGetMinmaxParameteriv = NULL;
+-PFNGLGETSEPARABLEFILTERPROC __glewGetSeparableFilter = NULL;
+-PFNGLHISTOGRAMPROC __glewHistogram = NULL;
+-PFNGLMINMAXPROC __glewMinmax = NULL;
+-PFNGLRESETHISTOGRAMPROC __glewResetHistogram = NULL;
+-PFNGLRESETMINMAXPROC __glewResetMinmax = NULL;
+-PFNGLSEPARABLEFILTER2DPROC __glewSeparableFilter2D = NULL;
+-
+-PFNGLCURRENTPALETTEMATRIXARBPROC __glewCurrentPaletteMatrixARB = NULL;
+-PFNGLMATRIXINDEXPOINTERARBPROC __glewMatrixIndexPointerARB = NULL;
+-PFNGLMATRIXINDEXUBVARBPROC __glewMatrixIndexubvARB = NULL;
+-PFNGLMATRIXINDEXUIVARBPROC __glewMatrixIndexuivARB = NULL;
+-PFNGLMATRIXINDEXUSVARBPROC __glewMatrixIndexusvARB = NULL;
+-
+-PFNGLSAMPLECOVERAGEARBPROC __glewSampleCoverageARB = NULL;
+-
+-PFNGLACTIVETEXTUREARBPROC __glewActiveTextureARB = NULL;
+-PFNGLCLIENTACTIVETEXTUREARBPROC __glewClientActiveTextureARB = NULL;
+-PFNGLMULTITEXCOORD1DARBPROC __glewMultiTexCoord1dARB = NULL;
+-PFNGLMULTITEXCOORD1DVARBPROC __glewMultiTexCoord1dvARB = NULL;
+-PFNGLMULTITEXCOORD1FARBPROC __glewMultiTexCoord1fARB = NULL;
+-PFNGLMULTITEXCOORD1FVARBPROC __glewMultiTexCoord1fvARB = NULL;
+-PFNGLMULTITEXCOORD1IARBPROC __glewMultiTexCoord1iARB = NULL;
+-PFNGLMULTITEXCOORD1IVARBPROC __glewMultiTexCoord1ivARB = NULL;
+-PFNGLMULTITEXCOORD1SARBPROC __glewMultiTexCoord1sARB = NULL;
+-PFNGLMULTITEXCOORD1SVARBPROC __glewMultiTexCoord1svARB = NULL;
+-PFNGLMULTITEXCOORD2DARBPROC __glewMultiTexCoord2dARB = NULL;
+-PFNGLMULTITEXCOORD2DVARBPROC __glewMultiTexCoord2dvARB = NULL;
+-PFNGLMULTITEXCOORD2FARBPROC __glewMultiTexCoord2fARB = NULL;
+-PFNGLMULTITEXCOORD2FVARBPROC __glewMultiTexCoord2fvARB = NULL;
+-PFNGLMULTITEXCOORD2IARBPROC __glewMultiTexCoord2iARB = NULL;
+-PFNGLMULTITEXCOORD2IVARBPROC __glewMultiTexCoord2ivARB = NULL;
+-PFNGLMULTITEXCOORD2SARBPROC __glewMultiTexCoord2sARB = NULL;
+-PFNGLMULTITEXCOORD2SVARBPROC __glewMultiTexCoord2svARB = NULL;
+-PFNGLMULTITEXCOORD3DARBPROC __glewMultiTexCoord3dARB = NULL;
+-PFNGLMULTITEXCOORD3DVARBPROC __glewMultiTexCoord3dvARB = NULL;
+-PFNGLMULTITEXCOORD3FARBPROC __glewMultiTexCoord3fARB = NULL;
+-PFNGLMULTITEXCOORD3FVARBPROC __glewMultiTexCoord3fvARB = NULL;
+-PFNGLMULTITEXCOORD3IARBPROC __glewMultiTexCoord3iARB = NULL;
+-PFNGLMULTITEXCOORD3IVARBPROC __glewMultiTexCoord3ivARB = NULL;
+-PFNGLMULTITEXCOORD3SARBPROC __glewMultiTexCoord3sARB = NULL;
+-PFNGLMULTITEXCOORD3SVARBPROC __glewMultiTexCoord3svARB = NULL;
+-PFNGLMULTITEXCOORD4DARBPROC __glewMultiTexCoord4dARB = NULL;
+-PFNGLMULTITEXCOORD4DVARBPROC __glewMultiTexCoord4dvARB = NULL;
+-PFNGLMULTITEXCOORD4FARBPROC __glewMultiTexCoord4fARB = NULL;
+-PFNGLMULTITEXCOORD4FVARBPROC __glewMultiTexCoord4fvARB = NULL;
+-PFNGLMULTITEXCOORD4IARBPROC __glewMultiTexCoord4iARB = NULL;
+-PFNGLMULTITEXCOORD4IVARBPROC __glewMultiTexCoord4ivARB = NULL;
+-PFNGLMULTITEXCOORD4SARBPROC __glewMultiTexCoord4sARB = NULL;
+-PFNGLMULTITEXCOORD4SVARBPROC __glewMultiTexCoord4svARB = NULL;
+-
+-PFNGLBEGINQUERYARBPROC __glewBeginQueryARB = NULL;
+-PFNGLDELETEQUERIESARBPROC __glewDeleteQueriesARB = NULL;
+-PFNGLENDQUERYARBPROC __glewEndQueryARB = NULL;
+-PFNGLGENQUERIESARBPROC __glewGenQueriesARB = NULL;
+-PFNGLGETQUERYOBJECTIVARBPROC __glewGetQueryObjectivARB = NULL;
+-PFNGLGETQUERYOBJECTUIVARBPROC __glewGetQueryObjectuivARB = NULL;
+-PFNGLGETQUERYIVARBPROC __glewGetQueryivARB = NULL;
+-PFNGLISQUERYARBPROC __glewIsQueryARB = NULL;
+-
+-PFNGLPOINTPARAMETERFARBPROC __glewPointParameterfARB = NULL;
+-PFNGLPOINTPARAMETERFVARBPROC __glewPointParameterfvARB = NULL;
+-
+-PFNGLATTACHOBJECTARBPROC __glewAttachObjectARB = NULL;
+-PFNGLCOMPILESHADERARBPROC __glewCompileShaderARB = NULL;
+-PFNGLCREATEPROGRAMOBJECTARBPROC __glewCreateProgramObjectARB = NULL;
+-PFNGLCREATESHADEROBJECTARBPROC __glewCreateShaderObjectARB = NULL;
+-PFNGLDELETEOBJECTARBPROC __glewDeleteObjectARB = NULL;
+-PFNGLDETACHOBJECTARBPROC __glewDetachObjectARB = NULL;
+-PFNGLGETACTIVEUNIFORMARBPROC __glewGetActiveUniformARB = NULL;
+-PFNGLGETATTACHEDOBJECTSARBPROC __glewGetAttachedObjectsARB = NULL;
+-PFNGLGETHANDLEARBPROC __glewGetHandleARB = NULL;
+-PFNGLGETINFOLOGARBPROC __glewGetInfoLogARB = NULL;
+-PFNGLGETOBJECTPARAMETERFVARBPROC __glewGetObjectParameterfvARB = NULL;
+-PFNGLGETOBJECTPARAMETERIVARBPROC __glewGetObjectParameterivARB = NULL;
+-PFNGLGETSHADERSOURCEARBPROC __glewGetShaderSourceARB = NULL;
+-PFNGLGETUNIFORMLOCATIONARBPROC __glewGetUniformLocationARB = NULL;
+-PFNGLGETUNIFORMFVARBPROC __glewGetUniformfvARB = NULL;
+-PFNGLGETUNIFORMIVARBPROC __glewGetUniformivARB = NULL;
+-PFNGLLINKPROGRAMARBPROC __glewLinkProgramARB = NULL;
+-PFNGLSHADERSOURCEARBPROC __glewShaderSourceARB = NULL;
+-PFNGLUNIFORM1FARBPROC __glewUniform1fARB = NULL;
+-PFNGLUNIFORM1FVARBPROC __glewUniform1fvARB = NULL;
+-PFNGLUNIFORM1IARBPROC __glewUniform1iARB = NULL;
+-PFNGLUNIFORM1IVARBPROC __glewUniform1ivARB = NULL;
+-PFNGLUNIFORM2FARBPROC __glewUniform2fARB = NULL;
+-PFNGLUNIFORM2FVARBPROC __glewUniform2fvARB = NULL;
+-PFNGLUNIFORM2IARBPROC __glewUniform2iARB = NULL;
+-PFNGLUNIFORM2IVARBPROC __glewUniform2ivARB = NULL;
+-PFNGLUNIFORM3FARBPROC __glewUniform3fARB = NULL;
+-PFNGLUNIFORM3FVARBPROC __glewUniform3fvARB = NULL;
+-PFNGLUNIFORM3IARBPROC __glewUniform3iARB = NULL;
+-PFNGLUNIFORM3IVARBPROC __glewUniform3ivARB = NULL;
+-PFNGLUNIFORM4FARBPROC __glewUniform4fARB = NULL;
+-PFNGLUNIFORM4FVARBPROC __glewUniform4fvARB = NULL;
+-PFNGLUNIFORM4IARBPROC __glewUniform4iARB = NULL;
+-PFNGLUNIFORM4IVARBPROC __glewUniform4ivARB = NULL;
+-PFNGLUNIFORMMATRIX2FVARBPROC __glewUniformMatrix2fvARB = NULL;
+-PFNGLUNIFORMMATRIX3FVARBPROC __glewUniformMatrix3fvARB = NULL;
+-PFNGLUNIFORMMATRIX4FVARBPROC __glewUniformMatrix4fvARB = NULL;
+-PFNGLUSEPROGRAMOBJECTARBPROC __glewUseProgramObjectARB = NULL;
+-PFNGLVALIDATEPROGRAMARBPROC __glewValidateProgramARB = NULL;
+-
+-PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glewCompressedTexImage1DARB = NULL;
+-PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glewCompressedTexImage2DARB = NULL;
+-PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glewCompressedTexImage3DARB = NULL;
+-PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glewCompressedTexSubImage1DARB = NULL;
+-PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glewCompressedTexSubImage2DARB = NULL;
+-PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glewCompressedTexSubImage3DARB = NULL;
+-PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glewGetCompressedTexImageARB = NULL;
+-
+-PFNGLLOADTRANSPOSEMATRIXDARBPROC __glewLoadTransposeMatrixdARB = NULL;
+-PFNGLLOADTRANSPOSEMATRIXFARBPROC __glewLoadTransposeMatrixfARB = NULL;
+-PFNGLMULTTRANSPOSEMATRIXDARBPROC __glewMultTransposeMatrixdARB = NULL;
+-PFNGLMULTTRANSPOSEMATRIXFARBPROC __glewMultTransposeMatrixfARB = NULL;
+-
+-PFNGLVERTEXBLENDARBPROC __glewVertexBlendARB = NULL;
+-PFNGLWEIGHTPOINTERARBPROC __glewWeightPointerARB = NULL;
+-PFNGLWEIGHTBVARBPROC __glewWeightbvARB = NULL;
+-PFNGLWEIGHTDVARBPROC __glewWeightdvARB = NULL;
+-PFNGLWEIGHTFVARBPROC __glewWeightfvARB = NULL;
+-PFNGLWEIGHTIVARBPROC __glewWeightivARB = NULL;
+-PFNGLWEIGHTSVARBPROC __glewWeightsvARB = NULL;
+-PFNGLWEIGHTUBVARBPROC __glewWeightubvARB = NULL;
+-PFNGLWEIGHTUIVARBPROC __glewWeightuivARB = NULL;
+-PFNGLWEIGHTUSVARBPROC __glewWeightusvARB = NULL;
+-
+-PFNGLBINDBUFFERARBPROC __glewBindBufferARB = NULL;
+-PFNGLBUFFERDATAARBPROC __glewBufferDataARB = NULL;
+-PFNGLBUFFERSUBDATAARBPROC __glewBufferSubDataARB = NULL;
+-PFNGLDELETEBUFFERSARBPROC __glewDeleteBuffersARB = NULL;
+-PFNGLGENBUFFERSARBPROC __glewGenBuffersARB = NULL;
+-PFNGLGETBUFFERPARAMETERIVARBPROC __glewGetBufferParameterivARB = NULL;
+-PFNGLGETBUFFERPOINTERVARBPROC __glewGetBufferPointervARB = NULL;
+-PFNGLGETBUFFERSUBDATAARBPROC __glewGetBufferSubDataARB = NULL;
+-PFNGLISBUFFERARBPROC __glewIsBufferARB = NULL;
+-PFNGLMAPBUFFERARBPROC __glewMapBufferARB = NULL;
+-PFNGLUNMAPBUFFERARBPROC __glewUnmapBufferARB = NULL;
+-
+-PFNGLBINDPROGRAMARBPROC __glewBindProgramARB = NULL;
+-PFNGLDELETEPROGRAMSARBPROC __glewDeleteProgramsARB = NULL;
+-PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glewDisableVertexAttribArrayARB = NULL;
+-PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glewEnableVertexAttribArrayARB = NULL;
+-PFNGLGENPROGRAMSARBPROC __glewGenProgramsARB = NULL;
+-PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glewGetProgramEnvParameterdvARB = NULL;
+-PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glewGetProgramEnvParameterfvARB = NULL;
+-PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glewGetProgramLocalParameterdvARB = NULL;
+-PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glewGetProgramLocalParameterfvARB = NULL;
+-PFNGLGETPROGRAMSTRINGARBPROC __glewGetProgramStringARB = NULL;
+-PFNGLGETPROGRAMIVARBPROC __glewGetProgramivARB = NULL;
+-PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glewGetVertexAttribPointervARB = NULL;
+-PFNGLGETVERTEXATTRIBDVARBPROC __glewGetVertexAttribdvARB = NULL;
+-PFNGLGETVERTEXATTRIBFVARBPROC __glewGetVertexAttribfvARB = NULL;
+-PFNGLGETVERTEXATTRIBIVARBPROC __glewGetVertexAttribivARB = NULL;
+-PFNGLISPROGRAMARBPROC __glewIsProgramARB = NULL;
+-PFNGLPROGRAMENVPARAMETER4DARBPROC __glewProgramEnvParameter4dARB = NULL;
+-PFNGLPROGRAMENVPARAMETER4DVARBPROC __glewProgramEnvParameter4dvARB = NULL;
+-PFNGLPROGRAMENVPARAMETER4FARBPROC __glewProgramEnvParameter4fARB = NULL;
+-PFNGLPROGRAMENVPARAMETER4FVARBPROC __glewProgramEnvParameter4fvARB = NULL;
+-PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glewProgramLocalParameter4dARB = NULL;
+-PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glewProgramLocalParameter4dvARB = NULL;
+-PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glewProgramLocalParameter4fARB = NULL;
+-PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glewProgramLocalParameter4fvARB = NULL;
+-PFNGLPROGRAMSTRINGARBPROC __glewProgramStringARB = NULL;
+-PFNGLVERTEXATTRIB1DARBPROC __glewVertexAttrib1dARB = NULL;
+-PFNGLVERTEXATTRIB1DVARBPROC __glewVertexAttrib1dvARB = NULL;
+-PFNGLVERTEXATTRIB1FARBPROC __glewVertexAttrib1fARB = NULL;
+-PFNGLVERTEXATTRIB1FVARBPROC __glewVertexAttrib1fvARB = NULL;
+-PFNGLVERTEXATTRIB1SARBPROC __glewVertexAttrib1sARB = NULL;
+-PFNGLVERTEXATTRIB1SVARBPROC __glewVertexAttrib1svARB = NULL;
+-PFNGLVERTEXATTRIB2DARBPROC __glewVertexAttrib2dARB = NULL;
+-PFNGLVERTEXATTRIB2DVARBPROC __glewVertexAttrib2dvARB = NULL;
+-PFNGLVERTEXATTRIB2FARBPROC __glewVertexAttrib2fARB = NULL;
+-PFNGLVERTEXATTRIB2FVARBPROC __glewVertexAttrib2fvARB = NULL;
+-PFNGLVERTEXATTRIB2SARBPROC __glewVertexAttrib2sARB = NULL;
+-PFNGLVERTEXATTRIB2SVARBPROC __glewVertexAttrib2svARB = NULL;
+-PFNGLVERTEXATTRIB3DARBPROC __glewVertexAttrib3dARB = NULL;
+-PFNGLVERTEXATTRIB3DVARBPROC __glewVertexAttrib3dvARB = NULL;
+-PFNGLVERTEXATTRIB3FARBPROC __glewVertexAttrib3fARB = NULL;
+-PFNGLVERTEXATTRIB3FVARBPROC __glewVertexAttrib3fvARB = NULL;
+-PFNGLVERTEXATTRIB3SARBPROC __glewVertexAttrib3sARB = NULL;
+-PFNGLVERTEXATTRIB3SVARBPROC __glewVertexAttrib3svARB = NULL;
+-PFNGLVERTEXATTRIB4NBVARBPROC __glewVertexAttrib4NbvARB = NULL;
+-PFNGLVERTEXATTRIB4NIVARBPROC __glewVertexAttrib4NivARB = NULL;
+-PFNGLVERTEXATTRIB4NSVARBPROC __glewVertexAttrib4NsvARB = NULL;
+-PFNGLVERTEXATTRIB4NUBARBPROC __glewVertexAttrib4NubARB = NULL;
+-PFNGLVERTEXATTRIB4NUBVARBPROC __glewVertexAttrib4NubvARB = NULL;
+-PFNGLVERTEXATTRIB4NUIVARBPROC __glewVertexAttrib4NuivARB = NULL;
+-PFNGLVERTEXATTRIB4NUSVARBPROC __glewVertexAttrib4NusvARB = NULL;
+-PFNGLVERTEXATTRIB4BVARBPROC __glewVertexAttrib4bvARB = NULL;
+-PFNGLVERTEXATTRIB4DARBPROC __glewVertexAttrib4dARB = NULL;
+-PFNGLVERTEXATTRIB4DVARBPROC __glewVertexAttrib4dvARB = NULL;
+-PFNGLVERTEXATTRIB4FARBPROC __glewVertexAttrib4fARB = NULL;
+-PFNGLVERTEXATTRIB4FVARBPROC __glewVertexAttrib4fvARB = NULL;
+-PFNGLVERTEXATTRIB4IVARBPROC __glewVertexAttrib4ivARB = NULL;
+-PFNGLVERTEXATTRIB4SARBPROC __glewVertexAttrib4sARB = NULL;
+-PFNGLVERTEXATTRIB4SVARBPROC __glewVertexAttrib4svARB = NULL;
+-PFNGLVERTEXATTRIB4UBVARBPROC __glewVertexAttrib4ubvARB = NULL;
+-PFNGLVERTEXATTRIB4UIVARBPROC __glewVertexAttrib4uivARB = NULL;
+-PFNGLVERTEXATTRIB4USVARBPROC __glewVertexAttrib4usvARB = NULL;
+-PFNGLVERTEXATTRIBPOINTERARBPROC __glewVertexAttribPointerARB = NULL;
+-
+-PFNGLBINDATTRIBLOCATIONARBPROC __glewBindAttribLocationARB = NULL;
+-PFNGLGETACTIVEATTRIBARBPROC __glewGetActiveAttribARB = NULL;
+-PFNGLGETATTRIBLOCATIONARBPROC __glewGetAttribLocationARB = NULL;
+-
+-PFNGLWINDOWPOS2DARBPROC __glewWindowPos2dARB = NULL;
+-PFNGLWINDOWPOS2DVARBPROC __glewWindowPos2dvARB = NULL;
+-PFNGLWINDOWPOS2FARBPROC __glewWindowPos2fARB = NULL;
+-PFNGLWINDOWPOS2FVARBPROC __glewWindowPos2fvARB = NULL;
+-PFNGLWINDOWPOS2IARBPROC __glewWindowPos2iARB = NULL;
+-PFNGLWINDOWPOS2IVARBPROC __glewWindowPos2ivARB = NULL;
+-PFNGLWINDOWPOS2SARBPROC __glewWindowPos2sARB = NULL;
+-PFNGLWINDOWPOS2SVARBPROC __glewWindowPos2svARB = NULL;
+-PFNGLWINDOWPOS3DARBPROC __glewWindowPos3dARB = NULL;
+-PFNGLWINDOWPOS3DVARBPROC __glewWindowPos3dvARB = NULL;
+-PFNGLWINDOWPOS3FARBPROC __glewWindowPos3fARB = NULL;
+-PFNGLWINDOWPOS3FVARBPROC __glewWindowPos3fvARB = NULL;
+-PFNGLWINDOWPOS3IARBPROC __glewWindowPos3iARB = NULL;
+-PFNGLWINDOWPOS3IVARBPROC __glewWindowPos3ivARB = NULL;
+-PFNGLWINDOWPOS3SARBPROC __glewWindowPos3sARB = NULL;
+-PFNGLWINDOWPOS3SVARBPROC __glewWindowPos3svARB = NULL;
+-
+-PFNGLDRAWBUFFERSATIPROC __glewDrawBuffersATI = NULL;
+-
+-PFNGLDRAWELEMENTARRAYATIPROC __glewDrawElementArrayATI = NULL;
+-PFNGLDRAWRANGEELEMENTARRAYATIPROC __glewDrawRangeElementArrayATI = NULL;
+-PFNGLELEMENTPOINTERATIPROC __glewElementPointerATI = NULL;
+-
+-PFNGLGETTEXBUMPPARAMETERFVATIPROC __glewGetTexBumpParameterfvATI = NULL;
+-PFNGLGETTEXBUMPPARAMETERIVATIPROC __glewGetTexBumpParameterivATI = NULL;
+-PFNGLTEXBUMPPARAMETERFVATIPROC __glewTexBumpParameterfvATI = NULL;
+-PFNGLTEXBUMPPARAMETERIVATIPROC __glewTexBumpParameterivATI = NULL;
+-
+-PFNGLALPHAFRAGMENTOP1ATIPROC __glewAlphaFragmentOp1ATI = NULL;
+-PFNGLALPHAFRAGMENTOP2ATIPROC __glewAlphaFragmentOp2ATI = NULL;
+-PFNGLALPHAFRAGMENTOP3ATIPROC __glewAlphaFragmentOp3ATI = NULL;
+-PFNGLBEGINFRAGMENTSHADERATIPROC __glewBeginFragmentShaderATI = NULL;
+-PFNGLBINDFRAGMENTSHADERATIPROC __glewBindFragmentShaderATI = NULL;
+-PFNGLCOLORFRAGMENTOP1ATIPROC __glewColorFragmentOp1ATI = NULL;
+-PFNGLCOLORFRAGMENTOP2ATIPROC __glewColorFragmentOp2ATI = NULL;
+-PFNGLCOLORFRAGMENTOP3ATIPROC __glewColorFragmentOp3ATI = NULL;
+-PFNGLDELETEFRAGMENTSHADERATIPROC __glewDeleteFragmentShaderATI = NULL;
+-PFNGLENDFRAGMENTSHADERATIPROC __glewEndFragmentShaderATI = NULL;
+-PFNGLGENFRAGMENTSHADERSATIPROC __glewGenFragmentShadersATI = NULL;
+-PFNGLPASSTEXCOORDATIPROC __glewPassTexCoordATI = NULL;
+-PFNGLSAMPLEMAPATIPROC __glewSampleMapATI = NULL;
+-PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glewSetFragmentShaderConstantATI = NULL;
+-
+-PFNGLMAPOBJECTBUFFERATIPROC __glewMapObjectBufferATI = NULL;
+-PFNGLUNMAPOBJECTBUFFERATIPROC __glewUnmapObjectBufferATI = NULL;
+-
+-PFNGLPNTRIANGLESFATIPROC __glPNTrianglewesfATI = NULL;
+-PFNGLPNTRIANGLESIATIPROC __glPNTrianglewesiATI = NULL;
+-
+-PFNGLSTENCILFUNCSEPARATEATIPROC __glewStencilFuncSeparateATI = NULL;
+-PFNGLSTENCILOPSEPARATEATIPROC __glewStencilOpSeparateATI = NULL;
+-
+-PFNGLARRAYOBJECTATIPROC __glewArrayObjectATI = NULL;
+-PFNGLFREEOBJECTBUFFERATIPROC __glewFreeObjectBufferATI = NULL;
+-PFNGLGETARRAYOBJECTFVATIPROC __glewGetArrayObjectfvATI = NULL;
+-PFNGLGETARRAYOBJECTIVATIPROC __glewGetArrayObjectivATI = NULL;
+-PFNGLGETOBJECTBUFFERFVATIPROC __glewGetObjectBufferfvATI = NULL;
+-PFNGLGETOBJECTBUFFERIVATIPROC __glewGetObjectBufferivATI = NULL;
+-PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glewGetVariantArrayObjectfvATI = NULL;
+-PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glewGetVariantArrayObjectivATI = NULL;
+-PFNGLISOBJECTBUFFERATIPROC __glewIsObjectBufferATI = NULL;
+-PFNGLNEWOBJECTBUFFERATIPROC __glewNewObjectBufferATI = NULL;
+-PFNGLUPDATEOBJECTBUFFERATIPROC __glewUpdateObjectBufferATI = NULL;
+-PFNGLVARIANTARRAYOBJECTATIPROC __glewVariantArrayObjectATI = NULL;
+-
+-PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glewGetVertexAttribArrayObjectfvATI = NULL;
+-PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glewGetVertexAttribArrayObjectivATI = NULL;
+-PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glewVertexAttribArrayObjectATI = NULL;
+-
+-PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glewClientActiveVertexStreamATI = NULL;
+-PFNGLNORMALSTREAM3BATIPROC __glewNormalStream3bATI = NULL;
+-PFNGLNORMALSTREAM3BVATIPROC __glewNormalStream3bvATI = NULL;
+-PFNGLNORMALSTREAM3DATIPROC __glewNormalStream3dATI = NULL;
+-PFNGLNORMALSTREAM3DVATIPROC __glewNormalStream3dvATI = NULL;
+-PFNGLNORMALSTREAM3FATIPROC __glewNormalStream3fATI = NULL;
+-PFNGLNORMALSTREAM3FVATIPROC __glewNormalStream3fvATI = NULL;
+-PFNGLNORMALSTREAM3IATIPROC __glewNormalStream3iATI = NULL;
+-PFNGLNORMALSTREAM3IVATIPROC __glewNormalStream3ivATI = NULL;
+-PFNGLNORMALSTREAM3SATIPROC __glewNormalStream3sATI = NULL;
+-PFNGLNORMALSTREAM3SVATIPROC __glewNormalStream3svATI = NULL;
+-PFNGLVERTEXBLENDENVFATIPROC __glewVertexBlendEnvfATI = NULL;
+-PFNGLVERTEXBLENDENVIATIPROC __glewVertexBlendEnviATI = NULL;
+-PFNGLVERTEXSTREAM2DATIPROC __glewVertexStream2dATI = NULL;
+-PFNGLVERTEXSTREAM2DVATIPROC __glewVertexStream2dvATI = NULL;
+-PFNGLVERTEXSTREAM2FATIPROC __glewVertexStream2fATI = NULL;
+-PFNGLVERTEXSTREAM2FVATIPROC __glewVertexStream2fvATI = NULL;
+-PFNGLVERTEXSTREAM2IATIPROC __glewVertexStream2iATI = NULL;
+-PFNGLVERTEXSTREAM2IVATIPROC __glewVertexStream2ivATI = NULL;
+-PFNGLVERTEXSTREAM2SATIPROC __glewVertexStream2sATI = NULL;
+-PFNGLVERTEXSTREAM2SVATIPROC __glewVertexStream2svATI = NULL;
+-PFNGLVERTEXSTREAM3DATIPROC __glewVertexStream3dATI = NULL;
+-PFNGLVERTEXSTREAM3DVATIPROC __glewVertexStream3dvATI = NULL;
+-PFNGLVERTEXSTREAM3FATIPROC __glewVertexStream3fATI = NULL;
+-PFNGLVERTEXSTREAM3FVATIPROC __glewVertexStream3fvATI = NULL;
+-PFNGLVERTEXSTREAM3IATIPROC __glewVertexStream3iATI = NULL;
+-PFNGLVERTEXSTREAM3IVATIPROC __glewVertexStream3ivATI = NULL;
+-PFNGLVERTEXSTREAM3SATIPROC __glewVertexStream3sATI = NULL;
+-PFNGLVERTEXSTREAM3SVATIPROC __glewVertexStream3svATI = NULL;
+-PFNGLVERTEXSTREAM4DATIPROC __glewVertexStream4dATI = NULL;
+-PFNGLVERTEXSTREAM4DVATIPROC __glewVertexStream4dvATI = NULL;
+-PFNGLVERTEXSTREAM4FATIPROC __glewVertexStream4fATI = NULL;
+-PFNGLVERTEXSTREAM4FVATIPROC __glewVertexStream4fvATI = NULL;
+-PFNGLVERTEXSTREAM4IATIPROC __glewVertexStream4iATI = NULL;
+-PFNGLVERTEXSTREAM4IVATIPROC __glewVertexStream4ivATI = NULL;
+-PFNGLVERTEXSTREAM4SATIPROC __glewVertexStream4sATI = NULL;
+-PFNGLVERTEXSTREAM4SVATIPROC __glewVertexStream4svATI = NULL;
+-
+-PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glewGetUniformBufferSizeEXT = NULL;
+-PFNGLGETUNIFORMOFFSETEXTPROC __glewGetUniformOffsetEXT = NULL;
+-PFNGLUNIFORMBUFFEREXTPROC __glewUniformBufferEXT = NULL;
+-
+-PFNGLBLENDCOLOREXTPROC __glewBlendColorEXT = NULL;
+-
+-PFNGLBLENDEQUATIONSEPARATEEXTPROC __glewBlendEquationSeparateEXT = NULL;
+-
+-PFNGLBLENDFUNCSEPARATEEXTPROC __glewBlendFuncSeparateEXT = NULL;
+-
+-PFNGLBLENDEQUATIONEXTPROC __glewBlendEquationEXT = NULL;
+-
+-PFNGLCOLORSUBTABLEEXTPROC __glewColorSubTableEXT = NULL;
+-PFNGLCOPYCOLORSUBTABLEEXTPROC __glewCopyColorSubTableEXT = NULL;
+-
+-PFNGLLOCKARRAYSEXTPROC __glewLockArraysEXT = NULL;
+-PFNGLUNLOCKARRAYSEXTPROC __glewUnlockArraysEXT = NULL;
+-
+-PFNGLCONVOLUTIONFILTER1DEXTPROC __glewConvolutionFilter1DEXT = NULL;
+-PFNGLCONVOLUTIONFILTER2DEXTPROC __glewConvolutionFilter2DEXT = NULL;
+-PFNGLCONVOLUTIONPARAMETERFEXTPROC __glewConvolutionParameterfEXT = NULL;
+-PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glewConvolutionParameterfvEXT = NULL;
+-PFNGLCONVOLUTIONPARAMETERIEXTPROC __glewConvolutionParameteriEXT = NULL;
+-PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glewConvolutionParameterivEXT = NULL;
+-PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glewCopyConvolutionFilter1DEXT = NULL;
+-PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glewCopyConvolutionFilter2DEXT = NULL;
+-PFNGLGETCONVOLUTIONFILTEREXTPROC __glewGetConvolutionFilterEXT = NULL;
+-PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glewGetConvolutionParameterfvEXT = NULL;
+-PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glewGetConvolutionParameterivEXT = NULL;
+-PFNGLGETSEPARABLEFILTEREXTPROC __glewGetSeparableFilterEXT = NULL;
+-PFNGLSEPARABLEFILTER2DEXTPROC __glewSeparableFilter2DEXT = NULL;
+-
+-PFNGLBINORMALPOINTEREXTPROC __glewBinormalPointerEXT = NULL;
+-PFNGLTANGENTPOINTEREXTPROC __glewTangentPointerEXT = NULL;
+-
+-PFNGLCOPYTEXIMAGE1DEXTPROC __glewCopyTexImage1DEXT = NULL;
+-PFNGLCOPYTEXIMAGE2DEXTPROC __glewCopyTexImage2DEXT = NULL;
+-PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glewCopyTexSubImage1DEXT = NULL;
+-PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glewCopyTexSubImage2DEXT = NULL;
+-PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glewCopyTexSubImage3DEXT = NULL;
+-
+-PFNGLCULLPARAMETERDVEXTPROC __glewCullParameterdvEXT = NULL;
+-PFNGLCULLPARAMETERFVEXTPROC __glewCullParameterfvEXT = NULL;
+-
+-PFNGLDEPTHBOUNDSEXTPROC __glewDepthBoundsEXT = NULL;
+-
+-PFNGLCOLORMASKINDEXEDEXTPROC __glewColorMaskIndexedEXT = NULL;
+-PFNGLDISABLEINDEXEDEXTPROC __glewDisableIndexedEXT = NULL;
+-PFNGLENABLEINDEXEDEXTPROC __glewEnableIndexedEXT = NULL;
+-PFNGLGETBOOLEANINDEXEDVEXTPROC __glewGetBooleanIndexedvEXT = NULL;
+-PFNGLGETINTEGERINDEXEDVEXTPROC __glewGetIntegerIndexedvEXT = NULL;
+-PFNGLISENABLEDINDEXEDEXTPROC __glewIsEnabledIndexedEXT = NULL;
+-
+-PFNGLDRAWARRAYSINSTANCEDEXTPROC __glewDrawArraysInstancedEXT = NULL;
+-PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glewDrawElementsInstancedEXT = NULL;
+-
+-PFNGLDRAWRANGEELEMENTSEXTPROC __glewDrawRangeElementsEXT = NULL;
+-
+-PFNGLFOGCOORDPOINTEREXTPROC __glewFogCoordPointerEXT = NULL;
+-PFNGLFOGCOORDDEXTPROC __glewFogCoorddEXT = NULL;
+-PFNGLFOGCOORDDVEXTPROC __glewFogCoorddvEXT = NULL;
+-PFNGLFOGCOORDFEXTPROC __glewFogCoordfEXT = NULL;
+-PFNGLFOGCOORDFVEXTPROC __glewFogCoordfvEXT = NULL;
+-
+-PFNGLFRAGMENTCOLORMATERIALEXTPROC __glewFragmentColorMaterialEXT = NULL;
+-PFNGLFRAGMENTLIGHTMODELFEXTPROC __glewFragmentLightModelfEXT = NULL;
+-PFNGLFRAGMENTLIGHTMODELFVEXTPROC __glewFragmentLightModelfvEXT = NULL;
+-PFNGLFRAGMENTLIGHTMODELIEXTPROC __glewFragmentLightModeliEXT = NULL;
+-PFNGLFRAGMENTLIGHTMODELIVEXTPROC __glewFragmentLightModelivEXT = NULL;
+-PFNGLFRAGMENTLIGHTFEXTPROC __glewFragmentLightfEXT = NULL;
+-PFNGLFRAGMENTLIGHTFVEXTPROC __glewFragmentLightfvEXT = NULL;
+-PFNGLFRAGMENTLIGHTIEXTPROC __glewFragmentLightiEXT = NULL;
+-PFNGLFRAGMENTLIGHTIVEXTPROC __glewFragmentLightivEXT = NULL;
+-PFNGLFRAGMENTMATERIALFEXTPROC __glewFragmentMaterialfEXT = NULL;
+-PFNGLFRAGMENTMATERIALFVEXTPROC __glewFragmentMaterialfvEXT = NULL;
+-PFNGLFRAGMENTMATERIALIEXTPROC __glewFragmentMaterialiEXT = NULL;
+-PFNGLFRAGMENTMATERIALIVEXTPROC __glewFragmentMaterialivEXT = NULL;
+-PFNGLGETFRAGMENTLIGHTFVEXTPROC __glewGetFragmentLightfvEXT = NULL;
+-PFNGLGETFRAGMENTLIGHTIVEXTPROC __glewGetFragmentLightivEXT = NULL;
+-PFNGLGETFRAGMENTMATERIALFVEXTPROC __glewGetFragmentMaterialfvEXT = NULL;
+-PFNGLGETFRAGMENTMATERIALIVEXTPROC __glewGetFragmentMaterialivEXT = NULL;
+-PFNGLLIGHTENVIEXTPROC __glewLightEnviEXT = NULL;
+-
+-PFNGLBLITFRAMEBUFFEREXTPROC __glewBlitFramebufferEXT = NULL;
+-
+-PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewRenderbufferStorageMultisampleEXT = NULL;
+-
+-PFNGLBINDFRAMEBUFFEREXTPROC __glewBindFramebufferEXT = NULL;
+-PFNGLBINDRENDERBUFFEREXTPROC __glewBindRenderbufferEXT = NULL;
+-PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glewCheckFramebufferStatusEXT = NULL;
+-PFNGLDELETEFRAMEBUFFERSEXTPROC __glewDeleteFramebuffersEXT = NULL;
+-PFNGLDELETERENDERBUFFERSEXTPROC __glewDeleteRenderbuffersEXT = NULL;
+-PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glewFramebufferRenderbufferEXT = NULL;
+-PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glewFramebufferTexture1DEXT = NULL;
+-PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glewFramebufferTexture2DEXT = NULL;
+-PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glewFramebufferTexture3DEXT = NULL;
+-PFNGLGENFRAMEBUFFERSEXTPROC __glewGenFramebuffersEXT = NULL;
+-PFNGLGENRENDERBUFFERSEXTPROC __glewGenRenderbuffersEXT = NULL;
+-PFNGLGENERATEMIPMAPEXTPROC __glewGenerateMipmapEXT = NULL;
+-PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetFramebufferAttachmentParameterivEXT = NULL;
+-PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glewGetRenderbufferParameterivEXT = NULL;
+-PFNGLISFRAMEBUFFEREXTPROC __glewIsFramebufferEXT = NULL;
+-PFNGLISRENDERBUFFEREXTPROC __glewIsRenderbufferEXT = NULL;
+-PFNGLRENDERBUFFERSTORAGEEXTPROC __glewRenderbufferStorageEXT = NULL;
+-
+-PFNGLFRAMEBUFFERTEXTUREEXTPROC __glewFramebufferTextureEXT = NULL;
+-PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glewFramebufferTextureFaceEXT = NULL;
+-PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glewFramebufferTextureLayerEXT = NULL;
+-PFNGLPROGRAMPARAMETERIEXTPROC __glewProgramParameteriEXT = NULL;
+-
+-PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glewProgramEnvParameters4fvEXT = NULL;
+-PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glewProgramLocalParameters4fvEXT = NULL;
+-
+-PFNGLBINDFRAGDATALOCATIONEXTPROC __glewBindFragDataLocationEXT = NULL;
+-PFNGLGETFRAGDATALOCATIONEXTPROC __glewGetFragDataLocationEXT = NULL;
+-PFNGLGETUNIFORMUIVEXTPROC __glewGetUniformuivEXT = NULL;
+-PFNGLGETVERTEXATTRIBIIVEXTPROC __glewGetVertexAttribIivEXT = NULL;
+-PFNGLGETVERTEXATTRIBIUIVEXTPROC __glewGetVertexAttribIuivEXT = NULL;
+-PFNGLUNIFORM1UIEXTPROC __glewUniform1uiEXT = NULL;
+-PFNGLUNIFORM1UIVEXTPROC __glewUniform1uivEXT = NULL;
+-PFNGLUNIFORM2UIEXTPROC __glewUniform2uiEXT = NULL;
+-PFNGLUNIFORM2UIVEXTPROC __glewUniform2uivEXT = NULL;
+-PFNGLUNIFORM3UIEXTPROC __glewUniform3uiEXT = NULL;
+-PFNGLUNIFORM3UIVEXTPROC __glewUniform3uivEXT = NULL;
+-PFNGLUNIFORM4UIEXTPROC __glewUniform4uiEXT = NULL;
+-PFNGLUNIFORM4UIVEXTPROC __glewUniform4uivEXT = NULL;
+-PFNGLVERTEXATTRIBI1IEXTPROC __glewVertexAttribI1iEXT = NULL;
+-PFNGLVERTEXATTRIBI1IVEXTPROC __glewVertexAttribI1ivEXT = NULL;
+-PFNGLVERTEXATTRIBI1UIEXTPROC __glewVertexAttribI1uiEXT = NULL;
+-PFNGLVERTEXATTRIBI1UIVEXTPROC __glewVertexAttribI1uivEXT = NULL;
+-PFNGLVERTEXATTRIBI2IEXTPROC __glewVertexAttribI2iEXT = NULL;
+-PFNGLVERTEXATTRIBI2IVEXTPROC __glewVertexAttribI2ivEXT = NULL;
+-PFNGLVERTEXATTRIBI2UIEXTPROC __glewVertexAttribI2uiEXT = NULL;
+-PFNGLVERTEXATTRIBI2UIVEXTPROC __glewVertexAttribI2uivEXT = NULL;
+-PFNGLVERTEXATTRIBI3IEXTPROC __glewVertexAttribI3iEXT = NULL;
+-PFNGLVERTEXATTRIBI3IVEXTPROC __glewVertexAttribI3ivEXT = NULL;
+-PFNGLVERTEXATTRIBI3UIEXTPROC __glewVertexAttribI3uiEXT = NULL;
+-PFNGLVERTEXATTRIBI3UIVEXTPROC __glewVertexAttribI3uivEXT = NULL;
+-PFNGLVERTEXATTRIBI4BVEXTPROC __glewVertexAttribI4bvEXT = NULL;
+-PFNGLVERTEXATTRIBI4IEXTPROC __glewVertexAttribI4iEXT = NULL;
+-PFNGLVERTEXATTRIBI4IVEXTPROC __glewVertexAttribI4ivEXT = NULL;
+-PFNGLVERTEXATTRIBI4SVEXTPROC __glewVertexAttribI4svEXT = NULL;
+-PFNGLVERTEXATTRIBI4UBVEXTPROC __glewVertexAttribI4ubvEXT = NULL;
+-PFNGLVERTEXATTRIBI4UIEXTPROC __glewVertexAttribI4uiEXT = NULL;
+-PFNGLVERTEXATTRIBI4UIVEXTPROC __glewVertexAttribI4uivEXT = NULL;
+-PFNGLVERTEXATTRIBI4USVEXTPROC __glewVertexAttribI4usvEXT = NULL;
+-PFNGLVERTEXATTRIBIPOINTEREXTPROC __glewVertexAttribIPointerEXT = NULL;
+-
+-PFNGLGETHISTOGRAMEXTPROC __glewGetHistogramEXT = NULL;
+-PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glewGetHistogramParameterfvEXT = NULL;
+-PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glewGetHistogramParameterivEXT = NULL;
+-PFNGLGETMINMAXEXTPROC __glewGetMinmaxEXT = NULL;
+-PFNGLGETMINMAXPARAMETERFVEXTPROC __glewGetMinmaxParameterfvEXT = NULL;
+-PFNGLGETMINMAXPARAMETERIVEXTPROC __glewGetMinmaxParameterivEXT = NULL;
+-PFNGLHISTOGRAMEXTPROC __glewHistogramEXT = NULL;
+-PFNGLMINMAXEXTPROC __glewMinmaxEXT = NULL;
+-PFNGLRESETHISTOGRAMEXTPROC __glewResetHistogramEXT = NULL;
+-PFNGLRESETMINMAXEXTPROC __glewResetMinmaxEXT = NULL;
+-
+-PFNGLINDEXFUNCEXTPROC __glewIndexFuncEXT = NULL;
+-
+-PFNGLINDEXMATERIALEXTPROC __glewIndexMaterialEXT = NULL;
+-
+-PFNGLAPPLYTEXTUREEXTPROC __glewApplyTextureEXT = NULL;
+-PFNGLTEXTURELIGHTEXTPROC __glewTextureLightEXT = NULL;
+-PFNGLTEXTUREMATERIALEXTPROC __glewTextureMaterialEXT = NULL;
+-
+-PFNGLMULTIDRAWARRAYSEXTPROC __glewMultiDrawArraysEXT = NULL;
+-PFNGLMULTIDRAWELEMENTSEXTPROC __glewMultiDrawElementsEXT = NULL;
+-
+-PFNGLSAMPLEMASKEXTPROC __glewSampleMaskEXT = NULL;
+-PFNGLSAMPLEPATTERNEXTPROC __glewSamplePatternEXT = NULL;
+-
+-PFNGLCOLORTABLEEXTPROC __glewColorTableEXT = NULL;
+-PFNGLGETCOLORTABLEEXTPROC __glewGetColorTableEXT = NULL;
+-PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glewGetColorTableParameterfvEXT = NULL;
+-PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glewGetColorTableParameterivEXT = NULL;
+-
+-PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glewGetPixelTransformParameterfvEXT = NULL;
+-PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glewGetPixelTransformParameterivEXT = NULL;
+-PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glewPixelTransformParameterfEXT = NULL;
+-PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glewPixelTransformParameterfvEXT = NULL;
+-PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glewPixelTransformParameteriEXT = NULL;
+-PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glewPixelTransformParameterivEXT = NULL;
+-
+-PFNGLPOINTPARAMETERFEXTPROC __glewPointParameterfEXT = NULL;
+-PFNGLPOINTPARAMETERFVEXTPROC __glewPointParameterfvEXT = NULL;
+-
+-PFNGLPOLYGONOFFSETEXTPROC __glewPolygonOffsetEXT = NULL;
+-
+-PFNGLBEGINSCENEEXTPROC __glewBeginSceneEXT = NULL;
+-PFNGLENDSCENEEXTPROC __glewEndSceneEXT = NULL;
+-
+-PFNGLSECONDARYCOLOR3BEXTPROC __glewSecondaryColor3bEXT = NULL;
+-PFNGLSECONDARYCOLOR3BVEXTPROC __glewSecondaryColor3bvEXT = NULL;
+-PFNGLSECONDARYCOLOR3DEXTPROC __glewSecondaryColor3dEXT = NULL;
+-PFNGLSECONDARYCOLOR3DVEXTPROC __glewSecondaryColor3dvEXT = NULL;
+-PFNGLSECONDARYCOLOR3FEXTPROC __glewSecondaryColor3fEXT = NULL;
+-PFNGLSECONDARYCOLOR3FVEXTPROC __glewSecondaryColor3fvEXT = NULL;
+-PFNGLSECONDARYCOLOR3IEXTPROC __glewSecondaryColor3iEXT = NULL;
+-PFNGLSECONDARYCOLOR3IVEXTPROC __glewSecondaryColor3ivEXT = NULL;
+-PFNGLSECONDARYCOLOR3SEXTPROC __glewSecondaryColor3sEXT = NULL;
+-PFNGLSECONDARYCOLOR3SVEXTPROC __glewSecondaryColor3svEXT = NULL;
+-PFNGLSECONDARYCOLOR3UBEXTPROC __glewSecondaryColor3ubEXT = NULL;
+-PFNGLSECONDARYCOLOR3UBVEXTPROC __glewSecondaryColor3ubvEXT = NULL;
+-PFNGLSECONDARYCOLOR3UIEXTPROC __glewSecondaryColor3uiEXT = NULL;
+-PFNGLSECONDARYCOLOR3UIVEXTPROC __glewSecondaryColor3uivEXT = NULL;
+-PFNGLSECONDARYCOLOR3USEXTPROC __glewSecondaryColor3usEXT = NULL;
+-PFNGLSECONDARYCOLOR3USVEXTPROC __glewSecondaryColor3usvEXT = NULL;
+-PFNGLSECONDARYCOLORPOINTEREXTPROC __glewSecondaryColorPointerEXT = NULL;
+-
+-PFNGLACTIVESTENCILFACEEXTPROC __glewActiveStencilFaceEXT = NULL;
+-
+-PFNGLTEXSUBIMAGE1DEXTPROC __glewTexSubImage1DEXT = NULL;
+-PFNGLTEXSUBIMAGE2DEXTPROC __glewTexSubImage2DEXT = NULL;
+-PFNGLTEXSUBIMAGE3DEXTPROC __glewTexSubImage3DEXT = NULL;
+-
+-PFNGLTEXIMAGE3DEXTPROC __glewTexImage3DEXT = NULL;
+-
+-PFNGLTEXBUFFEREXTPROC __glewTexBufferEXT = NULL;
+-
+-PFNGLCLEARCOLORIIEXTPROC __glewClearColorIiEXT = NULL;
+-PFNGLCLEARCOLORIUIEXTPROC __glewClearColorIuiEXT = NULL;
+-PFNGLGETTEXPARAMETERIIVEXTPROC __glewGetTexParameterIivEXT = NULL;
+-PFNGLGETTEXPARAMETERIUIVEXTPROC __glewGetTexParameterIuivEXT = NULL;
+-PFNGLTEXPARAMETERIIVEXTPROC __glewTexParameterIivEXT = NULL;
+-PFNGLTEXPARAMETERIUIVEXTPROC __glewTexParameterIuivEXT = NULL;
+-
+-PFNGLARETEXTURESRESIDENTEXTPROC __glewAreTexturesResidentEXT = NULL;
+-PFNGLBINDTEXTUREEXTPROC __glewBindTextureEXT = NULL;
+-PFNGLDELETETEXTURESEXTPROC __glewDeleteTexturesEXT = NULL;
+-PFNGLGENTEXTURESEXTPROC __glewGenTexturesEXT = NULL;
+-PFNGLISTEXTUREEXTPROC __glewIsTextureEXT = NULL;
+-PFNGLPRIORITIZETEXTURESEXTPROC __glewPrioritizeTexturesEXT = NULL;
+-
+-PFNGLTEXTURENORMALEXTPROC __glewTextureNormalEXT = NULL;
+-
+-PFNGLGETQUERYOBJECTI64VEXTPROC __glewGetQueryObjecti64vEXT = NULL;
+-PFNGLGETQUERYOBJECTUI64VEXTPROC __glewGetQueryObjectui64vEXT = NULL;
+-
+-PFNGLARRAYELEMENTEXTPROC __glewArrayElementEXT = NULL;
+-PFNGLCOLORPOINTEREXTPROC __glewColorPointerEXT = NULL;
+-PFNGLDRAWARRAYSEXTPROC __glewDrawArraysEXT = NULL;
+-PFNGLEDGEFLAGPOINTEREXTPROC __glewEdgeFlagPointerEXT = NULL;
+-PFNGLGETPOINTERVEXTPROC __glewGetPointervEXT = NULL;
+-PFNGLINDEXPOINTEREXTPROC __glewIndexPointerEXT = NULL;
+-PFNGLNORMALPOINTEREXTPROC __glewNormalPointerEXT = NULL;
+-PFNGLTEXCOORDPOINTEREXTPROC __glewTexCoordPointerEXT = NULL;
+-PFNGLVERTEXPOINTEREXTPROC __glewVertexPointerEXT = NULL;
+-
+-PFNGLBEGINVERTEXSHADEREXTPROC __glewBeginVertexShaderEXT = NULL;
+-PFNGLBINDLIGHTPARAMETEREXTPROC __glewBindLightParameterEXT = NULL;
+-PFNGLBINDMATERIALPARAMETEREXTPROC __glewBindMaterialParameterEXT = NULL;
+-PFNGLBINDPARAMETEREXTPROC __glewBindParameterEXT = NULL;
+-PFNGLBINDTEXGENPARAMETEREXTPROC __glewBindTexGenParameterEXT = NULL;
+-PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glewBindTextureUnitParameterEXT = NULL;
+-PFNGLBINDVERTEXSHADEREXTPROC __glewBindVertexShaderEXT = NULL;
+-PFNGLDELETEVERTEXSHADEREXTPROC __glewDeleteVertexShaderEXT = NULL;
+-PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glewDisableVariantClientStateEXT = NULL;
+-PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glewEnableVariantClientStateEXT = NULL;
+-PFNGLENDVERTEXSHADEREXTPROC __glewEndVertexShaderEXT = NULL;
+-PFNGLEXTRACTCOMPONENTEXTPROC __glewExtractComponentEXT = NULL;
+-PFNGLGENSYMBOLSEXTPROC __glewGenSymbolsEXT = NULL;
+-PFNGLGENVERTEXSHADERSEXTPROC __glewGenVertexShadersEXT = NULL;
+-PFNGLGETINVARIANTBOOLEANVEXTPROC __glewGetInvariantBooleanvEXT = NULL;
+-PFNGLGETINVARIANTFLOATVEXTPROC __glewGetInvariantFloatvEXT = NULL;
+-PFNGLGETINVARIANTINTEGERVEXTPROC __glewGetInvariantIntegervEXT = NULL;
+-PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glewGetLocalConstantBooleanvEXT = NULL;
+-PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glewGetLocalConstantFloatvEXT = NULL;
+-PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glewGetLocalConstantIntegervEXT = NULL;
+-PFNGLGETVARIANTBOOLEANVEXTPROC __glewGetVariantBooleanvEXT = NULL;
+-PFNGLGETVARIANTFLOATVEXTPROC __glewGetVariantFloatvEXT = NULL;
+-PFNGLGETVARIANTINTEGERVEXTPROC __glewGetVariantIntegervEXT = NULL;
+-PFNGLGETVARIANTPOINTERVEXTPROC __glewGetVariantPointervEXT = NULL;
+-PFNGLINSERTCOMPONENTEXTPROC __glewInsertComponentEXT = NULL;
+-PFNGLISVARIANTENABLEDEXTPROC __glewIsVariantEnabledEXT = NULL;
+-PFNGLSETINVARIANTEXTPROC __glewSetInvariantEXT = NULL;
+-PFNGLSETLOCALCONSTANTEXTPROC __glewSetLocalConstantEXT = NULL;
+-PFNGLSHADEROP1EXTPROC __glewShaderOp1EXT = NULL;
+-PFNGLSHADEROP2EXTPROC __glewShaderOp2EXT = NULL;
+-PFNGLSHADEROP3EXTPROC __glewShaderOp3EXT = NULL;
+-PFNGLSWIZZLEEXTPROC __glewSwizzleEXT = NULL;
+-PFNGLVARIANTPOINTEREXTPROC __glewVariantPointerEXT = NULL;
+-PFNGLVARIANTBVEXTPROC __glewVariantbvEXT = NULL;
+-PFNGLVARIANTDVEXTPROC __glewVariantdvEXT = NULL;
+-PFNGLVARIANTFVEXTPROC __glewVariantfvEXT = NULL;
+-PFNGLVARIANTIVEXTPROC __glewVariantivEXT = NULL;
+-PFNGLVARIANTSVEXTPROC __glewVariantsvEXT = NULL;
+-PFNGLVARIANTUBVEXTPROC __glewVariantubvEXT = NULL;
+-PFNGLVARIANTUIVEXTPROC __glewVariantuivEXT = NULL;
+-PFNGLVARIANTUSVEXTPROC __glewVariantusvEXT = NULL;
+-PFNGLWRITEMASKEXTPROC __glewWriteMaskEXT = NULL;
+-
+-PFNGLVERTEXWEIGHTPOINTEREXTPROC __glewVertexWeightPointerEXT = NULL;
+-PFNGLVERTEXWEIGHTFEXTPROC __glewVertexWeightfEXT = NULL;
+-PFNGLVERTEXWEIGHTFVEXTPROC __glewVertexWeightfvEXT = NULL;
+-
+-PFNGLFRAMETERMINATORGREMEDYPROC __glewFrameTerminatorGREMEDY = NULL;
+-
+-PFNGLSTRINGMARKERGREMEDYPROC __glewStringMarkerGREMEDY = NULL;
+-
+-PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glewGetImageTransformParameterfvHP = NULL;
+-PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glewGetImageTransformParameterivHP = NULL;
+-PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glewImageTransformParameterfHP = NULL;
+-PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glewImageTransformParameterfvHP = NULL;
+-PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glewImageTransformParameteriHP = NULL;
+-PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glewImageTransformParameterivHP = NULL;
+-
+-PFNGLMULTIMODEDRAWARRAYSIBMPROC __glewMultiModeDrawArraysIBM = NULL;
+-PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glewMultiModeDrawElementsIBM = NULL;
+-
+-PFNGLCOLORPOINTERLISTIBMPROC __glewColorPointerListIBM = NULL;
+-PFNGLEDGEFLAGPOINTERLISTIBMPROC __glewEdgeFlagPointerListIBM = NULL;
+-PFNGLFOGCOORDPOINTERLISTIBMPROC __glewFogCoordPointerListIBM = NULL;
+-PFNGLINDEXPOINTERLISTIBMPROC __glewIndexPointerListIBM = NULL;
+-PFNGLNORMALPOINTERLISTIBMPROC __glewNormalPointerListIBM = NULL;
+-PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glewSecondaryColorPointerListIBM = NULL;
+-PFNGLTEXCOORDPOINTERLISTIBMPROC __glewTexCoordPointerListIBM = NULL;
+-PFNGLVERTEXPOINTERLISTIBMPROC __glewVertexPointerListIBM = NULL;
+-
+-PFNGLCOLORPOINTERVINTELPROC __glewColorPointervINTEL = NULL;
+-PFNGLNORMALPOINTERVINTELPROC __glewNormalPointervINTEL = NULL;
+-PFNGLTEXCOORDPOINTERVINTELPROC __glewTexCoordPointervINTEL = NULL;
+-PFNGLVERTEXPOINTERVINTELPROC __glewVertexPointervINTEL = NULL;
+-
+-PFNGLTEXSCISSORFUNCINTELPROC __glewTexScissorFuncINTEL = NULL;
+-PFNGLTEXSCISSORINTELPROC __glewTexScissorINTEL = NULL;
+-
+-PFNGLBUFFERREGIONENABLEDEXTPROC __glewBufferRegionEnabledEXT = NULL;
+-PFNGLDELETEBUFFERREGIONEXTPROC __glewDeleteBufferRegionEXT = NULL;
+-PFNGLDRAWBUFFERREGIONEXTPROC __glewDrawBufferRegionEXT = NULL;
+-PFNGLNEWBUFFERREGIONEXTPROC __glewNewBufferRegionEXT = NULL;
+-PFNGLREADBUFFERREGIONEXTPROC __glewReadBufferRegionEXT = NULL;
+-
+-PFNGLRESIZEBUFFERSMESAPROC __glewResizeBuffersMESA = NULL;
+-
+-PFNGLWINDOWPOS2DMESAPROC __glewWindowPos2dMESA = NULL;
+-PFNGLWINDOWPOS2DVMESAPROC __glewWindowPos2dvMESA = NULL;
+-PFNGLWINDOWPOS2FMESAPROC __glewWindowPos2fMESA = NULL;
+-PFNGLWINDOWPOS2FVMESAPROC __glewWindowPos2fvMESA = NULL;
+-PFNGLWINDOWPOS2IMESAPROC __glewWindowPos2iMESA = NULL;
+-PFNGLWINDOWPOS2IVMESAPROC __glewWindowPos2ivMESA = NULL;
+-PFNGLWINDOWPOS2SMESAPROC __glewWindowPos2sMESA = NULL;
+-PFNGLWINDOWPOS2SVMESAPROC __glewWindowPos2svMESA = NULL;
+-PFNGLWINDOWPOS3DMESAPROC __glewWindowPos3dMESA = NULL;
+-PFNGLWINDOWPOS3DVMESAPROC __glewWindowPos3dvMESA = NULL;
+-PFNGLWINDOWPOS3FMESAPROC __glewWindowPos3fMESA = NULL;
+-PFNGLWINDOWPOS3FVMESAPROC __glewWindowPos3fvMESA = NULL;
+-PFNGLWINDOWPOS3IMESAPROC __glewWindowPos3iMESA = NULL;
+-PFNGLWINDOWPOS3IVMESAPROC __glewWindowPos3ivMESA = NULL;
+-PFNGLWINDOWPOS3SMESAPROC __glewWindowPos3sMESA = NULL;
+-PFNGLWINDOWPOS3SVMESAPROC __glewWindowPos3svMESA = NULL;
+-PFNGLWINDOWPOS4DMESAPROC __glewWindowPos4dMESA = NULL;
+-PFNGLWINDOWPOS4DVMESAPROC __glewWindowPos4dvMESA = NULL;
+-PFNGLWINDOWPOS4FMESAPROC __glewWindowPos4fMESA = NULL;
+-PFNGLWINDOWPOS4FVMESAPROC __glewWindowPos4fvMESA = NULL;
+-PFNGLWINDOWPOS4IMESAPROC __glewWindowPos4iMESA = NULL;
+-PFNGLWINDOWPOS4IVMESAPROC __glewWindowPos4ivMESA = NULL;
+-PFNGLWINDOWPOS4SMESAPROC __glewWindowPos4sMESA = NULL;
+-PFNGLWINDOWPOS4SVMESAPROC __glewWindowPos4svMESA = NULL;
+-
+-PFNGLCLEARDEPTHDNVPROC __glewClearDepthdNV = NULL;
+-PFNGLDEPTHBOUNDSDNVPROC __glewDepthBoundsdNV = NULL;
+-PFNGLDEPTHRANGEDNVPROC __glewDepthRangedNV = NULL;
+-
+-PFNGLEVALMAPSNVPROC __glewEvalMapsNV = NULL;
+-PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glewGetMapAttribParameterfvNV = NULL;
+-PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glewGetMapAttribParameterivNV = NULL;
+-PFNGLGETMAPCONTROLPOINTSNVPROC __glewGetMapControlPointsNV = NULL;
+-PFNGLGETMAPPARAMETERFVNVPROC __glewGetMapParameterfvNV = NULL;
+-PFNGLGETMAPPARAMETERIVNVPROC __glewGetMapParameterivNV = NULL;
+-PFNGLMAPCONTROLPOINTSNVPROC __glewMapControlPointsNV = NULL;
+-PFNGLMAPPARAMETERFVNVPROC __glewMapParameterfvNV = NULL;
+-PFNGLMAPPARAMETERIVNVPROC __glewMapParameterivNV = NULL;
+-
+-PFNGLDELETEFENCESNVPROC __glewDeleteFencesNV = NULL;
+-PFNGLFINISHFENCENVPROC __glewFinishFenceNV = NULL;
+-PFNGLGENFENCESNVPROC __glewGenFencesNV = NULL;
+-PFNGLGETFENCEIVNVPROC __glewGetFenceivNV = NULL;
+-PFNGLISFENCENVPROC __glewIsFenceNV = NULL;
+-PFNGLSETFENCENVPROC __glewSetFenceNV = NULL;
+-PFNGLTESTFENCENVPROC __glewTestFenceNV = NULL;
+-
+-PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glewGetProgramNamedParameterdvNV = NULL;
+-PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glewGetProgramNamedParameterfvNV = NULL;
+-PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glewProgramNamedParameter4dNV = NULL;
+-PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glewProgramNamedParameter4dvNV = NULL;
+-PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glewProgramNamedParameter4fNV = NULL;
+-PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glewProgramNamedParameter4fvNV = NULL;
+-
+-PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glewRenderbufferStorageMultisampleCoverageNV = NULL;
+-
+-PFNGLPROGRAMVERTEXLIMITNVPROC __glewProgramVertexLimitNV = NULL;
+-
+-PFNGLPROGRAMENVPARAMETERI4INVPROC __glewProgramEnvParameterI4iNV = NULL;
+-PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glewProgramEnvParameterI4ivNV = NULL;
+-PFNGLPROGRAMENVPARAMETERI4UINVPROC __glewProgramEnvParameterI4uiNV = NULL;
+-PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glewProgramEnvParameterI4uivNV = NULL;
+-PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glewProgramEnvParametersI4ivNV = NULL;
+-PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glewProgramEnvParametersI4uivNV = NULL;
+-PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glewProgramLocalParameterI4iNV = NULL;
+-PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glewProgramLocalParameterI4ivNV = NULL;
+-PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glewProgramLocalParameterI4uiNV = NULL;
+-PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glewProgramLocalParameterI4uivNV = NULL;
+-PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glewProgramLocalParametersI4ivNV = NULL;
+-PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glewProgramLocalParametersI4uivNV = NULL;
+-
+-PFNGLCOLOR3HNVPROC __glewColor3hNV = NULL;
+-PFNGLCOLOR3HVNVPROC __glewColor3hvNV = NULL;
+-PFNGLCOLOR4HNVPROC __glewColor4hNV = NULL;
+-PFNGLCOLOR4HVNVPROC __glewColor4hvNV = NULL;
+-PFNGLFOGCOORDHNVPROC __glewFogCoordhNV = NULL;
+-PFNGLFOGCOORDHVNVPROC __glewFogCoordhvNV = NULL;
+-PFNGLMULTITEXCOORD1HNVPROC __glewMultiTexCoord1hNV = NULL;
+-PFNGLMULTITEXCOORD1HVNVPROC __glewMultiTexCoord1hvNV = NULL;
+-PFNGLMULTITEXCOORD2HNVPROC __glewMultiTexCoord2hNV = NULL;
+-PFNGLMULTITEXCOORD2HVNVPROC __glewMultiTexCoord2hvNV = NULL;
+-PFNGLMULTITEXCOORD3HNVPROC __glewMultiTexCoord3hNV = NULL;
+-PFNGLMULTITEXCOORD3HVNVPROC __glewMultiTexCoord3hvNV = NULL;
+-PFNGLMULTITEXCOORD4HNVPROC __glewMultiTexCoord4hNV = NULL;
+-PFNGLMULTITEXCOORD4HVNVPROC __glewMultiTexCoord4hvNV = NULL;
+-PFNGLNORMAL3HNVPROC __glewNormal3hNV = NULL;
+-PFNGLNORMAL3HVNVPROC __glewNormal3hvNV = NULL;
+-PFNGLSECONDARYCOLOR3HNVPROC __glewSecondaryColor3hNV = NULL;
+-PFNGLSECONDARYCOLOR3HVNVPROC __glewSecondaryColor3hvNV = NULL;
+-PFNGLTEXCOORD1HNVPROC __glewTexCoord1hNV = NULL;
+-PFNGLTEXCOORD1HVNVPROC __glewTexCoord1hvNV = NULL;
+-PFNGLTEXCOORD2HNVPROC __glewTexCoord2hNV = NULL;
+-PFNGLTEXCOORD2HVNVPROC __glewTexCoord2hvNV = NULL;
+-PFNGLTEXCOORD3HNVPROC __glewTexCoord3hNV = NULL;
+-PFNGLTEXCOORD3HVNVPROC __glewTexCoord3hvNV = NULL;
+-PFNGLTEXCOORD4HNVPROC __glewTexCoord4hNV = NULL;
+-PFNGLTEXCOORD4HVNVPROC __glewTexCoord4hvNV = NULL;
+-PFNGLVERTEX2HNVPROC __glewVertex2hNV = NULL;
+-PFNGLVERTEX2HVNVPROC __glewVertex2hvNV = NULL;
+-PFNGLVERTEX3HNVPROC __glewVertex3hNV = NULL;
+-PFNGLVERTEX3HVNVPROC __glewVertex3hvNV = NULL;
+-PFNGLVERTEX4HNVPROC __glewVertex4hNV = NULL;
+-PFNGLVERTEX4HVNVPROC __glewVertex4hvNV = NULL;
+-PFNGLVERTEXATTRIB1HNVPROC __glewVertexAttrib1hNV = NULL;
+-PFNGLVERTEXATTRIB1HVNVPROC __glewVertexAttrib1hvNV = NULL;
+-PFNGLVERTEXATTRIB2HNVPROC __glewVertexAttrib2hNV = NULL;
+-PFNGLVERTEXATTRIB2HVNVPROC __glewVertexAttrib2hvNV = NULL;
+-PFNGLVERTEXATTRIB3HNVPROC __glewVertexAttrib3hNV = NULL;
+-PFNGLVERTEXATTRIB3HVNVPROC __glewVertexAttrib3hvNV = NULL;
+-PFNGLVERTEXATTRIB4HNVPROC __glewVertexAttrib4hNV = NULL;
+-PFNGLVERTEXATTRIB4HVNVPROC __glewVertexAttrib4hvNV = NULL;
+-PFNGLVERTEXATTRIBS1HVNVPROC __glewVertexAttribs1hvNV = NULL;
+-PFNGLVERTEXATTRIBS2HVNVPROC __glewVertexAttribs2hvNV = NULL;
+-PFNGLVERTEXATTRIBS3HVNVPROC __glewVertexAttribs3hvNV = NULL;
+-PFNGLVERTEXATTRIBS4HVNVPROC __glewVertexAttribs4hvNV = NULL;
+-PFNGLVERTEXWEIGHTHNVPROC __glewVertexWeighthNV = NULL;
+-PFNGLVERTEXWEIGHTHVNVPROC __glewVertexWeighthvNV = NULL;
+-
+-PFNGLBEGINOCCLUSIONQUERYNVPROC __glewBeginOcclusionQueryNV = NULL;
+-PFNGLDELETEOCCLUSIONQUERIESNVPROC __glewDeleteOcclusionQueriesNV = NULL;
+-PFNGLENDOCCLUSIONQUERYNVPROC __glewEndOcclusionQueryNV = NULL;
+-PFNGLGENOCCLUSIONQUERIESNVPROC __glewGenOcclusionQueriesNV = NULL;
+-PFNGLGETOCCLUSIONQUERYIVNVPROC __glewGetOcclusionQueryivNV = NULL;
+-PFNGLGETOCCLUSIONQUERYUIVNVPROC __glewGetOcclusionQueryuivNV = NULL;
+-PFNGLISOCCLUSIONQUERYNVPROC __glewIsOcclusionQueryNV = NULL;
+-
+-PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glewProgramBufferParametersIivNV = NULL;
+-PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glewProgramBufferParametersIuivNV = NULL;
+-PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glewProgramBufferParametersfvNV = NULL;
+-
+-PFNGLFLUSHPIXELDATARANGENVPROC __glewFlushPixelDataRangeNV = NULL;
+-PFNGLPIXELDATARANGENVPROC __glewPixelDataRangeNV = NULL;
+-
+-PFNGLPOINTPARAMETERINVPROC __glewPointParameteriNV = NULL;
+-PFNGLPOINTPARAMETERIVNVPROC __glewPointParameterivNV = NULL;
+-
+-PFNGLPRIMITIVERESTARTINDEXNVPROC __glewPrimitiveRestartIndexNV = NULL;
+-PFNGLPRIMITIVERESTARTNVPROC __glewPrimitiveRestartNV = NULL;
+-
+-PFNGLCOMBINERINPUTNVPROC __glewCombinerInputNV = NULL;
+-PFNGLCOMBINEROUTPUTNVPROC __glewCombinerOutputNV = NULL;
+-PFNGLCOMBINERPARAMETERFNVPROC __glewCombinerParameterfNV = NULL;
+-PFNGLCOMBINERPARAMETERFVNVPROC __glewCombinerParameterfvNV = NULL;
+-PFNGLCOMBINERPARAMETERINVPROC __glewCombinerParameteriNV = NULL;
+-PFNGLCOMBINERPARAMETERIVNVPROC __glewCombinerParameterivNV = NULL;
+-PFNGLFINALCOMBINERINPUTNVPROC __glewFinalCombinerInputNV = NULL;
+-PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glewGetCombinerInputParameterfvNV = NULL;
+-PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glewGetCombinerInputParameterivNV = NULL;
+-PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glewGetCombinerOutputParameterfvNV = NULL;
+-PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glewGetCombinerOutputParameterivNV = NULL;
+-PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glewGetFinalCombinerInputParameterfvNV = NULL;
+-PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glewGetFinalCombinerInputParameterivNV = NULL;
+-
+-PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glewCombinerStageParameterfvNV = NULL;
+-PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glewGetCombinerStageParameterfvNV = NULL;
+-
+-PFNGLACTIVEVARYINGNVPROC __glewActiveVaryingNV = NULL;
+-PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glewBeginTransformFeedbackNV = NULL;
+-PFNGLBINDBUFFERBASENVPROC __glewBindBufferBaseNV = NULL;
+-PFNGLBINDBUFFEROFFSETNVPROC __glewBindBufferOffsetNV = NULL;
+-PFNGLBINDBUFFERRANGENVPROC __glewBindBufferRangeNV = NULL;
+-PFNGLENDTRANSFORMFEEDBACKNVPROC __glewEndTransformFeedbackNV = NULL;
+-PFNGLGETACTIVEVARYINGNVPROC __glewGetActiveVaryingNV = NULL;
+-PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glewGetTransformFeedbackVaryingNV = NULL;
+-PFNGLGETVARYINGLOCATIONNVPROC __glewGetVaryingLocationNV = NULL;
+-PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glewTransformFeedbackAttribsNV = NULL;
+-PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glewTransformFeedbackVaryingsNV = NULL;
+-
+-PFNGLFLUSHVERTEXARRAYRANGENVPROC __glewFlushVertexArrayRangeNV = NULL;
+-PFNGLVERTEXARRAYRANGENVPROC __glewVertexArrayRangeNV = NULL;
+-
+-PFNGLAREPROGRAMSRESIDENTNVPROC __glewAreProgramsResidentNV = NULL;
+-PFNGLBINDPROGRAMNVPROC __glewBindProgramNV = NULL;
+-PFNGLDELETEPROGRAMSNVPROC __glewDeleteProgramsNV = NULL;
+-PFNGLEXECUTEPROGRAMNVPROC __glewExecuteProgramNV = NULL;
+-PFNGLGENPROGRAMSNVPROC __glewGenProgramsNV = NULL;
+-PFNGLGETPROGRAMPARAMETERDVNVPROC __glewGetProgramParameterdvNV = NULL;
+-PFNGLGETPROGRAMPARAMETERFVNVPROC __glewGetProgramParameterfvNV = NULL;
+-PFNGLGETPROGRAMSTRINGNVPROC __glewGetProgramStringNV = NULL;
+-PFNGLGETPROGRAMIVNVPROC __glewGetProgramivNV = NULL;
+-PFNGLGETTRACKMATRIXIVNVPROC __glewGetTrackMatrixivNV = NULL;
+-PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glewGetVertexAttribPointervNV = NULL;
+-PFNGLGETVERTEXATTRIBDVNVPROC __glewGetVertexAttribdvNV = NULL;
+-PFNGLGETVERTEXATTRIBFVNVPROC __glewGetVertexAttribfvNV = NULL;
+-PFNGLGETVERTEXATTRIBIVNVPROC __glewGetVertexAttribivNV = NULL;
+-PFNGLISPROGRAMNVPROC __glewIsProgramNV = NULL;
+-PFNGLLOADPROGRAMNVPROC __glewLoadProgramNV = NULL;
+-PFNGLPROGRAMPARAMETER4DNVPROC __glewProgramParameter4dNV = NULL;
+-PFNGLPROGRAMPARAMETER4DVNVPROC __glewProgramParameter4dvNV = NULL;
+-PFNGLPROGRAMPARAMETER4FNVPROC __glewProgramParameter4fNV = NULL;
+-PFNGLPROGRAMPARAMETER4FVNVPROC __glewProgramParameter4fvNV = NULL;
+-PFNGLPROGRAMPARAMETERS4DVNVPROC __glewProgramParameters4dvNV = NULL;
+-PFNGLPROGRAMPARAMETERS4FVNVPROC __glewProgramParameters4fvNV = NULL;
+-PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glewRequestResidentProgramsNV = NULL;
+-PFNGLTRACKMATRIXNVPROC __glewTrackMatrixNV = NULL;
+-PFNGLVERTEXATTRIB1DNVPROC __glewVertexAttrib1dNV = NULL;
+-PFNGLVERTEXATTRIB1DVNVPROC __glewVertexAttrib1dvNV = NULL;
+-PFNGLVERTEXATTRIB1FNVPROC __glewVertexAttrib1fNV = NULL;
+-PFNGLVERTEXATTRIB1FVNVPROC __glewVertexAttrib1fvNV = NULL;
+-PFNGLVERTEXATTRIB1SNVPROC __glewVertexAttrib1sNV = NULL;
+-PFNGLVERTEXATTRIB1SVNVPROC __glewVertexAttrib1svNV = NULL;
+-PFNGLVERTEXATTRIB2DNVPROC __glewVertexAttrib2dNV = NULL;
+-PFNGLVERTEXATTRIB2DVNVPROC __glewVertexAttrib2dvNV = NULL;
+-PFNGLVERTEXATTRIB2FNVPROC __glewVertexAttrib2fNV = NULL;
+-PFNGLVERTEXATTRIB2FVNVPROC __glewVertexAttrib2fvNV = NULL;
+-PFNGLVERTEXATTRIB2SNVPROC __glewVertexAttrib2sNV = NULL;
+-PFNGLVERTEXATTRIB2SVNVPROC __glewVertexAttrib2svNV = NULL;
+-PFNGLVERTEXATTRIB3DNVPROC __glewVertexAttrib3dNV = NULL;
+-PFNGLVERTEXATTRIB3DVNVPROC __glewVertexAttrib3dvNV = NULL;
+-PFNGLVERTEXATTRIB3FNVPROC __glewVertexAttrib3fNV = NULL;
+-PFNGLVERTEXATTRIB3FVNVPROC __glewVertexAttrib3fvNV = NULL;
+-PFNGLVERTEXATTRIB3SNVPROC __glewVertexAttrib3sNV = NULL;
+-PFNGLVERTEXATTRIB3SVNVPROC __glewVertexAttrib3svNV = NULL;
+-PFNGLVERTEXATTRIB4DNVPROC __glewVertexAttrib4dNV = NULL;
+-PFNGLVERTEXATTRIB4DVNVPROC __glewVertexAttrib4dvNV = NULL;
+-PFNGLVERTEXATTRIB4FNVPROC __glewVertexAttrib4fNV = NULL;
+-PFNGLVERTEXATTRIB4FVNVPROC __glewVertexAttrib4fvNV = NULL;
+-PFNGLVERTEXATTRIB4SNVPROC __glewVertexAttrib4sNV = NULL;
+-PFNGLVERTEXATTRIB4SVNVPROC __glewVertexAttrib4svNV = NULL;
+-PFNGLVERTEXATTRIB4UBNVPROC __glewVertexAttrib4ubNV = NULL;
+-PFNGLVERTEXATTRIB4UBVNVPROC __glewVertexAttrib4ubvNV = NULL;
+-PFNGLVERTEXATTRIBPOINTERNVPROC __glewVertexAttribPointerNV = NULL;
+-PFNGLVERTEXATTRIBS1DVNVPROC __glewVertexAttribs1dvNV = NULL;
+-PFNGLVERTEXATTRIBS1FVNVPROC __glewVertexAttribs1fvNV = NULL;
+-PFNGLVERTEXATTRIBS1SVNVPROC __glewVertexAttribs1svNV = NULL;
+-PFNGLVERTEXATTRIBS2DVNVPROC __glewVertexAttribs2dvNV = NULL;
+-PFNGLVERTEXATTRIBS2FVNVPROC __glewVertexAttribs2fvNV = NULL;
+-PFNGLVERTEXATTRIBS2SVNVPROC __glewVertexAttribs2svNV = NULL;
+-PFNGLVERTEXATTRIBS3DVNVPROC __glewVertexAttribs3dvNV = NULL;
+-PFNGLVERTEXATTRIBS3FVNVPROC __glewVertexAttribs3fvNV = NULL;
+-PFNGLVERTEXATTRIBS3SVNVPROC __glewVertexAttribs3svNV = NULL;
+-PFNGLVERTEXATTRIBS4DVNVPROC __glewVertexAttribs4dvNV = NULL;
+-PFNGLVERTEXATTRIBS4FVNVPROC __glewVertexAttribs4fvNV = NULL;
+-PFNGLVERTEXATTRIBS4SVNVPROC __glewVertexAttribs4svNV = NULL;
+-PFNGLVERTEXATTRIBS4UBVNVPROC __glewVertexAttribs4ubvNV = NULL;
+-
+-PFNGLCLEARDEPTHFOESPROC __glewClearDepthfOES = NULL;
+-PFNGLCLIPPLANEFOESPROC __glewClipPlanefOES = NULL;
+-PFNGLDEPTHRANGEFOESPROC __glewDepthRangefOES = NULL;
+-PFNGLFRUSTUMFOESPROC __glewFrustumfOES = NULL;
+-PFNGLGETCLIPPLANEFOESPROC __glewGetClipPlanefOES = NULL;
+-PFNGLORTHOFOESPROC __glewOrthofOES = NULL;
+-
+-PFNGLDETAILTEXFUNCSGISPROC __glewDetailTexFuncSGIS = NULL;
+-PFNGLGETDETAILTEXFUNCSGISPROC __glewGetDetailTexFuncSGIS = NULL;
+-
+-PFNGLFOGFUNCSGISPROC __glewFogFuncSGIS = NULL;
+-PFNGLGETFOGFUNCSGISPROC __glewGetFogFuncSGIS = NULL;
+-
+-PFNGLSAMPLEMASKSGISPROC __glewSampleMaskSGIS = NULL;
+-PFNGLSAMPLEPATTERNSGISPROC __glewSamplePatternSGIS = NULL;
+-
+-PFNGLGETSHARPENTEXFUNCSGISPROC __glewGetSharpenTexFuncSGIS = NULL;
+-PFNGLSHARPENTEXFUNCSGISPROC __glewSharpenTexFuncSGIS = NULL;
+-
+-PFNGLTEXIMAGE4DSGISPROC __glewTexImage4DSGIS = NULL;
+-PFNGLTEXSUBIMAGE4DSGISPROC __glewTexSubImage4DSGIS = NULL;
+-
+-PFNGLGETTEXFILTERFUNCSGISPROC __glewGetTexFilterFuncSGIS = NULL;
+-PFNGLTEXFILTERFUNCSGISPROC __glewTexFilterFuncSGIS = NULL;
+-
+-PFNGLASYNCMARKERSGIXPROC __glewAsyncMarkerSGIX = NULL;
+-PFNGLDELETEASYNCMARKERSSGIXPROC __glewDeleteAsyncMarkersSGIX = NULL;
+-PFNGLFINISHASYNCSGIXPROC __glewFinishAsyncSGIX = NULL;
+-PFNGLGENASYNCMARKERSSGIXPROC __glewGenAsyncMarkersSGIX = NULL;
+-PFNGLISASYNCMARKERSGIXPROC __glewIsAsyncMarkerSGIX = NULL;
+-PFNGLPOLLASYNCSGIXPROC __glewPollAsyncSGIX = NULL;
+-
+-PFNGLFLUSHRASTERSGIXPROC __glewFlushRasterSGIX = NULL;
+-
+-PFNGLTEXTUREFOGSGIXPROC __glewTextureFogSGIX = NULL;
+-
+-PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glewFragmentColorMaterialSGIX = NULL;
+-PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glewFragmentLightModelfSGIX = NULL;
+-PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glewFragmentLightModelfvSGIX = NULL;
+-PFNGLFRAGMENTLIGHTMODELISGIXPROC __glewFragmentLightModeliSGIX = NULL;
+-PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glewFragmentLightModelivSGIX = NULL;
+-PFNGLFRAGMENTLIGHTFSGIXPROC __glewFragmentLightfSGIX = NULL;
+-PFNGLFRAGMENTLIGHTFVSGIXPROC __glewFragmentLightfvSGIX = NULL;
+-PFNGLFRAGMENTLIGHTISGIXPROC __glewFragmentLightiSGIX = NULL;
+-PFNGLFRAGMENTLIGHTIVSGIXPROC __glewFragmentLightivSGIX = NULL;
+-PFNGLFRAGMENTMATERIALFSGIXPROC __glewFragmentMaterialfSGIX = NULL;
+-PFNGLFRAGMENTMATERIALFVSGIXPROC __glewFragmentMaterialfvSGIX = NULL;
+-PFNGLFRAGMENTMATERIALISGIXPROC __glewFragmentMaterialiSGIX = NULL;
+-PFNGLFRAGMENTMATERIALIVSGIXPROC __glewFragmentMaterialivSGIX = NULL;
+-PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glewGetFragmentLightfvSGIX = NULL;
+-PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glewGetFragmentLightivSGIX = NULL;
+-PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glewGetFragmentMaterialfvSGIX = NULL;
+-PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glewGetFragmentMaterialivSGIX = NULL;
+-
+-PFNGLFRAMEZOOMSGIXPROC __glewFrameZoomSGIX = NULL;
+-
+-PFNGLPIXELTEXGENSGIXPROC __glewPixelTexGenSGIX = NULL;
+-
+-PFNGLREFERENCEPLANESGIXPROC __glewReferencePlaneSGIX = NULL;
+-
+-PFNGLSPRITEPARAMETERFSGIXPROC __glewSpriteParameterfSGIX = NULL;
+-PFNGLSPRITEPARAMETERFVSGIXPROC __glewSpriteParameterfvSGIX = NULL;
+-PFNGLSPRITEPARAMETERISGIXPROC __glewSpriteParameteriSGIX = NULL;
+-PFNGLSPRITEPARAMETERIVSGIXPROC __glewSpriteParameterivSGIX = NULL;
+-
+-PFNGLTAGSAMPLEBUFFERSGIXPROC __glewTagSampleBufferSGIX = NULL;
+-
+-PFNGLCOLORTABLEPARAMETERFVSGIPROC __glewColorTableParameterfvSGI = NULL;
+-PFNGLCOLORTABLEPARAMETERIVSGIPROC __glewColorTableParameterivSGI = NULL;
+-PFNGLCOLORTABLESGIPROC __glewColorTableSGI = NULL;
+-PFNGLCOPYCOLORTABLESGIPROC __glewCopyColorTableSGI = NULL;
+-PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glewGetColorTableParameterfvSGI = NULL;
+-PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glewGetColorTableParameterivSGI = NULL;
+-PFNGLGETCOLORTABLESGIPROC __glewGetColorTableSGI = NULL;
+-
+-PFNGLFINISHTEXTURESUNXPROC __glewFinishTextureSUNX = NULL;
+-
+-PFNGLGLOBALALPHAFACTORBSUNPROC __glewGlobalAlphaFactorbSUN = NULL;
+-PFNGLGLOBALALPHAFACTORDSUNPROC __glewGlobalAlphaFactordSUN = NULL;
+-PFNGLGLOBALALPHAFACTORFSUNPROC __glewGlobalAlphaFactorfSUN = NULL;
+-PFNGLGLOBALALPHAFACTORISUNPROC __glewGlobalAlphaFactoriSUN = NULL;
+-PFNGLGLOBALALPHAFACTORSSUNPROC __glewGlobalAlphaFactorsSUN = NULL;
+-PFNGLGLOBALALPHAFACTORUBSUNPROC __glewGlobalAlphaFactorubSUN = NULL;
+-PFNGLGLOBALALPHAFACTORUISUNPROC __glewGlobalAlphaFactoruiSUN = NULL;
+-PFNGLGLOBALALPHAFACTORUSSUNPROC __glewGlobalAlphaFactorusSUN = NULL;
+-
+-PFNGLREADVIDEOPIXELSSUNPROC __glewReadVideoPixelsSUN = NULL;
+-
+-PFNGLREPLACEMENTCODEPOINTERSUNPROC __glewReplacementCodePointerSUN = NULL;
+-PFNGLREPLACEMENTCODEUBSUNPROC __glewReplacementCodeubSUN = NULL;
+-PFNGLREPLACEMENTCODEUBVSUNPROC __glewReplacementCodeubvSUN = NULL;
+-PFNGLREPLACEMENTCODEUISUNPROC __glewReplacementCodeuiSUN = NULL;
+-PFNGLREPLACEMENTCODEUIVSUNPROC __glewReplacementCodeuivSUN = NULL;
+-PFNGLREPLACEMENTCODEUSSUNPROC __glewReplacementCodeusSUN = NULL;
+-PFNGLREPLACEMENTCODEUSVSUNPROC __glewReplacementCodeusvSUN = NULL;
+-
+-PFNGLCOLOR3FVERTEX3FSUNPROC __glewColor3fVertex3fSUN = NULL;
+-PFNGLCOLOR3FVERTEX3FVSUNPROC __glewColor3fVertex3fvSUN = NULL;
+-PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewColor4fNormal3fVertex3fSUN = NULL;
+-PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewColor4fNormal3fVertex3fvSUN = NULL;
+-PFNGLCOLOR4UBVERTEX2FSUNPROC __glewColor4ubVertex2fSUN = NULL;
+-PFNGLCOLOR4UBVERTEX2FVSUNPROC __glewColor4ubVertex2fvSUN = NULL;
+-PFNGLCOLOR4UBVERTEX3FSUNPROC __glewColor4ubVertex3fSUN = NULL;
+-PFNGLCOLOR4UBVERTEX3FVSUNPROC __glewColor4ubVertex3fvSUN = NULL;
+-PFNGLNORMAL3FVERTEX3FSUNPROC __glewNormal3fVertex3fSUN = NULL;
+-PFNGLNORMAL3FVERTEX3FVSUNPROC __glewNormal3fVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glewReplacementCodeuiColor3fVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor3fVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glewReplacementCodeuiColor4ubVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glewReplacementCodeuiColor4ubVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiNormal3fVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiNormal3fVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fvSUN = NULL;
+-PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glewReplacementCodeuiVertex3fSUN = NULL;
+-PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glewReplacementCodeuiVertex3fvSUN = NULL;
+-PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glewTexCoord2fColor3fVertex3fSUN = NULL;
+-PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glewTexCoord2fColor3fVertex3fvSUN = NULL;
+-PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
+-PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
+-PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glewTexCoord2fColor4ubVertex3fSUN = NULL;
+-PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glewTexCoord2fColor4ubVertex3fvSUN = NULL;
+-PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fNormal3fVertex3fSUN = NULL;
+-PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fNormal3fVertex3fvSUN = NULL;
+-PFNGLTEXCOORD2FVERTEX3FSUNPROC __glewTexCoord2fVertex3fSUN = NULL;
+-PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glewTexCoord2fVertex3fvSUN = NULL;
+-PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fSUN = NULL;
+-PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fvSUN = NULL;
+-PFNGLTEXCOORD4FVERTEX4FSUNPROC __glewTexCoord4fVertex4fSUN = NULL;
+-PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glewTexCoord4fVertex4fvSUN = NULL;
+-
+-PFNGLADDSWAPHINTRECTWINPROC __glewAddSwapHintRectWIN = NULL;
+-
+-#endif /* !WIN32 || !GLEW_MX */
+-
+-#if !defined(GLEW_MX)
+-
+-GLboolean __GLEW_VERSION_1_1 = GL_FALSE;
+-GLboolean __GLEW_VERSION_1_2 = GL_FALSE;
+-GLboolean __GLEW_VERSION_1_3 = GL_FALSE;
+-GLboolean __GLEW_VERSION_1_4 = GL_FALSE;
+-GLboolean __GLEW_VERSION_1_5 = GL_FALSE;
+-GLboolean __GLEW_VERSION_2_0 = GL_FALSE;
+-GLboolean __GLEW_VERSION_2_1 = GL_FALSE;
+-GLboolean __GLEW_3DFX_multisample = GL_FALSE;
+-GLboolean __GLEW_3DFX_tbuffer = GL_FALSE;
+-GLboolean __GLEW_3DFX_texture_compression_FXT1 = GL_FALSE;
+-GLboolean __GLEW_APPLE_client_storage = GL_FALSE;
+-GLboolean __GLEW_APPLE_element_array = GL_FALSE;
+-GLboolean __GLEW_APPLE_fence = GL_FALSE;
+-GLboolean __GLEW_APPLE_float_pixels = GL_FALSE;
+-GLboolean __GLEW_APPLE_flush_buffer_range = GL_FALSE;
+-GLboolean __GLEW_APPLE_pixel_buffer = GL_FALSE;
+-GLboolean __GLEW_APPLE_specular_vector = GL_FALSE;
+-GLboolean __GLEW_APPLE_texture_range = GL_FALSE;
+-GLboolean __GLEW_APPLE_transform_hint = GL_FALSE;
+-GLboolean __GLEW_APPLE_vertex_array_object = GL_FALSE;
+-GLboolean __GLEW_APPLE_vertex_array_range = GL_FALSE;
+-GLboolean __GLEW_APPLE_ycbcr_422 = GL_FALSE;
+-GLboolean __GLEW_ARB_color_buffer_float = GL_FALSE;
+-GLboolean __GLEW_ARB_depth_texture = GL_FALSE;
+-GLboolean __GLEW_ARB_draw_buffers = GL_FALSE;
+-GLboolean __GLEW_ARB_fragment_program = GL_FALSE;
+-GLboolean __GLEW_ARB_fragment_program_shadow = GL_FALSE;
+-GLboolean __GLEW_ARB_fragment_shader = GL_FALSE;
+-GLboolean __GLEW_ARB_half_float_pixel = GL_FALSE;
+-GLboolean __GLEW_ARB_imaging = GL_FALSE;
+-GLboolean __GLEW_ARB_matrix_palette = GL_FALSE;
+-GLboolean __GLEW_ARB_multisample = GL_FALSE;
+-GLboolean __GLEW_ARB_multitexture = GL_FALSE;
+-GLboolean __GLEW_ARB_occlusion_query = GL_FALSE;
+-GLboolean __GLEW_ARB_pixel_buffer_object = GL_FALSE;
+-GLboolean __GLEW_ARB_point_parameters = GL_FALSE;
+-GLboolean __GLEW_ARB_point_sprite = GL_FALSE;
+-GLboolean __GLEW_ARB_shader_objects = GL_FALSE;
+-GLboolean __GLEW_ARB_shading_language_100 = GL_FALSE;
+-GLboolean __GLEW_ARB_shadow = GL_FALSE;
+-GLboolean __GLEW_ARB_shadow_ambient = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_border_clamp = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_compression = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_cube_map = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_env_add = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_env_combine = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_env_crossbar = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_env_dot3 = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_float = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_mirrored_repeat = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_non_power_of_two = GL_FALSE;
+-GLboolean __GLEW_ARB_texture_rectangle = GL_FALSE;
+-GLboolean __GLEW_ARB_transpose_matrix = GL_FALSE;
+-GLboolean __GLEW_ARB_vertex_blend = GL_FALSE;
+-GLboolean __GLEW_ARB_vertex_buffer_object = GL_FALSE;
+-GLboolean __GLEW_ARB_vertex_program = GL_FALSE;
+-GLboolean __GLEW_ARB_vertex_shader = GL_FALSE;
+-GLboolean __GLEW_ARB_window_pos = GL_FALSE;
+-GLboolean __GLEW_ATIX_point_sprites = GL_FALSE;
+-GLboolean __GLEW_ATIX_texture_env_combine3 = GL_FALSE;
+-GLboolean __GLEW_ATIX_texture_env_route = GL_FALSE;
+-GLboolean __GLEW_ATIX_vertex_shader_output_point_size = GL_FALSE;
+-GLboolean __GLEW_ATI_draw_buffers = GL_FALSE;
+-GLboolean __GLEW_ATI_element_array = GL_FALSE;
+-GLboolean __GLEW_ATI_envmap_bumpmap = GL_FALSE;
+-GLboolean __GLEW_ATI_fragment_shader = GL_FALSE;
+-GLboolean __GLEW_ATI_map_object_buffer = GL_FALSE;
+-GLboolean __GLEW_ATI_pn_triangles = GL_FALSE;
+-GLboolean __GLEW_ATI_separate_stencil = GL_FALSE;
+-GLboolean __GLEW_ATI_shader_texture_lod = GL_FALSE;
+-GLboolean __GLEW_ATI_text_fragment_shader = GL_FALSE;
+-GLboolean __GLEW_ATI_texture_compression_3dc = GL_FALSE;
+-GLboolean __GLEW_ATI_texture_env_combine3 = GL_FALSE;
+-GLboolean __GLEW_ATI_texture_float = GL_FALSE;
+-GLboolean __GLEW_ATI_texture_mirror_once = GL_FALSE;
+-GLboolean __GLEW_ATI_vertex_array_object = GL_FALSE;
+-GLboolean __GLEW_ATI_vertex_attrib_array_object = GL_FALSE;
+-GLboolean __GLEW_ATI_vertex_streams = GL_FALSE;
+-GLboolean __GLEW_EXT_422_pixels = GL_FALSE;
+-GLboolean __GLEW_EXT_Cg_shader = GL_FALSE;
+-GLboolean __GLEW_EXT_abgr = GL_FALSE;
+-GLboolean __GLEW_EXT_bgra = GL_FALSE;
+-GLboolean __GLEW_EXT_bindable_uniform = GL_FALSE;
+-GLboolean __GLEW_EXT_blend_color = GL_FALSE;
+-GLboolean __GLEW_EXT_blend_equation_separate = GL_FALSE;
+-GLboolean __GLEW_EXT_blend_func_separate = GL_FALSE;
+-GLboolean __GLEW_EXT_blend_logic_op = GL_FALSE;
+-GLboolean __GLEW_EXT_blend_minmax = GL_FALSE;
+-GLboolean __GLEW_EXT_blend_subtract = GL_FALSE;
+-GLboolean __GLEW_EXT_clip_volume_hint = GL_FALSE;
+-GLboolean __GLEW_EXT_cmyka = GL_FALSE;
+-GLboolean __GLEW_EXT_color_subtable = GL_FALSE;
+-GLboolean __GLEW_EXT_compiled_vertex_array = GL_FALSE;
+-GLboolean __GLEW_EXT_convolution = GL_FALSE;
+-GLboolean __GLEW_EXT_coordinate_frame = GL_FALSE;
+-GLboolean __GLEW_EXT_copy_texture = GL_FALSE;
+-GLboolean __GLEW_EXT_cull_vertex = GL_FALSE;
+-GLboolean __GLEW_EXT_depth_bounds_test = GL_FALSE;
+-GLboolean __GLEW_EXT_draw_buffers2 = GL_FALSE;
+-GLboolean __GLEW_EXT_draw_instanced = GL_FALSE;
+-GLboolean __GLEW_EXT_draw_range_elements = GL_FALSE;
+-GLboolean __GLEW_EXT_fog_coord = GL_FALSE;
+-GLboolean __GLEW_EXT_fragment_lighting = GL_FALSE;
+-GLboolean __GLEW_EXT_framebuffer_blit = GL_FALSE;
+-GLboolean __GLEW_EXT_framebuffer_multisample = GL_FALSE;
+-GLboolean __GLEW_EXT_framebuffer_object = GL_FALSE;
+-GLboolean __GLEW_EXT_framebuffer_sRGB = GL_FALSE;
+-GLboolean __GLEW_EXT_geometry_shader4 = GL_FALSE;
+-GLboolean __GLEW_EXT_gpu_program_parameters = GL_FALSE;
+-GLboolean __GLEW_EXT_gpu_shader4 = GL_FALSE;
+-GLboolean __GLEW_EXT_histogram = GL_FALSE;
+-GLboolean __GLEW_EXT_index_array_formats = GL_FALSE;
+-GLboolean __GLEW_EXT_index_func = GL_FALSE;
+-GLboolean __GLEW_EXT_index_material = GL_FALSE;
+-GLboolean __GLEW_EXT_index_texture = GL_FALSE;
+-GLboolean __GLEW_EXT_light_texture = GL_FALSE;
+-GLboolean __GLEW_EXT_misc_attribute = GL_FALSE;
+-GLboolean __GLEW_EXT_multi_draw_arrays = GL_FALSE;
+-GLboolean __GLEW_EXT_multisample = GL_FALSE;
+-GLboolean __GLEW_EXT_packed_depth_stencil = GL_FALSE;
+-GLboolean __GLEW_EXT_packed_float = GL_FALSE;
+-GLboolean __GLEW_EXT_packed_pixels = GL_FALSE;
+-GLboolean __GLEW_EXT_paletted_texture = GL_FALSE;
+-GLboolean __GLEW_EXT_pixel_buffer_object = GL_FALSE;
+-GLboolean __GLEW_EXT_pixel_transform = GL_FALSE;
+-GLboolean __GLEW_EXT_pixel_transform_color_table = GL_FALSE;
+-GLboolean __GLEW_EXT_point_parameters = GL_FALSE;
+-GLboolean __GLEW_EXT_polygon_offset = GL_FALSE;
+-GLboolean __GLEW_EXT_rescale_normal = GL_FALSE;
+-GLboolean __GLEW_EXT_scene_marker = GL_FALSE;
+-GLboolean __GLEW_EXT_secondary_color = GL_FALSE;
+-GLboolean __GLEW_EXT_separate_specular_color = GL_FALSE;
+-GLboolean __GLEW_EXT_shadow_funcs = GL_FALSE;
+-GLboolean __GLEW_EXT_shared_texture_palette = GL_FALSE;
+-GLboolean __GLEW_EXT_stencil_clear_tag = GL_FALSE;
+-GLboolean __GLEW_EXT_stencil_two_side = GL_FALSE;
+-GLboolean __GLEW_EXT_stencil_wrap = GL_FALSE;
+-GLboolean __GLEW_EXT_subtexture = GL_FALSE;
+-GLboolean __GLEW_EXT_texture = GL_FALSE;
+-GLboolean __GLEW_EXT_texture3D = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_array = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_buffer_object = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_compression_dxt1 = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_compression_latc = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_compression_rgtc = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_compression_s3tc = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_cube_map = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_edge_clamp = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_env = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_env_add = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_env_combine = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_env_dot3 = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_filter_anisotropic = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_integer = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_lod_bias = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_mirror_clamp = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_object = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_perturb_normal = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_rectangle = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_sRGB = GL_FALSE;
+-GLboolean __GLEW_EXT_texture_shared_exponent = GL_FALSE;
+-GLboolean __GLEW_EXT_timer_query = GL_FALSE;
+-GLboolean __GLEW_EXT_vertex_array = GL_FALSE;
+-GLboolean __GLEW_EXT_vertex_shader = GL_FALSE;
+-GLboolean __GLEW_EXT_vertex_weighting = GL_FALSE;
+-GLboolean __GLEW_GREMEDY_frame_terminator = GL_FALSE;
+-GLboolean __GLEW_GREMEDY_string_marker = GL_FALSE;
+-GLboolean __GLEW_HP_convolution_border_modes = GL_FALSE;
+-GLboolean __GLEW_HP_image_transform = GL_FALSE;
+-GLboolean __GLEW_HP_occlusion_test = GL_FALSE;
+-GLboolean __GLEW_HP_texture_lighting = GL_FALSE;
+-GLboolean __GLEW_IBM_cull_vertex = GL_FALSE;
+-GLboolean __GLEW_IBM_multimode_draw_arrays = GL_FALSE;
+-GLboolean __GLEW_IBM_rasterpos_clip = GL_FALSE;
+-GLboolean __GLEW_IBM_static_data = GL_FALSE;
+-GLboolean __GLEW_IBM_texture_mirrored_repeat = GL_FALSE;
+-GLboolean __GLEW_IBM_vertex_array_lists = GL_FALSE;
+-GLboolean __GLEW_INGR_color_clamp = GL_FALSE;
+-GLboolean __GLEW_INGR_interlace_read = GL_FALSE;
+-GLboolean __GLEW_INTEL_parallel_arrays = GL_FALSE;
+-GLboolean __GLEW_INTEL_texture_scissor = GL_FALSE;
+-GLboolean __GLEW_KTX_buffer_region = GL_FALSE;
+-GLboolean __GLEW_MESAX_texture_stack = GL_FALSE;
+-GLboolean __GLEW_MESA_pack_invert = GL_FALSE;
+-GLboolean __GLEW_MESA_resize_buffers = GL_FALSE;
+-GLboolean __GLEW_MESA_window_pos = GL_FALSE;
+-GLboolean __GLEW_MESA_ycbcr_texture = GL_FALSE;
+-GLboolean __GLEW_NV_blend_square = GL_FALSE;
+-GLboolean __GLEW_NV_copy_depth_to_color = GL_FALSE;
+-GLboolean __GLEW_NV_depth_buffer_float = GL_FALSE;
+-GLboolean __GLEW_NV_depth_clamp = GL_FALSE;
+-GLboolean __GLEW_NV_depth_range_unclamped = GL_FALSE;
+-GLboolean __GLEW_NV_evaluators = GL_FALSE;
+-GLboolean __GLEW_NV_fence = GL_FALSE;
+-GLboolean __GLEW_NV_float_buffer = GL_FALSE;
+-GLboolean __GLEW_NV_fog_distance = GL_FALSE;
+-GLboolean __GLEW_NV_fragment_program = GL_FALSE;
+-GLboolean __GLEW_NV_fragment_program2 = GL_FALSE;
+-GLboolean __GLEW_NV_fragment_program4 = GL_FALSE;
+-GLboolean __GLEW_NV_fragment_program_option = GL_FALSE;
+-GLboolean __GLEW_NV_framebuffer_multisample_coverage = GL_FALSE;
+-GLboolean __GLEW_NV_geometry_program4 = GL_FALSE;
+-GLboolean __GLEW_NV_geometry_shader4 = GL_FALSE;
+-GLboolean __GLEW_NV_gpu_program4 = GL_FALSE;
+-GLboolean __GLEW_NV_half_float = GL_FALSE;
+-GLboolean __GLEW_NV_light_max_exponent = GL_FALSE;
+-GLboolean __GLEW_NV_multisample_filter_hint = GL_FALSE;
+-GLboolean __GLEW_NV_occlusion_query = GL_FALSE;
+-GLboolean __GLEW_NV_packed_depth_stencil = GL_FALSE;
+-GLboolean __GLEW_NV_parameter_buffer_object = GL_FALSE;
+-GLboolean __GLEW_NV_pixel_data_range = GL_FALSE;
+-GLboolean __GLEW_NV_point_sprite = GL_FALSE;
+-GLboolean __GLEW_NV_primitive_restart = GL_FALSE;
+-GLboolean __GLEW_NV_register_combiners = GL_FALSE;
+-GLboolean __GLEW_NV_register_combiners2 = GL_FALSE;
+-GLboolean __GLEW_NV_texgen_emboss = GL_FALSE;
+-GLboolean __GLEW_NV_texgen_reflection = GL_FALSE;
+-GLboolean __GLEW_NV_texture_compression_vtc = GL_FALSE;
+-GLboolean __GLEW_NV_texture_env_combine4 = GL_FALSE;
+-GLboolean __GLEW_NV_texture_expand_normal = GL_FALSE;
+-GLboolean __GLEW_NV_texture_rectangle = GL_FALSE;
+-GLboolean __GLEW_NV_texture_shader = GL_FALSE;
+-GLboolean __GLEW_NV_texture_shader2 = GL_FALSE;
+-GLboolean __GLEW_NV_texture_shader3 = GL_FALSE;
+-GLboolean __GLEW_NV_transform_feedback = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_array_range = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_array_range2 = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_program = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_program1_1 = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_program2 = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_program2_option = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_program3 = GL_FALSE;
+-GLboolean __GLEW_NV_vertex_program4 = GL_FALSE;
+-GLboolean __GLEW_OES_byte_coordinates = GL_FALSE;
+-GLboolean __GLEW_OES_compressed_paletted_texture = GL_FALSE;
+-GLboolean __GLEW_OES_read_format = GL_FALSE;
+-GLboolean __GLEW_OES_single_precision = GL_FALSE;
+-GLboolean __GLEW_OML_interlace = GL_FALSE;
+-GLboolean __GLEW_OML_resample = GL_FALSE;
+-GLboolean __GLEW_OML_subsample = GL_FALSE;
+-GLboolean __GLEW_PGI_misc_hints = GL_FALSE;
+-GLboolean __GLEW_PGI_vertex_hints = GL_FALSE;
+-GLboolean __GLEW_REND_screen_coordinates = GL_FALSE;
+-GLboolean __GLEW_S3_s3tc = GL_FALSE;
+-GLboolean __GLEW_SGIS_color_range = GL_FALSE;
+-GLboolean __GLEW_SGIS_detail_texture = GL_FALSE;
+-GLboolean __GLEW_SGIS_fog_function = GL_FALSE;
+-GLboolean __GLEW_SGIS_generate_mipmap = GL_FALSE;
+-GLboolean __GLEW_SGIS_multisample = GL_FALSE;
+-GLboolean __GLEW_SGIS_pixel_texture = GL_FALSE;
+-GLboolean __GLEW_SGIS_sharpen_texture = GL_FALSE;
+-GLboolean __GLEW_SGIS_texture4D = GL_FALSE;
+-GLboolean __GLEW_SGIS_texture_border_clamp = GL_FALSE;
+-GLboolean __GLEW_SGIS_texture_edge_clamp = GL_FALSE;
+-GLboolean __GLEW_SGIS_texture_filter4 = GL_FALSE;
+-GLboolean __GLEW_SGIS_texture_lod = GL_FALSE;
+-GLboolean __GLEW_SGIS_texture_select = GL_FALSE;
+-GLboolean __GLEW_SGIX_async = GL_FALSE;
+-GLboolean __GLEW_SGIX_async_histogram = GL_FALSE;
+-GLboolean __GLEW_SGIX_async_pixel = GL_FALSE;
+-GLboolean __GLEW_SGIX_blend_alpha_minmax = GL_FALSE;
+-GLboolean __GLEW_SGIX_clipmap = GL_FALSE;
+-GLboolean __GLEW_SGIX_depth_texture = GL_FALSE;
+-GLboolean __GLEW_SGIX_flush_raster = GL_FALSE;
+-GLboolean __GLEW_SGIX_fog_offset = GL_FALSE;
+-GLboolean __GLEW_SGIX_fog_texture = GL_FALSE;
+-GLboolean __GLEW_SGIX_fragment_specular_lighting = GL_FALSE;
+-GLboolean __GLEW_SGIX_framezoom = GL_FALSE;
+-GLboolean __GLEW_SGIX_interlace = GL_FALSE;
+-GLboolean __GLEW_SGIX_ir_instrument1 = GL_FALSE;
+-GLboolean __GLEW_SGIX_list_priority = GL_FALSE;
+-GLboolean __GLEW_SGIX_pixel_texture = GL_FALSE;
+-GLboolean __GLEW_SGIX_pixel_texture_bits = GL_FALSE;
+-GLboolean __GLEW_SGIX_reference_plane = GL_FALSE;
+-GLboolean __GLEW_SGIX_resample = GL_FALSE;
+-GLboolean __GLEW_SGIX_shadow = GL_FALSE;
+-GLboolean __GLEW_SGIX_shadow_ambient = GL_FALSE;
+-GLboolean __GLEW_SGIX_sprite = GL_FALSE;
+-GLboolean __GLEW_SGIX_tag_sample_buffer = GL_FALSE;
+-GLboolean __GLEW_SGIX_texture_add_env = GL_FALSE;
+-GLboolean __GLEW_SGIX_texture_coordinate_clamp = GL_FALSE;
+-GLboolean __GLEW_SGIX_texture_lod_bias = GL_FALSE;
+-GLboolean __GLEW_SGIX_texture_multi_buffer = GL_FALSE;
+-GLboolean __GLEW_SGIX_texture_range = GL_FALSE;
+-GLboolean __GLEW_SGIX_texture_scale_bias = GL_FALSE;
+-GLboolean __GLEW_SGIX_vertex_preclip = GL_FALSE;
+-GLboolean __GLEW_SGIX_vertex_preclip_hint = GL_FALSE;
+-GLboolean __GLEW_SGIX_ycrcb = GL_FALSE;
+-GLboolean __GLEW_SGI_color_matrix = GL_FALSE;
+-GLboolean __GLEW_SGI_color_table = GL_FALSE;
+-GLboolean __GLEW_SGI_texture_color_table = GL_FALSE;
+-GLboolean __GLEW_SUNX_constant_data = GL_FALSE;
+-GLboolean __GLEW_SUN_convolution_border_modes = GL_FALSE;
+-GLboolean __GLEW_SUN_global_alpha = GL_FALSE;
+-GLboolean __GLEW_SUN_mesh_array = GL_FALSE;
+-GLboolean __GLEW_SUN_read_video_pixels = GL_FALSE;
+-GLboolean __GLEW_SUN_slice_accum = GL_FALSE;
+-GLboolean __GLEW_SUN_triangle_list = GL_FALSE;
+-GLboolean __GLEW_SUN_vertex = GL_FALSE;
+-GLboolean __GLEW_WIN_phong_shading = GL_FALSE;
+-GLboolean __GLEW_WIN_specular_fog = GL_FALSE;
+-GLboolean __GLEW_WIN_swap_hint = GL_FALSE;
+-
+-#endif /* !GLEW_MX */
+-
+-#ifdef GL_VERSION_1_2
+-
+-static GLboolean _glewInit_GL_VERSION_1_2 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage3D")) == NULL) || r;
+-  r = ((glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElements")) == NULL) || r;
+-  r = ((glTexImage3D = (PFNGLTEXIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glTexImage3D")) == NULL) || r;
+-  r = ((glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage3D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_VERSION_1_2 */
+-
+-#ifdef GL_VERSION_1_3
+-
+-static GLboolean _glewInit_GL_VERSION_1_3 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glActiveTexture = (PFNGLACTIVETEXTUREPROC)glewGetProcAddress((const GLubyte*)"glActiveTexture")) == NULL) || r;
+-  r = ((glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)glewGetProcAddress((const GLubyte*)"glClientActiveTexture")) == NULL) || r;
+-  r = ((glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage1D")) == NULL) || r;
+-  r = ((glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage2D")) == NULL) || r;
+-  r = ((glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage3D")) == NULL) || r;
+-  r = ((glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage1D")) == NULL) || r;
+-  r = ((glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage2D")) == NULL) || r;
+-  r = ((glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage3D")) == NULL) || r;
+-  r = ((glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)glewGetProcAddress((const GLubyte*)"glGetCompressedTexImage")) == NULL) || r;
+-  r = ((glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixd")) == NULL) || r;
+-  r = ((glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixf")) == NULL) || r;
+-  r = ((glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixd")) == NULL) || r;
+-  r = ((glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixf")) == NULL) || r;
+-  r = ((glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1d")) == NULL) || r;
+-  r = ((glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1dv")) == NULL) || r;
+-  r = ((glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1f")) == NULL) || r;
+-  r = ((glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1fv")) == NULL) || r;
+-  r = ((glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1i")) == NULL) || r;
+-  r = ((glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1iv")) == NULL) || r;
+-  r = ((glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1s")) == NULL) || r;
+-  r = ((glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1sv")) == NULL) || r;
+-  r = ((glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2d")) == NULL) || r;
+-  r = ((glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2dv")) == NULL) || r;
+-  r = ((glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2f")) == NULL) || r;
+-  r = ((glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2fv")) == NULL) || r;
+-  r = ((glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2i")) == NULL) || r;
+-  r = ((glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2iv")) == NULL) || r;
+-  r = ((glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2s")) == NULL) || r;
+-  r = ((glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2sv")) == NULL) || r;
+-  r = ((glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3d")) == NULL) || r;
+-  r = ((glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3dv")) == NULL) || r;
+-  r = ((glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3f")) == NULL) || r;
+-  r = ((glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3fv")) == NULL) || r;
+-  r = ((glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3i")) == NULL) || r;
+-  r = ((glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3iv")) == NULL) || r;
+-  r = ((glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3s")) == NULL) || r;
+-  r = ((glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3sv")) == NULL) || r;
+-  r = ((glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4d")) == NULL) || r;
+-  r = ((glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4dv")) == NULL) || r;
+-  r = ((glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4f")) == NULL) || r;
+-  r = ((glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4fv")) == NULL) || r;
+-  r = ((glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4i")) == NULL) || r;
+-  r = ((glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4iv")) == NULL) || r;
+-  r = ((glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4s")) == NULL) || r;
+-  r = ((glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4sv")) == NULL) || r;
+-  r = ((glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)glewGetProcAddress((const GLubyte*)"glSampleCoverage")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_VERSION_1_3 */
+-
+-#ifdef GL_VERSION_1_4
+-
+-static GLboolean _glewInit_GL_VERSION_1_4 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBlendColor = (PFNGLBLENDCOLORPROC)glewGetProcAddress((const GLubyte*)"glBlendColor")) == NULL) || r;
+-  r = ((glBlendEquation = (PFNGLBLENDEQUATIONPROC)glewGetProcAddress((const GLubyte*)"glBlendEquation")) == NULL) || r;
+-  r = ((glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glBlendFuncSeparate")) == NULL) || r;
+-  r = ((glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)glewGetProcAddress((const GLubyte*)"glFogCoordPointer")) == NULL) || r;
+-  r = ((glFogCoordd = (PFNGLFOGCOORDDPROC)glewGetProcAddress((const GLubyte*)"glFogCoordd")) == NULL) || r;
+-  r = ((glFogCoorddv = (PFNGLFOGCOORDDVPROC)glewGetProcAddress((const GLubyte*)"glFogCoorddv")) == NULL) || r;
+-  r = ((glFogCoordf = (PFNGLFOGCOORDFPROC)glewGetProcAddress((const GLubyte*)"glFogCoordf")) == NULL) || r;
+-  r = ((glFogCoordfv = (PFNGLFOGCOORDFVPROC)glewGetProcAddress((const GLubyte*)"glFogCoordfv")) == NULL) || r;
+-  r = ((glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawArrays")) == NULL) || r;
+-  r = ((glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawElements")) == NULL) || r;
+-  r = ((glPointParameterf = (PFNGLPOINTPARAMETERFPROC)glewGetProcAddress((const GLubyte*)"glPointParameterf")) == NULL) || r;
+-  r = ((glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfv")) == NULL) || r;
+-  r = ((glPointParameteri = (PFNGLPOINTPARAMETERIPROC)glewGetProcAddress((const GLubyte*)"glPointParameteri")) == NULL) || r;
+-  r = ((glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glPointParameteriv")) == NULL) || r;
+-  r = ((glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3b")) == NULL) || r;
+-  r = ((glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3bv")) == NULL) || r;
+-  r = ((glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3d")) == NULL) || r;
+-  r = ((glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3dv")) == NULL) || r;
+-  r = ((glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3f")) == NULL) || r;
+-  r = ((glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3fv")) == NULL) || r;
+-  r = ((glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3i")) == NULL) || r;
+-  r = ((glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3iv")) == NULL) || r;
+-  r = ((glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3s")) == NULL) || r;
+-  r = ((glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3sv")) == NULL) || r;
+-  r = ((glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ub")) == NULL) || r;
+-  r = ((glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ubv")) == NULL) || r;
+-  r = ((glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ui")) == NULL) || r;
+-  r = ((glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3uiv")) == NULL) || r;
+-  r = ((glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3us")) == NULL) || r;
+-  r = ((glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3usv")) == NULL) || r;
+-  r = ((glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColorPointer")) == NULL) || r;
+-  r = ((glWindowPos2d = (PFNGLWINDOWPOS2DPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2d")) == NULL) || r;
+-  r = ((glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dv")) == NULL) || r;
+-  r = ((glWindowPos2f = (PFNGLWINDOWPOS2FPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2f")) == NULL) || r;
+-  r = ((glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fv")) == NULL) || r;
+-  r = ((glWindowPos2i = (PFNGLWINDOWPOS2IPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2i")) == NULL) || r;
+-  r = ((glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2iv")) == NULL) || r;
+-  r = ((glWindowPos2s = (PFNGLWINDOWPOS2SPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2s")) == NULL) || r;
+-  r = ((glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2sv")) == NULL) || r;
+-  r = ((glWindowPos3d = (PFNGLWINDOWPOS3DPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3d")) == NULL) || r;
+-  r = ((glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dv")) == NULL) || r;
+-  r = ((glWindowPos3f = (PFNGLWINDOWPOS3FPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3f")) == NULL) || r;
+-  r = ((glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fv")) == NULL) || r;
+-  r = ((glWindowPos3i = (PFNGLWINDOWPOS3IPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3i")) == NULL) || r;
+-  r = ((glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3iv")) == NULL) || r;
+-  r = ((glWindowPos3s = (PFNGLWINDOWPOS3SPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3s")) == NULL) || r;
+-  r = ((glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3sv")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_VERSION_1_4 */
+-
+-#ifdef GL_VERSION_1_5
+-
+-static GLboolean _glewInit_GL_VERSION_1_5 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBeginQuery = (PFNGLBEGINQUERYPROC)glewGetProcAddress((const GLubyte*)"glBeginQuery")) == NULL) || r;
+-  r = ((glBindBuffer = (PFNGLBINDBUFFERPROC)glewGetProcAddress((const GLubyte*)"glBindBuffer")) == NULL) || r;
+-  r = ((glBufferData = (PFNGLBUFFERDATAPROC)glewGetProcAddress((const GLubyte*)"glBufferData")) == NULL) || r;
+-  r = ((glBufferSubData = (PFNGLBUFFERSUBDATAPROC)glewGetProcAddress((const GLubyte*)"glBufferSubData")) == NULL) || r;
+-  r = ((glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)glewGetProcAddress((const GLubyte*)"glDeleteBuffers")) == NULL) || r;
+-  r = ((glDeleteQueries = (PFNGLDELETEQUERIESPROC)glewGetProcAddress((const GLubyte*)"glDeleteQueries")) == NULL) || r;
+-  r = ((glEndQuery = (PFNGLENDQUERYPROC)glewGetProcAddress((const GLubyte*)"glEndQuery")) == NULL) || r;
+-  r = ((glGenBuffers = (PFNGLGENBUFFERSPROC)glewGetProcAddress((const GLubyte*)"glGenBuffers")) == NULL) || r;
+-  r = ((glGenQueries = (PFNGLGENQUERIESPROC)glewGetProcAddress((const GLubyte*)"glGenQueries")) == NULL) || r;
+-  r = ((glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetBufferParameteriv")) == NULL) || r;
+-  r = ((glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)glewGetProcAddress((const GLubyte*)"glGetBufferPointerv")) == NULL) || r;
+-  r = ((glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)glewGetProcAddress((const GLubyte*)"glGetBufferSubData")) == NULL) || r;
+-  r = ((glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectiv")) == NULL) || r;
+-  r = ((glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectuiv")) == NULL) || r;
+-  r = ((glGetQueryiv = (PFNGLGETQUERYIVPROC)glewGetProcAddress((const GLubyte*)"glGetQueryiv")) == NULL) || r;
+-  r = ((glIsBuffer = (PFNGLISBUFFERPROC)glewGetProcAddress((const GLubyte*)"glIsBuffer")) == NULL) || r;
+-  r = ((glIsQuery = (PFNGLISQUERYPROC)glewGetProcAddress((const GLubyte*)"glIsQuery")) == NULL) || r;
+-  r = ((glMapBuffer = (PFNGLMAPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glMapBuffer")) == NULL) || r;
+-  r = ((glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glUnmapBuffer")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_VERSION_1_5 */
+-
+-#ifdef GL_VERSION_2_0
+-
+-static GLboolean _glewInit_GL_VERSION_2_0 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glAttachShader = (PFNGLATTACHSHADERPROC)glewGetProcAddress((const GLubyte*)"glAttachShader")) == NULL) || r;
+-  r = ((glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)glewGetProcAddress((const GLubyte*)"glBindAttribLocation")) == NULL) || r;
+-  r = ((glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glBlendEquationSeparate")) == NULL) || r;
+-  r = ((glCompileShader = (PFNGLCOMPILESHADERPROC)glewGetProcAddress((const GLubyte*)"glCompileShader")) == NULL) || r;
+-  r = ((glCreateProgram = (PFNGLCREATEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glCreateProgram")) == NULL) || r;
+-  r = ((glCreateShader = (PFNGLCREATESHADERPROC)glewGetProcAddress((const GLubyte*)"glCreateShader")) == NULL) || r;
+-  r = ((glDeleteProgram = (PFNGLDELETEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glDeleteProgram")) == NULL) || r;
+-  r = ((glDeleteShader = (PFNGLDELETESHADERPROC)glewGetProcAddress((const GLubyte*)"glDeleteShader")) == NULL) || r;
+-  r = ((glDetachShader = (PFNGLDETACHSHADERPROC)glewGetProcAddress((const GLubyte*)"glDetachShader")) == NULL) || r;
+-  r = ((glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)glewGetProcAddress((const GLubyte*)"glDisableVertexAttribArray")) == NULL) || r;
+-  r = ((glDrawBuffers = (PFNGLDRAWBUFFERSPROC)glewGetProcAddress((const GLubyte*)"glDrawBuffers")) == NULL) || r;
+-  r = ((glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)glewGetProcAddress((const GLubyte*)"glEnableVertexAttribArray")) == NULL) || r;
+-  r = ((glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)glewGetProcAddress((const GLubyte*)"glGetActiveAttrib")) == NULL) || r;
+-  r = ((glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)glewGetProcAddress((const GLubyte*)"glGetActiveUniform")) == NULL) || r;
+-  r = ((glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)glewGetProcAddress((const GLubyte*)"glGetAttachedShaders")) == NULL) || r;
+-  r = ((glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)glewGetProcAddress((const GLubyte*)"glGetAttribLocation")) == NULL) || r;
+-  r = ((glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)glewGetProcAddress((const GLubyte*)"glGetProgramInfoLog")) == NULL) || r;
+-  r = ((glGetProgramiv = (PFNGLGETPROGRAMIVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramiv")) == NULL) || r;
+-  r = ((glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)glewGetProcAddress((const GLubyte*)"glGetShaderInfoLog")) == NULL) || r;
+-  r = ((glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)glewGetProcAddress((const GLubyte*)"glGetShaderSource")) == NULL) || r;
+-  r = ((glGetShaderiv = (PFNGLGETSHADERIVPROC)glewGetProcAddress((const GLubyte*)"glGetShaderiv")) == NULL) || r;
+-  r = ((glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)glewGetProcAddress((const GLubyte*)"glGetUniformLocation")) == NULL) || r;
+-  r = ((glGetUniformfv = (PFNGLGETUNIFORMFVPROC)glewGetProcAddress((const GLubyte*)"glGetUniformfv")) == NULL) || r;
+-  r = ((glGetUniformiv = (PFNGLGETUNIFORMIVPROC)glewGetProcAddress((const GLubyte*)"glGetUniformiv")) == NULL) || r;
+-  r = ((glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribPointerv")) == NULL) || r;
+-  r = ((glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribdv")) == NULL) || r;
+-  r = ((glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribfv")) == NULL) || r;
+-  r = ((glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribiv")) == NULL) || r;
+-  r = ((glIsProgram = (PFNGLISPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glIsProgram")) == NULL) || r;
+-  r = ((glIsShader = (PFNGLISSHADERPROC)glewGetProcAddress((const GLubyte*)"glIsShader")) == NULL) || r;
+-  r = ((glLinkProgram = (PFNGLLINKPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glLinkProgram")) == NULL) || r;
+-  r = ((glShaderSource = (PFNGLSHADERSOURCEPROC)glewGetProcAddress((const GLubyte*)"glShaderSource")) == NULL) || r;
+-  r = ((glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glStencilFuncSeparate")) == NULL) || r;
+-  r = ((glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glStencilMaskSeparate")) == NULL) || r;
+-  r = ((glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glStencilOpSeparate")) == NULL) || r;
+-  r = ((glUniform1f = (PFNGLUNIFORM1FPROC)glewGetProcAddress((const GLubyte*)"glUniform1f")) == NULL) || r;
+-  r = ((glUniform1fv = (PFNGLUNIFORM1FVPROC)glewGetProcAddress((const GLubyte*)"glUniform1fv")) == NULL) || r;
+-  r = ((glUniform1i = (PFNGLUNIFORM1IPROC)glewGetProcAddress((const GLubyte*)"glUniform1i")) == NULL) || r;
+-  r = ((glUniform1iv = (PFNGLUNIFORM1IVPROC)glewGetProcAddress((const GLubyte*)"glUniform1iv")) == NULL) || r;
+-  r = ((glUniform2f = (PFNGLUNIFORM2FPROC)glewGetProcAddress((const GLubyte*)"glUniform2f")) == NULL) || r;
+-  r = ((glUniform2fv = (PFNGLUNIFORM2FVPROC)glewGetProcAddress((const GLubyte*)"glUniform2fv")) == NULL) || r;
+-  r = ((glUniform2i = (PFNGLUNIFORM2IPROC)glewGetProcAddress((const GLubyte*)"glUniform2i")) == NULL) || r;
+-  r = ((glUniform2iv = (PFNGLUNIFORM2IVPROC)glewGetProcAddress((const GLubyte*)"glUniform2iv")) == NULL) || r;
+-  r = ((glUniform3f = (PFNGLUNIFORM3FPROC)glewGetProcAddress((const GLubyte*)"glUniform3f")) == NULL) || r;
+-  r = ((glUniform3fv = (PFNGLUNIFORM3FVPROC)glewGetProcAddress((const GLubyte*)"glUniform3fv")) == NULL) || r;
+-  r = ((glUniform3i = (PFNGLUNIFORM3IPROC)glewGetProcAddress((const GLubyte*)"glUniform3i")) == NULL) || r;
+-  r = ((glUniform3iv = (PFNGLUNIFORM3IVPROC)glewGetProcAddress((const GLubyte*)"glUniform3iv")) == NULL) || r;
+-  r = ((glUniform4f = (PFNGLUNIFORM4FPROC)glewGetProcAddress((const GLubyte*)"glUniform4f")) == NULL) || r;
+-  r = ((glUniform4fv = (PFNGLUNIFORM4FVPROC)glewGetProcAddress((const GLubyte*)"glUniform4fv")) == NULL) || r;
+-  r = ((glUniform4i = (PFNGLUNIFORM4IPROC)glewGetProcAddress((const GLubyte*)"glUniform4i")) == NULL) || r;
+-  r = ((glUniform4iv = (PFNGLUNIFORM4IVPROC)glewGetProcAddress((const GLubyte*)"glUniform4iv")) == NULL) || r;
+-  r = ((glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2fv")) == NULL) || r;
+-  r = ((glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3fv")) == NULL) || r;
+-  r = ((glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4fv")) == NULL) || r;
+-  r = ((glUseProgram = (PFNGLUSEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glUseProgram")) == NULL) || r;
+-  r = ((glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glValidateProgram")) == NULL) || r;
+-  r = ((glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1d")) == NULL) || r;
+-  r = ((glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dv")) == NULL) || r;
+-  r = ((glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1f")) == NULL) || r;
+-  r = ((glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fv")) == NULL) || r;
+-  r = ((glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1s")) == NULL) || r;
+-  r = ((glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1sv")) == NULL) || r;
+-  r = ((glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2d")) == NULL) || r;
+-  r = ((glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dv")) == NULL) || r;
+-  r = ((glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2f")) == NULL) || r;
+-  r = ((glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fv")) == NULL) || r;
+-  r = ((glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2s")) == NULL) || r;
+-  r = ((glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2sv")) == NULL) || r;
+-  r = ((glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3d")) == NULL) || r;
+-  r = ((glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dv")) == NULL) || r;
+-  r = ((glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3f")) == NULL) || r;
+-  r = ((glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fv")) == NULL) || r;
+-  r = ((glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3s")) == NULL) || r;
+-  r = ((glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3sv")) == NULL) || r;
+-  r = ((glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nbv")) == NULL) || r;
+-  r = ((glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Niv")) == NULL) || r;
+-  r = ((glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nsv")) == NULL) || r;
+-  r = ((glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nub")) == NULL) || r;
+-  r = ((glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nubv")) == NULL) || r;
+-  r = ((glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nuiv")) == NULL) || r;
+-  r = ((glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nusv")) == NULL) || r;
+-  r = ((glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4bv")) == NULL) || r;
+-  r = ((glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4d")) == NULL) || r;
+-  r = ((glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dv")) == NULL) || r;
+-  r = ((glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4f")) == NULL) || r;
+-  r = ((glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fv")) == NULL) || r;
+-  r = ((glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4iv")) == NULL) || r;
+-  r = ((glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4s")) == NULL) || r;
+-  r = ((glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4sv")) == NULL) || r;
+-  r = ((glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubv")) == NULL) || r;
+-  r = ((glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4uiv")) == NULL) || r;
+-  r = ((glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4usv")) == NULL) || r;
+-  r = ((glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribPointer")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_VERSION_2_0 */
+-
+-#ifdef GL_VERSION_2_1
+-
+-static GLboolean _glewInit_GL_VERSION_2_1 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2x3fv")) == NULL) || r;
+-  r = ((glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2x4fv")) == NULL) || r;
+-  r = ((glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3x2fv")) == NULL) || r;
+-  r = ((glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3x4fv")) == NULL) || r;
+-  r = ((glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4x2fv")) == NULL) || r;
+-  r = ((glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4x3fv")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_VERSION_2_1 */
+-
+-#ifdef GL_3DFX_multisample
+-
+-#endif /* GL_3DFX_multisample */
+-
+-#ifdef GL_3DFX_tbuffer
+-
+-static GLboolean _glewInit_GL_3DFX_tbuffer (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)glewGetProcAddress((const GLubyte*)"glTbufferMask3DFX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_3DFX_tbuffer */
+-
+-#ifdef GL_3DFX_texture_compression_FXT1
+-
+-#endif /* GL_3DFX_texture_compression_FXT1 */
+-
+-#ifdef GL_APPLE_client_storage
+-
+-#endif /* GL_APPLE_client_storage */
+-
+-#ifdef GL_APPLE_element_array
+-
+-static GLboolean _glewInit_GL_APPLE_element_array (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDrawElementArrayAPPLE")) == NULL) || r;
+-  r = ((glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElementArrayAPPLE")) == NULL) || r;
+-  r = ((glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)glewGetProcAddress((const GLubyte*)"glElementPointerAPPLE")) == NULL) || r;
+-  r = ((glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawElementArrayAPPLE")) == NULL) || r;
+-  r = ((glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawRangeElementArrayAPPLE")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_APPLE_element_array */
+-
+-#ifdef GL_APPLE_fence
+-
+-static GLboolean _glewInit_GL_APPLE_fence (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDeleteFencesAPPLE")) == NULL) || r;
+-  r = ((glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFinishFenceAPPLE")) == NULL) || r;
+-  r = ((glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFinishObjectAPPLE")) == NULL) || r;
+-  r = ((glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)glewGetProcAddress((const GLubyte*)"glGenFencesAPPLE")) == NULL) || r;
+-  r = ((glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glIsFenceAPPLE")) == NULL) || r;
+-  r = ((glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glSetFenceAPPLE")) == NULL) || r;
+-  r = ((glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glTestFenceAPPLE")) == NULL) || r;
+-  r = ((glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)glewGetProcAddress((const GLubyte*)"glTestObjectAPPLE")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_APPLE_fence */
+-
+-#ifdef GL_APPLE_float_pixels
+-
+-#endif /* GL_APPLE_float_pixels */
+-
+-#ifdef GL_APPLE_flush_buffer_range
+-
+-static GLboolean _glewInit_GL_APPLE_flush_buffer_range (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)glewGetProcAddress((const GLubyte*)"glBufferParameteriAPPLE")) == NULL) || r;
+-  r = ((glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFlushMappedBufferRangeAPPLE")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_APPLE_flush_buffer_range */
+-
+-#ifdef GL_APPLE_pixel_buffer
+-
+-#endif /* GL_APPLE_pixel_buffer */
+-
+-#ifdef GL_APPLE_specular_vector
+-
+-#endif /* GL_APPLE_specular_vector */
+-
+-#ifdef GL_APPLE_texture_range
+-
+-static GLboolean _glewInit_GL_APPLE_texture_range (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)glewGetProcAddress((const GLubyte*)"glGetTexParameterPointervAPPLE")) == NULL) || r;
+-  r = ((glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glTextureRangeAPPLE")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_APPLE_texture_range */
+-
+-#ifdef GL_APPLE_transform_hint
+-
+-#endif /* GL_APPLE_transform_hint */
+-
+-#ifdef GL_APPLE_vertex_array_object
+-
+-static GLboolean _glewInit_GL_APPLE_vertex_array_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glBindVertexArrayAPPLE")) == NULL) || r;
+-  r = ((glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDeleteVertexArraysAPPLE")) == NULL) || r;
+-  r = ((glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)glewGetProcAddress((const GLubyte*)"glGenVertexArraysAPPLE")) == NULL) || r;
+-  r = ((glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glIsVertexArrayAPPLE")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_APPLE_vertex_array_object */
+-
+-#ifdef GL_APPLE_vertex_array_range
+-
+-static GLboolean _glewInit_GL_APPLE_vertex_array_range (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFlushVertexArrayRangeAPPLE")) == NULL) || r;
+-  r = ((glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)glewGetProcAddress((const GLubyte*)"glVertexArrayParameteriAPPLE")) == NULL) || r;
+-  r = ((glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glVertexArrayRangeAPPLE")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_APPLE_vertex_array_range */
+-
+-#ifdef GL_APPLE_ycbcr_422
+-
+-#endif /* GL_APPLE_ycbcr_422 */
+-
+-#ifdef GL_ARB_color_buffer_float
+-
+-static GLboolean _glewInit_GL_ARB_color_buffer_float (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glClampColorARB = (PFNGLCLAMPCOLORARBPROC)glewGetProcAddress((const GLubyte*)"glClampColorARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_color_buffer_float */
+-
+-#ifdef GL_ARB_depth_texture
+-
+-#endif /* GL_ARB_depth_texture */
+-
+-#ifdef GL_ARB_draw_buffers
+-
+-static GLboolean _glewInit_GL_ARB_draw_buffers (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)glewGetProcAddress((const GLubyte*)"glDrawBuffersARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_draw_buffers */
+-
+-#ifdef GL_ARB_fragment_program
+-
+-#endif /* GL_ARB_fragment_program */
+-
+-#ifdef GL_ARB_fragment_program_shadow
+-
+-#endif /* GL_ARB_fragment_program_shadow */
+-
+-#ifdef GL_ARB_fragment_shader
+-
+-#endif /* GL_ARB_fragment_shader */
+-
+-#ifdef GL_ARB_half_float_pixel
+-
+-#endif /* GL_ARB_half_float_pixel */
+-
+-#ifdef GL_ARB_imaging
+-
+-static GLboolean _glewInit_GL_ARB_imaging (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBlendEquation = (PFNGLBLENDEQUATIONPROC)glewGetProcAddress((const GLubyte*)"glBlendEquation")) == NULL) || r;
+-  r = ((glColorSubTable = (PFNGLCOLORSUBTABLEPROC)glewGetProcAddress((const GLubyte*)"glColorSubTable")) == NULL) || r;
+-  r = ((glColorTable = (PFNGLCOLORTABLEPROC)glewGetProcAddress((const GLubyte*)"glColorTable")) == NULL) || r;
+-  r = ((glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameterfv")) == NULL) || r;
+-  r = ((glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameteriv")) == NULL) || r;
+-  r = ((glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter1D")) == NULL) || r;
+-  r = ((glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter2D")) == NULL) || r;
+-  r = ((glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterf")) == NULL) || r;
+-  r = ((glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterfv")) == NULL) || r;
+-  r = ((glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameteri")) == NULL) || r;
+-  r = ((glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameteriv")) == NULL) || r;
+-  r = ((glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)glewGetProcAddress((const GLubyte*)"glCopyColorSubTable")) == NULL) || r;
+-  r = ((glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)glewGetProcAddress((const GLubyte*)"glCopyColorTable")) == NULL) || r;
+-  r = ((glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter1D")) == NULL) || r;
+-  r = ((glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter2D")) == NULL) || r;
+-  r = ((glGetColorTable = (PFNGLGETCOLORTABLEPROC)glewGetProcAddress((const GLubyte*)"glGetColorTable")) == NULL) || r;
+-  r = ((glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterfv")) == NULL) || r;
+-  r = ((glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameteriv")) == NULL) || r;
+-  r = ((glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionFilter")) == NULL) || r;
+-  r = ((glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameterfv")) == NULL) || r;
+-  r = ((glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameteriv")) == NULL) || r;
+-  r = ((glGetHistogram = (PFNGLGETHISTOGRAMPROC)glewGetProcAddress((const GLubyte*)"glGetHistogram")) == NULL) || r;
+-  r = ((glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameterfv")) == NULL) || r;
+-  r = ((glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameteriv")) == NULL) || r;
+-  r = ((glGetMinmax = (PFNGLGETMINMAXPROC)glewGetProcAddress((const GLubyte*)"glGetMinmax")) == NULL) || r;
+-  r = ((glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameterfv")) == NULL) || r;
+-  r = ((glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameteriv")) == NULL) || r;
+-  r = ((glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)glewGetProcAddress((const GLubyte*)"glGetSeparableFilter")) == NULL) || r;
+-  r = ((glHistogram = (PFNGLHISTOGRAMPROC)glewGetProcAddress((const GLubyte*)"glHistogram")) == NULL) || r;
+-  r = ((glMinmax = (PFNGLMINMAXPROC)glewGetProcAddress((const GLubyte*)"glMinmax")) == NULL) || r;
+-  r = ((glResetHistogram = (PFNGLRESETHISTOGRAMPROC)glewGetProcAddress((const GLubyte*)"glResetHistogram")) == NULL) || r;
+-  r = ((glResetMinmax = (PFNGLRESETMINMAXPROC)glewGetProcAddress((const GLubyte*)"glResetMinmax")) == NULL) || r;
+-  r = ((glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)glewGetProcAddress((const GLubyte*)"glSeparableFilter2D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_imaging */
+-
+-#ifdef GL_ARB_matrix_palette
+-
+-static GLboolean _glewInit_GL_ARB_matrix_palette (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)glewGetProcAddress((const GLubyte*)"glCurrentPaletteMatrixARB")) == NULL) || r;
+-  r = ((glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexPointerARB")) == NULL) || r;
+-  r = ((glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexubvARB")) == NULL) || r;
+-  r = ((glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexuivARB")) == NULL) || r;
+-  r = ((glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexusvARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_matrix_palette */
+-
+-#ifdef GL_ARB_multisample
+-
+-static GLboolean _glewInit_GL_ARB_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)glewGetProcAddress((const GLubyte*)"glSampleCoverageARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_multisample */
+-
+-#ifdef GL_ARB_multitexture
+-
+-static GLboolean _glewInit_GL_ARB_multitexture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)glewGetProcAddress((const GLubyte*)"glActiveTextureARB")) == NULL) || r;
+-  r = ((glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)glewGetProcAddress((const GLubyte*)"glClientActiveTextureARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1dARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1dvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1fARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1fvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1iARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1ivARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1sARB")) == NULL) || r;
+-  r = ((glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1svARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2dARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2dvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2fARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2fvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2iARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2ivARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2sARB")) == NULL) || r;
+-  r = ((glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2svARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3dARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3dvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3fARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3fvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3iARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3ivARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3sARB")) == NULL) || r;
+-  r = ((glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3svARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4dARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4dvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4fARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4fvARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4iARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4ivARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4sARB")) == NULL) || r;
+-  r = ((glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4svARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_multitexture */
+-
+-#ifdef GL_ARB_occlusion_query
+-
+-static GLboolean _glewInit_GL_ARB_occlusion_query (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)glewGetProcAddress((const GLubyte*)"glBeginQueryARB")) == NULL) || r;
+-  r = ((glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteQueriesARB")) == NULL) || r;
+-  r = ((glEndQueryARB = (PFNGLENDQUERYARBPROC)glewGetProcAddress((const GLubyte*)"glEndQueryARB")) == NULL) || r;
+-  r = ((glGenQueriesARB = (PFNGLGENQUERIESARBPROC)glewGetProcAddress((const GLubyte*)"glGenQueriesARB")) == NULL) || r;
+-  r = ((glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectivARB")) == NULL) || r;
+-  r = ((glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectuivARB")) == NULL) || r;
+-  r = ((glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetQueryivARB")) == NULL) || r;
+-  r = ((glIsQueryARB = (PFNGLISQUERYARBPROC)glewGetProcAddress((const GLubyte*)"glIsQueryARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_occlusion_query */
+-
+-#ifdef GL_ARB_pixel_buffer_object
+-
+-#endif /* GL_ARB_pixel_buffer_object */
+-
+-#ifdef GL_ARB_point_parameters
+-
+-static GLboolean _glewInit_GL_ARB_point_parameters (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfARB")) == NULL) || r;
+-  r = ((glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfvARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_point_parameters */
+-
+-#ifdef GL_ARB_point_sprite
+-
+-#endif /* GL_ARB_point_sprite */
+-
+-#ifdef GL_ARB_shader_objects
+-
+-static GLboolean _glewInit_GL_ARB_shader_objects (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glAttachObjectARB")) == NULL) || r;
+-  r = ((glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)glewGetProcAddress((const GLubyte*)"glCompileShaderARB")) == NULL) || r;
+-  r = ((glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glCreateProgramObjectARB")) == NULL) || r;
+-  r = ((glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glCreateShaderObjectARB")) == NULL) || r;
+-  r = ((glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteObjectARB")) == NULL) || r;
+-  r = ((glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glDetachObjectARB")) == NULL) || r;
+-  r = ((glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)glewGetProcAddress((const GLubyte*)"glGetActiveUniformARB")) == NULL) || r;
+-  r = ((glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)glewGetProcAddress((const GLubyte*)"glGetAttachedObjectsARB")) == NULL) || r;
+-  r = ((glGetHandleARB = (PFNGLGETHANDLEARBPROC)glewGetProcAddress((const GLubyte*)"glGetHandleARB")) == NULL) || r;
+-  r = ((glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)glewGetProcAddress((const GLubyte*)"glGetInfoLogARB")) == NULL) || r;
+-  r = ((glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetObjectParameterfvARB")) == NULL) || r;
+-  r = ((glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetObjectParameterivARB")) == NULL) || r;
+-  r = ((glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)glewGetProcAddress((const GLubyte*)"glGetShaderSourceARB")) == NULL) || r;
+-  r = ((glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)glewGetProcAddress((const GLubyte*)"glGetUniformLocationARB")) == NULL) || r;
+-  r = ((glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetUniformfvARB")) == NULL) || r;
+-  r = ((glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetUniformivARB")) == NULL) || r;
+-  r = ((glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glLinkProgramARB")) == NULL) || r;
+-  r = ((glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)glewGetProcAddress((const GLubyte*)"glShaderSourceARB")) == NULL) || r;
+-  r = ((glUniform1fARB = (PFNGLUNIFORM1FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1fARB")) == NULL) || r;
+-  r = ((glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1fvARB")) == NULL) || r;
+-  r = ((glUniform1iARB = (PFNGLUNIFORM1IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1iARB")) == NULL) || r;
+-  r = ((glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1ivARB")) == NULL) || r;
+-  r = ((glUniform2fARB = (PFNGLUNIFORM2FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2fARB")) == NULL) || r;
+-  r = ((glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2fvARB")) == NULL) || r;
+-  r = ((glUniform2iARB = (PFNGLUNIFORM2IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2iARB")) == NULL) || r;
+-  r = ((glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2ivARB")) == NULL) || r;
+-  r = ((glUniform3fARB = (PFNGLUNIFORM3FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3fARB")) == NULL) || r;
+-  r = ((glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3fvARB")) == NULL) || r;
+-  r = ((glUniform3iARB = (PFNGLUNIFORM3IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3iARB")) == NULL) || r;
+-  r = ((glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3ivARB")) == NULL) || r;
+-  r = ((glUniform4fARB = (PFNGLUNIFORM4FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4fARB")) == NULL) || r;
+-  r = ((glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4fvARB")) == NULL) || r;
+-  r = ((glUniform4iARB = (PFNGLUNIFORM4IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4iARB")) == NULL) || r;
+-  r = ((glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4ivARB")) == NULL) || r;
+-  r = ((glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2fvARB")) == NULL) || r;
+-  r = ((glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3fvARB")) == NULL) || r;
+-  r = ((glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4fvARB")) == NULL) || r;
+-  r = ((glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glUseProgramObjectARB")) == NULL) || r;
+-  r = ((glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glValidateProgramARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_shader_objects */
+-
+-#ifdef GL_ARB_shading_language_100
+-
+-#endif /* GL_ARB_shading_language_100 */
+-
+-#ifdef GL_ARB_shadow
+-
+-#endif /* GL_ARB_shadow */
+-
+-#ifdef GL_ARB_shadow_ambient
+-
+-#endif /* GL_ARB_shadow_ambient */
+-
+-#ifdef GL_ARB_texture_border_clamp
+-
+-#endif /* GL_ARB_texture_border_clamp */
+-
+-#ifdef GL_ARB_texture_compression
+-
+-static GLboolean _glewInit_GL_ARB_texture_compression (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage1DARB")) == NULL) || r;
+-  r = ((glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage2DARB")) == NULL) || r;
+-  r = ((glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage3DARB")) == NULL) || r;
+-  r = ((glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage1DARB")) == NULL) || r;
+-  r = ((glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage2DARB")) == NULL) || r;
+-  r = ((glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage3DARB")) == NULL) || r;
+-  r = ((glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)glewGetProcAddress((const GLubyte*)"glGetCompressedTexImageARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_texture_compression */
+-
+-#ifdef GL_ARB_texture_cube_map
+-
+-#endif /* GL_ARB_texture_cube_map */
+-
+-#ifdef GL_ARB_texture_env_add
+-
+-#endif /* GL_ARB_texture_env_add */
+-
+-#ifdef GL_ARB_texture_env_combine
+-
+-#endif /* GL_ARB_texture_env_combine */
+-
+-#ifdef GL_ARB_texture_env_crossbar
+-
+-#endif /* GL_ARB_texture_env_crossbar */
+-
+-#ifdef GL_ARB_texture_env_dot3
+-
+-#endif /* GL_ARB_texture_env_dot3 */
+-
+-#ifdef GL_ARB_texture_float
+-
+-#endif /* GL_ARB_texture_float */
+-
+-#ifdef GL_ARB_texture_mirrored_repeat
+-
+-#endif /* GL_ARB_texture_mirrored_repeat */
+-
+-#ifdef GL_ARB_texture_non_power_of_two
+-
+-#endif /* GL_ARB_texture_non_power_of_two */
+-
+-#ifdef GL_ARB_texture_rectangle
+-
+-#endif /* GL_ARB_texture_rectangle */
+-
+-#ifdef GL_ARB_transpose_matrix
+-
+-static GLboolean _glewInit_GL_ARB_transpose_matrix (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixdARB")) == NULL) || r;
+-  r = ((glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixfARB")) == NULL) || r;
+-  r = ((glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixdARB")) == NULL) || r;
+-  r = ((glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixfARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_transpose_matrix */
+-
+-#ifdef GL_ARB_vertex_blend
+-
+-static GLboolean _glewInit_GL_ARB_vertex_blend (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)glewGetProcAddress((const GLubyte*)"glVertexBlendARB")) == NULL) || r;
+-  r = ((glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)glewGetProcAddress((const GLubyte*)"glWeightPointerARB")) == NULL) || r;
+-  r = ((glWeightbvARB = (PFNGLWEIGHTBVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightbvARB")) == NULL) || r;
+-  r = ((glWeightdvARB = (PFNGLWEIGHTDVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightdvARB")) == NULL) || r;
+-  r = ((glWeightfvARB = (PFNGLWEIGHTFVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightfvARB")) == NULL) || r;
+-  r = ((glWeightivARB = (PFNGLWEIGHTIVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightivARB")) == NULL) || r;
+-  r = ((glWeightsvARB = (PFNGLWEIGHTSVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightsvARB")) == NULL) || r;
+-  r = ((glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightubvARB")) == NULL) || r;
+-  r = ((glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightuivARB")) == NULL) || r;
+-  r = ((glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightusvARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_vertex_blend */
+-
+-#ifdef GL_ARB_vertex_buffer_object
+-
+-static GLboolean _glewInit_GL_ARB_vertex_buffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBindBufferARB = (PFNGLBINDBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glBindBufferARB")) == NULL) || r;
+-  r = ((glBufferDataARB = (PFNGLBUFFERDATAARBPROC)glewGetProcAddress((const GLubyte*)"glBufferDataARB")) == NULL) || r;
+-  r = ((glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)glewGetProcAddress((const GLubyte*)"glBufferSubDataARB")) == NULL) || r;
+-  r = ((glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteBuffersARB")) == NULL) || r;
+-  r = ((glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)glewGetProcAddress((const GLubyte*)"glGenBuffersARB")) == NULL) || r;
+-  r = ((glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetBufferParameterivARB")) == NULL) || r;
+-  r = ((glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)glewGetProcAddress((const GLubyte*)"glGetBufferPointervARB")) == NULL) || r;
+-  r = ((glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)glewGetProcAddress((const GLubyte*)"glGetBufferSubDataARB")) == NULL) || r;
+-  r = ((glIsBufferARB = (PFNGLISBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glIsBufferARB")) == NULL) || r;
+-  r = ((glMapBufferARB = (PFNGLMAPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glMapBufferARB")) == NULL) || r;
+-  r = ((glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glUnmapBufferARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_vertex_buffer_object */
+-
+-#ifdef GL_ARB_vertex_program
+-
+-static GLboolean _glewInit_GL_ARB_vertex_program (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glBindProgramARB")) == NULL) || r;
+-  r = ((glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteProgramsARB")) == NULL) || r;
+-  r = ((glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)glewGetProcAddress((const GLubyte*)"glDisableVertexAttribArrayARB")) == NULL) || r;
+-  r = ((glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)glewGetProcAddress((const GLubyte*)"glEnableVertexAttribArrayARB")) == NULL) || r;
+-  r = ((glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)glewGetProcAddress((const GLubyte*)"glGenProgramsARB")) == NULL) || r;
+-  r = ((glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramEnvParameterdvARB")) == NULL) || r;
+-  r = ((glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramEnvParameterfvARB")) == NULL) || r;
+-  r = ((glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramLocalParameterdvARB")) == NULL) || r;
+-  r = ((glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramLocalParameterfvARB")) == NULL) || r;
+-  r = ((glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramStringARB")) == NULL) || r;
+-  r = ((glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramivARB")) == NULL) || r;
+-  r = ((glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribPointervARB")) == NULL) || r;
+-  r = ((glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribdvARB")) == NULL) || r;
+-  r = ((glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribfvARB")) == NULL) || r;
+-  r = ((glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribivARB")) == NULL) || r;
+-  r = ((glIsProgramARB = (PFNGLISPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glIsProgramARB")) == NULL) || r;
+-  r = ((glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4dARB")) == NULL) || r;
+-  r = ((glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4dvARB")) == NULL) || r;
+-  r = ((glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4fARB")) == NULL) || r;
+-  r = ((glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4fvARB")) == NULL) || r;
+-  r = ((glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4dARB")) == NULL) || r;
+-  r = ((glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4dvARB")) == NULL) || r;
+-  r = ((glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4fARB")) == NULL) || r;
+-  r = ((glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4fvARB")) == NULL) || r;
+-  r = ((glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"glProgramStringARB")) == NULL) || r;
+-  r = ((glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dARB")) == NULL) || r;
+-  r = ((glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dvARB")) == NULL) || r;
+-  r = ((glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fARB")) == NULL) || r;
+-  r = ((glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fvARB")) == NULL) || r;
+-  r = ((glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1sARB")) == NULL) || r;
+-  r = ((glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1svARB")) == NULL) || r;
+-  r = ((glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dARB")) == NULL) || r;
+-  r = ((glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dvARB")) == NULL) || r;
+-  r = ((glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fARB")) == NULL) || r;
+-  r = ((glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fvARB")) == NULL) || r;
+-  r = ((glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2sARB")) == NULL) || r;
+-  r = ((glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2svARB")) == NULL) || r;
+-  r = ((glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dARB")) == NULL) || r;
+-  r = ((glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dvARB")) == NULL) || r;
+-  r = ((glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fARB")) == NULL) || r;
+-  r = ((glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fvARB")) == NULL) || r;
+-  r = ((glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3sARB")) == NULL) || r;
+-  r = ((glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3svARB")) == NULL) || r;
+-  r = ((glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NbvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NivARB")) == NULL) || r;
+-  r = ((glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NsvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NubARB")) == NULL) || r;
+-  r = ((glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NubvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NuivARB")) == NULL) || r;
+-  r = ((glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NusvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4bvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dARB")) == NULL) || r;
+-  r = ((glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fARB")) == NULL) || r;
+-  r = ((glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ivARB")) == NULL) || r;
+-  r = ((glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4sARB")) == NULL) || r;
+-  r = ((glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4svARB")) == NULL) || r;
+-  r = ((glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubvARB")) == NULL) || r;
+-  r = ((glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4uivARB")) == NULL) || r;
+-  r = ((glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4usvARB")) == NULL) || r;
+-  r = ((glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribPointerARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_vertex_program */
+-
+-#ifdef GL_ARB_vertex_shader
+-
+-static GLboolean _glewInit_GL_ARB_vertex_shader (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)glewGetProcAddress((const GLubyte*)"glBindAttribLocationARB")) == NULL) || r;
+-  r = ((glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)glewGetProcAddress((const GLubyte*)"glGetActiveAttribARB")) == NULL) || r;
+-  r = ((glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)glewGetProcAddress((const GLubyte*)"glGetAttribLocationARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_vertex_shader */
+-
+-#ifdef GL_ARB_window_pos
+-
+-static GLboolean _glewInit_GL_ARB_window_pos (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dARB")) == NULL) || r;
+-  r = ((glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dvARB")) == NULL) || r;
+-  r = ((glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fARB")) == NULL) || r;
+-  r = ((glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fvARB")) == NULL) || r;
+-  r = ((glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2iARB")) == NULL) || r;
+-  r = ((glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2ivARB")) == NULL) || r;
+-  r = ((glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2sARB")) == NULL) || r;
+-  r = ((glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2svARB")) == NULL) || r;
+-  r = ((glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dARB")) == NULL) || r;
+-  r = ((glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dvARB")) == NULL) || r;
+-  r = ((glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fARB")) == NULL) || r;
+-  r = ((glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fvARB")) == NULL) || r;
+-  r = ((glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3iARB")) == NULL) || r;
+-  r = ((glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3ivARB")) == NULL) || r;
+-  r = ((glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3sARB")) == NULL) || r;
+-  r = ((glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3svARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ARB_window_pos */
+-
+-#ifdef GL_ATIX_point_sprites
+-
+-#endif /* GL_ATIX_point_sprites */
+-
+-#ifdef GL_ATIX_texture_env_combine3
+-
+-#endif /* GL_ATIX_texture_env_combine3 */
+-
+-#ifdef GL_ATIX_texture_env_route
+-
+-#endif /* GL_ATIX_texture_env_route */
+-
+-#ifdef GL_ATIX_vertex_shader_output_point_size
+-
+-#endif /* GL_ATIX_vertex_shader_output_point_size */
+-
+-#ifdef GL_ATI_draw_buffers
+-
+-static GLboolean _glewInit_GL_ATI_draw_buffers (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)glewGetProcAddress((const GLubyte*)"glDrawBuffersATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_draw_buffers */
+-
+-#ifdef GL_ATI_element_array
+-
+-static GLboolean _glewInit_GL_ATI_element_array (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)glewGetProcAddress((const GLubyte*)"glDrawElementArrayATI")) == NULL) || r;
+-  r = ((glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElementArrayATI")) == NULL) || r;
+-  r = ((glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)glewGetProcAddress((const GLubyte*)"glElementPointerATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_element_array */
+-
+-#ifdef GL_ATI_envmap_bumpmap
+-
+-static GLboolean _glewInit_GL_ATI_envmap_bumpmap (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetTexBumpParameterfvATI")) == NULL) || r;
+-  r = ((glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetTexBumpParameterivATI")) == NULL) || r;
+-  r = ((glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)glewGetProcAddress((const GLubyte*)"glTexBumpParameterfvATI")) == NULL) || r;
+-  r = ((glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)glewGetProcAddress((const GLubyte*)"glTexBumpParameterivATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_envmap_bumpmap */
+-
+-#ifdef GL_ATI_fragment_shader
+-
+-static GLboolean _glewInit_GL_ATI_fragment_shader (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)glewGetProcAddress((const GLubyte*)"glAlphaFragmentOp1ATI")) == NULL) || r;
+-  r = ((glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)glewGetProcAddress((const GLubyte*)"glAlphaFragmentOp2ATI")) == NULL) || r;
+-  r = ((glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)glewGetProcAddress((const GLubyte*)"glAlphaFragmentOp3ATI")) == NULL) || r;
+-  r = ((glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glBeginFragmentShaderATI")) == NULL) || r;
+-  r = ((glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glBindFragmentShaderATI")) == NULL) || r;
+-  r = ((glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)glewGetProcAddress((const GLubyte*)"glColorFragmentOp1ATI")) == NULL) || r;
+-  r = ((glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)glewGetProcAddress((const GLubyte*)"glColorFragmentOp2ATI")) == NULL) || r;
+-  r = ((glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)glewGetProcAddress((const GLubyte*)"glColorFragmentOp3ATI")) == NULL) || r;
+-  r = ((glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glDeleteFragmentShaderATI")) == NULL) || r;
+-  r = ((glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glEndFragmentShaderATI")) == NULL) || r;
+-  r = ((glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)glewGetProcAddress((const GLubyte*)"glGenFragmentShadersATI")) == NULL) || r;
+-  r = ((glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)glewGetProcAddress((const GLubyte*)"glPassTexCoordATI")) == NULL) || r;
+-  r = ((glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)glewGetProcAddress((const GLubyte*)"glSampleMapATI")) == NULL) || r;
+-  r = ((glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)glewGetProcAddress((const GLubyte*)"glSetFragmentShaderConstantATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_fragment_shader */
+-
+-#ifdef GL_ATI_map_object_buffer
+-
+-static GLboolean _glewInit_GL_ATI_map_object_buffer (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glMapObjectBufferATI")) == NULL) || r;
+-  r = ((glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glUnmapObjectBufferATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_map_object_buffer */
+-
+-#ifdef GL_ATI_pn_triangles
+-
+-static GLboolean _glewInit_GL_ATI_pn_triangles (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)glewGetProcAddress((const GLubyte*)"glPNTrianglesfATI")) == NULL) || r;
+-  r = ((glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)glewGetProcAddress((const GLubyte*)"glPNTrianglesiATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_pn_triangles */
+-
+-#ifdef GL_ATI_separate_stencil
+-
+-static GLboolean _glewInit_GL_ATI_separate_stencil (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)glewGetProcAddress((const GLubyte*)"glStencilFuncSeparateATI")) == NULL) || r;
+-  r = ((glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)glewGetProcAddress((const GLubyte*)"glStencilOpSeparateATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_separate_stencil */
+-
+-#ifdef GL_ATI_shader_texture_lod
+-
+-#endif /* GL_ATI_shader_texture_lod */
+-
+-#ifdef GL_ATI_text_fragment_shader
+-
+-#endif /* GL_ATI_text_fragment_shader */
+-
+-#ifdef GL_ATI_texture_compression_3dc
+-
+-#endif /* GL_ATI_texture_compression_3dc */
+-
+-#ifdef GL_ATI_texture_env_combine3
+-
+-#endif /* GL_ATI_texture_env_combine3 */
+-
+-#ifdef GL_ATI_texture_float
+-
+-#endif /* GL_ATI_texture_float */
+-
+-#ifdef GL_ATI_texture_mirror_once
+-
+-#endif /* GL_ATI_texture_mirror_once */
+-
+-#ifdef GL_ATI_vertex_array_object
+-
+-static GLboolean _glewInit_GL_ATI_vertex_array_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)glewGetProcAddress((const GLubyte*)"glArrayObjectATI")) == NULL) || r;
+-  r = ((glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glFreeObjectBufferATI")) == NULL) || r;
+-  r = ((glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetArrayObjectfvATI")) == NULL) || r;
+-  r = ((glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetArrayObjectivATI")) == NULL) || r;
+-  r = ((glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetObjectBufferfvATI")) == NULL) || r;
+-  r = ((glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetObjectBufferivATI")) == NULL) || r;
+-  r = ((glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVariantArrayObjectfvATI")) == NULL) || r;
+-  r = ((glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVariantArrayObjectivATI")) == NULL) || r;
+-  r = ((glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glIsObjectBufferATI")) == NULL) || r;
+-  r = ((glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glNewObjectBufferATI")) == NULL) || r;
+-  r = ((glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glUpdateObjectBufferATI")) == NULL) || r;
+-  r = ((glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)glewGetProcAddress((const GLubyte*)"glVariantArrayObjectATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_vertex_array_object */
+-
+-#ifdef GL_ATI_vertex_attrib_array_object
+-
+-static GLboolean _glewInit_GL_ATI_vertex_attrib_array_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribArrayObjectfvATI")) == NULL) || r;
+-  r = ((glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribArrayObjectivATI")) == NULL) || r;
+-  r = ((glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribArrayObjectATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_vertex_attrib_array_object */
+-
+-#ifdef GL_ATI_vertex_streams
+-
+-static GLboolean _glewInit_GL_ATI_vertex_streams (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)glewGetProcAddress((const GLubyte*)"glClientActiveVertexStreamATI")) == NULL) || r;
+-  r = ((glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3bATI")) == NULL) || r;
+-  r = ((glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3bvATI")) == NULL) || r;
+-  r = ((glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3dATI")) == NULL) || r;
+-  r = ((glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3dvATI")) == NULL) || r;
+-  r = ((glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3fATI")) == NULL) || r;
+-  r = ((glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3fvATI")) == NULL) || r;
+-  r = ((glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3iATI")) == NULL) || r;
+-  r = ((glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3ivATI")) == NULL) || r;
+-  r = ((glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3sATI")) == NULL) || r;
+-  r = ((glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3svATI")) == NULL) || r;
+-  r = ((glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)glewGetProcAddress((const GLubyte*)"glVertexBlendEnvfATI")) == NULL) || r;
+-  r = ((glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)glewGetProcAddress((const GLubyte*)"glVertexBlendEnviATI")) == NULL) || r;
+-  r = ((glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2dATI")) == NULL) || r;
+-  r = ((glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2dvATI")) == NULL) || r;
+-  r = ((glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2fATI")) == NULL) || r;
+-  r = ((glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2fvATI")) == NULL) || r;
+-  r = ((glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2iATI")) == NULL) || r;
+-  r = ((glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2ivATI")) == NULL) || r;
+-  r = ((glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2sATI")) == NULL) || r;
+-  r = ((glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2svATI")) == NULL) || r;
+-  r = ((glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3dATI")) == NULL) || r;
+-  r = ((glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3dvATI")) == NULL) || r;
+-  r = ((glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3fATI")) == NULL) || r;
+-  r = ((glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3fvATI")) == NULL) || r;
+-  r = ((glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3iATI")) == NULL) || r;
+-  r = ((glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3ivATI")) == NULL) || r;
+-  r = ((glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3sATI")) == NULL) || r;
+-  r = ((glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3svATI")) == NULL) || r;
+-  r = ((glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4dATI")) == NULL) || r;
+-  r = ((glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4dvATI")) == NULL) || r;
+-  r = ((glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4fATI")) == NULL) || r;
+-  r = ((glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4fvATI")) == NULL) || r;
+-  r = ((glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4iATI")) == NULL) || r;
+-  r = ((glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4ivATI")) == NULL) || r;
+-  r = ((glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4sATI")) == NULL) || r;
+-  r = ((glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4svATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_ATI_vertex_streams */
+-
+-#ifdef GL_EXT_422_pixels
+-
+-#endif /* GL_EXT_422_pixels */
+-
+-#ifdef GL_EXT_Cg_shader
+-
+-#endif /* GL_EXT_Cg_shader */
+-
+-#ifdef GL_EXT_abgr
+-
+-#endif /* GL_EXT_abgr */
+-
+-#ifdef GL_EXT_bgra
+-
+-#endif /* GL_EXT_bgra */
+-
+-#ifdef GL_EXT_bindable_uniform
+-
+-static GLboolean _glewInit_GL_EXT_bindable_uniform (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)glewGetProcAddress((const GLubyte*)"glGetUniformBufferSizeEXT")) == NULL) || r;
+-  r = ((glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)glewGetProcAddress((const GLubyte*)"glGetUniformOffsetEXT")) == NULL) || r;
+-  r = ((glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glUniformBufferEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_bindable_uniform */
+-
+-#ifdef GL_EXT_blend_color
+-
+-static GLboolean _glewInit_GL_EXT_blend_color (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)glewGetProcAddress((const GLubyte*)"glBlendColorEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_blend_color */
+-
+-#ifdef GL_EXT_blend_equation_separate
+-
+-static GLboolean _glewInit_GL_EXT_blend_equation_separate (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)glewGetProcAddress((const GLubyte*)"glBlendEquationSeparateEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_blend_equation_separate */
+-
+-#ifdef GL_EXT_blend_func_separate
+-
+-static GLboolean _glewInit_GL_EXT_blend_func_separate (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)glewGetProcAddress((const GLubyte*)"glBlendFuncSeparateEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_blend_func_separate */
+-
+-#ifdef GL_EXT_blend_logic_op
+-
+-#endif /* GL_EXT_blend_logic_op */
+-
+-#ifdef GL_EXT_blend_minmax
+-
+-static GLboolean _glewInit_GL_EXT_blend_minmax (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)glewGetProcAddress((const GLubyte*)"glBlendEquationEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_blend_minmax */
+-
+-#ifdef GL_EXT_blend_subtract
+-
+-#endif /* GL_EXT_blend_subtract */
+-
+-#ifdef GL_EXT_clip_volume_hint
+-
+-#endif /* GL_EXT_clip_volume_hint */
+-
+-#ifdef GL_EXT_cmyka
+-
+-#endif /* GL_EXT_cmyka */
+-
+-#ifdef GL_EXT_color_subtable
+-
+-static GLboolean _glewInit_GL_EXT_color_subtable (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glColorSubTableEXT")) == NULL) || r;
+-  r = ((glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyColorSubTableEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_color_subtable */
+-
+-#ifdef GL_EXT_compiled_vertex_array
+-
+-static GLboolean _glewInit_GL_EXT_compiled_vertex_array (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glLockArraysEXT")) == NULL) || r;
+-  r = ((glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glUnlockArraysEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_compiled_vertex_array */
+-
+-#ifdef GL_EXT_convolution
+-
+-static GLboolean _glewInit_GL_EXT_convolution (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter1DEXT")) == NULL) || r;
+-  r = ((glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter2DEXT")) == NULL) || r;
+-  r = ((glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterfEXT")) == NULL) || r;
+-  r = ((glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterfvEXT")) == NULL) || r;
+-  r = ((glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameteriEXT")) == NULL) || r;
+-  r = ((glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterivEXT")) == NULL) || r;
+-  r = ((glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter1DEXT")) == NULL) || r;
+-  r = ((glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter2DEXT")) == NULL) || r;
+-  r = ((glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionFilterEXT")) == NULL) || r;
+-  r = ((glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameterfvEXT")) == NULL) || r;
+-  r = ((glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameterivEXT")) == NULL) || r;
+-  r = ((glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)glewGetProcAddress((const GLubyte*)"glGetSeparableFilterEXT")) == NULL) || r;
+-  r = ((glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)glewGetProcAddress((const GLubyte*)"glSeparableFilter2DEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_convolution */
+-
+-#ifdef GL_EXT_coordinate_frame
+-
+-static GLboolean _glewInit_GL_EXT_coordinate_frame (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glBinormalPointerEXT")) == NULL) || r;
+-  r = ((glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glTangentPointerEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_coordinate_frame */
+-
+-#ifdef GL_EXT_copy_texture
+-
+-static GLboolean _glewInit_GL_EXT_copy_texture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexImage1DEXT")) == NULL) || r;
+-  r = ((glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexImage2DEXT")) == NULL) || r;
+-  r = ((glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage1DEXT")) == NULL) || r;
+-  r = ((glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage2DEXT")) == NULL) || r;
+-  r = ((glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage3DEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_copy_texture */
+-
+-#ifdef GL_EXT_cull_vertex
+-
+-static GLboolean _glewInit_GL_EXT_cull_vertex (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)glewGetProcAddress((const GLubyte*)"glCullParameterdvEXT")) == NULL) || r;
+-  r = ((glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glCullParameterfvEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_cull_vertex */
+-
+-#ifdef GL_EXT_depth_bounds_test
+-
+-static GLboolean _glewInit_GL_EXT_depth_bounds_test (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)glewGetProcAddress((const GLubyte*)"glDepthBoundsEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_depth_bounds_test */
+-
+-#ifdef GL_EXT_draw_buffers2
+-
+-static GLboolean _glewInit_GL_EXT_draw_buffers2 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glColorMaskIndexedEXT")) == NULL) || r;
+-  r = ((glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glDisableIndexedEXT")) == NULL) || r;
+-  r = ((glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glEnableIndexedEXT")) == NULL) || r;
+-  r = ((glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetBooleanIndexedvEXT")) == NULL) || r;
+-  r = ((glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetIntegerIndexedvEXT")) == NULL) || r;
+-  r = ((glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glIsEnabledIndexedEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_draw_buffers2 */
+-
+-#ifdef GL_EXT_draw_instanced
+-
+-static GLboolean _glewInit_GL_EXT_draw_instanced (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawArraysInstancedEXT")) == NULL) || r;
+-  r = ((glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawElementsInstancedEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_draw_instanced */
+-
+-#ifdef GL_EXT_draw_range_elements
+-
+-static GLboolean _glewInit_GL_EXT_draw_range_elements (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElementsEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_draw_range_elements */
+-
+-#ifdef GL_EXT_fog_coord
+-
+-static GLboolean _glewInit_GL_EXT_fog_coord (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoordPointerEXT")) == NULL) || r;
+-  r = ((glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoorddEXT")) == NULL) || r;
+-  r = ((glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoorddvEXT")) == NULL) || r;
+-  r = ((glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoordfEXT")) == NULL) || r;
+-  r = ((glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoordfvEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_fog_coord */
+-
+-#ifdef GL_EXT_fragment_lighting
+-
+-static GLboolean _glewInit_GL_EXT_fragment_lighting (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFragmentColorMaterialEXT = (PFNGLFRAGMENTCOLORMATERIALEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentColorMaterialEXT")) == NULL) || r;
+-  r = ((glFragmentLightModelfEXT = (PFNGLFRAGMENTLIGHTMODELFEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfEXT")) == NULL) || r;
+-  r = ((glFragmentLightModelfvEXT = (PFNGLFRAGMENTLIGHTMODELFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfvEXT")) == NULL) || r;
+-  r = ((glFragmentLightModeliEXT = (PFNGLFRAGMENTLIGHTMODELIEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModeliEXT")) == NULL) || r;
+-  r = ((glFragmentLightModelivEXT = (PFNGLFRAGMENTLIGHTMODELIVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelivEXT")) == NULL) || r;
+-  r = ((glFragmentLightfEXT = (PFNGLFRAGMENTLIGHTFEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfEXT")) == NULL) || r;
+-  r = ((glFragmentLightfvEXT = (PFNGLFRAGMENTLIGHTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfvEXT")) == NULL) || r;
+-  r = ((glFragmentLightiEXT = (PFNGLFRAGMENTLIGHTIEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightiEXT")) == NULL) || r;
+-  r = ((glFragmentLightivEXT = (PFNGLFRAGMENTLIGHTIVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightivEXT")) == NULL) || r;
+-  r = ((glFragmentMaterialfEXT = (PFNGLFRAGMENTMATERIALFEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfEXT")) == NULL) || r;
+-  r = ((glFragmentMaterialfvEXT = (PFNGLFRAGMENTMATERIALFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfvEXT")) == NULL) || r;
+-  r = ((glFragmentMaterialiEXT = (PFNGLFRAGMENTMATERIALIEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialiEXT")) == NULL) || r;
+-  r = ((glFragmentMaterialivEXT = (PFNGLFRAGMENTMATERIALIVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialivEXT")) == NULL) || r;
+-  r = ((glGetFragmentLightfvEXT = (PFNGLGETFRAGMENTLIGHTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightfvEXT")) == NULL) || r;
+-  r = ((glGetFragmentLightivEXT = (PFNGLGETFRAGMENTLIGHTIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightivEXT")) == NULL) || r;
+-  r = ((glGetFragmentMaterialfvEXT = (PFNGLGETFRAGMENTMATERIALFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialfvEXT")) == NULL) || r;
+-  r = ((glGetFragmentMaterialivEXT = (PFNGLGETFRAGMENTMATERIALIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialivEXT")) == NULL) || r;
+-  r = ((glLightEnviEXT = (PFNGLLIGHTENVIEXTPROC)glewGetProcAddress((const GLubyte*)"glLightEnviEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_fragment_lighting */
+-
+-#ifdef GL_EXT_framebuffer_blit
+-
+-static GLboolean _glewInit_GL_EXT_framebuffer_blit (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glBlitFramebufferEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_framebuffer_blit */
+-
+-#ifdef GL_EXT_framebuffer_multisample
+-
+-static GLboolean _glewInit_GL_EXT_framebuffer_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)glewGetProcAddress((const GLubyte*)"glRenderbufferStorageMultisampleEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_framebuffer_multisample */
+-
+-#ifdef GL_EXT_framebuffer_object
+-
+-static GLboolean _glewInit_GL_EXT_framebuffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindFramebufferEXT")) == NULL) || r;
+-  r = ((glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindRenderbufferEXT")) == NULL) || r;
+-  r = ((glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)glewGetProcAddress((const GLubyte*)"glCheckFramebufferStatusEXT")) == NULL) || r;
+-  r = ((glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteFramebuffersEXT")) == NULL) || r;
+-  r = ((glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteRenderbuffersEXT")) == NULL) || r;
+-  r = ((glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferRenderbufferEXT")) == NULL) || r;
+-  r = ((glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTexture1DEXT")) == NULL) || r;
+-  r = ((glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTexture2DEXT")) == NULL) || r;
+-  r = ((glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTexture3DEXT")) == NULL) || r;
+-  r = ((glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenFramebuffersEXT")) == NULL) || r;
+-  r = ((glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenRenderbuffersEXT")) == NULL) || r;
+-  r = ((glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)glewGetProcAddress((const GLubyte*)"glGenerateMipmapEXT")) == NULL) || r;
+-  r = ((glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFramebufferAttachmentParameterivEXT")) == NULL) || r;
+-  r = ((glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetRenderbufferParameterivEXT")) == NULL) || r;
+-  r = ((glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glIsFramebufferEXT")) == NULL) || r;
+-  r = ((glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glIsRenderbufferEXT")) == NULL) || r;
+-  r = ((glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)glewGetProcAddress((const GLubyte*)"glRenderbufferStorageEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_framebuffer_object */
+-
+-#ifdef GL_EXT_framebuffer_sRGB
+-
+-#endif /* GL_EXT_framebuffer_sRGB */
+-
+-#ifdef GL_EXT_geometry_shader4
+-
+-static GLboolean _glewInit_GL_EXT_geometry_shader4 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTextureEXT")) == NULL) || r;
+-  r = ((glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTextureFaceEXT")) == NULL) || r;
+-  r = ((glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTextureLayerEXT")) == NULL) || r;
+-  r = ((glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)glewGetProcAddress((const GLubyte*)"glProgramParameteriEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_geometry_shader4 */
+-
+-#ifdef GL_EXT_gpu_program_parameters
+-
+-static GLboolean _glewInit_GL_EXT_gpu_program_parameters (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameters4fvEXT")) == NULL) || r;
+-  r = ((glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameters4fvEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_gpu_program_parameters */
+-
+-#ifdef GL_EXT_gpu_shader4
+-
+-static GLboolean _glewInit_GL_EXT_gpu_shader4 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)glewGetProcAddress((const GLubyte*)"glBindFragDataLocationEXT")) == NULL) || r;
+-  r = ((glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragDataLocationEXT")) == NULL) || r;
+-  r = ((glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetUniformuivEXT")) == NULL) || r;
+-  r = ((glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribIivEXT")) == NULL) || r;
+-  r = ((glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribIuivEXT")) == NULL) || r;
+-  r = ((glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform1uiEXT")) == NULL) || r;
+-  r = ((glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform1uivEXT")) == NULL) || r;
+-  r = ((glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform2uiEXT")) == NULL) || r;
+-  r = ((glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform2uivEXT")) == NULL) || r;
+-  r = ((glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform3uiEXT")) == NULL) || r;
+-  r = ((glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform3uivEXT")) == NULL) || r;
+-  r = ((glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform4uiEXT")) == NULL) || r;
+-  r = ((glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform4uivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1iEXT")) == NULL) || r;
+-  r = ((glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1ivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1uiEXT")) == NULL) || r;
+-  r = ((glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1uivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2iEXT")) == NULL) || r;
+-  r = ((glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2ivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2uiEXT")) == NULL) || r;
+-  r = ((glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2uivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3iEXT")) == NULL) || r;
+-  r = ((glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3ivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3uiEXT")) == NULL) || r;
+-  r = ((glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3uivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4bvEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4iEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4ivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4svEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4ubvEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4uiEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4uivEXT")) == NULL) || r;
+-  r = ((glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4usvEXT")) == NULL) || r;
+-  r = ((glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribIPointerEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_gpu_shader4 */
+-
+-#ifdef GL_EXT_histogram
+-
+-static GLboolean _glewInit_GL_EXT_histogram (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramEXT")) == NULL) || r;
+-  r = ((glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameterfvEXT")) == NULL) || r;
+-  r = ((glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameterivEXT")) == NULL) || r;
+-  r = ((glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxEXT")) == NULL) || r;
+-  r = ((glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameterfvEXT")) == NULL) || r;
+-  r = ((glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameterivEXT")) == NULL) || r;
+-  r = ((glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)glewGetProcAddress((const GLubyte*)"glHistogramEXT")) == NULL) || r;
+-  r = ((glMinmaxEXT = (PFNGLMINMAXEXTPROC)glewGetProcAddress((const GLubyte*)"glMinmaxEXT")) == NULL) || r;
+-  r = ((glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)glewGetProcAddress((const GLubyte*)"glResetHistogramEXT")) == NULL) || r;
+-  r = ((glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)glewGetProcAddress((const GLubyte*)"glResetMinmaxEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_histogram */
+-
+-#ifdef GL_EXT_index_array_formats
+-
+-#endif /* GL_EXT_index_array_formats */
+-
+-#ifdef GL_EXT_index_func
+-
+-static GLboolean _glewInit_GL_EXT_index_func (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)glewGetProcAddress((const GLubyte*)"glIndexFuncEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_index_func */
+-
+-#ifdef GL_EXT_index_material
+-
+-static GLboolean _glewInit_GL_EXT_index_material (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)glewGetProcAddress((const GLubyte*)"glIndexMaterialEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_index_material */
+-
+-#ifdef GL_EXT_index_texture
+-
+-#endif /* GL_EXT_index_texture */
+-
+-#ifdef GL_EXT_light_texture
+-
+-static GLboolean _glewInit_GL_EXT_light_texture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glApplyTextureEXT")) == NULL) || r;
+-  r = ((glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)glewGetProcAddress((const GLubyte*)"glTextureLightEXT")) == NULL) || r;
+-  r = ((glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)glewGetProcAddress((const GLubyte*)"glTextureMaterialEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_light_texture */
+-
+-#ifdef GL_EXT_misc_attribute
+-
+-#endif /* GL_EXT_misc_attribute */
+-
+-#ifdef GL_EXT_multi_draw_arrays
+-
+-static GLboolean _glewInit_GL_EXT_multi_draw_arrays (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawArraysEXT")) == NULL) || r;
+-  r = ((glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawElementsEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_multi_draw_arrays */
+-
+-#ifdef GL_EXT_multisample
+-
+-static GLboolean _glewInit_GL_EXT_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)glewGetProcAddress((const GLubyte*)"glSampleMaskEXT")) == NULL) || r;
+-  r = ((glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)glewGetProcAddress((const GLubyte*)"glSamplePatternEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_multisample */
+-
+-#ifdef GL_EXT_packed_depth_stencil
+-
+-#endif /* GL_EXT_packed_depth_stencil */
+-
+-#ifdef GL_EXT_packed_float
+-
+-#endif /* GL_EXT_packed_float */
+-
+-#ifdef GL_EXT_packed_pixels
+-
+-#endif /* GL_EXT_packed_pixels */
+-
+-#ifdef GL_EXT_paletted_texture
+-
+-static GLboolean _glewInit_GL_EXT_paletted_texture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glColorTableEXT")) == NULL) || r;
+-  r = ((glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableEXT")) == NULL) || r;
+-  r = ((glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterfvEXT")) == NULL) || r;
+-  r = ((glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterivEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_paletted_texture */
+-
+-#ifdef GL_EXT_pixel_buffer_object
+-
+-#endif /* GL_EXT_pixel_buffer_object */
+-
+-#ifdef GL_EXT_pixel_transform
+-
+-static GLboolean _glewInit_GL_EXT_pixel_transform (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetPixelTransformParameterfvEXT")) == NULL) || r;
+-  r = ((glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetPixelTransformParameterivEXT")) == NULL) || r;
+-  r = ((glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameterfEXT")) == NULL) || r;
+-  r = ((glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameterfvEXT")) == NULL) || r;
+-  r = ((glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameteriEXT")) == NULL) || r;
+-  r = ((glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameterivEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_pixel_transform */
+-
+-#ifdef GL_EXT_pixel_transform_color_table
+-
+-#endif /* GL_EXT_pixel_transform_color_table */
+-
+-#ifdef GL_EXT_point_parameters
+-
+-static GLboolean _glewInit_GL_EXT_point_parameters (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfEXT")) == NULL) || r;
+-  r = ((glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfvEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_point_parameters */
+-
+-#ifdef GL_EXT_polygon_offset
+-
+-static GLboolean _glewInit_GL_EXT_polygon_offset (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)glewGetProcAddress((const GLubyte*)"glPolygonOffsetEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_polygon_offset */
+-
+-#ifdef GL_EXT_rescale_normal
+-
+-#endif /* GL_EXT_rescale_normal */
+-
+-#ifdef GL_EXT_scene_marker
+-
+-static GLboolean _glewInit_GL_EXT_scene_marker (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBeginSceneEXT = (PFNGLBEGINSCENEEXTPROC)glewGetProcAddress((const GLubyte*)"glBeginSceneEXT")) == NULL) || r;
+-  r = ((glEndSceneEXT = (PFNGLENDSCENEEXTPROC)glewGetProcAddress((const GLubyte*)"glEndSceneEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_scene_marker */
+-
+-#ifdef GL_EXT_secondary_color
+-
+-static GLboolean _glewInit_GL_EXT_secondary_color (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3bEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3bvEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3dEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3dvEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3fEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3fvEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3iEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ivEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3sEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3svEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ubEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ubvEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3uiEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3uivEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3usEXT")) == NULL) || r;
+-  r = ((glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3usvEXT")) == NULL) || r;
+-  r = ((glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColorPointerEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_secondary_color */
+-
+-#ifdef GL_EXT_separate_specular_color
+-
+-#endif /* GL_EXT_separate_specular_color */
+-
+-#ifdef GL_EXT_shadow_funcs
+-
+-#endif /* GL_EXT_shadow_funcs */
+-
+-#ifdef GL_EXT_shared_texture_palette
+-
+-#endif /* GL_EXT_shared_texture_palette */
+-
+-#ifdef GL_EXT_stencil_clear_tag
+-
+-#endif /* GL_EXT_stencil_clear_tag */
+-
+-#ifdef GL_EXT_stencil_two_side
+-
+-static GLboolean _glewInit_GL_EXT_stencil_two_side (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)glewGetProcAddress((const GLubyte*)"glActiveStencilFaceEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_stencil_two_side */
+-
+-#ifdef GL_EXT_stencil_wrap
+-
+-#endif /* GL_EXT_stencil_wrap */
+-
+-#ifdef GL_EXT_subtexture
+-
+-static GLboolean _glewInit_GL_EXT_subtexture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage1DEXT")) == NULL) || r;
+-  r = ((glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage2DEXT")) == NULL) || r;
+-  r = ((glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage3DEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_subtexture */
+-
+-#ifdef GL_EXT_texture
+-
+-#endif /* GL_EXT_texture */
+-
+-#ifdef GL_EXT_texture3D
+-
+-static GLboolean _glewInit_GL_EXT_texture3D (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexImage3DEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_texture3D */
+-
+-#ifdef GL_EXT_texture_array
+-
+-#endif /* GL_EXT_texture_array */
+-
+-#ifdef GL_EXT_texture_buffer_object
+-
+-static GLboolean _glewInit_GL_EXT_texture_buffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glTexBufferEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_texture_buffer_object */
+-
+-#ifdef GL_EXT_texture_compression_dxt1
+-
+-#endif /* GL_EXT_texture_compression_dxt1 */
+-
+-#ifdef GL_EXT_texture_compression_latc
+-
+-#endif /* GL_EXT_texture_compression_latc */
+-
+-#ifdef GL_EXT_texture_compression_rgtc
+-
+-#endif /* GL_EXT_texture_compression_rgtc */
+-
+-#ifdef GL_EXT_texture_compression_s3tc
+-
+-#endif /* GL_EXT_texture_compression_s3tc */
+-
+-#ifdef GL_EXT_texture_cube_map
+-
+-#endif /* GL_EXT_texture_cube_map */
+-
+-#ifdef GL_EXT_texture_edge_clamp
+-
+-#endif /* GL_EXT_texture_edge_clamp */
+-
+-#ifdef GL_EXT_texture_env
+-
+-#endif /* GL_EXT_texture_env */
+-
+-#ifdef GL_EXT_texture_env_add
+-
+-#endif /* GL_EXT_texture_env_add */
+-
+-#ifdef GL_EXT_texture_env_combine
+-
+-#endif /* GL_EXT_texture_env_combine */
+-
+-#ifdef GL_EXT_texture_env_dot3
+-
+-#endif /* GL_EXT_texture_env_dot3 */
+-
+-#ifdef GL_EXT_texture_filter_anisotropic
+-
+-#endif /* GL_EXT_texture_filter_anisotropic */
+-
+-#ifdef GL_EXT_texture_integer
+-
+-static GLboolean _glewInit_GL_EXT_texture_integer (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)glewGetProcAddress((const GLubyte*)"glClearColorIiEXT")) == NULL) || r;
+-  r = ((glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)glewGetProcAddress((const GLubyte*)"glClearColorIuiEXT")) == NULL) || r;
+-  r = ((glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetTexParameterIivEXT")) == NULL) || r;
+-  r = ((glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetTexParameterIuivEXT")) == NULL) || r;
+-  r = ((glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)glewGetProcAddress((const GLubyte*)"glTexParameterIivEXT")) == NULL) || r;
+-  r = ((glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glTexParameterIuivEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_texture_integer */
+-
+-#ifdef GL_EXT_texture_lod_bias
+-
+-#endif /* GL_EXT_texture_lod_bias */
+-
+-#ifdef GL_EXT_texture_mirror_clamp
+-
+-#endif /* GL_EXT_texture_mirror_clamp */
+-
+-#ifdef GL_EXT_texture_object
+-
+-static GLboolean _glewInit_GL_EXT_texture_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)glewGetProcAddress((const GLubyte*)"glAreTexturesResidentEXT")) == NULL) || r;
+-  r = ((glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glBindTextureEXT")) == NULL) || r;
+-  r = ((glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteTexturesEXT")) == NULL) || r;
+-  r = ((glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)glewGetProcAddress((const GLubyte*)"glGenTexturesEXT")) == NULL) || r;
+-  r = ((glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glIsTextureEXT")) == NULL) || r;
+-  r = ((glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)glewGetProcAddress((const GLubyte*)"glPrioritizeTexturesEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_texture_object */
+-
+-#ifdef GL_EXT_texture_perturb_normal
+-
+-static GLboolean _glewInit_GL_EXT_texture_perturb_normal (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)glewGetProcAddress((const GLubyte*)"glTextureNormalEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_texture_perturb_normal */
+-
+-#ifdef GL_EXT_texture_rectangle
+-
+-#endif /* GL_EXT_texture_rectangle */
+-
+-#ifdef GL_EXT_texture_sRGB
+-
+-#endif /* GL_EXT_texture_sRGB */
+-
+-#ifdef GL_EXT_texture_shared_exponent
+-
+-#endif /* GL_EXT_texture_shared_exponent */
+-
+-#ifdef GL_EXT_timer_query
+-
+-static GLboolean _glewInit_GL_EXT_timer_query (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjecti64vEXT")) == NULL) || r;
+-  r = ((glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectui64vEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_timer_query */
+-
+-#ifdef GL_EXT_vertex_array
+-
+-static GLboolean _glewInit_GL_EXT_vertex_array (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)glewGetProcAddress((const GLubyte*)"glArrayElementEXT")) == NULL) || r;
+-  r = ((glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glColorPointerEXT")) == NULL) || r;
+-  r = ((glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawArraysEXT")) == NULL) || r;
+-  r = ((glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glEdgeFlagPointerEXT")) == NULL) || r;
+-  r = ((glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetPointervEXT")) == NULL) || r;
+-  r = ((glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glIndexPointerEXT")) == NULL) || r;
+-  r = ((glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glNormalPointerEXT")) == NULL) || r;
+-  r = ((glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glTexCoordPointerEXT")) == NULL) || r;
+-  r = ((glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVertexPointerEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_vertex_array */
+-
+-#ifdef GL_EXT_vertex_shader
+-
+-static GLboolean _glewInit_GL_EXT_vertex_shader (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glBeginVertexShaderEXT")) == NULL) || r;
+-  r = ((glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindLightParameterEXT")) == NULL) || r;
+-  r = ((glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindMaterialParameterEXT")) == NULL) || r;
+-  r = ((glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindParameterEXT")) == NULL) || r;
+-  r = ((glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindTexGenParameterEXT")) == NULL) || r;
+-  r = ((glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindTextureUnitParameterEXT")) == NULL) || r;
+-  r = ((glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindVertexShaderEXT")) == NULL) || r;
+-  r = ((glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteVertexShaderEXT")) == NULL) || r;
+-  r = ((glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)glewGetProcAddress((const GLubyte*)"glDisableVariantClientStateEXT")) == NULL) || r;
+-  r = ((glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)glewGetProcAddress((const GLubyte*)"glEnableVariantClientStateEXT")) == NULL) || r;
+-  r = ((glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glEndVertexShaderEXT")) == NULL) || r;
+-  r = ((glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)glewGetProcAddress((const GLubyte*)"glExtractComponentEXT")) == NULL) || r;
+-  r = ((glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenSymbolsEXT")) == NULL) || r;
+-  r = ((glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenVertexShadersEXT")) == NULL) || r;
+-  r = ((glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetInvariantBooleanvEXT")) == NULL) || r;
+-  r = ((glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetInvariantFloatvEXT")) == NULL) || r;
+-  r = ((glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetInvariantIntegervEXT")) == NULL) || r;
+-  r = ((glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetLocalConstantBooleanvEXT")) == NULL) || r;
+-  r = ((glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetLocalConstantFloatvEXT")) == NULL) || r;
+-  r = ((glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetLocalConstantIntegervEXT")) == NULL) || r;
+-  r = ((glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantBooleanvEXT")) == NULL) || r;
+-  r = ((glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantFloatvEXT")) == NULL) || r;
+-  r = ((glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantIntegervEXT")) == NULL) || r;
+-  r = ((glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantPointervEXT")) == NULL) || r;
+-  r = ((glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)glewGetProcAddress((const GLubyte*)"glInsertComponentEXT")) == NULL) || r;
+-  r = ((glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)glewGetProcAddress((const GLubyte*)"glIsVariantEnabledEXT")) == NULL) || r;
+-  r = ((glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)glewGetProcAddress((const GLubyte*)"glSetInvariantEXT")) == NULL) || r;
+-  r = ((glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)glewGetProcAddress((const GLubyte*)"glSetLocalConstantEXT")) == NULL) || r;
+-  r = ((glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)glewGetProcAddress((const GLubyte*)"glShaderOp1EXT")) == NULL) || r;
+-  r = ((glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)glewGetProcAddress((const GLubyte*)"glShaderOp2EXT")) == NULL) || r;
+-  r = ((glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)glewGetProcAddress((const GLubyte*)"glShaderOp3EXT")) == NULL) || r;
+-  r = ((glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)glewGetProcAddress((const GLubyte*)"glSwizzleEXT")) == NULL) || r;
+-  r = ((glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVariantPointerEXT")) == NULL) || r;
+-  r = ((glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantbvEXT")) == NULL) || r;
+-  r = ((glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantdvEXT")) == NULL) || r;
+-  r = ((glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantfvEXT")) == NULL) || r;
+-  r = ((glVariantivEXT = (PFNGLVARIANTIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantivEXT")) == NULL) || r;
+-  r = ((glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantsvEXT")) == NULL) || r;
+-  r = ((glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantubvEXT")) == NULL) || r;
+-  r = ((glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantuivEXT")) == NULL) || r;
+-  r = ((glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantusvEXT")) == NULL) || r;
+-  r = ((glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)glewGetProcAddress((const GLubyte*)"glWriteMaskEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_vertex_shader */
+-
+-#ifdef GL_EXT_vertex_weighting
+-
+-static GLboolean _glewInit_GL_EXT_vertex_weighting (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVertexWeightPointerEXT")) == NULL) || r;
+-  r = ((glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexWeightfEXT")) == NULL) || r;
+-  r = ((glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexWeightfvEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_EXT_vertex_weighting */
+-
+-#ifdef GL_GREMEDY_frame_terminator
+-
+-static GLboolean _glewInit_GL_GREMEDY_frame_terminator (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)glewGetProcAddress((const GLubyte*)"glFrameTerminatorGREMEDY")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_GREMEDY_frame_terminator */
+-
+-#ifdef GL_GREMEDY_string_marker
+-
+-static GLboolean _glewInit_GL_GREMEDY_string_marker (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)glewGetProcAddress((const GLubyte*)"glStringMarkerGREMEDY")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_GREMEDY_string_marker */
+-
+-#ifdef GL_HP_convolution_border_modes
+-
+-#endif /* GL_HP_convolution_border_modes */
+-
+-#ifdef GL_HP_image_transform
+-
+-static GLboolean _glewInit_GL_HP_image_transform (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)glewGetProcAddress((const GLubyte*)"glGetImageTransformParameterfvHP")) == NULL) || r;
+-  r = ((glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)glewGetProcAddress((const GLubyte*)"glGetImageTransformParameterivHP")) == NULL) || r;
+-  r = ((glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameterfHP")) == NULL) || r;
+-  r = ((glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameterfvHP")) == NULL) || r;
+-  r = ((glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameteriHP")) == NULL) || r;
+-  r = ((glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameterivHP")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_HP_image_transform */
+-
+-#ifdef GL_HP_occlusion_test
+-
+-#endif /* GL_HP_occlusion_test */
+-
+-#ifdef GL_HP_texture_lighting
+-
+-#endif /* GL_HP_texture_lighting */
+-
+-#ifdef GL_IBM_cull_vertex
+-
+-#endif /* GL_IBM_cull_vertex */
+-
+-#ifdef GL_IBM_multimode_draw_arrays
+-
+-static GLboolean _glewInit_GL_IBM_multimode_draw_arrays (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)glewGetProcAddress((const GLubyte*)"glMultiModeDrawArraysIBM")) == NULL) || r;
+-  r = ((glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)glewGetProcAddress((const GLubyte*)"glMultiModeDrawElementsIBM")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_IBM_multimode_draw_arrays */
+-
+-#ifdef GL_IBM_rasterpos_clip
+-
+-#endif /* GL_IBM_rasterpos_clip */
+-
+-#ifdef GL_IBM_static_data
+-
+-#endif /* GL_IBM_static_data */
+-
+-#ifdef GL_IBM_texture_mirrored_repeat
+-
+-#endif /* GL_IBM_texture_mirrored_repeat */
+-
+-#ifdef GL_IBM_vertex_array_lists
+-
+-static GLboolean _glewInit_GL_IBM_vertex_array_lists (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glColorPointerListIBM")) == NULL) || r;
+-  r = ((glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glEdgeFlagPointerListIBM")) == NULL) || r;
+-  r = ((glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glFogCoordPointerListIBM")) == NULL) || r;
+-  r = ((glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glIndexPointerListIBM")) == NULL) || r;
+-  r = ((glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glNormalPointerListIBM")) == NULL) || r;
+-  r = ((glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColorPointerListIBM")) == NULL) || r;
+-  r = ((glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glTexCoordPointerListIBM")) == NULL) || r;
+-  r = ((glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glVertexPointerListIBM")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_IBM_vertex_array_lists */
+-
+-#ifdef GL_INGR_color_clamp
+-
+-#endif /* GL_INGR_color_clamp */
+-
+-#ifdef GL_INGR_interlace_read
+-
+-#endif /* GL_INGR_interlace_read */
+-
+-#ifdef GL_INTEL_parallel_arrays
+-
+-static GLboolean _glewInit_GL_INTEL_parallel_arrays (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glColorPointervINTEL")) == NULL) || r;
+-  r = ((glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glNormalPointervINTEL")) == NULL) || r;
+-  r = ((glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glTexCoordPointervINTEL")) == NULL) || r;
+-  r = ((glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glVertexPointervINTEL")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_INTEL_parallel_arrays */
+-
+-#ifdef GL_INTEL_texture_scissor
+-
+-static GLboolean _glewInit_GL_INTEL_texture_scissor (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTexScissorFuncINTEL = (PFNGLTEXSCISSORFUNCINTELPROC)glewGetProcAddress((const GLubyte*)"glTexScissorFuncINTEL")) == NULL) || r;
+-  r = ((glTexScissorINTEL = (PFNGLTEXSCISSORINTELPROC)glewGetProcAddress((const GLubyte*)"glTexScissorINTEL")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_INTEL_texture_scissor */
+-
+-#ifdef GL_KTX_buffer_region
+-
+-static GLboolean _glewInit_GL_KTX_buffer_region (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBufferRegionEnabledEXT = (PFNGLBUFFERREGIONENABLEDEXTPROC)glewGetProcAddress((const GLubyte*)"glBufferRegionEnabledEXT")) == NULL) || r;
+-  r = ((glDeleteBufferRegionEXT = (PFNGLDELETEBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteBufferRegionEXT")) == NULL) || r;
+-  r = ((glDrawBufferRegionEXT = (PFNGLDRAWBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawBufferRegionEXT")) == NULL) || r;
+-  r = ((glNewBufferRegionEXT = (PFNGLNEWBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glNewBufferRegionEXT")) == NULL) || r;
+-  r = ((glReadBufferRegionEXT = (PFNGLREADBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glReadBufferRegionEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_KTX_buffer_region */
+-
+-#ifdef GL_MESAX_texture_stack
+-
+-#endif /* GL_MESAX_texture_stack */
+-
+-#ifdef GL_MESA_pack_invert
+-
+-#endif /* GL_MESA_pack_invert */
+-
+-#ifdef GL_MESA_resize_buffers
+-
+-static GLboolean _glewInit_GL_MESA_resize_buffers (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)glewGetProcAddress((const GLubyte*)"glResizeBuffersMESA")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_MESA_resize_buffers */
+-
+-#ifdef GL_MESA_window_pos
+-
+-static GLboolean _glewInit_GL_MESA_window_pos (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dMESA")) == NULL) || r;
+-  r = ((glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dvMESA")) == NULL) || r;
+-  r = ((glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fMESA")) == NULL) || r;
+-  r = ((glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fvMESA")) == NULL) || r;
+-  r = ((glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2iMESA")) == NULL) || r;
+-  r = ((glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2ivMESA")) == NULL) || r;
+-  r = ((glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2sMESA")) == NULL) || r;
+-  r = ((glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2svMESA")) == NULL) || r;
+-  r = ((glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dMESA")) == NULL) || r;
+-  r = ((glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dvMESA")) == NULL) || r;
+-  r = ((glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fMESA")) == NULL) || r;
+-  r = ((glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fvMESA")) == NULL) || r;
+-  r = ((glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3iMESA")) == NULL) || r;
+-  r = ((glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3ivMESA")) == NULL) || r;
+-  r = ((glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3sMESA")) == NULL) || r;
+-  r = ((glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3svMESA")) == NULL) || r;
+-  r = ((glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4dMESA")) == NULL) || r;
+-  r = ((glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4dvMESA")) == NULL) || r;
+-  r = ((glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4fMESA")) == NULL) || r;
+-  r = ((glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4fvMESA")) == NULL) || r;
+-  r = ((glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4iMESA")) == NULL) || r;
+-  r = ((glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4ivMESA")) == NULL) || r;
+-  r = ((glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4sMESA")) == NULL) || r;
+-  r = ((glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4svMESA")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_MESA_window_pos */
+-
+-#ifdef GL_MESA_ycbcr_texture
+-
+-#endif /* GL_MESA_ycbcr_texture */
+-
+-#ifdef GL_NV_blend_square
+-
+-#endif /* GL_NV_blend_square */
+-
+-#ifdef GL_NV_copy_depth_to_color
+-
+-#endif /* GL_NV_copy_depth_to_color */
+-
+-#ifdef GL_NV_depth_buffer_float
+-
+-static GLboolean _glewInit_GL_NV_depth_buffer_float (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)glewGetProcAddress((const GLubyte*)"glClearDepthdNV")) == NULL) || r;
+-  r = ((glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)glewGetProcAddress((const GLubyte*)"glDepthBoundsdNV")) == NULL) || r;
+-  r = ((glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)glewGetProcAddress((const GLubyte*)"glDepthRangedNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_depth_buffer_float */
+-
+-#ifdef GL_NV_depth_clamp
+-
+-#endif /* GL_NV_depth_clamp */
+-
+-#ifdef GL_NV_depth_range_unclamped
+-
+-#endif /* GL_NV_depth_range_unclamped */
+-
+-#ifdef GL_NV_evaluators
+-
+-static GLboolean _glewInit_GL_NV_evaluators (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glEvalMapsNV = (PFNGLEVALMAPSNVPROC)glewGetProcAddress((const GLubyte*)"glEvalMapsNV")) == NULL) || r;
+-  r = ((glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapAttribParameterfvNV")) == NULL) || r;
+-  r = ((glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapAttribParameterivNV")) == NULL) || r;
+-  r = ((glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapControlPointsNV")) == NULL) || r;
+-  r = ((glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapParameterfvNV")) == NULL) || r;
+-  r = ((glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapParameterivNV")) == NULL) || r;
+-  r = ((glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)glewGetProcAddress((const GLubyte*)"glMapControlPointsNV")) == NULL) || r;
+-  r = ((glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glMapParameterfvNV")) == NULL) || r;
+-  r = ((glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glMapParameterivNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_evaluators */
+-
+-#ifdef GL_NV_fence
+-
+-static GLboolean _glewInit_GL_NV_fence (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)glewGetProcAddress((const GLubyte*)"glDeleteFencesNV")) == NULL) || r;
+-  r = ((glFinishFenceNV = (PFNGLFINISHFENCENVPROC)glewGetProcAddress((const GLubyte*)"glFinishFenceNV")) == NULL) || r;
+-  r = ((glGenFencesNV = (PFNGLGENFENCESNVPROC)glewGetProcAddress((const GLubyte*)"glGenFencesNV")) == NULL) || r;
+-  r = ((glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetFenceivNV")) == NULL) || r;
+-  r = ((glIsFenceNV = (PFNGLISFENCENVPROC)glewGetProcAddress((const GLubyte*)"glIsFenceNV")) == NULL) || r;
+-  r = ((glSetFenceNV = (PFNGLSETFENCENVPROC)glewGetProcAddress((const GLubyte*)"glSetFenceNV")) == NULL) || r;
+-  r = ((glTestFenceNV = (PFNGLTESTFENCENVPROC)glewGetProcAddress((const GLubyte*)"glTestFenceNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_fence */
+-
+-#ifdef GL_NV_float_buffer
+-
+-#endif /* GL_NV_float_buffer */
+-
+-#ifdef GL_NV_fog_distance
+-
+-#endif /* GL_NV_fog_distance */
+-
+-#ifdef GL_NV_fragment_program
+-
+-static GLboolean _glewInit_GL_NV_fragment_program (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramNamedParameterdvNV")) == NULL) || r;
+-  r = ((glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramNamedParameterfvNV")) == NULL) || r;
+-  r = ((glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4dNV")) == NULL) || r;
+-  r = ((glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4dvNV")) == NULL) || r;
+-  r = ((glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4fNV")) == NULL) || r;
+-  r = ((glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4fvNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_fragment_program */
+-
+-#ifdef GL_NV_fragment_program2
+-
+-#endif /* GL_NV_fragment_program2 */
+-
+-#ifdef GL_NV_fragment_program4
+-
+-#endif /* GL_NV_fragment_program4 */
+-
+-#ifdef GL_NV_fragment_program_option
+-
+-#endif /* GL_NV_fragment_program_option */
+-
+-#ifdef GL_NV_framebuffer_multisample_coverage
+-
+-static GLboolean _glewInit_GL_NV_framebuffer_multisample_coverage (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)glewGetProcAddress((const GLubyte*)"glRenderbufferStorageMultisampleCoverageNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_framebuffer_multisample_coverage */
+-
+-#ifdef GL_NV_geometry_program4
+-
+-static GLboolean _glewInit_GL_NV_geometry_program4 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)glewGetProcAddress((const GLubyte*)"glProgramVertexLimitNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_geometry_program4 */
+-
+-#ifdef GL_NV_geometry_shader4
+-
+-#endif /* GL_NV_geometry_shader4 */
+-
+-#ifdef GL_NV_gpu_program4
+-
+-static GLboolean _glewInit_GL_NV_gpu_program4 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4iNV")) == NULL) || r;
+-  r = ((glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4ivNV")) == NULL) || r;
+-  r = ((glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4uiNV")) == NULL) || r;
+-  r = ((glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4uivNV")) == NULL) || r;
+-  r = ((glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParametersI4ivNV")) == NULL) || r;
+-  r = ((glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParametersI4uivNV")) == NULL) || r;
+-  r = ((glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4iNV")) == NULL) || r;
+-  r = ((glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4ivNV")) == NULL) || r;
+-  r = ((glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4uiNV")) == NULL) || r;
+-  r = ((glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4uivNV")) == NULL) || r;
+-  r = ((glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParametersI4ivNV")) == NULL) || r;
+-  r = ((glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParametersI4uivNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_gpu_program4 */
+-
+-#ifdef GL_NV_half_float
+-
+-static GLboolean _glewInit_GL_NV_half_float (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColor3hNV = (PFNGLCOLOR3HNVPROC)glewGetProcAddress((const GLubyte*)"glColor3hNV")) == NULL) || r;
+-  r = ((glColor3hvNV = (PFNGLCOLOR3HVNVPROC)glewGetProcAddress((const GLubyte*)"glColor3hvNV")) == NULL) || r;
+-  r = ((glColor4hNV = (PFNGLCOLOR4HNVPROC)glewGetProcAddress((const GLubyte*)"glColor4hNV")) == NULL) || r;
+-  r = ((glColor4hvNV = (PFNGLCOLOR4HVNVPROC)glewGetProcAddress((const GLubyte*)"glColor4hvNV")) == NULL) || r;
+-  r = ((glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)glewGetProcAddress((const GLubyte*)"glFogCoordhNV")) == NULL) || r;
+-  r = ((glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)glewGetProcAddress((const GLubyte*)"glFogCoordhvNV")) == NULL) || r;
+-  r = ((glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1hNV")) == NULL) || r;
+-  r = ((glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1hvNV")) == NULL) || r;
+-  r = ((glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2hNV")) == NULL) || r;
+-  r = ((glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2hvNV")) == NULL) || r;
+-  r = ((glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3hNV")) == NULL) || r;
+-  r = ((glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3hvNV")) == NULL) || r;
+-  r = ((glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4hNV")) == NULL) || r;
+-  r = ((glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4hvNV")) == NULL) || r;
+-  r = ((glNormal3hNV = (PFNGLNORMAL3HNVPROC)glewGetProcAddress((const GLubyte*)"glNormal3hNV")) == NULL) || r;
+-  r = ((glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)glewGetProcAddress((const GLubyte*)"glNormal3hvNV")) == NULL) || r;
+-  r = ((glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3hNV")) == NULL) || r;
+-  r = ((glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3hvNV")) == NULL) || r;
+-  r = ((glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord1hNV")) == NULL) || r;
+-  r = ((glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord1hvNV")) == NULL) || r;
+-  r = ((glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2hNV")) == NULL) || r;
+-  r = ((glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2hvNV")) == NULL) || r;
+-  r = ((glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord3hNV")) == NULL) || r;
+-  r = ((glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord3hvNV")) == NULL) || r;
+-  r = ((glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4hNV")) == NULL) || r;
+-  r = ((glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4hvNV")) == NULL) || r;
+-  r = ((glVertex2hNV = (PFNGLVERTEX2HNVPROC)glewGetProcAddress((const GLubyte*)"glVertex2hNV")) == NULL) || r;
+-  r = ((glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertex2hvNV")) == NULL) || r;
+-  r = ((glVertex3hNV = (PFNGLVERTEX3HNVPROC)glewGetProcAddress((const GLubyte*)"glVertex3hNV")) == NULL) || r;
+-  r = ((glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertex3hvNV")) == NULL) || r;
+-  r = ((glVertex4hNV = (PFNGLVERTEX4HNVPROC)glewGetProcAddress((const GLubyte*)"glVertex4hNV")) == NULL) || r;
+-  r = ((glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertex4hvNV")) == NULL) || r;
+-  r = ((glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1hNV")) == NULL) || r;
+-  r = ((glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1hvNV")) == NULL) || r;
+-  r = ((glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2hNV")) == NULL) || r;
+-  r = ((glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2hvNV")) == NULL) || r;
+-  r = ((glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3hNV")) == NULL) || r;
+-  r = ((glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3hvNV")) == NULL) || r;
+-  r = ((glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4hNV")) == NULL) || r;
+-  r = ((glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4hvNV")) == NULL) || r;
+-  r = ((glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1hvNV")) == NULL) || r;
+-  r = ((glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2hvNV")) == NULL) || r;
+-  r = ((glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3hvNV")) == NULL) || r;
+-  r = ((glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4hvNV")) == NULL) || r;
+-  r = ((glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)glewGetProcAddress((const GLubyte*)"glVertexWeighthNV")) == NULL) || r;
+-  r = ((glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexWeighthvNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_half_float */
+-
+-#ifdef GL_NV_light_max_exponent
+-
+-#endif /* GL_NV_light_max_exponent */
+-
+-#ifdef GL_NV_multisample_filter_hint
+-
+-#endif /* GL_NV_multisample_filter_hint */
+-
+-#ifdef GL_NV_occlusion_query
+-
+-static GLboolean _glewInit_GL_NV_occlusion_query (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)glewGetProcAddress((const GLubyte*)"glBeginOcclusionQueryNV")) == NULL) || r;
+-  r = ((glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)glewGetProcAddress((const GLubyte*)"glDeleteOcclusionQueriesNV")) == NULL) || r;
+-  r = ((glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)glewGetProcAddress((const GLubyte*)"glEndOcclusionQueryNV")) == NULL) || r;
+-  r = ((glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)glewGetProcAddress((const GLubyte*)"glGenOcclusionQueriesNV")) == NULL) || r;
+-  r = ((glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetOcclusionQueryivNV")) == NULL) || r;
+-  r = ((glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetOcclusionQueryuivNV")) == NULL) || r;
+-  r = ((glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)glewGetProcAddress((const GLubyte*)"glIsOcclusionQueryNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_occlusion_query */
+-
+-#ifdef GL_NV_packed_depth_stencil
+-
+-#endif /* GL_NV_packed_depth_stencil */
+-
+-#ifdef GL_NV_parameter_buffer_object
+-
+-static GLboolean _glewInit_GL_NV_parameter_buffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramBufferParametersIivNV")) == NULL) || r;
+-  r = ((glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramBufferParametersIuivNV")) == NULL) || r;
+-  r = ((glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramBufferParametersfvNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_parameter_buffer_object */
+-
+-#ifdef GL_NV_pixel_data_range
+-
+-static GLboolean _glewInit_GL_NV_pixel_data_range (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)glewGetProcAddress((const GLubyte*)"glFlushPixelDataRangeNV")) == NULL) || r;
+-  r = ((glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)glewGetProcAddress((const GLubyte*)"glPixelDataRangeNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_pixel_data_range */
+-
+-#ifdef GL_NV_point_sprite
+-
+-static GLboolean _glewInit_GL_NV_point_sprite (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)glewGetProcAddress((const GLubyte*)"glPointParameteriNV")) == NULL) || r;
+-  r = ((glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glPointParameterivNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_point_sprite */
+-
+-#ifdef GL_NV_primitive_restart
+-
+-static GLboolean _glewInit_GL_NV_primitive_restart (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)glewGetProcAddress((const GLubyte*)"glPrimitiveRestartIndexNV")) == NULL) || r;
+-  r = ((glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)glewGetProcAddress((const GLubyte*)"glPrimitiveRestartNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_primitive_restart */
+-
+-#ifdef GL_NV_register_combiners
+-
+-static GLboolean _glewInit_GL_NV_register_combiners (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerInputNV")) == NULL) || r;
+-  r = ((glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerOutputNV")) == NULL) || r;
+-  r = ((glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameterfNV")) == NULL) || r;
+-  r = ((glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameterfvNV")) == NULL) || r;
+-  r = ((glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameteriNV")) == NULL) || r;
+-  r = ((glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameterivNV")) == NULL) || r;
+-  r = ((glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)glewGetProcAddress((const GLubyte*)"glFinalCombinerInputNV")) == NULL) || r;
+-  r = ((glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerInputParameterfvNV")) == NULL) || r;
+-  r = ((glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerInputParameterivNV")) == NULL) || r;
+-  r = ((glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerOutputParameterfvNV")) == NULL) || r;
+-  r = ((glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerOutputParameterivNV")) == NULL) || r;
+-  r = ((glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetFinalCombinerInputParameterfvNV")) == NULL) || r;
+-  r = ((glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetFinalCombinerInputParameterivNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_register_combiners */
+-
+-#ifdef GL_NV_register_combiners2
+-
+-static GLboolean _glewInit_GL_NV_register_combiners2 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerStageParameterfvNV")) == NULL) || r;
+-  r = ((glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerStageParameterfvNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_register_combiners2 */
+-
+-#ifdef GL_NV_texgen_emboss
+-
+-#endif /* GL_NV_texgen_emboss */
+-
+-#ifdef GL_NV_texgen_reflection
+-
+-#endif /* GL_NV_texgen_reflection */
+-
+-#ifdef GL_NV_texture_compression_vtc
+-
+-#endif /* GL_NV_texture_compression_vtc */
+-
+-#ifdef GL_NV_texture_env_combine4
+-
+-#endif /* GL_NV_texture_env_combine4 */
+-
+-#ifdef GL_NV_texture_expand_normal
+-
+-#endif /* GL_NV_texture_expand_normal */
+-
+-#ifdef GL_NV_texture_rectangle
+-
+-#endif /* GL_NV_texture_rectangle */
+-
+-#ifdef GL_NV_texture_shader
+-
+-#endif /* GL_NV_texture_shader */
+-
+-#ifdef GL_NV_texture_shader2
+-
+-#endif /* GL_NV_texture_shader2 */
+-
+-#ifdef GL_NV_texture_shader3
+-
+-#endif /* GL_NV_texture_shader3 */
+-
+-#ifdef GL_NV_transform_feedback
+-
+-static GLboolean _glewInit_GL_NV_transform_feedback (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)glewGetProcAddress((const GLubyte*)"glActiveVaryingNV")) == NULL) || r;
+-  r = ((glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)glewGetProcAddress((const GLubyte*)"glBeginTransformFeedbackNV")) == NULL) || r;
+-  r = ((glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)glewGetProcAddress((const GLubyte*)"glBindBufferBaseNV")) == NULL) || r;
+-  r = ((glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)glewGetProcAddress((const GLubyte*)"glBindBufferOffsetNV")) == NULL) || r;
+-  r = ((glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)glewGetProcAddress((const GLubyte*)"glBindBufferRangeNV")) == NULL) || r;
+-  r = ((glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)glewGetProcAddress((const GLubyte*)"glEndTransformFeedbackNV")) == NULL) || r;
+-  r = ((glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)glewGetProcAddress((const GLubyte*)"glGetActiveVaryingNV")) == NULL) || r;
+-  r = ((glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)glewGetProcAddress((const GLubyte*)"glGetTransformFeedbackVaryingNV")) == NULL) || r;
+-  r = ((glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)glewGetProcAddress((const GLubyte*)"glGetVaryingLocationNV")) == NULL) || r;
+-  r = ((glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)glewGetProcAddress((const GLubyte*)"glTransformFeedbackAttribsNV")) == NULL) || r;
+-  r = ((glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)glewGetProcAddress((const GLubyte*)"glTransformFeedbackVaryingsNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_transform_feedback */
+-
+-#ifdef GL_NV_vertex_array_range
+-
+-static GLboolean _glewInit_GL_NV_vertex_array_range (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)glewGetProcAddress((const GLubyte*)"glFlushVertexArrayRangeNV")) == NULL) || r;
+-  r = ((glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)glewGetProcAddress((const GLubyte*)"glVertexArrayRangeNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_vertex_array_range */
+-
+-#ifdef GL_NV_vertex_array_range2
+-
+-#endif /* GL_NV_vertex_array_range2 */
+-
+-#ifdef GL_NV_vertex_program
+-
+-static GLboolean _glewInit_GL_NV_vertex_program (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)glewGetProcAddress((const GLubyte*)"glAreProgramsResidentNV")) == NULL) || r;
+-  r = ((glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glBindProgramNV")) == NULL) || r;
+-  r = ((glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)glewGetProcAddress((const GLubyte*)"glDeleteProgramsNV")) == NULL) || r;
+-  r = ((glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glExecuteProgramNV")) == NULL) || r;
+-  r = ((glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)glewGetProcAddress((const GLubyte*)"glGenProgramsNV")) == NULL) || r;
+-  r = ((glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramParameterdvNV")) == NULL) || r;
+-  r = ((glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramParameterfvNV")) == NULL) || r;
+-  r = ((glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramStringNV")) == NULL) || r;
+-  r = ((glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramivNV")) == NULL) || r;
+-  r = ((glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetTrackMatrixivNV")) == NULL) || r;
+-  r = ((glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribPointervNV")) == NULL) || r;
+-  r = ((glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribdvNV")) == NULL) || r;
+-  r = ((glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribfvNV")) == NULL) || r;
+-  r = ((glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribivNV")) == NULL) || r;
+-  r = ((glIsProgramNV = (PFNGLISPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glIsProgramNV")) == NULL) || r;
+-  r = ((glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glLoadProgramNV")) == NULL) || r;
+-  r = ((glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4dNV")) == NULL) || r;
+-  r = ((glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4dvNV")) == NULL) || r;
+-  r = ((glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4fNV")) == NULL) || r;
+-  r = ((glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4fvNV")) == NULL) || r;
+-  r = ((glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameters4dvNV")) == NULL) || r;
+-  r = ((glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameters4fvNV")) == NULL) || r;
+-  r = ((glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)glewGetProcAddress((const GLubyte*)"glRequestResidentProgramsNV")) == NULL) || r;
+-  r = ((glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)glewGetProcAddress((const GLubyte*)"glTrackMatrixNV")) == NULL) || r;
+-  r = ((glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dNV")) == NULL) || r;
+-  r = ((glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dvNV")) == NULL) || r;
+-  r = ((glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fNV")) == NULL) || r;
+-  r = ((glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fvNV")) == NULL) || r;
+-  r = ((glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1sNV")) == NULL) || r;
+-  r = ((glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1svNV")) == NULL) || r;
+-  r = ((glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dNV")) == NULL) || r;
+-  r = ((glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dvNV")) == NULL) || r;
+-  r = ((glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fNV")) == NULL) || r;
+-  r = ((glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fvNV")) == NULL) || r;
+-  r = ((glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2sNV")) == NULL) || r;
+-  r = ((glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2svNV")) == NULL) || r;
+-  r = ((glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dNV")) == NULL) || r;
+-  r = ((glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dvNV")) == NULL) || r;
+-  r = ((glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fNV")) == NULL) || r;
+-  r = ((glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fvNV")) == NULL) || r;
+-  r = ((glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3sNV")) == NULL) || r;
+-  r = ((glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3svNV")) == NULL) || r;
+-  r = ((glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dNV")) == NULL) || r;
+-  r = ((glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dvNV")) == NULL) || r;
+-  r = ((glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fNV")) == NULL) || r;
+-  r = ((glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fvNV")) == NULL) || r;
+-  r = ((glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4sNV")) == NULL) || r;
+-  r = ((glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4svNV")) == NULL) || r;
+-  r = ((glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubNV")) == NULL) || r;
+-  r = ((glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubvNV")) == NULL) || r;
+-  r = ((glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribPointerNV")) == NULL) || r;
+-  r = ((glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1dvNV")) == NULL) || r;
+-  r = ((glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1fvNV")) == NULL) || r;
+-  r = ((glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1svNV")) == NULL) || r;
+-  r = ((glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2dvNV")) == NULL) || r;
+-  r = ((glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2fvNV")) == NULL) || r;
+-  r = ((glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2svNV")) == NULL) || r;
+-  r = ((glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3dvNV")) == NULL) || r;
+-  r = ((glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3fvNV")) == NULL) || r;
+-  r = ((glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3svNV")) == NULL) || r;
+-  r = ((glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4dvNV")) == NULL) || r;
+-  r = ((glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4fvNV")) == NULL) || r;
+-  r = ((glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4svNV")) == NULL) || r;
+-  r = ((glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4ubvNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_NV_vertex_program */
+-
+-#ifdef GL_NV_vertex_program1_1
+-
+-#endif /* GL_NV_vertex_program1_1 */
+-
+-#ifdef GL_NV_vertex_program2
+-
+-#endif /* GL_NV_vertex_program2 */
+-
+-#ifdef GL_NV_vertex_program2_option
+-
+-#endif /* GL_NV_vertex_program2_option */
+-
+-#ifdef GL_NV_vertex_program3
+-
+-#endif /* GL_NV_vertex_program3 */
+-
+-#ifdef GL_NV_vertex_program4
+-
+-#endif /* GL_NV_vertex_program4 */
+-
+-#ifdef GL_OES_byte_coordinates
+-
+-#endif /* GL_OES_byte_coordinates */
+-
+-#ifdef GL_OES_compressed_paletted_texture
+-
+-#endif /* GL_OES_compressed_paletted_texture */
+-
+-#ifdef GL_OES_read_format
+-
+-#endif /* GL_OES_read_format */
+-
+-#ifdef GL_OES_single_precision
+-
+-static GLboolean _glewInit_GL_OES_single_precision (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)glewGetProcAddress((const GLubyte*)"glClearDepthfOES")) == NULL) || r;
+-  r = ((glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)glewGetProcAddress((const GLubyte*)"glClipPlanefOES")) == NULL) || r;
+-  r = ((glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)glewGetProcAddress((const GLubyte*)"glDepthRangefOES")) == NULL) || r;
+-  r = ((glFrustumfOES = (PFNGLFRUSTUMFOESPROC)glewGetProcAddress((const GLubyte*)"glFrustumfOES")) == NULL) || r;
+-  r = ((glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)glewGetProcAddress((const GLubyte*)"glGetClipPlanefOES")) == NULL) || r;
+-  r = ((glOrthofOES = (PFNGLORTHOFOESPROC)glewGetProcAddress((const GLubyte*)"glOrthofOES")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_OES_single_precision */
+-
+-#ifdef GL_OML_interlace
+-
+-#endif /* GL_OML_interlace */
+-
+-#ifdef GL_OML_resample
+-
+-#endif /* GL_OML_resample */
+-
+-#ifdef GL_OML_subsample
+-
+-#endif /* GL_OML_subsample */
+-
+-#ifdef GL_PGI_misc_hints
+-
+-#endif /* GL_PGI_misc_hints */
+-
+-#ifdef GL_PGI_vertex_hints
+-
+-#endif /* GL_PGI_vertex_hints */
+-
+-#ifdef GL_REND_screen_coordinates
+-
+-#endif /* GL_REND_screen_coordinates */
+-
+-#ifdef GL_S3_s3tc
+-
+-#endif /* GL_S3_s3tc */
+-
+-#ifdef GL_SGIS_color_range
+-
+-#endif /* GL_SGIS_color_range */
+-
+-#ifdef GL_SGIS_detail_texture
+-
+-static GLboolean _glewInit_GL_SGIS_detail_texture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glDetailTexFuncSGIS")) == NULL) || r;
+-  r = ((glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetDetailTexFuncSGIS")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIS_detail_texture */
+-
+-#ifdef GL_SGIS_fog_function
+-
+-static GLboolean _glewInit_GL_SGIS_fog_function (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glFogFuncSGIS")) == NULL) || r;
+-  r = ((glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetFogFuncSGIS")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIS_fog_function */
+-
+-#ifdef GL_SGIS_generate_mipmap
+-
+-#endif /* GL_SGIS_generate_mipmap */
+-
+-#ifdef GL_SGIS_multisample
+-
+-static GLboolean _glewInit_GL_SGIS_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)glewGetProcAddress((const GLubyte*)"glSampleMaskSGIS")) == NULL) || r;
+-  r = ((glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)glewGetProcAddress((const GLubyte*)"glSamplePatternSGIS")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIS_multisample */
+-
+-#ifdef GL_SGIS_pixel_texture
+-
+-#endif /* GL_SGIS_pixel_texture */
+-
+-#ifdef GL_SGIS_sharpen_texture
+-
+-static GLboolean _glewInit_GL_SGIS_sharpen_texture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetSharpenTexFuncSGIS")) == NULL) || r;
+-  r = ((glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glSharpenTexFuncSGIS")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIS_sharpen_texture */
+-
+-#ifdef GL_SGIS_texture4D
+-
+-static GLboolean _glewInit_GL_SGIS_texture4D (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)glewGetProcAddress((const GLubyte*)"glTexImage4DSGIS")) == NULL) || r;
+-  r = ((glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage4DSGIS")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIS_texture4D */
+-
+-#ifdef GL_SGIS_texture_border_clamp
+-
+-#endif /* GL_SGIS_texture_border_clamp */
+-
+-#ifdef GL_SGIS_texture_edge_clamp
+-
+-#endif /* GL_SGIS_texture_edge_clamp */
+-
+-#ifdef GL_SGIS_texture_filter4
+-
+-static GLboolean _glewInit_GL_SGIS_texture_filter4 (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetTexFilterFuncSGIS")) == NULL) || r;
+-  r = ((glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glTexFilterFuncSGIS")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIS_texture_filter4 */
+-
+-#ifdef GL_SGIS_texture_lod
+-
+-#endif /* GL_SGIS_texture_lod */
+-
+-#ifdef GL_SGIS_texture_select
+-
+-#endif /* GL_SGIS_texture_select */
+-
+-#ifdef GL_SGIX_async
+-
+-static GLboolean _glewInit_GL_SGIX_async (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)glewGetProcAddress((const GLubyte*)"glAsyncMarkerSGIX")) == NULL) || r;
+-  r = ((glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)glewGetProcAddress((const GLubyte*)"glDeleteAsyncMarkersSGIX")) == NULL) || r;
+-  r = ((glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)glewGetProcAddress((const GLubyte*)"glFinishAsyncSGIX")) == NULL) || r;
+-  r = ((glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)glewGetProcAddress((const GLubyte*)"glGenAsyncMarkersSGIX")) == NULL) || r;
+-  r = ((glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)glewGetProcAddress((const GLubyte*)"glIsAsyncMarkerSGIX")) == NULL) || r;
+-  r = ((glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)glewGetProcAddress((const GLubyte*)"glPollAsyncSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_async */
+-
+-#ifdef GL_SGIX_async_histogram
+-
+-#endif /* GL_SGIX_async_histogram */
+-
+-#ifdef GL_SGIX_async_pixel
+-
+-#endif /* GL_SGIX_async_pixel */
+-
+-#ifdef GL_SGIX_blend_alpha_minmax
+-
+-#endif /* GL_SGIX_blend_alpha_minmax */
+-
+-#ifdef GL_SGIX_clipmap
+-
+-#endif /* GL_SGIX_clipmap */
+-
+-#ifdef GL_SGIX_depth_texture
+-
+-#endif /* GL_SGIX_depth_texture */
+-
+-#ifdef GL_SGIX_flush_raster
+-
+-static GLboolean _glewInit_GL_SGIX_flush_raster (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)glewGetProcAddress((const GLubyte*)"glFlushRasterSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_flush_raster */
+-
+-#ifdef GL_SGIX_fog_offset
+-
+-#endif /* GL_SGIX_fog_offset */
+-
+-#ifdef GL_SGIX_fog_texture
+-
+-static GLboolean _glewInit_GL_SGIX_fog_texture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTextureFogSGIX = (PFNGLTEXTUREFOGSGIXPROC)glewGetProcAddress((const GLubyte*)"glTextureFogSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_fog_texture */
+-
+-#ifdef GL_SGIX_fragment_specular_lighting
+-
+-static GLboolean _glewInit_GL_SGIX_fragment_specular_lighting (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentColorMaterialSGIX")) == NULL) || r;
+-  r = ((glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfSGIX")) == NULL) || r;
+-  r = ((glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfvSGIX")) == NULL) || r;
+-  r = ((glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModeliSGIX")) == NULL) || r;
+-  r = ((glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelivSGIX")) == NULL) || r;
+-  r = ((glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfSGIX")) == NULL) || r;
+-  r = ((glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfvSGIX")) == NULL) || r;
+-  r = ((glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightiSGIX")) == NULL) || r;
+-  r = ((glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightivSGIX")) == NULL) || r;
+-  r = ((glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfSGIX")) == NULL) || r;
+-  r = ((glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfvSGIX")) == NULL) || r;
+-  r = ((glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialiSGIX")) == NULL) || r;
+-  r = ((glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialivSGIX")) == NULL) || r;
+-  r = ((glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightfvSGIX")) == NULL) || r;
+-  r = ((glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightivSGIX")) == NULL) || r;
+-  r = ((glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialfvSGIX")) == NULL) || r;
+-  r = ((glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialivSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_fragment_specular_lighting */
+-
+-#ifdef GL_SGIX_framezoom
+-
+-static GLboolean _glewInit_GL_SGIX_framezoom (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)glewGetProcAddress((const GLubyte*)"glFrameZoomSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_framezoom */
+-
+-#ifdef GL_SGIX_interlace
+-
+-#endif /* GL_SGIX_interlace */
+-
+-#ifdef GL_SGIX_ir_instrument1
+-
+-#endif /* GL_SGIX_ir_instrument1 */
+-
+-#ifdef GL_SGIX_list_priority
+-
+-#endif /* GL_SGIX_list_priority */
+-
+-#ifdef GL_SGIX_pixel_texture
+-
+-static GLboolean _glewInit_GL_SGIX_pixel_texture (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)glewGetProcAddress((const GLubyte*)"glPixelTexGenSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_pixel_texture */
+-
+-#ifdef GL_SGIX_pixel_texture_bits
+-
+-#endif /* GL_SGIX_pixel_texture_bits */
+-
+-#ifdef GL_SGIX_reference_plane
+-
+-static GLboolean _glewInit_GL_SGIX_reference_plane (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)glewGetProcAddress((const GLubyte*)"glReferencePlaneSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_reference_plane */
+-
+-#ifdef GL_SGIX_resample
+-
+-#endif /* GL_SGIX_resample */
+-
+-#ifdef GL_SGIX_shadow
+-
+-#endif /* GL_SGIX_shadow */
+-
+-#ifdef GL_SGIX_shadow_ambient
+-
+-#endif /* GL_SGIX_shadow_ambient */
+-
+-#ifdef GL_SGIX_sprite
+-
+-static GLboolean _glewInit_GL_SGIX_sprite (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameterfSGIX")) == NULL) || r;
+-  r = ((glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameterfvSGIX")) == NULL) || r;
+-  r = ((glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameteriSGIX")) == NULL) || r;
+-  r = ((glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameterivSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_sprite */
+-
+-#ifdef GL_SGIX_tag_sample_buffer
+-
+-static GLboolean _glewInit_GL_SGIX_tag_sample_buffer (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glTagSampleBufferSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGIX_tag_sample_buffer */
+-
+-#ifdef GL_SGIX_texture_add_env
+-
+-#endif /* GL_SGIX_texture_add_env */
+-
+-#ifdef GL_SGIX_texture_coordinate_clamp
+-
+-#endif /* GL_SGIX_texture_coordinate_clamp */
+-
+-#ifdef GL_SGIX_texture_lod_bias
+-
+-#endif /* GL_SGIX_texture_lod_bias */
+-
+-#ifdef GL_SGIX_texture_multi_buffer
+-
+-#endif /* GL_SGIX_texture_multi_buffer */
+-
+-#ifdef GL_SGIX_texture_range
+-
+-#endif /* GL_SGIX_texture_range */
+-
+-#ifdef GL_SGIX_texture_scale_bias
+-
+-#endif /* GL_SGIX_texture_scale_bias */
+-
+-#ifdef GL_SGIX_vertex_preclip
+-
+-#endif /* GL_SGIX_vertex_preclip */
+-
+-#ifdef GL_SGIX_vertex_preclip_hint
+-
+-#endif /* GL_SGIX_vertex_preclip_hint */
+-
+-#ifdef GL_SGIX_ycrcb
+-
+-#endif /* GL_SGIX_ycrcb */
+-
+-#ifdef GL_SGI_color_matrix
+-
+-#endif /* GL_SGI_color_matrix */
+-
+-#ifdef GL_SGI_color_table
+-
+-static GLboolean _glewInit_GL_SGI_color_table (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameterfvSGI")) == NULL) || r;
+-  r = ((glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameterivSGI")) == NULL) || r;
+-  r = ((glColorTableSGI = (PFNGLCOLORTABLESGIPROC)glewGetProcAddress((const GLubyte*)"glColorTableSGI")) == NULL) || r;
+-  r = ((glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)glewGetProcAddress((const GLubyte*)"glCopyColorTableSGI")) == NULL) || r;
+-  r = ((glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterfvSGI")) == NULL) || r;
+-  r = ((glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterivSGI")) == NULL) || r;
+-  r = ((glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableSGI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SGI_color_table */
+-
+-#ifdef GL_SGI_texture_color_table
+-
+-#endif /* GL_SGI_texture_color_table */
+-
+-#ifdef GL_SUNX_constant_data
+-
+-static GLboolean _glewInit_GL_SUNX_constant_data (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)glewGetProcAddress((const GLubyte*)"glFinishTextureSUNX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SUNX_constant_data */
+-
+-#ifdef GL_SUN_convolution_border_modes
+-
+-#endif /* GL_SUN_convolution_border_modes */
+-
+-#ifdef GL_SUN_global_alpha
+-
+-static GLboolean _glewInit_GL_SUN_global_alpha (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorbSUN")) == NULL) || r;
+-  r = ((glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactordSUN")) == NULL) || r;
+-  r = ((glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorfSUN")) == NULL) || r;
+-  r = ((glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactoriSUN")) == NULL) || r;
+-  r = ((glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorsSUN")) == NULL) || r;
+-  r = ((glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorubSUN")) == NULL) || r;
+-  r = ((glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactoruiSUN")) == NULL) || r;
+-  r = ((glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorusSUN")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SUN_global_alpha */
+-
+-#ifdef GL_SUN_mesh_array
+-
+-#endif /* GL_SUN_mesh_array */
+-
+-#ifdef GL_SUN_read_video_pixels
+-
+-static GLboolean _glewInit_GL_SUN_read_video_pixels (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glReadVideoPixelsSUN = (PFNGLREADVIDEOPIXELSSUNPROC)glewGetProcAddress((const GLubyte*)"glReadVideoPixelsSUN")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SUN_read_video_pixels */
+-
+-#ifdef GL_SUN_slice_accum
+-
+-#endif /* GL_SUN_slice_accum */
+-
+-#ifdef GL_SUN_triangle_list
+-
+-static GLboolean _glewInit_GL_SUN_triangle_list (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodePointerSUN")) == NULL) || r;
+-  r = ((glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeubSUN")) == NULL) || r;
+-  r = ((glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeubvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuivSUN")) == NULL) || r;
+-  r = ((glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeusSUN")) == NULL) || r;
+-  r = ((glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeusvSUN")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SUN_triangle_list */
+-
+-#ifdef GL_SUN_vertex
+-
+-static GLboolean _glewInit_GL_SUN_vertex (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor3fVertex3fSUN")) == NULL) || r;
+-  r = ((glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4fNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4fNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex2fSUN")) == NULL) || r;
+-  r = ((glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex2fvSUN")) == NULL) || r;
+-  r = ((glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex3fSUN")) == NULL) || r;
+-  r = ((glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex3fvSUN")) == NULL) || r;
+-  r = ((glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor3fVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4fNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4fNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4ubVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4ubVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fVertex3fvSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiVertex3fSUN")) == NULL) || r;
+-  r = ((glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiVertex3fvSUN")) == NULL) || r;
+-  r = ((glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor3fVertex3fSUN")) == NULL) || r;
+-  r = ((glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4fNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4fNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4ubVertex3fSUN")) == NULL) || r;
+-  r = ((glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4ubVertex3fvSUN")) == NULL) || r;
+-  r = ((glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fNormal3fVertex3fSUN")) == NULL) || r;
+-  r = ((glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fNormal3fVertex3fvSUN")) == NULL) || r;
+-  r = ((glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fVertex3fSUN")) == NULL) || r;
+-  r = ((glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fVertex3fvSUN")) == NULL) || r;
+-  r = ((glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fColor4fNormal3fVertex4fSUN")) == NULL) || r;
+-  r = ((glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fColor4fNormal3fVertex4fvSUN")) == NULL) || r;
+-  r = ((glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fVertex4fSUN")) == NULL) || r;
+-  r = ((glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fVertex4fvSUN")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_SUN_vertex */
+-
+-#ifdef GL_WIN_phong_shading
+-
+-#endif /* GL_WIN_phong_shading */
+-
+-#ifdef GL_WIN_specular_fog
+-
+-#endif /* GL_WIN_specular_fog */
+-
+-#ifdef GL_WIN_swap_hint
+-
+-static GLboolean _glewInit_GL_WIN_swap_hint (GLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glAddSwapHintRectWIN = (PFNGLADDSWAPHINTRECTWINPROC)glewGetProcAddress((const GLubyte*)"glAddSwapHintRectWIN")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GL_WIN_swap_hint */
+-
+-/* ------------------------------------------------------------------------- */
+-
+-/* 
+- * Search for name in the extensions string. Use of strstr()
+- * is not sufficient because extension names can be prefixes of
+- * other extension names. Could use strtok() but the constant
+- * string returned by glGetString might be in read-only memory.
+- */
+-GLboolean glewGetExtension (const char* name)
+-{    
+-  GLubyte* p;
+-  GLubyte* end;
+-  GLuint len = _glewStrLen((const GLubyte*)name);
+-  p = (GLubyte*)glGetString(GL_EXTENSIONS);
+-  if (0 == p) return GL_FALSE;
+-  end = p + _glewStrLen(p);
+-  while (p < end)
+-  {
+-    GLuint n = _glewStrCLen(p, ' ');
+-    if (len == n && _glewStrSame((const GLubyte*)name, p, n)) return GL_TRUE;
+-    p += n+1;
+-  }
+-  return GL_FALSE;
+-}
+-
+-/* ------------------------------------------------------------------------- */
+-
+-#ifndef GLEW_MX
+-static
+-#endif
+-GLenum glewContextInit (GLEW_CONTEXT_ARG_DEF_LIST)
+-{
+-  const GLubyte* s;
+-  GLuint dot, major, minor;
+-  /* query opengl version */
+-  s = glGetString(GL_VERSION);
+-  dot = _glewStrCLen(s, '.');
+-  major = dot-1;
+-  minor = dot+1;
+-  if (dot == 0 || s[minor] == '\0')
+-    return GLEW_ERROR_NO_GL_VERSION;
+-  if (s[major] == '1' && s[minor] == '0')
+-  {
+-	return GLEW_ERROR_GL_VERSION_10_ONLY;
+-  }
+-  else
+-  {
+-    CONST_CAST(GLEW_VERSION_1_1) = GL_TRUE;
+-	if (s[major] >= '2')
+-	{
+-      CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
+-      CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
+-      CONST_CAST(GLEW_VERSION_1_4) = GL_TRUE;
+-	  CONST_CAST(GLEW_VERSION_1_5) = GL_TRUE;
+-	  CONST_CAST(GLEW_VERSION_2_0) = GL_TRUE;
+-	  if (s[minor] >= '1')
+-	  {
+-	    CONST_CAST(GLEW_VERSION_2_1) = GL_TRUE;
+-      }
+-	}
+-	else
+-	{
+-	  if (s[minor] >= '5')
+-	  {
+-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_4) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_5) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
+-	  }
+-	  if (s[minor] == '4')
+-	  {
+-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_4) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
+-	  }
+-	  if (s[minor] == '3')
+-	  {
+-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_4) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
+-	  }
+-	  if (s[minor] == '2')
+-	  {
+-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
+-		CONST_CAST(GLEW_VERSION_1_3) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_1_4) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
+-	  }
+-	  if (s[minor] < '2')
+-	  {
+-		CONST_CAST(GLEW_VERSION_1_2) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_1_3) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_1_4) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
+-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
+-	  }
+-	}
+-  }
+-  /* initialize extensions */
+-#ifdef GL_VERSION_1_2
+-  if (glewExperimental || GLEW_VERSION_1_2) CONST_CAST(GLEW_VERSION_1_2) = !_glewInit_GL_VERSION_1_2(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_VERSION_1_2 */
+-#ifdef GL_VERSION_1_3
+-  if (glewExperimental || GLEW_VERSION_1_3) CONST_CAST(GLEW_VERSION_1_3) = !_glewInit_GL_VERSION_1_3(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_VERSION_1_3 */
+-#ifdef GL_VERSION_1_4
+-  if (glewExperimental || GLEW_VERSION_1_4) CONST_CAST(GLEW_VERSION_1_4) = !_glewInit_GL_VERSION_1_4(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_VERSION_1_4 */
+-#ifdef GL_VERSION_1_5
+-  if (glewExperimental || GLEW_VERSION_1_5) CONST_CAST(GLEW_VERSION_1_5) = !_glewInit_GL_VERSION_1_5(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_VERSION_1_5 */
+-#ifdef GL_VERSION_2_0
+-  if (glewExperimental || GLEW_VERSION_2_0) CONST_CAST(GLEW_VERSION_2_0) = !_glewInit_GL_VERSION_2_0(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_VERSION_2_0 */
+-#ifdef GL_VERSION_2_1
+-  if (glewExperimental || GLEW_VERSION_2_1) CONST_CAST(GLEW_VERSION_2_1) = !_glewInit_GL_VERSION_2_1(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_VERSION_2_1 */
+-#ifdef GL_3DFX_multisample
+-  CONST_CAST(GLEW_3DFX_multisample) = glewGetExtension("GL_3DFX_multisample");
+-#endif /* GL_3DFX_multisample */
+-#ifdef GL_3DFX_tbuffer
+-  CONST_CAST(GLEW_3DFX_tbuffer) = glewGetExtension("GL_3DFX_tbuffer");
+-  if (glewExperimental || GLEW_3DFX_tbuffer) CONST_CAST(GLEW_3DFX_tbuffer) = !_glewInit_GL_3DFX_tbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_3DFX_tbuffer */
+-#ifdef GL_3DFX_texture_compression_FXT1
+-  CONST_CAST(GLEW_3DFX_texture_compression_FXT1) = glewGetExtension("GL_3DFX_texture_compression_FXT1");
+-#endif /* GL_3DFX_texture_compression_FXT1 */
+-#ifdef GL_APPLE_client_storage
+-  CONST_CAST(GLEW_APPLE_client_storage) = glewGetExtension("GL_APPLE_client_storage");
+-#endif /* GL_APPLE_client_storage */
+-#ifdef GL_APPLE_element_array
+-  CONST_CAST(GLEW_APPLE_element_array) = glewGetExtension("GL_APPLE_element_array");
+-  if (glewExperimental || GLEW_APPLE_element_array) CONST_CAST(GLEW_APPLE_element_array) = !_glewInit_GL_APPLE_element_array(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_APPLE_element_array */
+-#ifdef GL_APPLE_fence
+-  CONST_CAST(GLEW_APPLE_fence) = glewGetExtension("GL_APPLE_fence");
+-  if (glewExperimental || GLEW_APPLE_fence) CONST_CAST(GLEW_APPLE_fence) = !_glewInit_GL_APPLE_fence(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_APPLE_fence */
+-#ifdef GL_APPLE_float_pixels
+-  CONST_CAST(GLEW_APPLE_float_pixels) = glewGetExtension("GL_APPLE_float_pixels");
+-#endif /* GL_APPLE_float_pixels */
+-#ifdef GL_APPLE_flush_buffer_range
+-  CONST_CAST(GLEW_APPLE_flush_buffer_range) = glewGetExtension("GL_APPLE_flush_buffer_range");
+-  if (glewExperimental || GLEW_APPLE_flush_buffer_range) CONST_CAST(GLEW_APPLE_flush_buffer_range) = !_glewInit_GL_APPLE_flush_buffer_range(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_APPLE_flush_buffer_range */
+-#ifdef GL_APPLE_pixel_buffer
+-  CONST_CAST(GLEW_APPLE_pixel_buffer) = glewGetExtension("GL_APPLE_pixel_buffer");
+-#endif /* GL_APPLE_pixel_buffer */
+-#ifdef GL_APPLE_specular_vector
+-  CONST_CAST(GLEW_APPLE_specular_vector) = glewGetExtension("GL_APPLE_specular_vector");
+-#endif /* GL_APPLE_specular_vector */
+-#ifdef GL_APPLE_texture_range
+-  CONST_CAST(GLEW_APPLE_texture_range) = glewGetExtension("GL_APPLE_texture_range");
+-  if (glewExperimental || GLEW_APPLE_texture_range) CONST_CAST(GLEW_APPLE_texture_range) = !_glewInit_GL_APPLE_texture_range(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_APPLE_texture_range */
+-#ifdef GL_APPLE_transform_hint
+-  CONST_CAST(GLEW_APPLE_transform_hint) = glewGetExtension("GL_APPLE_transform_hint");
+-#endif /* GL_APPLE_transform_hint */
+-#ifdef GL_APPLE_vertex_array_object
+-  CONST_CAST(GLEW_APPLE_vertex_array_object) = glewGetExtension("GL_APPLE_vertex_array_object");
+-  if (glewExperimental || GLEW_APPLE_vertex_array_object) CONST_CAST(GLEW_APPLE_vertex_array_object) = !_glewInit_GL_APPLE_vertex_array_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_APPLE_vertex_array_object */
+-#ifdef GL_APPLE_vertex_array_range
+-  CONST_CAST(GLEW_APPLE_vertex_array_range) = glewGetExtension("GL_APPLE_vertex_array_range");
+-  if (glewExperimental || GLEW_APPLE_vertex_array_range) CONST_CAST(GLEW_APPLE_vertex_array_range) = !_glewInit_GL_APPLE_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_APPLE_vertex_array_range */
+-#ifdef GL_APPLE_ycbcr_422
+-  CONST_CAST(GLEW_APPLE_ycbcr_422) = glewGetExtension("GL_APPLE_ycbcr_422");
+-#endif /* GL_APPLE_ycbcr_422 */
+-#ifdef GL_ARB_color_buffer_float
+-  CONST_CAST(GLEW_ARB_color_buffer_float) = glewGetExtension("GL_ARB_color_buffer_float");
+-  if (glewExperimental || GLEW_ARB_color_buffer_float) CONST_CAST(GLEW_ARB_color_buffer_float) = !_glewInit_GL_ARB_color_buffer_float(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_color_buffer_float */
+-#ifdef GL_ARB_depth_texture
+-  CONST_CAST(GLEW_ARB_depth_texture) = glewGetExtension("GL_ARB_depth_texture");
+-#endif /* GL_ARB_depth_texture */
+-#ifdef GL_ARB_draw_buffers
+-  CONST_CAST(GLEW_ARB_draw_buffers) = glewGetExtension("GL_ARB_draw_buffers");
+-  if (glewExperimental || GLEW_ARB_draw_buffers) CONST_CAST(GLEW_ARB_draw_buffers) = !_glewInit_GL_ARB_draw_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_draw_buffers */
+-#ifdef GL_ARB_fragment_program
+-  CONST_CAST(GLEW_ARB_fragment_program) = glewGetExtension("GL_ARB_fragment_program");
+-#endif /* GL_ARB_fragment_program */
+-#ifdef GL_ARB_fragment_program_shadow
+-  CONST_CAST(GLEW_ARB_fragment_program_shadow) = glewGetExtension("GL_ARB_fragment_program_shadow");
+-#endif /* GL_ARB_fragment_program_shadow */
+-#ifdef GL_ARB_fragment_shader
+-  CONST_CAST(GLEW_ARB_fragment_shader) = glewGetExtension("GL_ARB_fragment_shader");
+-#endif /* GL_ARB_fragment_shader */
+-#ifdef GL_ARB_half_float_pixel
+-  CONST_CAST(GLEW_ARB_half_float_pixel) = glewGetExtension("GL_ARB_half_float_pixel");
+-#endif /* GL_ARB_half_float_pixel */
+-#ifdef GL_ARB_imaging
+-  CONST_CAST(GLEW_ARB_imaging) = glewGetExtension("GL_ARB_imaging");
+-  if (glewExperimental || GLEW_ARB_imaging) CONST_CAST(GLEW_ARB_imaging) = !_glewInit_GL_ARB_imaging(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_imaging */
+-#ifdef GL_ARB_matrix_palette
+-  CONST_CAST(GLEW_ARB_matrix_palette) = glewGetExtension("GL_ARB_matrix_palette");
+-  if (glewExperimental || GLEW_ARB_matrix_palette) CONST_CAST(GLEW_ARB_matrix_palette) = !_glewInit_GL_ARB_matrix_palette(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_matrix_palette */
+-#ifdef GL_ARB_multisample
+-  CONST_CAST(GLEW_ARB_multisample) = glewGetExtension("GL_ARB_multisample");
+-  if (glewExperimental || GLEW_ARB_multisample) CONST_CAST(GLEW_ARB_multisample) = !_glewInit_GL_ARB_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_multisample */
+-#ifdef GL_ARB_multitexture
+-  CONST_CAST(GLEW_ARB_multitexture) = glewGetExtension("GL_ARB_multitexture");
+-  if (glewExperimental || GLEW_ARB_multitexture) CONST_CAST(GLEW_ARB_multitexture) = !_glewInit_GL_ARB_multitexture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_multitexture */
+-#ifdef GL_ARB_occlusion_query
+-  CONST_CAST(GLEW_ARB_occlusion_query) = glewGetExtension("GL_ARB_occlusion_query");
+-  if (glewExperimental || GLEW_ARB_occlusion_query) CONST_CAST(GLEW_ARB_occlusion_query) = !_glewInit_GL_ARB_occlusion_query(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_occlusion_query */
+-#ifdef GL_ARB_pixel_buffer_object
+-  CONST_CAST(GLEW_ARB_pixel_buffer_object) = glewGetExtension("GL_ARB_pixel_buffer_object");
+-#endif /* GL_ARB_pixel_buffer_object */
+-#ifdef GL_ARB_point_parameters
+-  CONST_CAST(GLEW_ARB_point_parameters) = glewGetExtension("GL_ARB_point_parameters");
+-  if (glewExperimental || GLEW_ARB_point_parameters) CONST_CAST(GLEW_ARB_point_parameters) = !_glewInit_GL_ARB_point_parameters(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_point_parameters */
+-#ifdef GL_ARB_point_sprite
+-  CONST_CAST(GLEW_ARB_point_sprite) = glewGetExtension("GL_ARB_point_sprite");
+-#endif /* GL_ARB_point_sprite */
+-#ifdef GL_ARB_shader_objects
+-  CONST_CAST(GLEW_ARB_shader_objects) = glewGetExtension("GL_ARB_shader_objects");
+-  if (glewExperimental || GLEW_ARB_shader_objects) CONST_CAST(GLEW_ARB_shader_objects) = !_glewInit_GL_ARB_shader_objects(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_shader_objects */
+-#ifdef GL_ARB_shading_language_100
+-  CONST_CAST(GLEW_ARB_shading_language_100) = glewGetExtension("GL_ARB_shading_language_100");
+-#endif /* GL_ARB_shading_language_100 */
+-#ifdef GL_ARB_shadow
+-  CONST_CAST(GLEW_ARB_shadow) = glewGetExtension("GL_ARB_shadow");
+-#endif /* GL_ARB_shadow */
+-#ifdef GL_ARB_shadow_ambient
+-  CONST_CAST(GLEW_ARB_shadow_ambient) = glewGetExtension("GL_ARB_shadow_ambient");
+-#endif /* GL_ARB_shadow_ambient */
+-#ifdef GL_ARB_texture_border_clamp
+-  CONST_CAST(GLEW_ARB_texture_border_clamp) = glewGetExtension("GL_ARB_texture_border_clamp");
+-#endif /* GL_ARB_texture_border_clamp */
+-#ifdef GL_ARB_texture_compression
+-  CONST_CAST(GLEW_ARB_texture_compression) = glewGetExtension("GL_ARB_texture_compression");
+-  if (glewExperimental || GLEW_ARB_texture_compression) CONST_CAST(GLEW_ARB_texture_compression) = !_glewInit_GL_ARB_texture_compression(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_texture_compression */
+-#ifdef GL_ARB_texture_cube_map
+-  CONST_CAST(GLEW_ARB_texture_cube_map) = glewGetExtension("GL_ARB_texture_cube_map");
+-#endif /* GL_ARB_texture_cube_map */
+-#ifdef GL_ARB_texture_env_add
+-  CONST_CAST(GLEW_ARB_texture_env_add) = glewGetExtension("GL_ARB_texture_env_add");
+-#endif /* GL_ARB_texture_env_add */
+-#ifdef GL_ARB_texture_env_combine
+-  CONST_CAST(GLEW_ARB_texture_env_combine) = glewGetExtension("GL_ARB_texture_env_combine");
+-#endif /* GL_ARB_texture_env_combine */
+-#ifdef GL_ARB_texture_env_crossbar
+-  CONST_CAST(GLEW_ARB_texture_env_crossbar) = glewGetExtension("GL_ARB_texture_env_crossbar");
+-#endif /* GL_ARB_texture_env_crossbar */
+-#ifdef GL_ARB_texture_env_dot3
+-  CONST_CAST(GLEW_ARB_texture_env_dot3) = glewGetExtension("GL_ARB_texture_env_dot3");
+-#endif /* GL_ARB_texture_env_dot3 */
+-#ifdef GL_ARB_texture_float
+-  CONST_CAST(GLEW_ARB_texture_float) = glewGetExtension("GL_ARB_texture_float");
+-#endif /* GL_ARB_texture_float */
+-#ifdef GL_ARB_texture_mirrored_repeat
+-  CONST_CAST(GLEW_ARB_texture_mirrored_repeat) = glewGetExtension("GL_ARB_texture_mirrored_repeat");
+-#endif /* GL_ARB_texture_mirrored_repeat */
+-#ifdef GL_ARB_texture_non_power_of_two
+-  CONST_CAST(GLEW_ARB_texture_non_power_of_two) = glewGetExtension("GL_ARB_texture_non_power_of_two");
+-#endif /* GL_ARB_texture_non_power_of_two */
+-#ifdef GL_ARB_texture_rectangle
+-  CONST_CAST(GLEW_ARB_texture_rectangle) = glewGetExtension("GL_ARB_texture_rectangle");
+-#endif /* GL_ARB_texture_rectangle */
+-#ifdef GL_ARB_transpose_matrix
+-  CONST_CAST(GLEW_ARB_transpose_matrix) = glewGetExtension("GL_ARB_transpose_matrix");
+-  if (glewExperimental || GLEW_ARB_transpose_matrix) CONST_CAST(GLEW_ARB_transpose_matrix) = !_glewInit_GL_ARB_transpose_matrix(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_transpose_matrix */
+-#ifdef GL_ARB_vertex_blend
+-  CONST_CAST(GLEW_ARB_vertex_blend) = glewGetExtension("GL_ARB_vertex_blend");
+-  if (glewExperimental || GLEW_ARB_vertex_blend) CONST_CAST(GLEW_ARB_vertex_blend) = !_glewInit_GL_ARB_vertex_blend(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_vertex_blend */
+-#ifdef GL_ARB_vertex_buffer_object
+-  CONST_CAST(GLEW_ARB_vertex_buffer_object) = glewGetExtension("GL_ARB_vertex_buffer_object");
+-  if (glewExperimental || GLEW_ARB_vertex_buffer_object) CONST_CAST(GLEW_ARB_vertex_buffer_object) = !_glewInit_GL_ARB_vertex_buffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_vertex_buffer_object */
+-#ifdef GL_ARB_vertex_program
+-  CONST_CAST(GLEW_ARB_vertex_program) = glewGetExtension("GL_ARB_vertex_program");
+-  if (glewExperimental || GLEW_ARB_vertex_program) CONST_CAST(GLEW_ARB_vertex_program) = !_glewInit_GL_ARB_vertex_program(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_vertex_program */
+-#ifdef GL_ARB_vertex_shader
+-  CONST_CAST(GLEW_ARB_vertex_shader) = glewGetExtension("GL_ARB_vertex_shader");
+-  if (glewExperimental || GLEW_ARB_vertex_shader) CONST_CAST(GLEW_ARB_vertex_shader) = !_glewInit_GL_ARB_vertex_shader(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_vertex_shader */
+-#ifdef GL_ARB_window_pos
+-  CONST_CAST(GLEW_ARB_window_pos) = glewGetExtension("GL_ARB_window_pos");
+-  if (glewExperimental || GLEW_ARB_window_pos) CONST_CAST(GLEW_ARB_window_pos) = !_glewInit_GL_ARB_window_pos(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ARB_window_pos */
+-#ifdef GL_ATIX_point_sprites
+-  CONST_CAST(GLEW_ATIX_point_sprites) = glewGetExtension("GL_ATIX_point_sprites");
+-#endif /* GL_ATIX_point_sprites */
+-#ifdef GL_ATIX_texture_env_combine3
+-  CONST_CAST(GLEW_ATIX_texture_env_combine3) = glewGetExtension("GL_ATIX_texture_env_combine3");
+-#endif /* GL_ATIX_texture_env_combine3 */
+-#ifdef GL_ATIX_texture_env_route
+-  CONST_CAST(GLEW_ATIX_texture_env_route) = glewGetExtension("GL_ATIX_texture_env_route");
+-#endif /* GL_ATIX_texture_env_route */
+-#ifdef GL_ATIX_vertex_shader_output_point_size
+-  CONST_CAST(GLEW_ATIX_vertex_shader_output_point_size) = glewGetExtension("GL_ATIX_vertex_shader_output_point_size");
+-#endif /* GL_ATIX_vertex_shader_output_point_size */
+-#ifdef GL_ATI_draw_buffers
+-  CONST_CAST(GLEW_ATI_draw_buffers) = glewGetExtension("GL_ATI_draw_buffers");
+-  if (glewExperimental || GLEW_ATI_draw_buffers) CONST_CAST(GLEW_ATI_draw_buffers) = !_glewInit_GL_ATI_draw_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_draw_buffers */
+-#ifdef GL_ATI_element_array
+-  CONST_CAST(GLEW_ATI_element_array) = glewGetExtension("GL_ATI_element_array");
+-  if (glewExperimental || GLEW_ATI_element_array) CONST_CAST(GLEW_ATI_element_array) = !_glewInit_GL_ATI_element_array(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_element_array */
+-#ifdef GL_ATI_envmap_bumpmap
+-  CONST_CAST(GLEW_ATI_envmap_bumpmap) = glewGetExtension("GL_ATI_envmap_bumpmap");
+-  if (glewExperimental || GLEW_ATI_envmap_bumpmap) CONST_CAST(GLEW_ATI_envmap_bumpmap) = !_glewInit_GL_ATI_envmap_bumpmap(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_envmap_bumpmap */
+-#ifdef GL_ATI_fragment_shader
+-  CONST_CAST(GLEW_ATI_fragment_shader) = glewGetExtension("GL_ATI_fragment_shader");
+-  if (glewExperimental || GLEW_ATI_fragment_shader) CONST_CAST(GLEW_ATI_fragment_shader) = !_glewInit_GL_ATI_fragment_shader(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_fragment_shader */
+-#ifdef GL_ATI_map_object_buffer
+-  CONST_CAST(GLEW_ATI_map_object_buffer) = glewGetExtension("GL_ATI_map_object_buffer");
+-  if (glewExperimental || GLEW_ATI_map_object_buffer) CONST_CAST(GLEW_ATI_map_object_buffer) = !_glewInit_GL_ATI_map_object_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_map_object_buffer */
+-#ifdef GL_ATI_pn_triangles
+-  CONST_CAST(GLEW_ATI_pn_triangles) = glewGetExtension("GL_ATI_pn_triangles");
+-  if (glewExperimental || GLEW_ATI_pn_triangles) CONST_CAST(GLEW_ATI_pn_triangles) = !_glewInit_GL_ATI_pn_triangles(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_pn_triangles */
+-#ifdef GL_ATI_separate_stencil
+-  CONST_CAST(GLEW_ATI_separate_stencil) = glewGetExtension("GL_ATI_separate_stencil");
+-  if (glewExperimental || GLEW_ATI_separate_stencil) CONST_CAST(GLEW_ATI_separate_stencil) = !_glewInit_GL_ATI_separate_stencil(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_separate_stencil */
+-#ifdef GL_ATI_shader_texture_lod
+-  CONST_CAST(GLEW_ATI_shader_texture_lod) = glewGetExtension("GL_ATI_shader_texture_lod");
+-#endif /* GL_ATI_shader_texture_lod */
+-#ifdef GL_ATI_text_fragment_shader
+-  CONST_CAST(GLEW_ATI_text_fragment_shader) = glewGetExtension("GL_ATI_text_fragment_shader");
+-#endif /* GL_ATI_text_fragment_shader */
+-#ifdef GL_ATI_texture_compression_3dc
+-  CONST_CAST(GLEW_ATI_texture_compression_3dc) = glewGetExtension("GL_ATI_texture_compression_3dc");
+-#endif /* GL_ATI_texture_compression_3dc */
+-#ifdef GL_ATI_texture_env_combine3
+-  CONST_CAST(GLEW_ATI_texture_env_combine3) = glewGetExtension("GL_ATI_texture_env_combine3");
+-#endif /* GL_ATI_texture_env_combine3 */
+-#ifdef GL_ATI_texture_float
+-  CONST_CAST(GLEW_ATI_texture_float) = glewGetExtension("GL_ATI_texture_float");
+-#endif /* GL_ATI_texture_float */
+-#ifdef GL_ATI_texture_mirror_once
+-  CONST_CAST(GLEW_ATI_texture_mirror_once) = glewGetExtension("GL_ATI_texture_mirror_once");
+-#endif /* GL_ATI_texture_mirror_once */
+-#ifdef GL_ATI_vertex_array_object
+-  CONST_CAST(GLEW_ATI_vertex_array_object) = glewGetExtension("GL_ATI_vertex_array_object");
+-  if (glewExperimental || GLEW_ATI_vertex_array_object) CONST_CAST(GLEW_ATI_vertex_array_object) = !_glewInit_GL_ATI_vertex_array_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_vertex_array_object */
+-#ifdef GL_ATI_vertex_attrib_array_object
+-  CONST_CAST(GLEW_ATI_vertex_attrib_array_object) = glewGetExtension("GL_ATI_vertex_attrib_array_object");
+-  if (glewExperimental || GLEW_ATI_vertex_attrib_array_object) CONST_CAST(GLEW_ATI_vertex_attrib_array_object) = !_glewInit_GL_ATI_vertex_attrib_array_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_vertex_attrib_array_object */
+-#ifdef GL_ATI_vertex_streams
+-  CONST_CAST(GLEW_ATI_vertex_streams) = glewGetExtension("GL_ATI_vertex_streams");
+-  if (glewExperimental || GLEW_ATI_vertex_streams) CONST_CAST(GLEW_ATI_vertex_streams) = !_glewInit_GL_ATI_vertex_streams(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_ATI_vertex_streams */
+-#ifdef GL_EXT_422_pixels
+-  CONST_CAST(GLEW_EXT_422_pixels) = glewGetExtension("GL_EXT_422_pixels");
+-#endif /* GL_EXT_422_pixels */
+-#ifdef GL_EXT_Cg_shader
+-  CONST_CAST(GLEW_EXT_Cg_shader) = glewGetExtension("GL_EXT_Cg_shader");
+-#endif /* GL_EXT_Cg_shader */
+-#ifdef GL_EXT_abgr
+-  CONST_CAST(GLEW_EXT_abgr) = glewGetExtension("GL_EXT_abgr");
+-#endif /* GL_EXT_abgr */
+-#ifdef GL_EXT_bgra
+-  CONST_CAST(GLEW_EXT_bgra) = glewGetExtension("GL_EXT_bgra");
+-#endif /* GL_EXT_bgra */
+-#ifdef GL_EXT_bindable_uniform
+-  CONST_CAST(GLEW_EXT_bindable_uniform) = glewGetExtension("GL_EXT_bindable_uniform");
+-  if (glewExperimental || GLEW_EXT_bindable_uniform) CONST_CAST(GLEW_EXT_bindable_uniform) = !_glewInit_GL_EXT_bindable_uniform(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_bindable_uniform */
+-#ifdef GL_EXT_blend_color
+-  CONST_CAST(GLEW_EXT_blend_color) = glewGetExtension("GL_EXT_blend_color");
+-  if (glewExperimental || GLEW_EXT_blend_color) CONST_CAST(GLEW_EXT_blend_color) = !_glewInit_GL_EXT_blend_color(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_blend_color */
+-#ifdef GL_EXT_blend_equation_separate
+-  CONST_CAST(GLEW_EXT_blend_equation_separate) = glewGetExtension("GL_EXT_blend_equation_separate");
+-  if (glewExperimental || GLEW_EXT_blend_equation_separate) CONST_CAST(GLEW_EXT_blend_equation_separate) = !_glewInit_GL_EXT_blend_equation_separate(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_blend_equation_separate */
+-#ifdef GL_EXT_blend_func_separate
+-  CONST_CAST(GLEW_EXT_blend_func_separate) = glewGetExtension("GL_EXT_blend_func_separate");
+-  if (glewExperimental || GLEW_EXT_blend_func_separate) CONST_CAST(GLEW_EXT_blend_func_separate) = !_glewInit_GL_EXT_blend_func_separate(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_blend_func_separate */
+-#ifdef GL_EXT_blend_logic_op
+-  CONST_CAST(GLEW_EXT_blend_logic_op) = glewGetExtension("GL_EXT_blend_logic_op");
+-#endif /* GL_EXT_blend_logic_op */
+-#ifdef GL_EXT_blend_minmax
+-  CONST_CAST(GLEW_EXT_blend_minmax) = glewGetExtension("GL_EXT_blend_minmax");
+-  if (glewExperimental || GLEW_EXT_blend_minmax) CONST_CAST(GLEW_EXT_blend_minmax) = !_glewInit_GL_EXT_blend_minmax(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_blend_minmax */
+-#ifdef GL_EXT_blend_subtract
+-  CONST_CAST(GLEW_EXT_blend_subtract) = glewGetExtension("GL_EXT_blend_subtract");
+-#endif /* GL_EXT_blend_subtract */
+-#ifdef GL_EXT_clip_volume_hint
+-  CONST_CAST(GLEW_EXT_clip_volume_hint) = glewGetExtension("GL_EXT_clip_volume_hint");
+-#endif /* GL_EXT_clip_volume_hint */
+-#ifdef GL_EXT_cmyka
+-  CONST_CAST(GLEW_EXT_cmyka) = glewGetExtension("GL_EXT_cmyka");
+-#endif /* GL_EXT_cmyka */
+-#ifdef GL_EXT_color_subtable
+-  CONST_CAST(GLEW_EXT_color_subtable) = glewGetExtension("GL_EXT_color_subtable");
+-  if (glewExperimental || GLEW_EXT_color_subtable) CONST_CAST(GLEW_EXT_color_subtable) = !_glewInit_GL_EXT_color_subtable(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_color_subtable */
+-#ifdef GL_EXT_compiled_vertex_array
+-  CONST_CAST(GLEW_EXT_compiled_vertex_array) = glewGetExtension("GL_EXT_compiled_vertex_array");
+-  if (glewExperimental || GLEW_EXT_compiled_vertex_array) CONST_CAST(GLEW_EXT_compiled_vertex_array) = !_glewInit_GL_EXT_compiled_vertex_array(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_compiled_vertex_array */
+-#ifdef GL_EXT_convolution
+-  CONST_CAST(GLEW_EXT_convolution) = glewGetExtension("GL_EXT_convolution");
+-  if (glewExperimental || GLEW_EXT_convolution) CONST_CAST(GLEW_EXT_convolution) = !_glewInit_GL_EXT_convolution(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_convolution */
+-#ifdef GL_EXT_coordinate_frame
+-  CONST_CAST(GLEW_EXT_coordinate_frame) = glewGetExtension("GL_EXT_coordinate_frame");
+-  if (glewExperimental || GLEW_EXT_coordinate_frame) CONST_CAST(GLEW_EXT_coordinate_frame) = !_glewInit_GL_EXT_coordinate_frame(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_coordinate_frame */
+-#ifdef GL_EXT_copy_texture
+-  CONST_CAST(GLEW_EXT_copy_texture) = glewGetExtension("GL_EXT_copy_texture");
+-  if (glewExperimental || GLEW_EXT_copy_texture) CONST_CAST(GLEW_EXT_copy_texture) = !_glewInit_GL_EXT_copy_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_copy_texture */
+-#ifdef GL_EXT_cull_vertex
+-  CONST_CAST(GLEW_EXT_cull_vertex) = glewGetExtension("GL_EXT_cull_vertex");
+-  if (glewExperimental || GLEW_EXT_cull_vertex) CONST_CAST(GLEW_EXT_cull_vertex) = !_glewInit_GL_EXT_cull_vertex(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_cull_vertex */
+-#ifdef GL_EXT_depth_bounds_test
+-  CONST_CAST(GLEW_EXT_depth_bounds_test) = glewGetExtension("GL_EXT_depth_bounds_test");
+-  if (glewExperimental || GLEW_EXT_depth_bounds_test) CONST_CAST(GLEW_EXT_depth_bounds_test) = !_glewInit_GL_EXT_depth_bounds_test(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_depth_bounds_test */
+-#ifdef GL_EXT_draw_buffers2
+-  CONST_CAST(GLEW_EXT_draw_buffers2) = glewGetExtension("GL_EXT_draw_buffers2");
+-  if (glewExperimental || GLEW_EXT_draw_buffers2) CONST_CAST(GLEW_EXT_draw_buffers2) = !_glewInit_GL_EXT_draw_buffers2(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_draw_buffers2 */
+-#ifdef GL_EXT_draw_instanced
+-  CONST_CAST(GLEW_EXT_draw_instanced) = glewGetExtension("GL_EXT_draw_instanced");
+-  if (glewExperimental || GLEW_EXT_draw_instanced) CONST_CAST(GLEW_EXT_draw_instanced) = !_glewInit_GL_EXT_draw_instanced(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_draw_instanced */
+-#ifdef GL_EXT_draw_range_elements
+-  CONST_CAST(GLEW_EXT_draw_range_elements) = glewGetExtension("GL_EXT_draw_range_elements");
+-  if (glewExperimental || GLEW_EXT_draw_range_elements) CONST_CAST(GLEW_EXT_draw_range_elements) = !_glewInit_GL_EXT_draw_range_elements(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_draw_range_elements */
+-#ifdef GL_EXT_fog_coord
+-  CONST_CAST(GLEW_EXT_fog_coord) = glewGetExtension("GL_EXT_fog_coord");
+-  if (glewExperimental || GLEW_EXT_fog_coord) CONST_CAST(GLEW_EXT_fog_coord) = !_glewInit_GL_EXT_fog_coord(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_fog_coord */
+-#ifdef GL_EXT_fragment_lighting
+-  CONST_CAST(GLEW_EXT_fragment_lighting) = glewGetExtension("GL_EXT_fragment_lighting");
+-  if (glewExperimental || GLEW_EXT_fragment_lighting) CONST_CAST(GLEW_EXT_fragment_lighting) = !_glewInit_GL_EXT_fragment_lighting(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_fragment_lighting */
+-#ifdef GL_EXT_framebuffer_blit
+-  CONST_CAST(GLEW_EXT_framebuffer_blit) = glewGetExtension("GL_EXT_framebuffer_blit");
+-  if (glewExperimental || GLEW_EXT_framebuffer_blit) CONST_CAST(GLEW_EXT_framebuffer_blit) = !_glewInit_GL_EXT_framebuffer_blit(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_framebuffer_blit */
+-#ifdef GL_EXT_framebuffer_multisample
+-  CONST_CAST(GLEW_EXT_framebuffer_multisample) = glewGetExtension("GL_EXT_framebuffer_multisample");
+-  if (glewExperimental || GLEW_EXT_framebuffer_multisample) CONST_CAST(GLEW_EXT_framebuffer_multisample) = !_glewInit_GL_EXT_framebuffer_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_framebuffer_multisample */
+-#ifdef GL_EXT_framebuffer_object
+-  CONST_CAST(GLEW_EXT_framebuffer_object) = glewGetExtension("GL_EXT_framebuffer_object");
+-  if (glewExperimental || GLEW_EXT_framebuffer_object) CONST_CAST(GLEW_EXT_framebuffer_object) = !_glewInit_GL_EXT_framebuffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_framebuffer_object */
+-#ifdef GL_EXT_framebuffer_sRGB
+-  CONST_CAST(GLEW_EXT_framebuffer_sRGB) = glewGetExtension("GL_EXT_framebuffer_sRGB");
+-#endif /* GL_EXT_framebuffer_sRGB */
+-#ifdef GL_EXT_geometry_shader4
+-  CONST_CAST(GLEW_EXT_geometry_shader4) = glewGetExtension("GL_EXT_geometry_shader4");
+-  if (glewExperimental || GLEW_EXT_geometry_shader4) CONST_CAST(GLEW_EXT_geometry_shader4) = !_glewInit_GL_EXT_geometry_shader4(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_geometry_shader4 */
+-#ifdef GL_EXT_gpu_program_parameters
+-  CONST_CAST(GLEW_EXT_gpu_program_parameters) = glewGetExtension("GL_EXT_gpu_program_parameters");
+-  if (glewExperimental || GLEW_EXT_gpu_program_parameters) CONST_CAST(GLEW_EXT_gpu_program_parameters) = !_glewInit_GL_EXT_gpu_program_parameters(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_gpu_program_parameters */
+-#ifdef GL_EXT_gpu_shader4
+-  CONST_CAST(GLEW_EXT_gpu_shader4) = glewGetExtension("GL_EXT_gpu_shader4");
+-  if (glewExperimental || GLEW_EXT_gpu_shader4) CONST_CAST(GLEW_EXT_gpu_shader4) = !_glewInit_GL_EXT_gpu_shader4(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_gpu_shader4 */
+-#ifdef GL_EXT_histogram
+-  CONST_CAST(GLEW_EXT_histogram) = glewGetExtension("GL_EXT_histogram");
+-  if (glewExperimental || GLEW_EXT_histogram) CONST_CAST(GLEW_EXT_histogram) = !_glewInit_GL_EXT_histogram(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_histogram */
+-#ifdef GL_EXT_index_array_formats
+-  CONST_CAST(GLEW_EXT_index_array_formats) = glewGetExtension("GL_EXT_index_array_formats");
+-#endif /* GL_EXT_index_array_formats */
+-#ifdef GL_EXT_index_func
+-  CONST_CAST(GLEW_EXT_index_func) = glewGetExtension("GL_EXT_index_func");
+-  if (glewExperimental || GLEW_EXT_index_func) CONST_CAST(GLEW_EXT_index_func) = !_glewInit_GL_EXT_index_func(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_index_func */
+-#ifdef GL_EXT_index_material
+-  CONST_CAST(GLEW_EXT_index_material) = glewGetExtension("GL_EXT_index_material");
+-  if (glewExperimental || GLEW_EXT_index_material) CONST_CAST(GLEW_EXT_index_material) = !_glewInit_GL_EXT_index_material(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_index_material */
+-#ifdef GL_EXT_index_texture
+-  CONST_CAST(GLEW_EXT_index_texture) = glewGetExtension("GL_EXT_index_texture");
+-#endif /* GL_EXT_index_texture */
+-#ifdef GL_EXT_light_texture
+-  CONST_CAST(GLEW_EXT_light_texture) = glewGetExtension("GL_EXT_light_texture");
+-  if (glewExperimental || GLEW_EXT_light_texture) CONST_CAST(GLEW_EXT_light_texture) = !_glewInit_GL_EXT_light_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_light_texture */
+-#ifdef GL_EXT_misc_attribute
+-  CONST_CAST(GLEW_EXT_misc_attribute) = glewGetExtension("GL_EXT_misc_attribute");
+-#endif /* GL_EXT_misc_attribute */
+-#ifdef GL_EXT_multi_draw_arrays
+-  CONST_CAST(GLEW_EXT_multi_draw_arrays) = glewGetExtension("GL_EXT_multi_draw_arrays");
+-  if (glewExperimental || GLEW_EXT_multi_draw_arrays) CONST_CAST(GLEW_EXT_multi_draw_arrays) = !_glewInit_GL_EXT_multi_draw_arrays(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_multi_draw_arrays */
+-#ifdef GL_EXT_multisample
+-  CONST_CAST(GLEW_EXT_multisample) = glewGetExtension("GL_EXT_multisample");
+-  if (glewExperimental || GLEW_EXT_multisample) CONST_CAST(GLEW_EXT_multisample) = !_glewInit_GL_EXT_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_multisample */
+-#ifdef GL_EXT_packed_depth_stencil
+-  CONST_CAST(GLEW_EXT_packed_depth_stencil) = glewGetExtension("GL_EXT_packed_depth_stencil");
+-#endif /* GL_EXT_packed_depth_stencil */
+-#ifdef GL_EXT_packed_float
+-  CONST_CAST(GLEW_EXT_packed_float) = glewGetExtension("GL_EXT_packed_float");
+-#endif /* GL_EXT_packed_float */
+-#ifdef GL_EXT_packed_pixels
+-  CONST_CAST(GLEW_EXT_packed_pixels) = glewGetExtension("GL_EXT_packed_pixels");
+-#endif /* GL_EXT_packed_pixels */
+-#ifdef GL_EXT_paletted_texture
+-  CONST_CAST(GLEW_EXT_paletted_texture) = glewGetExtension("GL_EXT_paletted_texture");
+-  if (glewExperimental || GLEW_EXT_paletted_texture) CONST_CAST(GLEW_EXT_paletted_texture) = !_glewInit_GL_EXT_paletted_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_paletted_texture */
+-#ifdef GL_EXT_pixel_buffer_object
+-  CONST_CAST(GLEW_EXT_pixel_buffer_object) = glewGetExtension("GL_EXT_pixel_buffer_object");
+-#endif /* GL_EXT_pixel_buffer_object */
+-#ifdef GL_EXT_pixel_transform
+-  CONST_CAST(GLEW_EXT_pixel_transform) = glewGetExtension("GL_EXT_pixel_transform");
+-  if (glewExperimental || GLEW_EXT_pixel_transform) CONST_CAST(GLEW_EXT_pixel_transform) = !_glewInit_GL_EXT_pixel_transform(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_pixel_transform */
+-#ifdef GL_EXT_pixel_transform_color_table
+-  CONST_CAST(GLEW_EXT_pixel_transform_color_table) = glewGetExtension("GL_EXT_pixel_transform_color_table");
+-#endif /* GL_EXT_pixel_transform_color_table */
+-#ifdef GL_EXT_point_parameters
+-  CONST_CAST(GLEW_EXT_point_parameters) = glewGetExtension("GL_EXT_point_parameters");
+-  if (glewExperimental || GLEW_EXT_point_parameters) CONST_CAST(GLEW_EXT_point_parameters) = !_glewInit_GL_EXT_point_parameters(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_point_parameters */
+-#ifdef GL_EXT_polygon_offset
+-  CONST_CAST(GLEW_EXT_polygon_offset) = glewGetExtension("GL_EXT_polygon_offset");
+-  if (glewExperimental || GLEW_EXT_polygon_offset) CONST_CAST(GLEW_EXT_polygon_offset) = !_glewInit_GL_EXT_polygon_offset(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_polygon_offset */
+-#ifdef GL_EXT_rescale_normal
+-  CONST_CAST(GLEW_EXT_rescale_normal) = glewGetExtension("GL_EXT_rescale_normal");
+-#endif /* GL_EXT_rescale_normal */
+-#ifdef GL_EXT_scene_marker
+-  CONST_CAST(GLEW_EXT_scene_marker) = glewGetExtension("GL_EXT_scene_marker");
+-  if (glewExperimental || GLEW_EXT_scene_marker) CONST_CAST(GLEW_EXT_scene_marker) = !_glewInit_GL_EXT_scene_marker(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_scene_marker */
+-#ifdef GL_EXT_secondary_color
+-  CONST_CAST(GLEW_EXT_secondary_color) = glewGetExtension("GL_EXT_secondary_color");
+-  if (glewExperimental || GLEW_EXT_secondary_color) CONST_CAST(GLEW_EXT_secondary_color) = !_glewInit_GL_EXT_secondary_color(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_secondary_color */
+-#ifdef GL_EXT_separate_specular_color
+-  CONST_CAST(GLEW_EXT_separate_specular_color) = glewGetExtension("GL_EXT_separate_specular_color");
+-#endif /* GL_EXT_separate_specular_color */
+-#ifdef GL_EXT_shadow_funcs
+-  CONST_CAST(GLEW_EXT_shadow_funcs) = glewGetExtension("GL_EXT_shadow_funcs");
+-#endif /* GL_EXT_shadow_funcs */
+-#ifdef GL_EXT_shared_texture_palette
+-  CONST_CAST(GLEW_EXT_shared_texture_palette) = glewGetExtension("GL_EXT_shared_texture_palette");
+-#endif /* GL_EXT_shared_texture_palette */
+-#ifdef GL_EXT_stencil_clear_tag
+-  CONST_CAST(GLEW_EXT_stencil_clear_tag) = glewGetExtension("GL_EXT_stencil_clear_tag");
+-#endif /* GL_EXT_stencil_clear_tag */
+-#ifdef GL_EXT_stencil_two_side
+-  CONST_CAST(GLEW_EXT_stencil_two_side) = glewGetExtension("GL_EXT_stencil_two_side");
+-  if (glewExperimental || GLEW_EXT_stencil_two_side) CONST_CAST(GLEW_EXT_stencil_two_side) = !_glewInit_GL_EXT_stencil_two_side(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_stencil_two_side */
+-#ifdef GL_EXT_stencil_wrap
+-  CONST_CAST(GLEW_EXT_stencil_wrap) = glewGetExtension("GL_EXT_stencil_wrap");
+-#endif /* GL_EXT_stencil_wrap */
+-#ifdef GL_EXT_subtexture
+-  CONST_CAST(GLEW_EXT_subtexture) = glewGetExtension("GL_EXT_subtexture");
+-  if (glewExperimental || GLEW_EXT_subtexture) CONST_CAST(GLEW_EXT_subtexture) = !_glewInit_GL_EXT_subtexture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_subtexture */
+-#ifdef GL_EXT_texture
+-  CONST_CAST(GLEW_EXT_texture) = glewGetExtension("GL_EXT_texture");
+-#endif /* GL_EXT_texture */
+-#ifdef GL_EXT_texture3D
+-  CONST_CAST(GLEW_EXT_texture3D) = glewGetExtension("GL_EXT_texture3D");
+-  if (glewExperimental || GLEW_EXT_texture3D) CONST_CAST(GLEW_EXT_texture3D) = !_glewInit_GL_EXT_texture3D(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_texture3D */
+-#ifdef GL_EXT_texture_array
+-  CONST_CAST(GLEW_EXT_texture_array) = glewGetExtension("GL_EXT_texture_array");
+-#endif /* GL_EXT_texture_array */
+-#ifdef GL_EXT_texture_buffer_object
+-  CONST_CAST(GLEW_EXT_texture_buffer_object) = glewGetExtension("GL_EXT_texture_buffer_object");
+-  if (glewExperimental || GLEW_EXT_texture_buffer_object) CONST_CAST(GLEW_EXT_texture_buffer_object) = !_glewInit_GL_EXT_texture_buffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_texture_buffer_object */
+-#ifdef GL_EXT_texture_compression_dxt1
+-  CONST_CAST(GLEW_EXT_texture_compression_dxt1) = glewGetExtension("GL_EXT_texture_compression_dxt1");
+-#endif /* GL_EXT_texture_compression_dxt1 */
+-#ifdef GL_EXT_texture_compression_latc
+-  CONST_CAST(GLEW_EXT_texture_compression_latc) = glewGetExtension("GL_EXT_texture_compression_latc");
+-#endif /* GL_EXT_texture_compression_latc */
+-#ifdef GL_EXT_texture_compression_rgtc
+-  CONST_CAST(GLEW_EXT_texture_compression_rgtc) = glewGetExtension("GL_EXT_texture_compression_rgtc");
+-#endif /* GL_EXT_texture_compression_rgtc */
+-#ifdef GL_EXT_texture_compression_s3tc
+-  CONST_CAST(GLEW_EXT_texture_compression_s3tc) = glewGetExtension("GL_EXT_texture_compression_s3tc");
+-#endif /* GL_EXT_texture_compression_s3tc */
+-#ifdef GL_EXT_texture_cube_map
+-  CONST_CAST(GLEW_EXT_texture_cube_map) = glewGetExtension("GL_EXT_texture_cube_map");
+-#endif /* GL_EXT_texture_cube_map */
+-#ifdef GL_EXT_texture_edge_clamp
+-  CONST_CAST(GLEW_EXT_texture_edge_clamp) = glewGetExtension("GL_EXT_texture_edge_clamp");
+-#endif /* GL_EXT_texture_edge_clamp */
+-#ifdef GL_EXT_texture_env
+-  CONST_CAST(GLEW_EXT_texture_env) = glewGetExtension("GL_EXT_texture_env");
+-#endif /* GL_EXT_texture_env */
+-#ifdef GL_EXT_texture_env_add
+-  CONST_CAST(GLEW_EXT_texture_env_add) = glewGetExtension("GL_EXT_texture_env_add");
+-#endif /* GL_EXT_texture_env_add */
+-#ifdef GL_EXT_texture_env_combine
+-  CONST_CAST(GLEW_EXT_texture_env_combine) = glewGetExtension("GL_EXT_texture_env_combine");
+-#endif /* GL_EXT_texture_env_combine */
+-#ifdef GL_EXT_texture_env_dot3
+-  CONST_CAST(GLEW_EXT_texture_env_dot3) = glewGetExtension("GL_EXT_texture_env_dot3");
+-#endif /* GL_EXT_texture_env_dot3 */
+-#ifdef GL_EXT_texture_filter_anisotropic
+-  CONST_CAST(GLEW_EXT_texture_filter_anisotropic) = glewGetExtension("GL_EXT_texture_filter_anisotropic");
+-#endif /* GL_EXT_texture_filter_anisotropic */
+-#ifdef GL_EXT_texture_integer
+-  CONST_CAST(GLEW_EXT_texture_integer) = glewGetExtension("GL_EXT_texture_integer");
+-  if (glewExperimental || GLEW_EXT_texture_integer) CONST_CAST(GLEW_EXT_texture_integer) = !_glewInit_GL_EXT_texture_integer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_texture_integer */
+-#ifdef GL_EXT_texture_lod_bias
+-  CONST_CAST(GLEW_EXT_texture_lod_bias) = glewGetExtension("GL_EXT_texture_lod_bias");
+-#endif /* GL_EXT_texture_lod_bias */
+-#ifdef GL_EXT_texture_mirror_clamp
+-  CONST_CAST(GLEW_EXT_texture_mirror_clamp) = glewGetExtension("GL_EXT_texture_mirror_clamp");
+-#endif /* GL_EXT_texture_mirror_clamp */
+-#ifdef GL_EXT_texture_object
+-  CONST_CAST(GLEW_EXT_texture_object) = glewGetExtension("GL_EXT_texture_object");
+-  if (glewExperimental || GLEW_EXT_texture_object) CONST_CAST(GLEW_EXT_texture_object) = !_glewInit_GL_EXT_texture_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_texture_object */
+-#ifdef GL_EXT_texture_perturb_normal
+-  CONST_CAST(GLEW_EXT_texture_perturb_normal) = glewGetExtension("GL_EXT_texture_perturb_normal");
+-  if (glewExperimental || GLEW_EXT_texture_perturb_normal) CONST_CAST(GLEW_EXT_texture_perturb_normal) = !_glewInit_GL_EXT_texture_perturb_normal(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_texture_perturb_normal */
+-#ifdef GL_EXT_texture_rectangle
+-  CONST_CAST(GLEW_EXT_texture_rectangle) = glewGetExtension("GL_EXT_texture_rectangle");
+-#endif /* GL_EXT_texture_rectangle */
+-#ifdef GL_EXT_texture_sRGB
+-  CONST_CAST(GLEW_EXT_texture_sRGB) = glewGetExtension("GL_EXT_texture_sRGB");
+-#endif /* GL_EXT_texture_sRGB */
+-#ifdef GL_EXT_texture_shared_exponent
+-  CONST_CAST(GLEW_EXT_texture_shared_exponent) = glewGetExtension("GL_EXT_texture_shared_exponent");
+-#endif /* GL_EXT_texture_shared_exponent */
+-#ifdef GL_EXT_timer_query
+-  CONST_CAST(GLEW_EXT_timer_query) = glewGetExtension("GL_EXT_timer_query");
+-  if (glewExperimental || GLEW_EXT_timer_query) CONST_CAST(GLEW_EXT_timer_query) = !_glewInit_GL_EXT_timer_query(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_timer_query */
+-#ifdef GL_EXT_vertex_array
+-  CONST_CAST(GLEW_EXT_vertex_array) = glewGetExtension("GL_EXT_vertex_array");
+-  if (glewExperimental || GLEW_EXT_vertex_array) CONST_CAST(GLEW_EXT_vertex_array) = !_glewInit_GL_EXT_vertex_array(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_vertex_array */
+-#ifdef GL_EXT_vertex_shader
+-  CONST_CAST(GLEW_EXT_vertex_shader) = glewGetExtension("GL_EXT_vertex_shader");
+-  if (glewExperimental || GLEW_EXT_vertex_shader) CONST_CAST(GLEW_EXT_vertex_shader) = !_glewInit_GL_EXT_vertex_shader(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_vertex_shader */
+-#ifdef GL_EXT_vertex_weighting
+-  CONST_CAST(GLEW_EXT_vertex_weighting) = glewGetExtension("GL_EXT_vertex_weighting");
+-  if (glewExperimental || GLEW_EXT_vertex_weighting) CONST_CAST(GLEW_EXT_vertex_weighting) = !_glewInit_GL_EXT_vertex_weighting(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_EXT_vertex_weighting */
+-#ifdef GL_GREMEDY_frame_terminator
+-  CONST_CAST(GLEW_GREMEDY_frame_terminator) = glewGetExtension("GL_GREMEDY_frame_terminator");
+-  if (glewExperimental || GLEW_GREMEDY_frame_terminator) CONST_CAST(GLEW_GREMEDY_frame_terminator) = !_glewInit_GL_GREMEDY_frame_terminator(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_GREMEDY_frame_terminator */
+-#ifdef GL_GREMEDY_string_marker
+-  CONST_CAST(GLEW_GREMEDY_string_marker) = glewGetExtension("GL_GREMEDY_string_marker");
+-  if (glewExperimental || GLEW_GREMEDY_string_marker) CONST_CAST(GLEW_GREMEDY_string_marker) = !_glewInit_GL_GREMEDY_string_marker(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_GREMEDY_string_marker */
+-#ifdef GL_HP_convolution_border_modes
+-  CONST_CAST(GLEW_HP_convolution_border_modes) = glewGetExtension("GL_HP_convolution_border_modes");
+-#endif /* GL_HP_convolution_border_modes */
+-#ifdef GL_HP_image_transform
+-  CONST_CAST(GLEW_HP_image_transform) = glewGetExtension("GL_HP_image_transform");
+-  if (glewExperimental || GLEW_HP_image_transform) CONST_CAST(GLEW_HP_image_transform) = !_glewInit_GL_HP_image_transform(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_HP_image_transform */
+-#ifdef GL_HP_occlusion_test
+-  CONST_CAST(GLEW_HP_occlusion_test) = glewGetExtension("GL_HP_occlusion_test");
+-#endif /* GL_HP_occlusion_test */
+-#ifdef GL_HP_texture_lighting
+-  CONST_CAST(GLEW_HP_texture_lighting) = glewGetExtension("GL_HP_texture_lighting");
+-#endif /* GL_HP_texture_lighting */
+-#ifdef GL_IBM_cull_vertex
+-  CONST_CAST(GLEW_IBM_cull_vertex) = glewGetExtension("GL_IBM_cull_vertex");
+-#endif /* GL_IBM_cull_vertex */
+-#ifdef GL_IBM_multimode_draw_arrays
+-  CONST_CAST(GLEW_IBM_multimode_draw_arrays) = glewGetExtension("GL_IBM_multimode_draw_arrays");
+-  if (glewExperimental || GLEW_IBM_multimode_draw_arrays) CONST_CAST(GLEW_IBM_multimode_draw_arrays) = !_glewInit_GL_IBM_multimode_draw_arrays(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_IBM_multimode_draw_arrays */
+-#ifdef GL_IBM_rasterpos_clip
+-  CONST_CAST(GLEW_IBM_rasterpos_clip) = glewGetExtension("GL_IBM_rasterpos_clip");
+-#endif /* GL_IBM_rasterpos_clip */
+-#ifdef GL_IBM_static_data
+-  CONST_CAST(GLEW_IBM_static_data) = glewGetExtension("GL_IBM_static_data");
+-#endif /* GL_IBM_static_data */
+-#ifdef GL_IBM_texture_mirrored_repeat
+-  CONST_CAST(GLEW_IBM_texture_mirrored_repeat) = glewGetExtension("GL_IBM_texture_mirrored_repeat");
+-#endif /* GL_IBM_texture_mirrored_repeat */
+-#ifdef GL_IBM_vertex_array_lists
+-  CONST_CAST(GLEW_IBM_vertex_array_lists) = glewGetExtension("GL_IBM_vertex_array_lists");
+-  if (glewExperimental || GLEW_IBM_vertex_array_lists) CONST_CAST(GLEW_IBM_vertex_array_lists) = !_glewInit_GL_IBM_vertex_array_lists(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_IBM_vertex_array_lists */
+-#ifdef GL_INGR_color_clamp
+-  CONST_CAST(GLEW_INGR_color_clamp) = glewGetExtension("GL_INGR_color_clamp");
+-#endif /* GL_INGR_color_clamp */
+-#ifdef GL_INGR_interlace_read
+-  CONST_CAST(GLEW_INGR_interlace_read) = glewGetExtension("GL_INGR_interlace_read");
+-#endif /* GL_INGR_interlace_read */
+-#ifdef GL_INTEL_parallel_arrays
+-  CONST_CAST(GLEW_INTEL_parallel_arrays) = glewGetExtension("GL_INTEL_parallel_arrays");
+-  if (glewExperimental || GLEW_INTEL_parallel_arrays) CONST_CAST(GLEW_INTEL_parallel_arrays) = !_glewInit_GL_INTEL_parallel_arrays(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_INTEL_parallel_arrays */
+-#ifdef GL_INTEL_texture_scissor
+-  CONST_CAST(GLEW_INTEL_texture_scissor) = glewGetExtension("GL_INTEL_texture_scissor");
+-  if (glewExperimental || GLEW_INTEL_texture_scissor) CONST_CAST(GLEW_INTEL_texture_scissor) = !_glewInit_GL_INTEL_texture_scissor(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_INTEL_texture_scissor */
+-#ifdef GL_KTX_buffer_region
+-  CONST_CAST(GLEW_KTX_buffer_region) = glewGetExtension("GL_KTX_buffer_region");
+-  if (glewExperimental || GLEW_KTX_buffer_region) CONST_CAST(GLEW_KTX_buffer_region) = !_glewInit_GL_KTX_buffer_region(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_KTX_buffer_region */
+-#ifdef GL_MESAX_texture_stack
+-  CONST_CAST(GLEW_MESAX_texture_stack) = glewGetExtension("GL_MESAX_texture_stack");
+-#endif /* GL_MESAX_texture_stack */
+-#ifdef GL_MESA_pack_invert
+-  CONST_CAST(GLEW_MESA_pack_invert) = glewGetExtension("GL_MESA_pack_invert");
+-#endif /* GL_MESA_pack_invert */
+-#ifdef GL_MESA_resize_buffers
+-  CONST_CAST(GLEW_MESA_resize_buffers) = glewGetExtension("GL_MESA_resize_buffers");
+-  if (glewExperimental || GLEW_MESA_resize_buffers) CONST_CAST(GLEW_MESA_resize_buffers) = !_glewInit_GL_MESA_resize_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_MESA_resize_buffers */
+-#ifdef GL_MESA_window_pos
+-  CONST_CAST(GLEW_MESA_window_pos) = glewGetExtension("GL_MESA_window_pos");
+-  if (glewExperimental || GLEW_MESA_window_pos) CONST_CAST(GLEW_MESA_window_pos) = !_glewInit_GL_MESA_window_pos(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_MESA_window_pos */
+-#ifdef GL_MESA_ycbcr_texture
+-  CONST_CAST(GLEW_MESA_ycbcr_texture) = glewGetExtension("GL_MESA_ycbcr_texture");
+-#endif /* GL_MESA_ycbcr_texture */
+-#ifdef GL_NV_blend_square
+-  CONST_CAST(GLEW_NV_blend_square) = glewGetExtension("GL_NV_blend_square");
+-#endif /* GL_NV_blend_square */
+-#ifdef GL_NV_copy_depth_to_color
+-  CONST_CAST(GLEW_NV_copy_depth_to_color) = glewGetExtension("GL_NV_copy_depth_to_color");
+-#endif /* GL_NV_copy_depth_to_color */
+-#ifdef GL_NV_depth_buffer_float
+-  CONST_CAST(GLEW_NV_depth_buffer_float) = glewGetExtension("GL_NV_depth_buffer_float");
+-  if (glewExperimental || GLEW_NV_depth_buffer_float) CONST_CAST(GLEW_NV_depth_buffer_float) = !_glewInit_GL_NV_depth_buffer_float(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_depth_buffer_float */
+-#ifdef GL_NV_depth_clamp
+-  CONST_CAST(GLEW_NV_depth_clamp) = glewGetExtension("GL_NV_depth_clamp");
+-#endif /* GL_NV_depth_clamp */
+-#ifdef GL_NV_depth_range_unclamped
+-  CONST_CAST(GLEW_NV_depth_range_unclamped) = glewGetExtension("GL_NV_depth_range_unclamped");
+-#endif /* GL_NV_depth_range_unclamped */
+-#ifdef GL_NV_evaluators
+-  CONST_CAST(GLEW_NV_evaluators) = glewGetExtension("GL_NV_evaluators");
+-  if (glewExperimental || GLEW_NV_evaluators) CONST_CAST(GLEW_NV_evaluators) = !_glewInit_GL_NV_evaluators(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_evaluators */
+-#ifdef GL_NV_fence
+-  CONST_CAST(GLEW_NV_fence) = glewGetExtension("GL_NV_fence");
+-  if (glewExperimental || GLEW_NV_fence) CONST_CAST(GLEW_NV_fence) = !_glewInit_GL_NV_fence(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_fence */
+-#ifdef GL_NV_float_buffer
+-  CONST_CAST(GLEW_NV_float_buffer) = glewGetExtension("GL_NV_float_buffer");
+-#endif /* GL_NV_float_buffer */
+-#ifdef GL_NV_fog_distance
+-  CONST_CAST(GLEW_NV_fog_distance) = glewGetExtension("GL_NV_fog_distance");
+-#endif /* GL_NV_fog_distance */
+-#ifdef GL_NV_fragment_program
+-  CONST_CAST(GLEW_NV_fragment_program) = glewGetExtension("GL_NV_fragment_program");
+-  if (glewExperimental || GLEW_NV_fragment_program) CONST_CAST(GLEW_NV_fragment_program) = !_glewInit_GL_NV_fragment_program(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_fragment_program */
+-#ifdef GL_NV_fragment_program2
+-  CONST_CAST(GLEW_NV_fragment_program2) = glewGetExtension("GL_NV_fragment_program2");
+-#endif /* GL_NV_fragment_program2 */
+-#ifdef GL_NV_fragment_program4
+-  CONST_CAST(GLEW_NV_fragment_program4) = glewGetExtension("GL_NV_gpu_program4");
+-#endif /* GL_NV_fragment_program4 */
+-#ifdef GL_NV_fragment_program_option
+-  CONST_CAST(GLEW_NV_fragment_program_option) = glewGetExtension("GL_NV_fragment_program_option");
+-#endif /* GL_NV_fragment_program_option */
+-#ifdef GL_NV_framebuffer_multisample_coverage
+-  CONST_CAST(GLEW_NV_framebuffer_multisample_coverage) = glewGetExtension("GL_NV_framebuffer_multisample_coverage");
+-  if (glewExperimental || GLEW_NV_framebuffer_multisample_coverage) CONST_CAST(GLEW_NV_framebuffer_multisample_coverage) = !_glewInit_GL_NV_framebuffer_multisample_coverage(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_framebuffer_multisample_coverage */
+-#ifdef GL_NV_geometry_program4
+-  CONST_CAST(GLEW_NV_geometry_program4) = glewGetExtension("GL_NV_gpu_program4");
+-  if (glewExperimental || GLEW_NV_geometry_program4) CONST_CAST(GLEW_NV_geometry_program4) = !_glewInit_GL_NV_geometry_program4(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_geometry_program4 */
+-#ifdef GL_NV_geometry_shader4
+-  CONST_CAST(GLEW_NV_geometry_shader4) = glewGetExtension("GL_NV_geometry_shader4");
+-#endif /* GL_NV_geometry_shader4 */
+-#ifdef GL_NV_gpu_program4
+-  CONST_CAST(GLEW_NV_gpu_program4) = glewGetExtension("GL_NV_gpu_program4");
+-  if (glewExperimental || GLEW_NV_gpu_program4) CONST_CAST(GLEW_NV_gpu_program4) = !_glewInit_GL_NV_gpu_program4(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_gpu_program4 */
+-#ifdef GL_NV_half_float
+-  CONST_CAST(GLEW_NV_half_float) = glewGetExtension("GL_NV_half_float");
+-  if (glewExperimental || GLEW_NV_half_float) CONST_CAST(GLEW_NV_half_float) = !_glewInit_GL_NV_half_float(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_half_float */
+-#ifdef GL_NV_light_max_exponent
+-  CONST_CAST(GLEW_NV_light_max_exponent) = glewGetExtension("GL_NV_light_max_exponent");
+-#endif /* GL_NV_light_max_exponent */
+-#ifdef GL_NV_multisample_filter_hint
+-  CONST_CAST(GLEW_NV_multisample_filter_hint) = glewGetExtension("GL_NV_multisample_filter_hint");
+-#endif /* GL_NV_multisample_filter_hint */
+-#ifdef GL_NV_occlusion_query
+-  CONST_CAST(GLEW_NV_occlusion_query) = glewGetExtension("GL_NV_occlusion_query");
+-  if (glewExperimental || GLEW_NV_occlusion_query) CONST_CAST(GLEW_NV_occlusion_query) = !_glewInit_GL_NV_occlusion_query(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_occlusion_query */
+-#ifdef GL_NV_packed_depth_stencil
+-  CONST_CAST(GLEW_NV_packed_depth_stencil) = glewGetExtension("GL_NV_packed_depth_stencil");
+-#endif /* GL_NV_packed_depth_stencil */
+-#ifdef GL_NV_parameter_buffer_object
+-  CONST_CAST(GLEW_NV_parameter_buffer_object) = glewGetExtension("GL_NV_parameter_buffer_object");
+-  if (glewExperimental || GLEW_NV_parameter_buffer_object) CONST_CAST(GLEW_NV_parameter_buffer_object) = !_glewInit_GL_NV_parameter_buffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_parameter_buffer_object */
+-#ifdef GL_NV_pixel_data_range
+-  CONST_CAST(GLEW_NV_pixel_data_range) = glewGetExtension("GL_NV_pixel_data_range");
+-  if (glewExperimental || GLEW_NV_pixel_data_range) CONST_CAST(GLEW_NV_pixel_data_range) = !_glewInit_GL_NV_pixel_data_range(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_pixel_data_range */
+-#ifdef GL_NV_point_sprite
+-  CONST_CAST(GLEW_NV_point_sprite) = glewGetExtension("GL_NV_point_sprite");
+-  if (glewExperimental || GLEW_NV_point_sprite) CONST_CAST(GLEW_NV_point_sprite) = !_glewInit_GL_NV_point_sprite(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_point_sprite */
+-#ifdef GL_NV_primitive_restart
+-  CONST_CAST(GLEW_NV_primitive_restart) = glewGetExtension("GL_NV_primitive_restart");
+-  if (glewExperimental || GLEW_NV_primitive_restart) CONST_CAST(GLEW_NV_primitive_restart) = !_glewInit_GL_NV_primitive_restart(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_primitive_restart */
+-#ifdef GL_NV_register_combiners
+-  CONST_CAST(GLEW_NV_register_combiners) = glewGetExtension("GL_NV_register_combiners");
+-  if (glewExperimental || GLEW_NV_register_combiners) CONST_CAST(GLEW_NV_register_combiners) = !_glewInit_GL_NV_register_combiners(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_register_combiners */
+-#ifdef GL_NV_register_combiners2
+-  CONST_CAST(GLEW_NV_register_combiners2) = glewGetExtension("GL_NV_register_combiners2");
+-  if (glewExperimental || GLEW_NV_register_combiners2) CONST_CAST(GLEW_NV_register_combiners2) = !_glewInit_GL_NV_register_combiners2(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_register_combiners2 */
+-#ifdef GL_NV_texgen_emboss
+-  CONST_CAST(GLEW_NV_texgen_emboss) = glewGetExtension("GL_NV_texgen_emboss");
+-#endif /* GL_NV_texgen_emboss */
+-#ifdef GL_NV_texgen_reflection
+-  CONST_CAST(GLEW_NV_texgen_reflection) = glewGetExtension("GL_NV_texgen_reflection");
+-#endif /* GL_NV_texgen_reflection */
+-#ifdef GL_NV_texture_compression_vtc
+-  CONST_CAST(GLEW_NV_texture_compression_vtc) = glewGetExtension("GL_NV_texture_compression_vtc");
+-#endif /* GL_NV_texture_compression_vtc */
+-#ifdef GL_NV_texture_env_combine4
+-  CONST_CAST(GLEW_NV_texture_env_combine4) = glewGetExtension("GL_NV_texture_env_combine4");
+-#endif /* GL_NV_texture_env_combine4 */
+-#ifdef GL_NV_texture_expand_normal
+-  CONST_CAST(GLEW_NV_texture_expand_normal) = glewGetExtension("GL_NV_texture_expand_normal");
+-#endif /* GL_NV_texture_expand_normal */
+-#ifdef GL_NV_texture_rectangle
+-  CONST_CAST(GLEW_NV_texture_rectangle) = glewGetExtension("GL_NV_texture_rectangle");
+-#endif /* GL_NV_texture_rectangle */
+-#ifdef GL_NV_texture_shader
+-  CONST_CAST(GLEW_NV_texture_shader) = glewGetExtension("GL_NV_texture_shader");
+-#endif /* GL_NV_texture_shader */
+-#ifdef GL_NV_texture_shader2
+-  CONST_CAST(GLEW_NV_texture_shader2) = glewGetExtension("GL_NV_texture_shader2");
+-#endif /* GL_NV_texture_shader2 */
+-#ifdef GL_NV_texture_shader3
+-  CONST_CAST(GLEW_NV_texture_shader3) = glewGetExtension("GL_NV_texture_shader3");
+-#endif /* GL_NV_texture_shader3 */
+-#ifdef GL_NV_transform_feedback
+-  CONST_CAST(GLEW_NV_transform_feedback) = glewGetExtension("GL_NV_transform_feedback");
+-  if (glewExperimental || GLEW_NV_transform_feedback) CONST_CAST(GLEW_NV_transform_feedback) = !_glewInit_GL_NV_transform_feedback(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_transform_feedback */
+-#ifdef GL_NV_vertex_array_range
+-  CONST_CAST(GLEW_NV_vertex_array_range) = glewGetExtension("GL_NV_vertex_array_range");
+-  if (glewExperimental || GLEW_NV_vertex_array_range) CONST_CAST(GLEW_NV_vertex_array_range) = !_glewInit_GL_NV_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_vertex_array_range */
+-#ifdef GL_NV_vertex_array_range2
+-  CONST_CAST(GLEW_NV_vertex_array_range2) = glewGetExtension("GL_NV_vertex_array_range2");
+-#endif /* GL_NV_vertex_array_range2 */
+-#ifdef GL_NV_vertex_program
+-  CONST_CAST(GLEW_NV_vertex_program) = glewGetExtension("GL_NV_vertex_program");
+-  if (glewExperimental || GLEW_NV_vertex_program) CONST_CAST(GLEW_NV_vertex_program) = !_glewInit_GL_NV_vertex_program(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_NV_vertex_program */
+-#ifdef GL_NV_vertex_program1_1
+-  CONST_CAST(GLEW_NV_vertex_program1_1) = glewGetExtension("GL_NV_vertex_program1_1");
+-#endif /* GL_NV_vertex_program1_1 */
+-#ifdef GL_NV_vertex_program2
+-  CONST_CAST(GLEW_NV_vertex_program2) = glewGetExtension("GL_NV_vertex_program2");
+-#endif /* GL_NV_vertex_program2 */
+-#ifdef GL_NV_vertex_program2_option
+-  CONST_CAST(GLEW_NV_vertex_program2_option) = glewGetExtension("GL_NV_vertex_program2_option");
+-#endif /* GL_NV_vertex_program2_option */
+-#ifdef GL_NV_vertex_program3
+-  CONST_CAST(GLEW_NV_vertex_program3) = glewGetExtension("GL_NV_vertex_program3");
+-#endif /* GL_NV_vertex_program3 */
+-#ifdef GL_NV_vertex_program4
+-  CONST_CAST(GLEW_NV_vertex_program4) = glewGetExtension("GL_NV_gpu_program4");
+-#endif /* GL_NV_vertex_program4 */
+-#ifdef GL_OES_byte_coordinates
+-  CONST_CAST(GLEW_OES_byte_coordinates) = glewGetExtension("GL_OES_byte_coordinates");
+-#endif /* GL_OES_byte_coordinates */
+-#ifdef GL_OES_compressed_paletted_texture
+-  CONST_CAST(GLEW_OES_compressed_paletted_texture) = glewGetExtension("GL_OES_compressed_paletted_texture");
+-#endif /* GL_OES_compressed_paletted_texture */
+-#ifdef GL_OES_read_format
+-  CONST_CAST(GLEW_OES_read_format) = glewGetExtension("GL_OES_read_format");
+-#endif /* GL_OES_read_format */
+-#ifdef GL_OES_single_precision
+-  CONST_CAST(GLEW_OES_single_precision) = glewGetExtension("GL_OES_single_precision");
+-  if (glewExperimental || GLEW_OES_single_precision) CONST_CAST(GLEW_OES_single_precision) = !_glewInit_GL_OES_single_precision(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_OES_single_precision */
+-#ifdef GL_OML_interlace
+-  CONST_CAST(GLEW_OML_interlace) = glewGetExtension("GL_OML_interlace");
+-#endif /* GL_OML_interlace */
+-#ifdef GL_OML_resample
+-  CONST_CAST(GLEW_OML_resample) = glewGetExtension("GL_OML_resample");
+-#endif /* GL_OML_resample */
+-#ifdef GL_OML_subsample
+-  CONST_CAST(GLEW_OML_subsample) = glewGetExtension("GL_OML_subsample");
+-#endif /* GL_OML_subsample */
+-#ifdef GL_PGI_misc_hints
+-  CONST_CAST(GLEW_PGI_misc_hints) = glewGetExtension("GL_PGI_misc_hints");
+-#endif /* GL_PGI_misc_hints */
+-#ifdef GL_PGI_vertex_hints
+-  CONST_CAST(GLEW_PGI_vertex_hints) = glewGetExtension("GL_PGI_vertex_hints");
+-#endif /* GL_PGI_vertex_hints */
+-#ifdef GL_REND_screen_coordinates
+-  CONST_CAST(GLEW_REND_screen_coordinates) = glewGetExtension("GL_REND_screen_coordinates");
+-#endif /* GL_REND_screen_coordinates */
+-#ifdef GL_S3_s3tc
+-  CONST_CAST(GLEW_S3_s3tc) = glewGetExtension("GL_S3_s3tc");
+-#endif /* GL_S3_s3tc */
+-#ifdef GL_SGIS_color_range
+-  CONST_CAST(GLEW_SGIS_color_range) = glewGetExtension("GL_SGIS_color_range");
+-#endif /* GL_SGIS_color_range */
+-#ifdef GL_SGIS_detail_texture
+-  CONST_CAST(GLEW_SGIS_detail_texture) = glewGetExtension("GL_SGIS_detail_texture");
+-  if (glewExperimental || GLEW_SGIS_detail_texture) CONST_CAST(GLEW_SGIS_detail_texture) = !_glewInit_GL_SGIS_detail_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIS_detail_texture */
+-#ifdef GL_SGIS_fog_function
+-  CONST_CAST(GLEW_SGIS_fog_function) = glewGetExtension("GL_SGIS_fog_function");
+-  if (glewExperimental || GLEW_SGIS_fog_function) CONST_CAST(GLEW_SGIS_fog_function) = !_glewInit_GL_SGIS_fog_function(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIS_fog_function */
+-#ifdef GL_SGIS_generate_mipmap
+-  CONST_CAST(GLEW_SGIS_generate_mipmap) = glewGetExtension("GL_SGIS_generate_mipmap");
+-#endif /* GL_SGIS_generate_mipmap */
+-#ifdef GL_SGIS_multisample
+-  CONST_CAST(GLEW_SGIS_multisample) = glewGetExtension("GL_SGIS_multisample");
+-  if (glewExperimental || GLEW_SGIS_multisample) CONST_CAST(GLEW_SGIS_multisample) = !_glewInit_GL_SGIS_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIS_multisample */
+-#ifdef GL_SGIS_pixel_texture
+-  CONST_CAST(GLEW_SGIS_pixel_texture) = glewGetExtension("GL_SGIS_pixel_texture");
+-#endif /* GL_SGIS_pixel_texture */
+-#ifdef GL_SGIS_sharpen_texture
+-  CONST_CAST(GLEW_SGIS_sharpen_texture) = glewGetExtension("GL_SGIS_sharpen_texture");
+-  if (glewExperimental || GLEW_SGIS_sharpen_texture) CONST_CAST(GLEW_SGIS_sharpen_texture) = !_glewInit_GL_SGIS_sharpen_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIS_sharpen_texture */
+-#ifdef GL_SGIS_texture4D
+-  CONST_CAST(GLEW_SGIS_texture4D) = glewGetExtension("GL_SGIS_texture4D");
+-  if (glewExperimental || GLEW_SGIS_texture4D) CONST_CAST(GLEW_SGIS_texture4D) = !_glewInit_GL_SGIS_texture4D(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIS_texture4D */
+-#ifdef GL_SGIS_texture_border_clamp
+-  CONST_CAST(GLEW_SGIS_texture_border_clamp) = glewGetExtension("GL_SGIS_texture_border_clamp");
+-#endif /* GL_SGIS_texture_border_clamp */
+-#ifdef GL_SGIS_texture_edge_clamp
+-  CONST_CAST(GLEW_SGIS_texture_edge_clamp) = glewGetExtension("GL_SGIS_texture_edge_clamp");
+-#endif /* GL_SGIS_texture_edge_clamp */
+-#ifdef GL_SGIS_texture_filter4
+-  CONST_CAST(GLEW_SGIS_texture_filter4) = glewGetExtension("GL_SGIS_texture_filter4");
+-  if (glewExperimental || GLEW_SGIS_texture_filter4) CONST_CAST(GLEW_SGIS_texture_filter4) = !_glewInit_GL_SGIS_texture_filter4(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIS_texture_filter4 */
+-#ifdef GL_SGIS_texture_lod
+-  CONST_CAST(GLEW_SGIS_texture_lod) = glewGetExtension("GL_SGIS_texture_lod");
+-#endif /* GL_SGIS_texture_lod */
+-#ifdef GL_SGIS_texture_select
+-  CONST_CAST(GLEW_SGIS_texture_select) = glewGetExtension("GL_SGIS_texture_select");
+-#endif /* GL_SGIS_texture_select */
+-#ifdef GL_SGIX_async
+-  CONST_CAST(GLEW_SGIX_async) = glewGetExtension("GL_SGIX_async");
+-  if (glewExperimental || GLEW_SGIX_async) CONST_CAST(GLEW_SGIX_async) = !_glewInit_GL_SGIX_async(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_async */
+-#ifdef GL_SGIX_async_histogram
+-  CONST_CAST(GLEW_SGIX_async_histogram) = glewGetExtension("GL_SGIX_async_histogram");
+-#endif /* GL_SGIX_async_histogram */
+-#ifdef GL_SGIX_async_pixel
+-  CONST_CAST(GLEW_SGIX_async_pixel) = glewGetExtension("GL_SGIX_async_pixel");
+-#endif /* GL_SGIX_async_pixel */
+-#ifdef GL_SGIX_blend_alpha_minmax
+-  CONST_CAST(GLEW_SGIX_blend_alpha_minmax) = glewGetExtension("GL_SGIX_blend_alpha_minmax");
+-#endif /* GL_SGIX_blend_alpha_minmax */
+-#ifdef GL_SGIX_clipmap
+-  CONST_CAST(GLEW_SGIX_clipmap) = glewGetExtension("GL_SGIX_clipmap");
+-#endif /* GL_SGIX_clipmap */
+-#ifdef GL_SGIX_depth_texture
+-  CONST_CAST(GLEW_SGIX_depth_texture) = glewGetExtension("GL_SGIX_depth_texture");
+-#endif /* GL_SGIX_depth_texture */
+-#ifdef GL_SGIX_flush_raster
+-  CONST_CAST(GLEW_SGIX_flush_raster) = glewGetExtension("GL_SGIX_flush_raster");
+-  if (glewExperimental || GLEW_SGIX_flush_raster) CONST_CAST(GLEW_SGIX_flush_raster) = !_glewInit_GL_SGIX_flush_raster(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_flush_raster */
+-#ifdef GL_SGIX_fog_offset
+-  CONST_CAST(GLEW_SGIX_fog_offset) = glewGetExtension("GL_SGIX_fog_offset");
+-#endif /* GL_SGIX_fog_offset */
+-#ifdef GL_SGIX_fog_texture
+-  CONST_CAST(GLEW_SGIX_fog_texture) = glewGetExtension("GL_SGIX_fog_texture");
+-  if (glewExperimental || GLEW_SGIX_fog_texture) CONST_CAST(GLEW_SGIX_fog_texture) = !_glewInit_GL_SGIX_fog_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_fog_texture */
+-#ifdef GL_SGIX_fragment_specular_lighting
+-  CONST_CAST(GLEW_SGIX_fragment_specular_lighting) = glewGetExtension("GL_SGIX_fragment_specular_lighting");
+-  if (glewExperimental || GLEW_SGIX_fragment_specular_lighting) CONST_CAST(GLEW_SGIX_fragment_specular_lighting) = !_glewInit_GL_SGIX_fragment_specular_lighting(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_fragment_specular_lighting */
+-#ifdef GL_SGIX_framezoom
+-  CONST_CAST(GLEW_SGIX_framezoom) = glewGetExtension("GL_SGIX_framezoom");
+-  if (glewExperimental || GLEW_SGIX_framezoom) CONST_CAST(GLEW_SGIX_framezoom) = !_glewInit_GL_SGIX_framezoom(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_framezoom */
+-#ifdef GL_SGIX_interlace
+-  CONST_CAST(GLEW_SGIX_interlace) = glewGetExtension("GL_SGIX_interlace");
+-#endif /* GL_SGIX_interlace */
+-#ifdef GL_SGIX_ir_instrument1
+-  CONST_CAST(GLEW_SGIX_ir_instrument1) = glewGetExtension("GL_SGIX_ir_instrument1");
+-#endif /* GL_SGIX_ir_instrument1 */
+-#ifdef GL_SGIX_list_priority
+-  CONST_CAST(GLEW_SGIX_list_priority) = glewGetExtension("GL_SGIX_list_priority");
+-#endif /* GL_SGIX_list_priority */
+-#ifdef GL_SGIX_pixel_texture
+-  CONST_CAST(GLEW_SGIX_pixel_texture) = glewGetExtension("GL_SGIX_pixel_texture");
+-  if (glewExperimental || GLEW_SGIX_pixel_texture) CONST_CAST(GLEW_SGIX_pixel_texture) = !_glewInit_GL_SGIX_pixel_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_pixel_texture */
+-#ifdef GL_SGIX_pixel_texture_bits
+-  CONST_CAST(GLEW_SGIX_pixel_texture_bits) = glewGetExtension("GL_SGIX_pixel_texture_bits");
+-#endif /* GL_SGIX_pixel_texture_bits */
+-#ifdef GL_SGIX_reference_plane
+-  CONST_CAST(GLEW_SGIX_reference_plane) = glewGetExtension("GL_SGIX_reference_plane");
+-  if (glewExperimental || GLEW_SGIX_reference_plane) CONST_CAST(GLEW_SGIX_reference_plane) = !_glewInit_GL_SGIX_reference_plane(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_reference_plane */
+-#ifdef GL_SGIX_resample
+-  CONST_CAST(GLEW_SGIX_resample) = glewGetExtension("GL_SGIX_resample");
+-#endif /* GL_SGIX_resample */
+-#ifdef GL_SGIX_shadow
+-  CONST_CAST(GLEW_SGIX_shadow) = glewGetExtension("GL_SGIX_shadow");
+-#endif /* GL_SGIX_shadow */
+-#ifdef GL_SGIX_shadow_ambient
+-  CONST_CAST(GLEW_SGIX_shadow_ambient) = glewGetExtension("GL_SGIX_shadow_ambient");
+-#endif /* GL_SGIX_shadow_ambient */
+-#ifdef GL_SGIX_sprite
+-  CONST_CAST(GLEW_SGIX_sprite) = glewGetExtension("GL_SGIX_sprite");
+-  if (glewExperimental || GLEW_SGIX_sprite) CONST_CAST(GLEW_SGIX_sprite) = !_glewInit_GL_SGIX_sprite(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_sprite */
+-#ifdef GL_SGIX_tag_sample_buffer
+-  CONST_CAST(GLEW_SGIX_tag_sample_buffer) = glewGetExtension("GL_SGIX_tag_sample_buffer");
+-  if (glewExperimental || GLEW_SGIX_tag_sample_buffer) CONST_CAST(GLEW_SGIX_tag_sample_buffer) = !_glewInit_GL_SGIX_tag_sample_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGIX_tag_sample_buffer */
+-#ifdef GL_SGIX_texture_add_env
+-  CONST_CAST(GLEW_SGIX_texture_add_env) = glewGetExtension("GL_SGIX_texture_add_env");
+-#endif /* GL_SGIX_texture_add_env */
+-#ifdef GL_SGIX_texture_coordinate_clamp
+-  CONST_CAST(GLEW_SGIX_texture_coordinate_clamp) = glewGetExtension("GL_SGIX_texture_coordinate_clamp");
+-#endif /* GL_SGIX_texture_coordinate_clamp */
+-#ifdef GL_SGIX_texture_lod_bias
+-  CONST_CAST(GLEW_SGIX_texture_lod_bias) = glewGetExtension("GL_SGIX_texture_lod_bias");
+-#endif /* GL_SGIX_texture_lod_bias */
+-#ifdef GL_SGIX_texture_multi_buffer
+-  CONST_CAST(GLEW_SGIX_texture_multi_buffer) = glewGetExtension("GL_SGIX_texture_multi_buffer");
+-#endif /* GL_SGIX_texture_multi_buffer */
+-#ifdef GL_SGIX_texture_range
+-  CONST_CAST(GLEW_SGIX_texture_range) = glewGetExtension("GL_SGIX_texture_range");
+-#endif /* GL_SGIX_texture_range */
+-#ifdef GL_SGIX_texture_scale_bias
+-  CONST_CAST(GLEW_SGIX_texture_scale_bias) = glewGetExtension("GL_SGIX_texture_scale_bias");
+-#endif /* GL_SGIX_texture_scale_bias */
+-#ifdef GL_SGIX_vertex_preclip
+-  CONST_CAST(GLEW_SGIX_vertex_preclip) = glewGetExtension("GL_SGIX_vertex_preclip");
+-#endif /* GL_SGIX_vertex_preclip */
+-#ifdef GL_SGIX_vertex_preclip_hint
+-  CONST_CAST(GLEW_SGIX_vertex_preclip_hint) = glewGetExtension("GL_SGIX_vertex_preclip_hint");
+-#endif /* GL_SGIX_vertex_preclip_hint */
+-#ifdef GL_SGIX_ycrcb
+-  CONST_CAST(GLEW_SGIX_ycrcb) = glewGetExtension("GL_SGIX_ycrcb");
+-#endif /* GL_SGIX_ycrcb */
+-#ifdef GL_SGI_color_matrix
+-  CONST_CAST(GLEW_SGI_color_matrix) = glewGetExtension("GL_SGI_color_matrix");
+-#endif /* GL_SGI_color_matrix */
+-#ifdef GL_SGI_color_table
+-  CONST_CAST(GLEW_SGI_color_table) = glewGetExtension("GL_SGI_color_table");
+-  if (glewExperimental || GLEW_SGI_color_table) CONST_CAST(GLEW_SGI_color_table) = !_glewInit_GL_SGI_color_table(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SGI_color_table */
+-#ifdef GL_SGI_texture_color_table
+-  CONST_CAST(GLEW_SGI_texture_color_table) = glewGetExtension("GL_SGI_texture_color_table");
+-#endif /* GL_SGI_texture_color_table */
+-#ifdef GL_SUNX_constant_data
+-  CONST_CAST(GLEW_SUNX_constant_data) = glewGetExtension("GL_SUNX_constant_data");
+-  if (glewExperimental || GLEW_SUNX_constant_data) CONST_CAST(GLEW_SUNX_constant_data) = !_glewInit_GL_SUNX_constant_data(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SUNX_constant_data */
+-#ifdef GL_SUN_convolution_border_modes
+-  CONST_CAST(GLEW_SUN_convolution_border_modes) = glewGetExtension("GL_SUN_convolution_border_modes");
+-#endif /* GL_SUN_convolution_border_modes */
+-#ifdef GL_SUN_global_alpha
+-  CONST_CAST(GLEW_SUN_global_alpha) = glewGetExtension("GL_SUN_global_alpha");
+-  if (glewExperimental || GLEW_SUN_global_alpha) CONST_CAST(GLEW_SUN_global_alpha) = !_glewInit_GL_SUN_global_alpha(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SUN_global_alpha */
+-#ifdef GL_SUN_mesh_array
+-  CONST_CAST(GLEW_SUN_mesh_array) = glewGetExtension("GL_SUN_mesh_array");
+-#endif /* GL_SUN_mesh_array */
+-#ifdef GL_SUN_read_video_pixels
+-  CONST_CAST(GLEW_SUN_read_video_pixels) = glewGetExtension("GL_SUN_read_video_pixels");
+-  if (glewExperimental || GLEW_SUN_read_video_pixels) CONST_CAST(GLEW_SUN_read_video_pixels) = !_glewInit_GL_SUN_read_video_pixels(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SUN_read_video_pixels */
+-#ifdef GL_SUN_slice_accum
+-  CONST_CAST(GLEW_SUN_slice_accum) = glewGetExtension("GL_SUN_slice_accum");
+-#endif /* GL_SUN_slice_accum */
+-#ifdef GL_SUN_triangle_list
+-  CONST_CAST(GLEW_SUN_triangle_list) = glewGetExtension("GL_SUN_triangle_list");
+-  if (glewExperimental || GLEW_SUN_triangle_list) CONST_CAST(GLEW_SUN_triangle_list) = !_glewInit_GL_SUN_triangle_list(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SUN_triangle_list */
+-#ifdef GL_SUN_vertex
+-  CONST_CAST(GLEW_SUN_vertex) = glewGetExtension("GL_SUN_vertex");
+-  if (glewExperimental || GLEW_SUN_vertex) CONST_CAST(GLEW_SUN_vertex) = !_glewInit_GL_SUN_vertex(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_SUN_vertex */
+-#ifdef GL_WIN_phong_shading
+-  CONST_CAST(GLEW_WIN_phong_shading) = glewGetExtension("GL_WIN_phong_shading");
+-#endif /* GL_WIN_phong_shading */
+-#ifdef GL_WIN_specular_fog
+-  CONST_CAST(GLEW_WIN_specular_fog) = glewGetExtension("GL_WIN_specular_fog");
+-#endif /* GL_WIN_specular_fog */
+-#ifdef GL_WIN_swap_hint
+-  CONST_CAST(GLEW_WIN_swap_hint) = glewGetExtension("GL_WIN_swap_hint");
+-  if (glewExperimental || GLEW_WIN_swap_hint) CONST_CAST(GLEW_WIN_swap_hint) = !_glewInit_GL_WIN_swap_hint(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GL_WIN_swap_hint */
+-
+-  return GLEW_OK;
+-}
+-
+-
+-#if defined(_WIN32)
+-
+-#if !defined(GLEW_MX)
+-
+-PFNWGLSETSTEREOEMITTERSTATE3DLPROC __wglewSetStereoEmitterState3DL = NULL;
+-
+-PFNWGLCREATEBUFFERREGIONARBPROC __wglewCreateBufferRegionARB = NULL;
+-PFNWGLDELETEBUFFERREGIONARBPROC __wglewDeleteBufferRegionARB = NULL;
+-PFNWGLRESTOREBUFFERREGIONARBPROC __wglewRestoreBufferRegionARB = NULL;
+-PFNWGLSAVEBUFFERREGIONARBPROC __wglewSaveBufferRegionARB = NULL;
+-
+-PFNWGLGETEXTENSIONSSTRINGARBPROC __wglewGetExtensionsStringARB = NULL;
+-
+-PFNWGLGETCURRENTREADDCARBPROC __wglewGetCurrentReadDCARB = NULL;
+-PFNWGLMAKECONTEXTCURRENTARBPROC __wglewMakeContextCurrentARB = NULL;
+-
+-PFNWGLCREATEPBUFFERARBPROC __wglewCreatePbufferARB = NULL;
+-PFNWGLDESTROYPBUFFERARBPROC __wglewDestroyPbufferARB = NULL;
+-PFNWGLGETPBUFFERDCARBPROC __wglewGetPbufferDCARB = NULL;
+-PFNWGLQUERYPBUFFERARBPROC __wglewQueryPbufferARB = NULL;
+-PFNWGLRELEASEPBUFFERDCARBPROC __wglewReleasePbufferDCARB = NULL;
+-
+-PFNWGLCHOOSEPIXELFORMATARBPROC __wglewChoosePixelFormatARB = NULL;
+-PFNWGLGETPIXELFORMATATTRIBFVARBPROC __wglewGetPixelFormatAttribfvARB = NULL;
+-PFNWGLGETPIXELFORMATATTRIBIVARBPROC __wglewGetPixelFormatAttribivARB = NULL;
+-
+-PFNWGLBINDTEXIMAGEARBPROC __wglewBindTexImageARB = NULL;
+-PFNWGLRELEASETEXIMAGEARBPROC __wglewReleaseTexImageARB = NULL;
+-PFNWGLSETPBUFFERATTRIBARBPROC __wglewSetPbufferAttribARB = NULL;
+-
+-PFNWGLBINDDISPLAYCOLORTABLEEXTPROC __wglewBindDisplayColorTableEXT = NULL;
+-PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC __wglewCreateDisplayColorTableEXT = NULL;
+-PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC __wglewDestroyDisplayColorTableEXT = NULL;
+-PFNWGLLOADDISPLAYCOLORTABLEEXTPROC __wglewLoadDisplayColorTableEXT = NULL;
+-
+-PFNWGLGETEXTENSIONSSTRINGEXTPROC __wglewGetExtensionsStringEXT = NULL;
+-
+-PFNWGLGETCURRENTREADDCEXTPROC __wglewGetCurrentReadDCEXT = NULL;
+-PFNWGLMAKECONTEXTCURRENTEXTPROC __wglewMakeContextCurrentEXT = NULL;
+-
+-PFNWGLCREATEPBUFFEREXTPROC __wglewCreatePbufferEXT = NULL;
+-PFNWGLDESTROYPBUFFEREXTPROC __wglewDestroyPbufferEXT = NULL;
+-PFNWGLGETPBUFFERDCEXTPROC __wglewGetPbufferDCEXT = NULL;
+-PFNWGLQUERYPBUFFEREXTPROC __wglewQueryPbufferEXT = NULL;
+-PFNWGLRELEASEPBUFFERDCEXTPROC __wglewReleasePbufferDCEXT = NULL;
+-
+-PFNWGLCHOOSEPIXELFORMATEXTPROC __wglewChoosePixelFormatEXT = NULL;
+-PFNWGLGETPIXELFORMATATTRIBFVEXTPROC __wglewGetPixelFormatAttribfvEXT = NULL;
+-PFNWGLGETPIXELFORMATATTRIBIVEXTPROC __wglewGetPixelFormatAttribivEXT = NULL;
+-
+-PFNWGLGETSWAPINTERVALEXTPROC __wglewGetSwapIntervalEXT = NULL;
+-PFNWGLSWAPINTERVALEXTPROC __wglewSwapIntervalEXT = NULL;
+-
+-PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC __wglewGetDigitalVideoParametersI3D = NULL;
+-PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC __wglewSetDigitalVideoParametersI3D = NULL;
+-
+-PFNWGLGETGAMMATABLEI3DPROC __wglewGetGammaTableI3D = NULL;
+-PFNWGLGETGAMMATABLEPARAMETERSI3DPROC __wglewGetGammaTableParametersI3D = NULL;
+-PFNWGLSETGAMMATABLEI3DPROC __wglewSetGammaTableI3D = NULL;
+-PFNWGLSETGAMMATABLEPARAMETERSI3DPROC __wglewSetGammaTableParametersI3D = NULL;
+-
+-PFNWGLDISABLEGENLOCKI3DPROC __wglewDisableGenlockI3D = NULL;
+-PFNWGLENABLEGENLOCKI3DPROC __wglewEnableGenlockI3D = NULL;
+-PFNWGLGENLOCKSAMPLERATEI3DPROC __wglewGenlockSampleRateI3D = NULL;
+-PFNWGLGENLOCKSOURCEDELAYI3DPROC __wglewGenlockSourceDelayI3D = NULL;
+-PFNWGLGENLOCKSOURCEEDGEI3DPROC __wglewGenlockSourceEdgeI3D = NULL;
+-PFNWGLGENLOCKSOURCEI3DPROC __wglewGenlockSourceI3D = NULL;
+-PFNWGLGETGENLOCKSAMPLERATEI3DPROC __wglewGetGenlockSampleRateI3D = NULL;
+-PFNWGLGETGENLOCKSOURCEDELAYI3DPROC __wglewGetGenlockSourceDelayI3D = NULL;
+-PFNWGLGETGENLOCKSOURCEEDGEI3DPROC __wglewGetGenlockSourceEdgeI3D = NULL;
+-PFNWGLGETGENLOCKSOURCEI3DPROC __wglewGetGenlockSourceI3D = NULL;
+-PFNWGLISENABLEDGENLOCKI3DPROC __wglewIsEnabledGenlockI3D = NULL;
+-PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC __wglewQueryGenlockMaxSourceDelayI3D = NULL;
+-
+-PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC __wglewAssociateImageBufferEventsI3D = NULL;
+-PFNWGLCREATEIMAGEBUFFERI3DPROC __wglewCreateImageBufferI3D = NULL;
+-PFNWGLDESTROYIMAGEBUFFERI3DPROC __wglewDestroyImageBufferI3D = NULL;
+-PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC __wglewReleaseImageBufferEventsI3D = NULL;
+-
+-PFNWGLDISABLEFRAMELOCKI3DPROC __wglewDisableFrameLockI3D = NULL;
+-PFNWGLENABLEFRAMELOCKI3DPROC __wglewEnableFrameLockI3D = NULL;
+-PFNWGLISENABLEDFRAMELOCKI3DPROC __wglewIsEnabledFrameLockI3D = NULL;
+-PFNWGLQUERYFRAMELOCKMASTERI3DPROC __wglewQueryFrameLockMasterI3D = NULL;
+-
+-PFNWGLBEGINFRAMETRACKINGI3DPROC __wglewBeginFrameTrackingI3D = NULL;
+-PFNWGLENDFRAMETRACKINGI3DPROC __wglewEndFrameTrackingI3D = NULL;
+-PFNWGLGETFRAMEUSAGEI3DPROC __wglewGetFrameUsageI3D = NULL;
+-PFNWGLQUERYFRAMETRACKINGI3DPROC __wglewQueryFrameTrackingI3D = NULL;
+-
+-PFNWGLCREATEAFFINITYDCNVPROC __wglewCreateAffinityDCNV = NULL;
+-PFNWGLDELETEDCNVPROC __wglewDeleteDCNV = NULL;
+-PFNWGLENUMGPUDEVICESNVPROC __wglewEnumGpuDevicesNV = NULL;
+-PFNWGLENUMGPUSFROMAFFINITYDCNVPROC __wglewEnumGpusFromAffinityDCNV = NULL;
+-PFNWGLENUMGPUSNVPROC __wglewEnumGpusNV = NULL;
+-
+-PFNWGLALLOCATEMEMORYNVPROC __wglewAllocateMemoryNV = NULL;
+-PFNWGLFREEMEMORYNVPROC __wglewFreeMemoryNV = NULL;
+-
+-PFNWGLGETMSCRATEOMLPROC __wglewGetMscRateOML = NULL;
+-PFNWGLGETSYNCVALUESOMLPROC __wglewGetSyncValuesOML = NULL;
+-PFNWGLSWAPBUFFERSMSCOMLPROC __wglewSwapBuffersMscOML = NULL;
+-PFNWGLSWAPLAYERBUFFERSMSCOMLPROC __wglewSwapLayerBuffersMscOML = NULL;
+-PFNWGLWAITFORMSCOMLPROC __wglewWaitForMscOML = NULL;
+-PFNWGLWAITFORSBCOMLPROC __wglewWaitForSbcOML = NULL;
+-GLboolean __WGLEW_3DFX_multisample = GL_FALSE;
+-GLboolean __WGLEW_3DL_stereo_control = GL_FALSE;
+-GLboolean __WGLEW_ARB_buffer_region = GL_FALSE;
+-GLboolean __WGLEW_ARB_extensions_string = GL_FALSE;
+-GLboolean __WGLEW_ARB_make_current_read = GL_FALSE;
+-GLboolean __WGLEW_ARB_multisample = GL_FALSE;
+-GLboolean __WGLEW_ARB_pbuffer = GL_FALSE;
+-GLboolean __WGLEW_ARB_pixel_format = GL_FALSE;
+-GLboolean __WGLEW_ARB_pixel_format_float = GL_FALSE;
+-GLboolean __WGLEW_ARB_render_texture = GL_FALSE;
+-GLboolean __WGLEW_ATI_pixel_format_float = GL_FALSE;
+-GLboolean __WGLEW_ATI_render_texture_rectangle = GL_FALSE;
+-GLboolean __WGLEW_EXT_depth_float = GL_FALSE;
+-GLboolean __WGLEW_EXT_display_color_table = GL_FALSE;
+-GLboolean __WGLEW_EXT_extensions_string = GL_FALSE;
+-GLboolean __WGLEW_EXT_framebuffer_sRGB = GL_FALSE;
+-GLboolean __WGLEW_EXT_make_current_read = GL_FALSE;
+-GLboolean __WGLEW_EXT_multisample = GL_FALSE;
+-GLboolean __WGLEW_EXT_pbuffer = GL_FALSE;
+-GLboolean __WGLEW_EXT_pixel_format = GL_FALSE;
+-GLboolean __WGLEW_EXT_pixel_format_packed_float = GL_FALSE;
+-GLboolean __WGLEW_EXT_swap_control = GL_FALSE;
+-GLboolean __WGLEW_I3D_digital_video_control = GL_FALSE;
+-GLboolean __WGLEW_I3D_gamma = GL_FALSE;
+-GLboolean __WGLEW_I3D_genlock = GL_FALSE;
+-GLboolean __WGLEW_I3D_image_buffer = GL_FALSE;
+-GLboolean __WGLEW_I3D_swap_frame_lock = GL_FALSE;
+-GLboolean __WGLEW_I3D_swap_frame_usage = GL_FALSE;
+-GLboolean __WGLEW_NV_float_buffer = GL_FALSE;
+-GLboolean __WGLEW_NV_gpu_affinity = GL_FALSE;
+-GLboolean __WGLEW_NV_render_depth_texture = GL_FALSE;
+-GLboolean __WGLEW_NV_render_texture_rectangle = GL_FALSE;
+-GLboolean __WGLEW_NV_vertex_array_range = GL_FALSE;
+-GLboolean __WGLEW_OML_sync_control = GL_FALSE;
+-
+-#endif /* !GLEW_MX */
+-
+-#ifdef WGL_3DFX_multisample
+-
+-#endif /* WGL_3DFX_multisample */
+-
+-#ifdef WGL_3DL_stereo_control
+-
+-static GLboolean _glewInit_WGL_3DL_stereo_control (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglSetStereoEmitterState3DL = (PFNWGLSETSTEREOEMITTERSTATE3DLPROC)glewGetProcAddress((const GLubyte*)"wglSetStereoEmitterState3DL")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_3DL_stereo_control */
+-
+-#ifdef WGL_ARB_buffer_region
+-
+-static GLboolean _glewInit_WGL_ARB_buffer_region (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglCreateBufferRegionARB = (PFNWGLCREATEBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglCreateBufferRegionARB")) == NULL) || r;
+-  r = ((wglDeleteBufferRegionARB = (PFNWGLDELETEBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglDeleteBufferRegionARB")) == NULL) || r;
+-  r = ((wglRestoreBufferRegionARB = (PFNWGLRESTOREBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglRestoreBufferRegionARB")) == NULL) || r;
+-  r = ((wglSaveBufferRegionARB = (PFNWGLSAVEBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglSaveBufferRegionARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_ARB_buffer_region */
+-
+-#ifdef WGL_ARB_extensions_string
+-
+-static GLboolean _glewInit_WGL_ARB_extensions_string (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_ARB_extensions_string */
+-
+-#ifdef WGL_ARB_make_current_read
+-
+-static GLboolean _glewInit_WGL_ARB_make_current_read (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetCurrentReadDCARB = (PFNWGLGETCURRENTREADDCARBPROC)glewGetProcAddress((const GLubyte*)"wglGetCurrentReadDCARB")) == NULL) || r;
+-  r = ((wglMakeContextCurrentARB = (PFNWGLMAKECONTEXTCURRENTARBPROC)glewGetProcAddress((const GLubyte*)"wglMakeContextCurrentARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_ARB_make_current_read */
+-
+-#ifdef WGL_ARB_multisample
+-
+-#endif /* WGL_ARB_multisample */
+-
+-#ifdef WGL_ARB_pbuffer
+-
+-static GLboolean _glewInit_WGL_ARB_pbuffer (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglCreatePbufferARB = (PFNWGLCREATEPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"wglCreatePbufferARB")) == NULL) || r;
+-  r = ((wglDestroyPbufferARB = (PFNWGLDESTROYPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"wglDestroyPbufferARB")) == NULL) || r;
+-  r = ((wglGetPbufferDCARB = (PFNWGLGETPBUFFERDCARBPROC)glewGetProcAddress((const GLubyte*)"wglGetPbufferDCARB")) == NULL) || r;
+-  r = ((wglQueryPbufferARB = (PFNWGLQUERYPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"wglQueryPbufferARB")) == NULL) || r;
+-  r = ((wglReleasePbufferDCARB = (PFNWGLRELEASEPBUFFERDCARBPROC)glewGetProcAddress((const GLubyte*)"wglReleasePbufferDCARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_ARB_pbuffer */
+-
+-#ifdef WGL_ARB_pixel_format
+-
+-static GLboolean _glewInit_WGL_ARB_pixel_format (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC)glewGetProcAddress((const GLubyte*)"wglChoosePixelFormatARB")) == NULL) || r;
+-  r = ((wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribfvARB")) == NULL) || r;
+-  r = ((wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribivARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_ARB_pixel_format */
+-
+-#ifdef WGL_ARB_pixel_format_float
+-
+-#endif /* WGL_ARB_pixel_format_float */
+-
+-#ifdef WGL_ARB_render_texture
+-
+-static GLboolean _glewInit_WGL_ARB_render_texture (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglBindTexImageARB = (PFNWGLBINDTEXIMAGEARBPROC)glewGetProcAddress((const GLubyte*)"wglBindTexImageARB")) == NULL) || r;
+-  r = ((wglReleaseTexImageARB = (PFNWGLRELEASETEXIMAGEARBPROC)glewGetProcAddress((const GLubyte*)"wglReleaseTexImageARB")) == NULL) || r;
+-  r = ((wglSetPbufferAttribARB = (PFNWGLSETPBUFFERATTRIBARBPROC)glewGetProcAddress((const GLubyte*)"wglSetPbufferAttribARB")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_ARB_render_texture */
+-
+-#ifdef WGL_ATI_pixel_format_float
+-
+-#endif /* WGL_ATI_pixel_format_float */
+-
+-#ifdef WGL_ATI_render_texture_rectangle
+-
+-#endif /* WGL_ATI_render_texture_rectangle */
+-
+-#ifdef WGL_EXT_depth_float
+-
+-#endif /* WGL_EXT_depth_float */
+-
+-#ifdef WGL_EXT_display_color_table
+-
+-static GLboolean _glewInit_WGL_EXT_display_color_table (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglBindDisplayColorTableEXT = (PFNWGLBINDDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglBindDisplayColorTableEXT")) == NULL) || r;
+-  r = ((wglCreateDisplayColorTableEXT = (PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglCreateDisplayColorTableEXT")) == NULL) || r;
+-  r = ((wglDestroyDisplayColorTableEXT = (PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglDestroyDisplayColorTableEXT")) == NULL) || r;
+-  r = ((wglLoadDisplayColorTableEXT = (PFNWGLLOADDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglLoadDisplayColorTableEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_EXT_display_color_table */
+-
+-#ifdef WGL_EXT_extensions_string
+-
+-static GLboolean _glewInit_WGL_EXT_extensions_string (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_EXT_extensions_string */
+-
+-#ifdef WGL_EXT_framebuffer_sRGB
+-
+-#endif /* WGL_EXT_framebuffer_sRGB */
+-
+-#ifdef WGL_EXT_make_current_read
+-
+-static GLboolean _glewInit_WGL_EXT_make_current_read (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetCurrentReadDCEXT = (PFNWGLGETCURRENTREADDCEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetCurrentReadDCEXT")) == NULL) || r;
+-  r = ((wglMakeContextCurrentEXT = (PFNWGLMAKECONTEXTCURRENTEXTPROC)glewGetProcAddress((const GLubyte*)"wglMakeContextCurrentEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_EXT_make_current_read */
+-
+-#ifdef WGL_EXT_multisample
+-
+-#endif /* WGL_EXT_multisample */
+-
+-#ifdef WGL_EXT_pbuffer
+-
+-static GLboolean _glewInit_WGL_EXT_pbuffer (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglCreatePbufferEXT = (PFNWGLCREATEPBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"wglCreatePbufferEXT")) == NULL) || r;
+-  r = ((wglDestroyPbufferEXT = (PFNWGLDESTROYPBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"wglDestroyPbufferEXT")) == NULL) || r;
+-  r = ((wglGetPbufferDCEXT = (PFNWGLGETPBUFFERDCEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetPbufferDCEXT")) == NULL) || r;
+-  r = ((wglQueryPbufferEXT = (PFNWGLQUERYPBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"wglQueryPbufferEXT")) == NULL) || r;
+-  r = ((wglReleasePbufferDCEXT = (PFNWGLRELEASEPBUFFERDCEXTPROC)glewGetProcAddress((const GLubyte*)"wglReleasePbufferDCEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_EXT_pbuffer */
+-
+-#ifdef WGL_EXT_pixel_format
+-
+-static GLboolean _glewInit_WGL_EXT_pixel_format (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglChoosePixelFormatEXT = (PFNWGLCHOOSEPIXELFORMATEXTPROC)glewGetProcAddress((const GLubyte*)"wglChoosePixelFormatEXT")) == NULL) || r;
+-  r = ((wglGetPixelFormatAttribfvEXT = (PFNWGLGETPIXELFORMATATTRIBFVEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribfvEXT")) == NULL) || r;
+-  r = ((wglGetPixelFormatAttribivEXT = (PFNWGLGETPIXELFORMATATTRIBIVEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribivEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_EXT_pixel_format */
+-
+-#ifdef WGL_EXT_pixel_format_packed_float
+-
+-#endif /* WGL_EXT_pixel_format_packed_float */
+-
+-#ifdef WGL_EXT_swap_control
+-
+-static GLboolean _glewInit_WGL_EXT_swap_control (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetSwapIntervalEXT")) == NULL) || r;
+-  r = ((wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)glewGetProcAddress((const GLubyte*)"wglSwapIntervalEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_EXT_swap_control */
+-
+-#ifdef WGL_I3D_digital_video_control
+-
+-static GLboolean _glewInit_WGL_I3D_digital_video_control (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetDigitalVideoParametersI3D = (PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetDigitalVideoParametersI3D")) == NULL) || r;
+-  r = ((wglSetDigitalVideoParametersI3D = (PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglSetDigitalVideoParametersI3D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_I3D_digital_video_control */
+-
+-#ifdef WGL_I3D_gamma
+-
+-static GLboolean _glewInit_WGL_I3D_gamma (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetGammaTableI3D = (PFNWGLGETGAMMATABLEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGammaTableI3D")) == NULL) || r;
+-  r = ((wglGetGammaTableParametersI3D = (PFNWGLGETGAMMATABLEPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGammaTableParametersI3D")) == NULL) || r;
+-  r = ((wglSetGammaTableI3D = (PFNWGLSETGAMMATABLEI3DPROC)glewGetProcAddress((const GLubyte*)"wglSetGammaTableI3D")) == NULL) || r;
+-  r = ((wglSetGammaTableParametersI3D = (PFNWGLSETGAMMATABLEPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglSetGammaTableParametersI3D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_I3D_gamma */
+-
+-#ifdef WGL_I3D_genlock
+-
+-static GLboolean _glewInit_WGL_I3D_genlock (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglDisableGenlockI3D = (PFNWGLDISABLEGENLOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglDisableGenlockI3D")) == NULL) || r;
+-  r = ((wglEnableGenlockI3D = (PFNWGLENABLEGENLOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglEnableGenlockI3D")) == NULL) || r;
+-  r = ((wglGenlockSampleRateI3D = (PFNWGLGENLOCKSAMPLERATEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSampleRateI3D")) == NULL) || r;
+-  r = ((wglGenlockSourceDelayI3D = (PFNWGLGENLOCKSOURCEDELAYI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSourceDelayI3D")) == NULL) || r;
+-  r = ((wglGenlockSourceEdgeI3D = (PFNWGLGENLOCKSOURCEEDGEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSourceEdgeI3D")) == NULL) || r;
+-  r = ((wglGenlockSourceI3D = (PFNWGLGENLOCKSOURCEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSourceI3D")) == NULL) || r;
+-  r = ((wglGetGenlockSampleRateI3D = (PFNWGLGETGENLOCKSAMPLERATEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSampleRateI3D")) == NULL) || r;
+-  r = ((wglGetGenlockSourceDelayI3D = (PFNWGLGETGENLOCKSOURCEDELAYI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSourceDelayI3D")) == NULL) || r;
+-  r = ((wglGetGenlockSourceEdgeI3D = (PFNWGLGETGENLOCKSOURCEEDGEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSourceEdgeI3D")) == NULL) || r;
+-  r = ((wglGetGenlockSourceI3D = (PFNWGLGETGENLOCKSOURCEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSourceI3D")) == NULL) || r;
+-  r = ((wglIsEnabledGenlockI3D = (PFNWGLISENABLEDGENLOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglIsEnabledGenlockI3D")) == NULL) || r;
+-  r = ((wglQueryGenlockMaxSourceDelayI3D = (PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC)glewGetProcAddress((const GLubyte*)"wglQueryGenlockMaxSourceDelayI3D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_I3D_genlock */
+-
+-#ifdef WGL_I3D_image_buffer
+-
+-static GLboolean _glewInit_WGL_I3D_image_buffer (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglAssociateImageBufferEventsI3D = (PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC)glewGetProcAddress((const GLubyte*)"wglAssociateImageBufferEventsI3D")) == NULL) || r;
+-  r = ((wglCreateImageBufferI3D = (PFNWGLCREATEIMAGEBUFFERI3DPROC)glewGetProcAddress((const GLubyte*)"wglCreateImageBufferI3D")) == NULL) || r;
+-  r = ((wglDestroyImageBufferI3D = (PFNWGLDESTROYIMAGEBUFFERI3DPROC)glewGetProcAddress((const GLubyte*)"wglDestroyImageBufferI3D")) == NULL) || r;
+-  r = ((wglReleaseImageBufferEventsI3D = (PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC)glewGetProcAddress((const GLubyte*)"wglReleaseImageBufferEventsI3D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_I3D_image_buffer */
+-
+-#ifdef WGL_I3D_swap_frame_lock
+-
+-static GLboolean _glewInit_WGL_I3D_swap_frame_lock (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglDisableFrameLockI3D = (PFNWGLDISABLEFRAMELOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglDisableFrameLockI3D")) == NULL) || r;
+-  r = ((wglEnableFrameLockI3D = (PFNWGLENABLEFRAMELOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglEnableFrameLockI3D")) == NULL) || r;
+-  r = ((wglIsEnabledFrameLockI3D = (PFNWGLISENABLEDFRAMELOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglIsEnabledFrameLockI3D")) == NULL) || r;
+-  r = ((wglQueryFrameLockMasterI3D = (PFNWGLQUERYFRAMELOCKMASTERI3DPROC)glewGetProcAddress((const GLubyte*)"wglQueryFrameLockMasterI3D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_I3D_swap_frame_lock */
+-
+-#ifdef WGL_I3D_swap_frame_usage
+-
+-static GLboolean _glewInit_WGL_I3D_swap_frame_usage (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglBeginFrameTrackingI3D = (PFNWGLBEGINFRAMETRACKINGI3DPROC)glewGetProcAddress((const GLubyte*)"wglBeginFrameTrackingI3D")) == NULL) || r;
+-  r = ((wglEndFrameTrackingI3D = (PFNWGLENDFRAMETRACKINGI3DPROC)glewGetProcAddress((const GLubyte*)"wglEndFrameTrackingI3D")) == NULL) || r;
+-  r = ((wglGetFrameUsageI3D = (PFNWGLGETFRAMEUSAGEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetFrameUsageI3D")) == NULL) || r;
+-  r = ((wglQueryFrameTrackingI3D = (PFNWGLQUERYFRAMETRACKINGI3DPROC)glewGetProcAddress((const GLubyte*)"wglQueryFrameTrackingI3D")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_I3D_swap_frame_usage */
+-
+-#ifdef WGL_NV_float_buffer
+-
+-#endif /* WGL_NV_float_buffer */
+-
+-#ifdef WGL_NV_gpu_affinity
+-
+-static GLboolean _glewInit_WGL_NV_gpu_affinity (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglCreateAffinityDCNV = (PFNWGLCREATEAFFINITYDCNVPROC)glewGetProcAddress((const GLubyte*)"wglCreateAffinityDCNV")) == NULL) || r;
+-  r = ((wglDeleteDCNV = (PFNWGLDELETEDCNVPROC)glewGetProcAddress((const GLubyte*)"wglDeleteDCNV")) == NULL) || r;
+-  r = ((wglEnumGpuDevicesNV = (PFNWGLENUMGPUDEVICESNVPROC)glewGetProcAddress((const GLubyte*)"wglEnumGpuDevicesNV")) == NULL) || r;
+-  r = ((wglEnumGpusFromAffinityDCNV = (PFNWGLENUMGPUSFROMAFFINITYDCNVPROC)glewGetProcAddress((const GLubyte*)"wglEnumGpusFromAffinityDCNV")) == NULL) || r;
+-  r = ((wglEnumGpusNV = (PFNWGLENUMGPUSNVPROC)glewGetProcAddress((const GLubyte*)"wglEnumGpusNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_NV_gpu_affinity */
+-
+-#ifdef WGL_NV_render_depth_texture
+-
+-#endif /* WGL_NV_render_depth_texture */
+-
+-#ifdef WGL_NV_render_texture_rectangle
+-
+-#endif /* WGL_NV_render_texture_rectangle */
+-
+-#ifdef WGL_NV_vertex_array_range
+-
+-static GLboolean _glewInit_WGL_NV_vertex_array_range (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"wglAllocateMemoryNV")) == NULL) || r;
+-  r = ((wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"wglFreeMemoryNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_NV_vertex_array_range */
+-
+-#ifdef WGL_OML_sync_control
+-
+-static GLboolean _glewInit_WGL_OML_sync_control (WGLEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((wglGetMscRateOML = (PFNWGLGETMSCRATEOMLPROC)glewGetProcAddress((const GLubyte*)"wglGetMscRateOML")) == NULL) || r;
+-  r = ((wglGetSyncValuesOML = (PFNWGLGETSYNCVALUESOMLPROC)glewGetProcAddress((const GLubyte*)"wglGetSyncValuesOML")) == NULL) || r;
+-  r = ((wglSwapBuffersMscOML = (PFNWGLSWAPBUFFERSMSCOMLPROC)glewGetProcAddress((const GLubyte*)"wglSwapBuffersMscOML")) == NULL) || r;
+-  r = ((wglSwapLayerBuffersMscOML = (PFNWGLSWAPLAYERBUFFERSMSCOMLPROC)glewGetProcAddress((const GLubyte*)"wglSwapLayerBuffersMscOML")) == NULL) || r;
+-  r = ((wglWaitForMscOML = (PFNWGLWAITFORMSCOMLPROC)glewGetProcAddress((const GLubyte*)"wglWaitForMscOML")) == NULL) || r;
+-  r = ((wglWaitForSbcOML = (PFNWGLWAITFORSBCOMLPROC)glewGetProcAddress((const GLubyte*)"wglWaitForSbcOML")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* WGL_OML_sync_control */
+-
+-/* ------------------------------------------------------------------------- */
+-
+-static PFNWGLGETEXTENSIONSSTRINGARBPROC _wglewGetExtensionsStringARB = NULL;
+-static PFNWGLGETEXTENSIONSSTRINGEXTPROC _wglewGetExtensionsStringEXT = NULL;
+-
+-GLboolean wglewGetExtension (const char* name)
+-{    
+-  GLubyte* p;
+-  GLubyte* end;
+-  GLuint len = _glewStrLen((const GLubyte*)name);
+-  if (_wglewGetExtensionsStringARB == NULL)
+-    if (_wglewGetExtensionsStringEXT == NULL)
+-      return GL_FALSE;
+-    else
+-      p = (GLubyte*)_wglewGetExtensionsStringEXT();
+-  else
+-    p = (GLubyte*)_wglewGetExtensionsStringARB(wglGetCurrentDC());
+-  if (0 == p) return GL_FALSE;
+-  end = p + _glewStrLen(p);
+-  while (p < end)
+-  {
+-    GLuint n = _glewStrCLen(p, ' ');
+-    if (len == n && _glewStrSame((const GLubyte*)name, p, n)) return GL_TRUE;
+-    p += n+1;
+-  }
+-  return GL_FALSE;
+-}
+-
+-GLenum wglewContextInit (WGLEW_CONTEXT_ARG_DEF_LIST)
+-{
+-  GLboolean crippled;
+-  /* find wgl extension string query functions */
+-  _wglewGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringARB");
+-  _wglewGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringEXT");
+-  /* initialize extensions */
+-  crippled = _wglewGetExtensionsStringARB == NULL && _wglewGetExtensionsStringEXT == NULL;
+-#ifdef WGL_3DFX_multisample
+-  CONST_CAST(WGLEW_3DFX_multisample) = wglewGetExtension("WGL_3DFX_multisample");
+-#endif /* WGL_3DFX_multisample */
+-#ifdef WGL_3DL_stereo_control
+-  CONST_CAST(WGLEW_3DL_stereo_control) = wglewGetExtension("WGL_3DL_stereo_control");
+-  if (glewExperimental || WGLEW_3DL_stereo_control|| crippled) CONST_CAST(WGLEW_3DL_stereo_control)= !_glewInit_WGL_3DL_stereo_control(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_3DL_stereo_control */
+-#ifdef WGL_ARB_buffer_region
+-  CONST_CAST(WGLEW_ARB_buffer_region) = wglewGetExtension("WGL_ARB_buffer_region");
+-  if (glewExperimental || WGLEW_ARB_buffer_region|| crippled) CONST_CAST(WGLEW_ARB_buffer_region)= !_glewInit_WGL_ARB_buffer_region(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_ARB_buffer_region */
+-#ifdef WGL_ARB_extensions_string
+-  CONST_CAST(WGLEW_ARB_extensions_string) = wglewGetExtension("WGL_ARB_extensions_string");
+-  if (glewExperimental || WGLEW_ARB_extensions_string|| crippled) CONST_CAST(WGLEW_ARB_extensions_string)= !_glewInit_WGL_ARB_extensions_string(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_ARB_extensions_string */
+-#ifdef WGL_ARB_make_current_read
+-  CONST_CAST(WGLEW_ARB_make_current_read) = wglewGetExtension("WGL_ARB_make_current_read");
+-  if (glewExperimental || WGLEW_ARB_make_current_read|| crippled) CONST_CAST(WGLEW_ARB_make_current_read)= !_glewInit_WGL_ARB_make_current_read(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_ARB_make_current_read */
+-#ifdef WGL_ARB_multisample
+-  CONST_CAST(WGLEW_ARB_multisample) = wglewGetExtension("WGL_ARB_multisample");
+-#endif /* WGL_ARB_multisample */
+-#ifdef WGL_ARB_pbuffer
+-  CONST_CAST(WGLEW_ARB_pbuffer) = wglewGetExtension("WGL_ARB_pbuffer");
+-  if (glewExperimental || WGLEW_ARB_pbuffer|| crippled) CONST_CAST(WGLEW_ARB_pbuffer)= !_glewInit_WGL_ARB_pbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_ARB_pbuffer */
+-#ifdef WGL_ARB_pixel_format
+-  CONST_CAST(WGLEW_ARB_pixel_format) = wglewGetExtension("WGL_ARB_pixel_format");
+-  if (glewExperimental || WGLEW_ARB_pixel_format|| crippled) CONST_CAST(WGLEW_ARB_pixel_format)= !_glewInit_WGL_ARB_pixel_format(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_ARB_pixel_format */
+-#ifdef WGL_ARB_pixel_format_float
+-  CONST_CAST(WGLEW_ARB_pixel_format_float) = wglewGetExtension("WGL_ARB_pixel_format_float");
+-#endif /* WGL_ARB_pixel_format_float */
+-#ifdef WGL_ARB_render_texture
+-  CONST_CAST(WGLEW_ARB_render_texture) = wglewGetExtension("WGL_ARB_render_texture");
+-  if (glewExperimental || WGLEW_ARB_render_texture|| crippled) CONST_CAST(WGLEW_ARB_render_texture)= !_glewInit_WGL_ARB_render_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_ARB_render_texture */
+-#ifdef WGL_ATI_pixel_format_float
+-  CONST_CAST(WGLEW_ATI_pixel_format_float) = wglewGetExtension("WGL_ATI_pixel_format_float");
+-#endif /* WGL_ATI_pixel_format_float */
+-#ifdef WGL_ATI_render_texture_rectangle
+-  CONST_CAST(WGLEW_ATI_render_texture_rectangle) = wglewGetExtension("WGL_ATI_render_texture_rectangle");
+-#endif /* WGL_ATI_render_texture_rectangle */
+-#ifdef WGL_EXT_depth_float
+-  CONST_CAST(WGLEW_EXT_depth_float) = wglewGetExtension("WGL_EXT_depth_float");
+-#endif /* WGL_EXT_depth_float */
+-#ifdef WGL_EXT_display_color_table
+-  CONST_CAST(WGLEW_EXT_display_color_table) = wglewGetExtension("WGL_EXT_display_color_table");
+-  if (glewExperimental || WGLEW_EXT_display_color_table|| crippled) CONST_CAST(WGLEW_EXT_display_color_table)= !_glewInit_WGL_EXT_display_color_table(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_EXT_display_color_table */
+-#ifdef WGL_EXT_extensions_string
+-  CONST_CAST(WGLEW_EXT_extensions_string) = wglewGetExtension("WGL_EXT_extensions_string");
+-  if (glewExperimental || WGLEW_EXT_extensions_string|| crippled) CONST_CAST(WGLEW_EXT_extensions_string)= !_glewInit_WGL_EXT_extensions_string(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_EXT_extensions_string */
+-#ifdef WGL_EXT_framebuffer_sRGB
+-  CONST_CAST(WGLEW_EXT_framebuffer_sRGB) = wglewGetExtension("WGL_EXT_framebuffer_sRGB");
+-#endif /* WGL_EXT_framebuffer_sRGB */
+-#ifdef WGL_EXT_make_current_read
+-  CONST_CAST(WGLEW_EXT_make_current_read) = wglewGetExtension("WGL_EXT_make_current_read");
+-  if (glewExperimental || WGLEW_EXT_make_current_read|| crippled) CONST_CAST(WGLEW_EXT_make_current_read)= !_glewInit_WGL_EXT_make_current_read(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_EXT_make_current_read */
+-#ifdef WGL_EXT_multisample
+-  CONST_CAST(WGLEW_EXT_multisample) = wglewGetExtension("WGL_EXT_multisample");
+-#endif /* WGL_EXT_multisample */
+-#ifdef WGL_EXT_pbuffer
+-  CONST_CAST(WGLEW_EXT_pbuffer) = wglewGetExtension("WGL_EXT_pbuffer");
+-  if (glewExperimental || WGLEW_EXT_pbuffer|| crippled) CONST_CAST(WGLEW_EXT_pbuffer)= !_glewInit_WGL_EXT_pbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_EXT_pbuffer */
+-#ifdef WGL_EXT_pixel_format
+-  CONST_CAST(WGLEW_EXT_pixel_format) = wglewGetExtension("WGL_EXT_pixel_format");
+-  if (glewExperimental || WGLEW_EXT_pixel_format|| crippled) CONST_CAST(WGLEW_EXT_pixel_format)= !_glewInit_WGL_EXT_pixel_format(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_EXT_pixel_format */
+-#ifdef WGL_EXT_pixel_format_packed_float
+-  CONST_CAST(WGLEW_EXT_pixel_format_packed_float) = wglewGetExtension("WGL_EXT_pixel_format_packed_float");
+-#endif /* WGL_EXT_pixel_format_packed_float */
+-#ifdef WGL_EXT_swap_control
+-  CONST_CAST(WGLEW_EXT_swap_control) = wglewGetExtension("WGL_EXT_swap_control");
+-  if (glewExperimental || WGLEW_EXT_swap_control|| crippled) CONST_CAST(WGLEW_EXT_swap_control)= !_glewInit_WGL_EXT_swap_control(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_EXT_swap_control */
+-#ifdef WGL_I3D_digital_video_control
+-  CONST_CAST(WGLEW_I3D_digital_video_control) = wglewGetExtension("WGL_I3D_digital_video_control");
+-  if (glewExperimental || WGLEW_I3D_digital_video_control|| crippled) CONST_CAST(WGLEW_I3D_digital_video_control)= !_glewInit_WGL_I3D_digital_video_control(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_I3D_digital_video_control */
+-#ifdef WGL_I3D_gamma
+-  CONST_CAST(WGLEW_I3D_gamma) = wglewGetExtension("WGL_I3D_gamma");
+-  if (glewExperimental || WGLEW_I3D_gamma|| crippled) CONST_CAST(WGLEW_I3D_gamma)= !_glewInit_WGL_I3D_gamma(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_I3D_gamma */
+-#ifdef WGL_I3D_genlock
+-  CONST_CAST(WGLEW_I3D_genlock) = wglewGetExtension("WGL_I3D_genlock");
+-  if (glewExperimental || WGLEW_I3D_genlock|| crippled) CONST_CAST(WGLEW_I3D_genlock)= !_glewInit_WGL_I3D_genlock(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_I3D_genlock */
+-#ifdef WGL_I3D_image_buffer
+-  CONST_CAST(WGLEW_I3D_image_buffer) = wglewGetExtension("WGL_I3D_image_buffer");
+-  if (glewExperimental || WGLEW_I3D_image_buffer|| crippled) CONST_CAST(WGLEW_I3D_image_buffer)= !_glewInit_WGL_I3D_image_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_I3D_image_buffer */
+-#ifdef WGL_I3D_swap_frame_lock
+-  CONST_CAST(WGLEW_I3D_swap_frame_lock) = wglewGetExtension("WGL_I3D_swap_frame_lock");
+-  if (glewExperimental || WGLEW_I3D_swap_frame_lock|| crippled) CONST_CAST(WGLEW_I3D_swap_frame_lock)= !_glewInit_WGL_I3D_swap_frame_lock(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_I3D_swap_frame_lock */
+-#ifdef WGL_I3D_swap_frame_usage
+-  CONST_CAST(WGLEW_I3D_swap_frame_usage) = wglewGetExtension("WGL_I3D_swap_frame_usage");
+-  if (glewExperimental || WGLEW_I3D_swap_frame_usage|| crippled) CONST_CAST(WGLEW_I3D_swap_frame_usage)= !_glewInit_WGL_I3D_swap_frame_usage(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_I3D_swap_frame_usage */
+-#ifdef WGL_NV_float_buffer
+-  CONST_CAST(WGLEW_NV_float_buffer) = wglewGetExtension("WGL_NV_float_buffer");
+-#endif /* WGL_NV_float_buffer */
+-#ifdef WGL_NV_gpu_affinity
+-  CONST_CAST(WGLEW_NV_gpu_affinity) = wglewGetExtension("WGL_NV_gpu_affinity");
+-  if (glewExperimental || WGLEW_NV_gpu_affinity|| crippled) CONST_CAST(WGLEW_NV_gpu_affinity)= !_glewInit_WGL_NV_gpu_affinity(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_NV_gpu_affinity */
+-#ifdef WGL_NV_render_depth_texture
+-  CONST_CAST(WGLEW_NV_render_depth_texture) = wglewGetExtension("WGL_NV_render_depth_texture");
+-#endif /* WGL_NV_render_depth_texture */
+-#ifdef WGL_NV_render_texture_rectangle
+-  CONST_CAST(WGLEW_NV_render_texture_rectangle) = wglewGetExtension("WGL_NV_render_texture_rectangle");
+-#endif /* WGL_NV_render_texture_rectangle */
+-#ifdef WGL_NV_vertex_array_range
+-  CONST_CAST(WGLEW_NV_vertex_array_range) = wglewGetExtension("WGL_NV_vertex_array_range");
+-  if (glewExperimental || WGLEW_NV_vertex_array_range|| crippled) CONST_CAST(WGLEW_NV_vertex_array_range)= !_glewInit_WGL_NV_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_NV_vertex_array_range */
+-#ifdef WGL_OML_sync_control
+-  CONST_CAST(WGLEW_OML_sync_control) = wglewGetExtension("WGL_OML_sync_control");
+-  if (glewExperimental || WGLEW_OML_sync_control|| crippled) CONST_CAST(WGLEW_OML_sync_control)= !_glewInit_WGL_OML_sync_control(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* WGL_OML_sync_control */
+-
+-  return GLEW_OK;
+-}
+-
+-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)
+-
+-PFNGLXGETCURRENTDISPLAYPROC __glewXGetCurrentDisplay = NULL;
+-
+-PFNGLXCHOOSEFBCONFIGPROC __glewXChooseFBConfig = NULL;
+-PFNGLXCREATENEWCONTEXTPROC __glewXCreateNewContext = NULL;
+-PFNGLXCREATEPBUFFERPROC __glewXCreatePbuffer = NULL;
+-PFNGLXCREATEPIXMAPPROC __glewXCreatePixmap = NULL;
+-PFNGLXCREATEWINDOWPROC __glewXCreateWindow = NULL;
+-PFNGLXDESTROYPBUFFERPROC __glewXDestroyPbuffer = NULL;
+-PFNGLXDESTROYPIXMAPPROC __glewXDestroyPixmap = NULL;
+-PFNGLXDESTROYWINDOWPROC __glewXDestroyWindow = NULL;
+-PFNGLXGETCURRENTREADDRAWABLEPROC __glewXGetCurrentReadDrawable = NULL;
+-PFNGLXGETFBCONFIGATTRIBPROC __glewXGetFBConfigAttrib = NULL;
+-PFNGLXGETFBCONFIGSPROC __glewXGetFBConfigs = NULL;
+-PFNGLXGETSELECTEDEVENTPROC __glewXGetSelectedEvent = NULL;
+-PFNGLXGETVISUALFROMFBCONFIGPROC __glewXGetVisualFromFBConfig = NULL;
+-PFNGLXMAKECONTEXTCURRENTPROC __glewXMakeContextCurrent = NULL;
+-PFNGLXQUERYCONTEXTPROC __glewXQueryContext = NULL;
+-PFNGLXQUERYDRAWABLEPROC __glewXQueryDrawable = NULL;
+-PFNGLXSELECTEVENTPROC __glewXSelectEvent = NULL;
+-
+-PFNGLXBINDTEXIMAGEATIPROC __glewXBindTexImageATI = NULL;
+-PFNGLXDRAWABLEATTRIBATIPROC __glewXDrawableAttribATI = NULL;
+-PFNGLXRELEASETEXIMAGEATIPROC __glewXReleaseTexImageATI = NULL;
+-
+-PFNGLXFREECONTEXTEXTPROC __glewXFreeContextEXT = NULL;
+-PFNGLXGETCONTEXTIDEXTPROC __glewXGetContextIDEXT = NULL;
+-PFNGLXIMPORTCONTEXTEXTPROC __glewXImportContextEXT = NULL;
+-PFNGLXQUERYCONTEXTINFOEXTPROC __glewXQueryContextInfoEXT = NULL;
+-
+-PFNGLXBINDTEXIMAGEEXTPROC __glewXBindTexImageEXT = NULL;
+-PFNGLXRELEASETEXIMAGEEXTPROC __glewXReleaseTexImageEXT = NULL;
+-
+-PFNGLXGETAGPOFFSETMESAPROC __glewXGetAGPOffsetMESA = NULL;
+-
+-PFNGLXCOPYSUBBUFFERMESAPROC __glewXCopySubBufferMESA = NULL;
+-
+-PFNGLXCREATEGLXPIXMAPMESAPROC __glewXCreateGLXPixmapMESA = NULL;
+-
+-PFNGLXRELEASEBUFFERSMESAPROC __glewXReleaseBuffersMESA = NULL;
+-
+-PFNGLXSET3DFXMODEMESAPROC __glewXSet3DfxModeMESA = NULL;
+-
+-PFNGLXALLOCATEMEMORYNVPROC __glewXAllocateMemoryNV = NULL;
+-PFNGLXFREEMEMORYNVPROC __glewXFreeMemoryNV = NULL;
+-
+-PFNGLXGETMSCRATEOMLPROC __glewXGetMscRateOML = NULL;
+-PFNGLXGETSYNCVALUESOMLPROC __glewXGetSyncValuesOML = NULL;
+-PFNGLXSWAPBUFFERSMSCOMLPROC __glewXSwapBuffersMscOML = NULL;
+-PFNGLXWAITFORMSCOMLPROC __glewXWaitForMscOML = NULL;
+-PFNGLXWAITFORSBCOMLPROC __glewXWaitForSbcOML = NULL;
+-
+-PFNGLXCHOOSEFBCONFIGSGIXPROC __glewXChooseFBConfigSGIX = NULL;
+-PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC __glewXCreateContextWithConfigSGIX = NULL;
+-PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC __glewXCreateGLXPixmapWithConfigSGIX = NULL;
+-PFNGLXGETFBCONFIGATTRIBSGIXPROC __glewXGetFBConfigAttribSGIX = NULL;
+-PFNGLXGETFBCONFIGFROMVISUALSGIXPROC __glewXGetFBConfigFromVisualSGIX = NULL;
+-PFNGLXGETVISUALFROMFBCONFIGSGIXPROC __glewXGetVisualFromFBConfigSGIX = NULL;
+-
+-PFNGLXBINDHYPERPIPESGIXPROC __glewXBindHyperpipeSGIX = NULL;
+-PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC __glewXDestroyHyperpipeConfigSGIX = NULL;
+-PFNGLXHYPERPIPEATTRIBSGIXPROC __glewXHyperpipeAttribSGIX = NULL;
+-PFNGLXHYPERPIPECONFIGSGIXPROC __glewXHyperpipeConfigSGIX = NULL;
+-PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC __glewXQueryHyperpipeAttribSGIX = NULL;
+-PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC __glewXQueryHyperpipeBestAttribSGIX = NULL;
+-PFNGLXQUERYHYPERPIPECONFIGSGIXPROC __glewXQueryHyperpipeConfigSGIX = NULL;
+-PFNGLXQUERYHYPERPIPENETWORKSGIXPROC __glewXQueryHyperpipeNetworkSGIX = NULL;
+-
+-PFNGLXCREATEGLXPBUFFERSGIXPROC __glewXCreateGLXPbufferSGIX = NULL;
+-PFNGLXDESTROYGLXPBUFFERSGIXPROC __glewXDestroyGLXPbufferSGIX = NULL;
+-PFNGLXGETSELECTEDEVENTSGIXPROC __glewXGetSelectedEventSGIX = NULL;
+-PFNGLXQUERYGLXPBUFFERSGIXPROC __glewXQueryGLXPbufferSGIX = NULL;
+-PFNGLXSELECTEVENTSGIXPROC __glewXSelectEventSGIX = NULL;
+-
+-PFNGLXBINDSWAPBARRIERSGIXPROC __glewXBindSwapBarrierSGIX = NULL;
+-PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC __glewXQueryMaxSwapBarriersSGIX = NULL;
+-
+-PFNGLXJOINSWAPGROUPSGIXPROC __glewXJoinSwapGroupSGIX = NULL;
+-
+-PFNGLXBINDCHANNELTOWINDOWSGIXPROC __glewXBindChannelToWindowSGIX = NULL;
+-PFNGLXCHANNELRECTSGIXPROC __glewXChannelRectSGIX = NULL;
+-PFNGLXCHANNELRECTSYNCSGIXPROC __glewXChannelRectSyncSGIX = NULL;
+-PFNGLXQUERYCHANNELDELTASSGIXPROC __glewXQueryChannelDeltasSGIX = NULL;
+-PFNGLXQUERYCHANNELRECTSGIXPROC __glewXQueryChannelRectSGIX = NULL;
+-
+-PFNGLXCUSHIONSGIPROC __glewXCushionSGI = NULL;
+-
+-PFNGLXGETCURRENTREADDRAWABLESGIPROC __glewXGetCurrentReadDrawableSGI = NULL;
+-PFNGLXMAKECURRENTREADSGIPROC __glewXMakeCurrentReadSGI = NULL;
+-
+-PFNGLXSWAPINTERVALSGIPROC __glewXSwapIntervalSGI = NULL;
+-
+-PFNGLXGETVIDEOSYNCSGIPROC __glewXGetVideoSyncSGI = NULL;
+-PFNGLXWAITVIDEOSYNCSGIPROC __glewXWaitVideoSyncSGI = NULL;
+-
+-PFNGLXGETTRANSPARENTINDEXSUNPROC __glewXGetTransparentIndexSUN = NULL;
+-
+-PFNGLXGETVIDEORESIZESUNPROC __glewXGetVideoResizeSUN = NULL;
+-PFNGLXVIDEORESIZESUNPROC __glewXVideoResizeSUN = NULL;
+-
+-#if !defined(GLEW_MX)
+-
+-GLboolean __GLXEW_VERSION_1_0 = GL_FALSE;
+-GLboolean __GLXEW_VERSION_1_1 = GL_FALSE;
+-GLboolean __GLXEW_VERSION_1_2 = GL_FALSE;
+-GLboolean __GLXEW_VERSION_1_3 = GL_FALSE;
+-GLboolean __GLXEW_VERSION_1_4 = GL_FALSE;
+-GLboolean __GLXEW_3DFX_multisample = GL_FALSE;
+-GLboolean __GLXEW_ARB_fbconfig_float = GL_FALSE;
+-GLboolean __GLXEW_ARB_get_proc_address = GL_FALSE;
+-GLboolean __GLXEW_ARB_multisample = GL_FALSE;
+-GLboolean __GLXEW_ATI_pixel_format_float = GL_FALSE;
+-GLboolean __GLXEW_ATI_render_texture = GL_FALSE;
+-GLboolean __GLXEW_EXT_fbconfig_packed_float = GL_FALSE;
+-GLboolean __GLXEW_EXT_framebuffer_sRGB = GL_FALSE;
+-GLboolean __GLXEW_EXT_import_context = GL_FALSE;
+-GLboolean __GLXEW_EXT_scene_marker = GL_FALSE;
+-GLboolean __GLXEW_EXT_texture_from_pixmap = GL_FALSE;
+-GLboolean __GLXEW_EXT_visual_info = GL_FALSE;
+-GLboolean __GLXEW_EXT_visual_rating = GL_FALSE;
+-GLboolean __GLXEW_MESA_agp_offset = GL_FALSE;
+-GLboolean __GLXEW_MESA_copy_sub_buffer = GL_FALSE;
+-GLboolean __GLXEW_MESA_pixmap_colormap = GL_FALSE;
+-GLboolean __GLXEW_MESA_release_buffers = GL_FALSE;
+-GLboolean __GLXEW_MESA_set_3dfx_mode = GL_FALSE;
+-GLboolean __GLXEW_NV_float_buffer = GL_FALSE;
+-GLboolean __GLXEW_NV_vertex_array_range = GL_FALSE;
+-GLboolean __GLXEW_OML_swap_method = GL_FALSE;
+-GLboolean __GLXEW_OML_sync_control = GL_FALSE;
+-GLboolean __GLXEW_SGIS_blended_overlay = GL_FALSE;
+-GLboolean __GLXEW_SGIS_color_range = GL_FALSE;
+-GLboolean __GLXEW_SGIS_multisample = GL_FALSE;
+-GLboolean __GLXEW_SGIS_shared_multisample = GL_FALSE;
+-GLboolean __GLXEW_SGIX_fbconfig = GL_FALSE;
+-GLboolean __GLXEW_SGIX_hyperpipe = GL_FALSE;
+-GLboolean __GLXEW_SGIX_pbuffer = GL_FALSE;
+-GLboolean __GLXEW_SGIX_swap_barrier = GL_FALSE;
+-GLboolean __GLXEW_SGIX_swap_group = GL_FALSE;
+-GLboolean __GLXEW_SGIX_video_resize = GL_FALSE;
+-GLboolean __GLXEW_SGIX_visual_select_group = GL_FALSE;
+-GLboolean __GLXEW_SGI_cushion = GL_FALSE;
+-GLboolean __GLXEW_SGI_make_current_read = GL_FALSE;
+-GLboolean __GLXEW_SGI_swap_control = GL_FALSE;
+-GLboolean __GLXEW_SGI_video_sync = GL_FALSE;
+-GLboolean __GLXEW_SUN_get_transparent_index = GL_FALSE;
+-GLboolean __GLXEW_SUN_video_resize = GL_FALSE;
+-
+-#endif /* !GLEW_MX */
+-
+-#ifdef GLX_VERSION_1_2
+-
+-static GLboolean _glewInit_GLX_VERSION_1_2 (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXGetCurrentDisplay = (PFNGLXGETCURRENTDISPLAYPROC)glewGetProcAddress((const GLubyte*)"glXGetCurrentDisplay")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_VERSION_1_2 */
+-
+-#ifdef GLX_VERSION_1_3
+-
+-static GLboolean _glewInit_GLX_VERSION_1_3 (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXChooseFBConfig = (PFNGLXCHOOSEFBCONFIGPROC)glewGetProcAddress((const GLubyte*)"glXChooseFBConfig")) == NULL) || r;
+-  r = ((glXCreateNewContext = (PFNGLXCREATENEWCONTEXTPROC)glewGetProcAddress((const GLubyte*)"glXCreateNewContext")) == NULL) || r;
+-  r = ((glXCreatePbuffer = (PFNGLXCREATEPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glXCreatePbuffer")) == NULL) || r;
+-  r = ((glXCreatePixmap = (PFNGLXCREATEPIXMAPPROC)glewGetProcAddress((const GLubyte*)"glXCreatePixmap")) == NULL) || r;
+-  r = ((glXCreateWindow = (PFNGLXCREATEWINDOWPROC)glewGetProcAddress((const GLubyte*)"glXCreateWindow")) == NULL) || r;
+-  r = ((glXDestroyPbuffer = (PFNGLXDESTROYPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glXDestroyPbuffer")) == NULL) || r;
+-  r = ((glXDestroyPixmap = (PFNGLXDESTROYPIXMAPPROC)glewGetProcAddress((const GLubyte*)"glXDestroyPixmap")) == NULL) || r;
+-  r = ((glXDestroyWindow = (PFNGLXDESTROYWINDOWPROC)glewGetProcAddress((const GLubyte*)"glXDestroyWindow")) == NULL) || r;
+-  r = ((glXGetCurrentReadDrawable = (PFNGLXGETCURRENTREADDRAWABLEPROC)glewGetProcAddress((const GLubyte*)"glXGetCurrentReadDrawable")) == NULL) || r;
+-  r = ((glXGetFBConfigAttrib = (PFNGLXGETFBCONFIGATTRIBPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigAttrib")) == NULL) || r;
+-  r = ((glXGetFBConfigs = (PFNGLXGETFBCONFIGSPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigs")) == NULL) || r;
+-  r = ((glXGetSelectedEvent = (PFNGLXGETSELECTEDEVENTPROC)glewGetProcAddress((const GLubyte*)"glXGetSelectedEvent")) == NULL) || r;
+-  r = ((glXGetVisualFromFBConfig = (PFNGLXGETVISUALFROMFBCONFIGPROC)glewGetProcAddress((const GLubyte*)"glXGetVisualFromFBConfig")) == NULL) || r;
+-  r = ((glXMakeContextCurrent = (PFNGLXMAKECONTEXTCURRENTPROC)glewGetProcAddress((const GLubyte*)"glXMakeContextCurrent")) == NULL) || r;
+-  r = ((glXQueryContext = (PFNGLXQUERYCONTEXTPROC)glewGetProcAddress((const GLubyte*)"glXQueryContext")) == NULL) || r;
+-  r = ((glXQueryDrawable = (PFNGLXQUERYDRAWABLEPROC)glewGetProcAddress((const GLubyte*)"glXQueryDrawable")) == NULL) || r;
+-  r = ((glXSelectEvent = (PFNGLXSELECTEVENTPROC)glewGetProcAddress((const GLubyte*)"glXSelectEvent")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_VERSION_1_3 */
+-
+-#ifdef GLX_VERSION_1_4
+-
+-#endif /* GLX_VERSION_1_4 */
+-
+-#ifdef GLX_3DFX_multisample
+-
+-#endif /* GLX_3DFX_multisample */
+-
+-#ifdef GLX_ARB_fbconfig_float
+-
+-#endif /* GLX_ARB_fbconfig_float */
+-
+-#ifdef GLX_ARB_get_proc_address
+-
+-#endif /* GLX_ARB_get_proc_address */
+-
+-#ifdef GLX_ARB_multisample
+-
+-#endif /* GLX_ARB_multisample */
+-
+-#ifdef GLX_ATI_pixel_format_float
+-
+-#endif /* GLX_ATI_pixel_format_float */
+-
+-#ifdef GLX_ATI_render_texture
+-
+-static GLboolean _glewInit_GLX_ATI_render_texture (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXBindTexImageATI = (PFNGLXBINDTEXIMAGEATIPROC)glewGetProcAddress((const GLubyte*)"glXBindTexImageATI")) == NULL) || r;
+-  r = ((glXDrawableAttribATI = (PFNGLXDRAWABLEATTRIBATIPROC)glewGetProcAddress((const GLubyte*)"glXDrawableAttribATI")) == NULL) || r;
+-  r = ((glXReleaseTexImageATI = (PFNGLXRELEASETEXIMAGEATIPROC)glewGetProcAddress((const GLubyte*)"glXReleaseTexImageATI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_ATI_render_texture */
+-
+-#ifdef GLX_EXT_fbconfig_packed_float
+-
+-#endif /* GLX_EXT_fbconfig_packed_float */
+-
+-#ifdef GLX_EXT_framebuffer_sRGB
+-
+-#endif /* GLX_EXT_framebuffer_sRGB */
+-
+-#ifdef GLX_EXT_import_context
+-
+-static GLboolean _glewInit_GLX_EXT_import_context (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXFreeContextEXT = (PFNGLXFREECONTEXTEXTPROC)glewGetProcAddress((const GLubyte*)"glXFreeContextEXT")) == NULL) || r;
+-  r = ((glXGetContextIDEXT = (PFNGLXGETCONTEXTIDEXTPROC)glewGetProcAddress((const GLubyte*)"glXGetContextIDEXT")) == NULL) || r;
+-  r = ((glXImportContextEXT = (PFNGLXIMPORTCONTEXTEXTPROC)glewGetProcAddress((const GLubyte*)"glXImportContextEXT")) == NULL) || r;
+-  r = ((glXQueryContextInfoEXT = (PFNGLXQUERYCONTEXTINFOEXTPROC)glewGetProcAddress((const GLubyte*)"glXQueryContextInfoEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_EXT_import_context */
+-
+-#ifdef GLX_EXT_scene_marker
+-
+-#endif /* GLX_EXT_scene_marker */
+-
+-#ifdef GLX_EXT_texture_from_pixmap
+-
+-static GLboolean _glewInit_GLX_EXT_texture_from_pixmap (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXBindTexImageEXT = (PFNGLXBINDTEXIMAGEEXTPROC)glewGetProcAddress((const GLubyte*)"glXBindTexImageEXT")) == NULL) || r;
+-  r = ((glXReleaseTexImageEXT = (PFNGLXRELEASETEXIMAGEEXTPROC)glewGetProcAddress((const GLubyte*)"glXReleaseTexImageEXT")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_EXT_texture_from_pixmap */
+-
+-#ifdef GLX_EXT_visual_info
+-
+-#endif /* GLX_EXT_visual_info */
+-
+-#ifdef GLX_EXT_visual_rating
+-
+-#endif /* GLX_EXT_visual_rating */
+-
+-#ifdef GLX_MESA_agp_offset
+-
+-static GLboolean _glewInit_GLX_MESA_agp_offset (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXGetAGPOffsetMESA = (PFNGLXGETAGPOFFSETMESAPROC)glewGetProcAddress((const GLubyte*)"glXGetAGPOffsetMESA")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_MESA_agp_offset */
+-
+-#ifdef GLX_MESA_copy_sub_buffer
+-
+-static GLboolean _glewInit_GLX_MESA_copy_sub_buffer (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXCopySubBufferMESA = (PFNGLXCOPYSUBBUFFERMESAPROC)glewGetProcAddress((const GLubyte*)"glXCopySubBufferMESA")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_MESA_copy_sub_buffer */
+-
+-#ifdef GLX_MESA_pixmap_colormap
+-
+-static GLboolean _glewInit_GLX_MESA_pixmap_colormap (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXCreateGLXPixmapMESA = (PFNGLXCREATEGLXPIXMAPMESAPROC)glewGetProcAddress((const GLubyte*)"glXCreateGLXPixmapMESA")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_MESA_pixmap_colormap */
+-
+-#ifdef GLX_MESA_release_buffers
+-
+-static GLboolean _glewInit_GLX_MESA_release_buffers (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXReleaseBuffersMESA = (PFNGLXRELEASEBUFFERSMESAPROC)glewGetProcAddress((const GLubyte*)"glXReleaseBuffersMESA")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_MESA_release_buffers */
+-
+-#ifdef GLX_MESA_set_3dfx_mode
+-
+-static GLboolean _glewInit_GLX_MESA_set_3dfx_mode (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXSet3DfxModeMESA = (PFNGLXSET3DFXMODEMESAPROC)glewGetProcAddress((const GLubyte*)"glXSet3DfxModeMESA")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_MESA_set_3dfx_mode */
+-
+-#ifdef GLX_NV_float_buffer
+-
+-#endif /* GLX_NV_float_buffer */
+-
+-#ifdef GLX_NV_vertex_array_range
+-
+-static GLboolean _glewInit_GLX_NV_vertex_array_range (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXAllocateMemoryNV = (PFNGLXALLOCATEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"glXAllocateMemoryNV")) == NULL) || r;
+-  r = ((glXFreeMemoryNV = (PFNGLXFREEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"glXFreeMemoryNV")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_NV_vertex_array_range */
+-
+-#ifdef GLX_OML_swap_method
+-
+-#endif /* GLX_OML_swap_method */
+-
+-#ifdef GLX_OML_sync_control
+-
+-static GLboolean _glewInit_GLX_OML_sync_control (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXGetMscRateOML = (PFNGLXGETMSCRATEOMLPROC)glewGetProcAddress((const GLubyte*)"glXGetMscRateOML")) == NULL) || r;
+-  r = ((glXGetSyncValuesOML = (PFNGLXGETSYNCVALUESOMLPROC)glewGetProcAddress((const GLubyte*)"glXGetSyncValuesOML")) == NULL) || r;
+-  r = ((glXSwapBuffersMscOML = (PFNGLXSWAPBUFFERSMSCOMLPROC)glewGetProcAddress((const GLubyte*)"glXSwapBuffersMscOML")) == NULL) || r;
+-  r = ((glXWaitForMscOML = (PFNGLXWAITFORMSCOMLPROC)glewGetProcAddress((const GLubyte*)"glXWaitForMscOML")) == NULL) || r;
+-  r = ((glXWaitForSbcOML = (PFNGLXWAITFORSBCOMLPROC)glewGetProcAddress((const GLubyte*)"glXWaitForSbcOML")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_OML_sync_control */
+-
+-#ifdef GLX_SGIS_blended_overlay
+-
+-#endif /* GLX_SGIS_blended_overlay */
+-
+-#ifdef GLX_SGIS_color_range
+-
+-#endif /* GLX_SGIS_color_range */
+-
+-#ifdef GLX_SGIS_multisample
+-
+-#endif /* GLX_SGIS_multisample */
+-
+-#ifdef GLX_SGIS_shared_multisample
+-
+-#endif /* GLX_SGIS_shared_multisample */
+-
+-#ifdef GLX_SGIX_fbconfig
+-
+-static GLboolean _glewInit_GLX_SGIX_fbconfig (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXChooseFBConfigSGIX = (PFNGLXCHOOSEFBCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXChooseFBConfigSGIX")) == NULL) || r;
+-  r = ((glXCreateContextWithConfigSGIX = (PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXCreateContextWithConfigSGIX")) == NULL) || r;
+-  r = ((glXCreateGLXPixmapWithConfigSGIX = (PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXCreateGLXPixmapWithConfigSGIX")) == NULL) || r;
+-  r = ((glXGetFBConfigAttribSGIX = (PFNGLXGETFBCONFIGATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigAttribSGIX")) == NULL) || r;
+-  r = ((glXGetFBConfigFromVisualSGIX = (PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigFromVisualSGIX")) == NULL) || r;
+-  r = ((glXGetVisualFromFBConfigSGIX = (PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetVisualFromFBConfigSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGIX_fbconfig */
+-
+-#ifdef GLX_SGIX_hyperpipe
+-
+-static GLboolean _glewInit_GLX_SGIX_hyperpipe (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXBindHyperpipeSGIX = (PFNGLXBINDHYPERPIPESGIXPROC)glewGetProcAddress((const GLubyte*)"glXBindHyperpipeSGIX")) == NULL) || r;
+-  r = ((glXDestroyHyperpipeConfigSGIX = (PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXDestroyHyperpipeConfigSGIX")) == NULL) || r;
+-  r = ((glXHyperpipeAttribSGIX = (PFNGLXHYPERPIPEATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXHyperpipeAttribSGIX")) == NULL) || r;
+-  r = ((glXHyperpipeConfigSGIX = (PFNGLXHYPERPIPECONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXHyperpipeConfigSGIX")) == NULL) || r;
+-  r = ((glXQueryHyperpipeAttribSGIX = (PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeAttribSGIX")) == NULL) || r;
+-  r = ((glXQueryHyperpipeBestAttribSGIX = (PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeBestAttribSGIX")) == NULL) || r;
+-  r = ((glXQueryHyperpipeConfigSGIX = (PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeConfigSGIX")) == NULL) || r;
+-  r = ((glXQueryHyperpipeNetworkSGIX = (PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeNetworkSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGIX_hyperpipe */
+-
+-#ifdef GLX_SGIX_pbuffer
+-
+-static GLboolean _glewInit_GLX_SGIX_pbuffer (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXCreateGLXPbufferSGIX = (PFNGLXCREATEGLXPBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXCreateGLXPbufferSGIX")) == NULL) || r;
+-  r = ((glXDestroyGLXPbufferSGIX = (PFNGLXDESTROYGLXPBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXDestroyGLXPbufferSGIX")) == NULL) || r;
+-  r = ((glXGetSelectedEventSGIX = (PFNGLXGETSELECTEDEVENTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetSelectedEventSGIX")) == NULL) || r;
+-  r = ((glXQueryGLXPbufferSGIX = (PFNGLXQUERYGLXPBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryGLXPbufferSGIX")) == NULL) || r;
+-  r = ((glXSelectEventSGIX = (PFNGLXSELECTEVENTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXSelectEventSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGIX_pbuffer */
+-
+-#ifdef GLX_SGIX_swap_barrier
+-
+-static GLboolean _glewInit_GLX_SGIX_swap_barrier (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXBindSwapBarrierSGIX = (PFNGLXBINDSWAPBARRIERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXBindSwapBarrierSGIX")) == NULL) || r;
+-  r = ((glXQueryMaxSwapBarriersSGIX = (PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryMaxSwapBarriersSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGIX_swap_barrier */
+-
+-#ifdef GLX_SGIX_swap_group
+-
+-static GLboolean _glewInit_GLX_SGIX_swap_group (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXJoinSwapGroupSGIX = (PFNGLXJOINSWAPGROUPSGIXPROC)glewGetProcAddress((const GLubyte*)"glXJoinSwapGroupSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGIX_swap_group */
+-
+-#ifdef GLX_SGIX_video_resize
+-
+-static GLboolean _glewInit_GLX_SGIX_video_resize (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXBindChannelToWindowSGIX = (PFNGLXBINDCHANNELTOWINDOWSGIXPROC)glewGetProcAddress((const GLubyte*)"glXBindChannelToWindowSGIX")) == NULL) || r;
+-  r = ((glXChannelRectSGIX = (PFNGLXCHANNELRECTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXChannelRectSGIX")) == NULL) || r;
+-  r = ((glXChannelRectSyncSGIX = (PFNGLXCHANNELRECTSYNCSGIXPROC)glewGetProcAddress((const GLubyte*)"glXChannelRectSyncSGIX")) == NULL) || r;
+-  r = ((glXQueryChannelDeltasSGIX = (PFNGLXQUERYCHANNELDELTASSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryChannelDeltasSGIX")) == NULL) || r;
+-  r = ((glXQueryChannelRectSGIX = (PFNGLXQUERYCHANNELRECTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryChannelRectSGIX")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGIX_video_resize */
+-
+-#ifdef GLX_SGIX_visual_select_group
+-
+-#endif /* GLX_SGIX_visual_select_group */
+-
+-#ifdef GLX_SGI_cushion
+-
+-static GLboolean _glewInit_GLX_SGI_cushion (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXCushionSGI = (PFNGLXCUSHIONSGIPROC)glewGetProcAddress((const GLubyte*)"glXCushionSGI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGI_cushion */
+-
+-#ifdef GLX_SGI_make_current_read
+-
+-static GLboolean _glewInit_GLX_SGI_make_current_read (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXGetCurrentReadDrawableSGI = (PFNGLXGETCURRENTREADDRAWABLESGIPROC)glewGetProcAddress((const GLubyte*)"glXGetCurrentReadDrawableSGI")) == NULL) || r;
+-  r = ((glXMakeCurrentReadSGI = (PFNGLXMAKECURRENTREADSGIPROC)glewGetProcAddress((const GLubyte*)"glXMakeCurrentReadSGI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGI_make_current_read */
+-
+-#ifdef GLX_SGI_swap_control
+-
+-static GLboolean _glewInit_GLX_SGI_swap_control (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXSwapIntervalSGI = (PFNGLXSWAPINTERVALSGIPROC)glewGetProcAddress((const GLubyte*)"glXSwapIntervalSGI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGI_swap_control */
+-
+-#ifdef GLX_SGI_video_sync
+-
+-static GLboolean _glewInit_GLX_SGI_video_sync (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXGetVideoSyncSGI = (PFNGLXGETVIDEOSYNCSGIPROC)glewGetProcAddress((const GLubyte*)"glXGetVideoSyncSGI")) == NULL) || r;
+-  r = ((glXWaitVideoSyncSGI = (PFNGLXWAITVIDEOSYNCSGIPROC)glewGetProcAddress((const GLubyte*)"glXWaitVideoSyncSGI")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SGI_video_sync */
+-
+-#ifdef GLX_SUN_get_transparent_index
+-
+-static GLboolean _glewInit_GLX_SUN_get_transparent_index (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXGetTransparentIndexSUN = (PFNGLXGETTRANSPARENTINDEXSUNPROC)glewGetProcAddress((const GLubyte*)"glXGetTransparentIndexSUN")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SUN_get_transparent_index */
+-
+-#ifdef GLX_SUN_video_resize
+-
+-static GLboolean _glewInit_GLX_SUN_video_resize (GLXEW_CONTEXT_ARG_DEF_INIT)
+-{
+-  GLboolean r = GL_FALSE;
+-
+-  r = ((glXGetVideoResizeSUN = (PFNGLXGETVIDEORESIZESUNPROC)glewGetProcAddress((const GLubyte*)"glXGetVideoResizeSUN")) == NULL) || r;
+-  r = ((glXVideoResizeSUN = (PFNGLXVIDEORESIZESUNPROC)glewGetProcAddress((const GLubyte*)"glXVideoResizeSUN")) == NULL) || r;
+-
+-  return r;
+-}
+-
+-#endif /* GLX_SUN_video_resize */
+-
+-/* ------------------------------------------------------------------------ */
+-
+-GLboolean glxewGetExtension (const char* name)
+-{    
+-  GLubyte* p;
+-  GLubyte* end;
+-  GLuint len = _glewStrLen((const GLubyte*)name);
+-/*   if (glXQueryExtensionsString == NULL || glXGetCurrentDisplay == NULL) return GL_FALSE; */
+-/*   p = (GLubyte*)glXQueryExtensionsString(glXGetCurrentDisplay(), DefaultScreen(glXGetCurrentDisplay())); */
+-  if (glXGetClientString == NULL || glXGetCurrentDisplay == NULL) return GL_FALSE;
+-  p = (GLubyte*)glXGetClientString(glXGetCurrentDisplay(), GLX_EXTENSIONS);
+-  if (0 == p) return GL_FALSE;
+-  end = p + _glewStrLen(p);
+-  while (p < end)
+-  {
+-    GLuint n = _glewStrCLen(p, ' ');
+-    if (len == n && _glewStrSame((const GLubyte*)name, p, n)) return GL_TRUE;
+-    p += n+1;
+-  }
+-  return GL_FALSE;
+-}
+-
+-GLenum glxewContextInit (GLXEW_CONTEXT_ARG_DEF_LIST)
+-{
+-  int major, minor;
+-  /* initialize core GLX 1.2 */
+-  if (_glewInit_GLX_VERSION_1_2(GLEW_CONTEXT_ARG_VAR_INIT)) return GLEW_ERROR_GLX_VERSION_11_ONLY;
+-  /* initialize flags */
+-  CONST_CAST(GLXEW_VERSION_1_0) = GL_TRUE;
+-  CONST_CAST(GLXEW_VERSION_1_1) = GL_TRUE;
+-  CONST_CAST(GLXEW_VERSION_1_2) = GL_TRUE;
+-  CONST_CAST(GLXEW_VERSION_1_3) = GL_TRUE;
+-  CONST_CAST(GLXEW_VERSION_1_4) = GL_TRUE;
+-  /* query GLX version */
+-  glXQueryVersion(glXGetCurrentDisplay(), &major, &minor);
+-  if (major == 1 && minor <= 3)
+-  {
+-    switch (minor)
+-    {
+-      case 3:
+-      CONST_CAST(GLXEW_VERSION_1_4) = GL_FALSE;
+-      break;
+-      case 2:
+-      CONST_CAST(GLXEW_VERSION_1_4) = GL_FALSE;
+-      CONST_CAST(GLXEW_VERSION_1_3) = GL_FALSE;
+-      break;
+-      default:
+-      return GLEW_ERROR_GLX_VERSION_11_ONLY;
+-      break;
+-    }
+-  }
+-  /* initialize extensions */
+-#ifdef GLX_VERSION_1_3
+-  if (glewExperimental || GLXEW_VERSION_1_3) CONST_CAST(GLXEW_VERSION_1_3) = !_glewInit_GLX_VERSION_1_3(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_VERSION_1_3 */
+-#ifdef GLX_3DFX_multisample
+-  CONST_CAST(GLXEW_3DFX_multisample) = glxewGetExtension("GLX_3DFX_multisample");
+-#endif /* GLX_3DFX_multisample */
+-#ifdef GLX_ARB_fbconfig_float
+-  CONST_CAST(GLXEW_ARB_fbconfig_float) = glxewGetExtension("GLX_ARB_fbconfig_float");
+-#endif /* GLX_ARB_fbconfig_float */
+-#ifdef GLX_ARB_get_proc_address
+-  CONST_CAST(GLXEW_ARB_get_proc_address) = glxewGetExtension("GLX_ARB_get_proc_address");
+-#endif /* GLX_ARB_get_proc_address */
+-#ifdef GLX_ARB_multisample
+-  CONST_CAST(GLXEW_ARB_multisample) = glxewGetExtension("GLX_ARB_multisample");
+-#endif /* GLX_ARB_multisample */
+-#ifdef GLX_ATI_pixel_format_float
+-  CONST_CAST(GLXEW_ATI_pixel_format_float) = glxewGetExtension("GLX_ATI_pixel_format_float");
+-#endif /* GLX_ATI_pixel_format_float */
+-#ifdef GLX_ATI_render_texture
+-  CONST_CAST(GLXEW_ATI_render_texture) = glxewGetExtension("GLX_ATI_render_texture");
+-  if (glewExperimental || GLXEW_ATI_render_texture) CONST_CAST(GLXEW_ATI_render_texture) = !_glewInit_GLX_ATI_render_texture(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_ATI_render_texture */
+-#ifdef GLX_EXT_fbconfig_packed_float
+-  CONST_CAST(GLXEW_EXT_fbconfig_packed_float) = glxewGetExtension("GLX_EXT_fbconfig_packed_float");
+-#endif /* GLX_EXT_fbconfig_packed_float */
+-#ifdef GLX_EXT_framebuffer_sRGB
+-  CONST_CAST(GLXEW_EXT_framebuffer_sRGB) = glxewGetExtension("GLX_EXT_framebuffer_sRGB");
+-#endif /* GLX_EXT_framebuffer_sRGB */
+-#ifdef GLX_EXT_import_context
+-  CONST_CAST(GLXEW_EXT_import_context) = glxewGetExtension("GLX_EXT_import_context");
+-  if (glewExperimental || GLXEW_EXT_import_context) CONST_CAST(GLXEW_EXT_import_context) = !_glewInit_GLX_EXT_import_context(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_EXT_import_context */
+-#ifdef GLX_EXT_scene_marker
+-  CONST_CAST(GLXEW_EXT_scene_marker) = glxewGetExtension("GLX_EXT_scene_marker");
+-#endif /* GLX_EXT_scene_marker */
+-#ifdef GLX_EXT_texture_from_pixmap
+-  CONST_CAST(GLXEW_EXT_texture_from_pixmap) = glxewGetExtension("GLX_EXT_texture_from_pixmap");
+-  if (glewExperimental || GLXEW_EXT_texture_from_pixmap) CONST_CAST(GLXEW_EXT_texture_from_pixmap) = !_glewInit_GLX_EXT_texture_from_pixmap(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_EXT_texture_from_pixmap */
+-#ifdef GLX_EXT_visual_info
+-  CONST_CAST(GLXEW_EXT_visual_info) = glxewGetExtension("GLX_EXT_visual_info");
+-#endif /* GLX_EXT_visual_info */
+-#ifdef GLX_EXT_visual_rating
+-  CONST_CAST(GLXEW_EXT_visual_rating) = glxewGetExtension("GLX_EXT_visual_rating");
+-#endif /* GLX_EXT_visual_rating */
+-#ifdef GLX_MESA_agp_offset
+-  CONST_CAST(GLXEW_MESA_agp_offset) = glxewGetExtension("GLX_MESA_agp_offset");
+-  if (glewExperimental || GLXEW_MESA_agp_offset) CONST_CAST(GLXEW_MESA_agp_offset) = !_glewInit_GLX_MESA_agp_offset(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_MESA_agp_offset */
+-#ifdef GLX_MESA_copy_sub_buffer
+-  CONST_CAST(GLXEW_MESA_copy_sub_buffer) = glxewGetExtension("GLX_MESA_copy_sub_buffer");
+-  if (glewExperimental || GLXEW_MESA_copy_sub_buffer) CONST_CAST(GLXEW_MESA_copy_sub_buffer) = !_glewInit_GLX_MESA_copy_sub_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_MESA_copy_sub_buffer */
+-#ifdef GLX_MESA_pixmap_colormap
+-  CONST_CAST(GLXEW_MESA_pixmap_colormap) = glxewGetExtension("GLX_MESA_pixmap_colormap");
+-  if (glewExperimental || GLXEW_MESA_pixmap_colormap) CONST_CAST(GLXEW_MESA_pixmap_colormap) = !_glewInit_GLX_MESA_pixmap_colormap(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_MESA_pixmap_colormap */
+-#ifdef GLX_MESA_release_buffers
+-  CONST_CAST(GLXEW_MESA_release_buffers) = glxewGetExtension("GLX_MESA_release_buffers");
+-  if (glewExperimental || GLXEW_MESA_release_buffers) CONST_CAST(GLXEW_MESA_release_buffers) = !_glewInit_GLX_MESA_release_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_MESA_release_buffers */
+-#ifdef GLX_MESA_set_3dfx_mode
+-  CONST_CAST(GLXEW_MESA_set_3dfx_mode) = glxewGetExtension("GLX_MESA_set_3dfx_mode");
+-  if (glewExperimental || GLXEW_MESA_set_3dfx_mode) CONST_CAST(GLXEW_MESA_set_3dfx_mode) = !_glewInit_GLX_MESA_set_3dfx_mode(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_MESA_set_3dfx_mode */
+-#ifdef GLX_NV_float_buffer
+-  CONST_CAST(GLXEW_NV_float_buffer) = glxewGetExtension("GLX_NV_float_buffer");
+-#endif /* GLX_NV_float_buffer */
+-#ifdef GLX_NV_vertex_array_range
+-  CONST_CAST(GLXEW_NV_vertex_array_range) = glxewGetExtension("GLX_NV_vertex_array_range");
+-  if (glewExperimental || GLXEW_NV_vertex_array_range) CONST_CAST(GLXEW_NV_vertex_array_range) = !_glewInit_GLX_NV_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_NV_vertex_array_range */
+-#ifdef GLX_OML_swap_method
+-  CONST_CAST(GLXEW_OML_swap_method) = glxewGetExtension("GLX_OML_swap_method");
+-#endif /* GLX_OML_swap_method */
+-#ifdef GLX_OML_sync_control
+-  CONST_CAST(GLXEW_OML_sync_control) = glxewGetExtension("GLX_OML_sync_control");
+-  if (glewExperimental || GLXEW_OML_sync_control) CONST_CAST(GLXEW_OML_sync_control) = !_glewInit_GLX_OML_sync_control(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_OML_sync_control */
+-#ifdef GLX_SGIS_blended_overlay
+-  CONST_CAST(GLXEW_SGIS_blended_overlay) = glxewGetExtension("GLX_SGIS_blended_overlay");
+-#endif /* GLX_SGIS_blended_overlay */
+-#ifdef GLX_SGIS_color_range
+-  CONST_CAST(GLXEW_SGIS_color_range) = glxewGetExtension("GLX_SGIS_color_range");
+-#endif /* GLX_SGIS_color_range */
+-#ifdef GLX_SGIS_multisample
+-  CONST_CAST(GLXEW_SGIS_multisample) = glxewGetExtension("GLX_SGIS_multisample");
+-#endif /* GLX_SGIS_multisample */
+-#ifdef GLX_SGIS_shared_multisample
+-  CONST_CAST(GLXEW_SGIS_shared_multisample) = glxewGetExtension("GLX_SGIS_shared_multisample");
+-#endif /* GLX_SGIS_shared_multisample */
+-#ifdef GLX_SGIX_fbconfig
+-  CONST_CAST(GLXEW_SGIX_fbconfig) = glxewGetExtension("GLX_SGIX_fbconfig");
+-  if (glewExperimental || GLXEW_SGIX_fbconfig) CONST_CAST(GLXEW_SGIX_fbconfig) = !_glewInit_GLX_SGIX_fbconfig(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGIX_fbconfig */
+-#ifdef GLX_SGIX_hyperpipe
+-  CONST_CAST(GLXEW_SGIX_hyperpipe) = glxewGetExtension("GLX_SGIX_hyperpipe");
+-  if (glewExperimental || GLXEW_SGIX_hyperpipe) CONST_CAST(GLXEW_SGIX_hyperpipe) = !_glewInit_GLX_SGIX_hyperpipe(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGIX_hyperpipe */
+-#ifdef GLX_SGIX_pbuffer
+-  CONST_CAST(GLXEW_SGIX_pbuffer) = glxewGetExtension("GLX_SGIX_pbuffer");
+-  if (glewExperimental || GLXEW_SGIX_pbuffer) CONST_CAST(GLXEW_SGIX_pbuffer) = !_glewInit_GLX_SGIX_pbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGIX_pbuffer */
+-#ifdef GLX_SGIX_swap_barrier
+-  CONST_CAST(GLXEW_SGIX_swap_barrier) = glxewGetExtension("GLX_SGIX_swap_barrier");
+-  if (glewExperimental || GLXEW_SGIX_swap_barrier) CONST_CAST(GLXEW_SGIX_swap_barrier) = !_glewInit_GLX_SGIX_swap_barrier(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGIX_swap_barrier */
+-#ifdef GLX_SGIX_swap_group
+-  CONST_CAST(GLXEW_SGIX_swap_group) = glxewGetExtension("GLX_SGIX_swap_group");
+-  if (glewExperimental || GLXEW_SGIX_swap_group) CONST_CAST(GLXEW_SGIX_swap_group) = !_glewInit_GLX_SGIX_swap_group(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGIX_swap_group */
+-#ifdef GLX_SGIX_video_resize
+-  CONST_CAST(GLXEW_SGIX_video_resize) = glxewGetExtension("GLX_SGIX_video_resize");
+-  if (glewExperimental || GLXEW_SGIX_video_resize) CONST_CAST(GLXEW_SGIX_video_resize) = !_glewInit_GLX_SGIX_video_resize(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGIX_video_resize */
+-#ifdef GLX_SGIX_visual_select_group
+-  CONST_CAST(GLXEW_SGIX_visual_select_group) = glxewGetExtension("GLX_SGIX_visual_select_group");
+-#endif /* GLX_SGIX_visual_select_group */
+-#ifdef GLX_SGI_cushion
+-  CONST_CAST(GLXEW_SGI_cushion) = glxewGetExtension("GLX_SGI_cushion");
+-  if (glewExperimental || GLXEW_SGI_cushion) CONST_CAST(GLXEW_SGI_cushion) = !_glewInit_GLX_SGI_cushion(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGI_cushion */
+-#ifdef GLX_SGI_make_current_read
+-  CONST_CAST(GLXEW_SGI_make_current_read) = glxewGetExtension("GLX_SGI_make_current_read");
+-  if (glewExperimental || GLXEW_SGI_make_current_read) CONST_CAST(GLXEW_SGI_make_current_read) = !_glewInit_GLX_SGI_make_current_read(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGI_make_current_read */
+-#ifdef GLX_SGI_swap_control
+-  CONST_CAST(GLXEW_SGI_swap_control) = glxewGetExtension("GLX_SGI_swap_control");
+-  if (glewExperimental || GLXEW_SGI_swap_control) CONST_CAST(GLXEW_SGI_swap_control) = !_glewInit_GLX_SGI_swap_control(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGI_swap_control */
+-#ifdef GLX_SGI_video_sync
+-  CONST_CAST(GLXEW_SGI_video_sync) = glxewGetExtension("GLX_SGI_video_sync");
+-  if (glewExperimental || GLXEW_SGI_video_sync) CONST_CAST(GLXEW_SGI_video_sync) = !_glewInit_GLX_SGI_video_sync(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SGI_video_sync */
+-#ifdef GLX_SUN_get_transparent_index
+-  CONST_CAST(GLXEW_SUN_get_transparent_index) = glxewGetExtension("GLX_SUN_get_transparent_index");
+-  if (glewExperimental || GLXEW_SUN_get_transparent_index) CONST_CAST(GLXEW_SUN_get_transparent_index) = !_glewInit_GLX_SUN_get_transparent_index(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SUN_get_transparent_index */
+-#ifdef GLX_SUN_video_resize
+-  CONST_CAST(GLXEW_SUN_video_resize) = glxewGetExtension("GLX_SUN_video_resize");
+-  if (glewExperimental || GLXEW_SUN_video_resize) CONST_CAST(GLXEW_SUN_video_resize) = !_glewInit_GLX_SUN_video_resize(GLEW_CONTEXT_ARG_VAR_INIT);
+-#endif /* GLX_SUN_video_resize */
+-
+-  return GLEW_OK;
+-}
+-
+-#endif /* !__APPLE__ || GLEW_APPLE_GLX */
+-
+-/* ------------------------------------------------------------------------ */
+-
+-const GLubyte* glewGetErrorString (GLenum error)
+-{
+-  static const GLubyte* _glewErrorString[] =
+-  {
+-    (const GLubyte*)"No error",
+-    (const GLubyte*)"Missing GL version",
+-    (const GLubyte*)"GL 1.1 and up are not supported",
+-    (const GLubyte*)"GLX 1.2 and up are not supported",
+-    (const GLubyte*)"Unknown error"
+-  };
+-  const int max_error = sizeof(_glewErrorString)/sizeof(*_glewErrorString) - 1;
+-  return _glewErrorString[(int)error > max_error ? max_error : (int)error];
+-}
+-
+-const GLubyte* glewGetString (GLenum name)
+-{
+-  static const GLubyte* _glewString[] =
+-  {
+-    (const GLubyte*)NULL,
+-    (const GLubyte*)"1.5.0",
+-    (const GLubyte*)"1",
+-    (const GLubyte*)"5",
+-    (const GLubyte*)"0"
+-  };
+-  const int max_string = sizeof(_glewString)/sizeof(*_glewString) - 1;
+-  return _glewString[(int)name > max_string ? 0 : (int)name];
+-}
+-
+-/* ------------------------------------------------------------------------ */
+-
+-GLboolean glewExperimental = GL_FALSE;
+-
+-#if !defined(GLEW_MX)
+-
+-#if defined(_WIN32)
+-extern GLenum wglewContextInit (void);
+-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX) /* _UNIX */
+-extern GLenum glxewContextInit (void);
+-#endif /* _WIN32 */
+-
+-GLenum glewInit ()
+-{
+-  GLenum r;
+-  if ( (r = glewContextInit()) ) return r;
+-#if defined(_WIN32)
+-  return wglewContextInit();
+-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX) /* _UNIX */
+-  return glxewContextInit();
+-#else
+-  return r;
+-#endif /* _WIN32 */
+-}
+-
+-#endif /* !GLEW_MX */
+-#ifdef GLEW_MX
+-GLboolean glewContextIsSupported (GLEWContext* ctx, const char* name)
+-#else
+-GLboolean glewIsSupported (const char* name)
+-#endif
+-{
+-  GLubyte* pos = (GLubyte*)name;
+-  GLuint len = _glewStrLen(pos);
+-  GLboolean ret = GL_TRUE;
+-  while (ret && len > 0)
+-  {
+-    if (_glewStrSame1(&pos, &len, (const GLubyte*)"GL_", 3))
+-    {
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"VERSION_", 8))
+-      {
+-#ifdef GL_VERSION_1_2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_2", 3))
+-        {
+-          ret = GLEW_VERSION_1_2;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_VERSION_1_3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_3", 3))
+-        {
+-          ret = GLEW_VERSION_1_3;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_VERSION_1_4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_4", 3))
+-        {
+-          ret = GLEW_VERSION_1_4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_VERSION_1_5
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_5", 3))
+-        {
+-          ret = GLEW_VERSION_1_5;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_VERSION_2_0
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"2_0", 3))
+-        {
+-          ret = GLEW_VERSION_2_0;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_VERSION_2_1
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"2_1", 3))
+-        {
+-          ret = GLEW_VERSION_2_1;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DFX_", 5))
+-      {
+-#ifdef GL_3DFX_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = GLEW_3DFX_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_3DFX_tbuffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"tbuffer", 7))
+-        {
+-          ret = GLEW_3DFX_tbuffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_3DFX_texture_compression_FXT1
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_FXT1", 24))
+-        {
+-          ret = GLEW_3DFX_texture_compression_FXT1;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"APPLE_", 6))
+-      {
+-#ifdef GL_APPLE_client_storage
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"client_storage", 14))
+-        {
+-          ret = GLEW_APPLE_client_storage;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_element_array
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"element_array", 13))
+-        {
+-          ret = GLEW_APPLE_element_array;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_fence
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fence", 5))
+-        {
+-          ret = GLEW_APPLE_fence;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_float_pixels
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_pixels", 12))
+-        {
+-          ret = GLEW_APPLE_float_pixels;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_flush_buffer_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"flush_buffer_range", 18))
+-        {
+-          ret = GLEW_APPLE_flush_buffer_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_pixel_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_buffer", 12))
+-        {
+-          ret = GLEW_APPLE_pixel_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_specular_vector
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"specular_vector", 15))
+-        {
+-          ret = GLEW_APPLE_specular_vector;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_texture_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_range", 13))
+-        {
+-          ret = GLEW_APPLE_texture_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_transform_hint
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"transform_hint", 14))
+-        {
+-          ret = GLEW_APPLE_transform_hint;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_vertex_array_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_object", 19))
+-        {
+-          ret = GLEW_APPLE_vertex_array_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_vertex_array_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
+-        {
+-          ret = GLEW_APPLE_vertex_array_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_APPLE_ycbcr_422
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ycbcr_422", 9))
+-        {
+-          ret = GLEW_APPLE_ycbcr_422;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ARB_", 4))
+-      {
+-#ifdef GL_ARB_color_buffer_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_buffer_float", 18))
+-        {
+-          ret = GLEW_ARB_color_buffer_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_depth_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_texture", 13))
+-        {
+-          ret = GLEW_ARB_depth_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_draw_buffers
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_buffers", 12))
+-        {
+-          ret = GLEW_ARB_draw_buffers;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_fragment_program
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program", 16))
+-        {
+-          ret = GLEW_ARB_fragment_program;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_fragment_program_shadow
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program_shadow", 23))
+-        {
+-          ret = GLEW_ARB_fragment_program_shadow;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_fragment_shader
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_shader", 15))
+-        {
+-          ret = GLEW_ARB_fragment_shader;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_half_float_pixel
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"half_float_pixel", 16))
+-        {
+-          ret = GLEW_ARB_half_float_pixel;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_imaging
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"imaging", 7))
+-        {
+-          ret = GLEW_ARB_imaging;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_matrix_palette
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"matrix_palette", 14))
+-        {
+-          ret = GLEW_ARB_matrix_palette;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = GLEW_ARB_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_multitexture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multitexture", 12))
+-        {
+-          ret = GLEW_ARB_multitexture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_occlusion_query
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"occlusion_query", 15))
+-        {
+-          ret = GLEW_ARB_occlusion_query;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_pixel_buffer_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_buffer_object", 19))
+-        {
+-          ret = GLEW_ARB_pixel_buffer_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_point_parameters
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_parameters", 16))
+-        {
+-          ret = GLEW_ARB_point_parameters;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_point_sprite
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_sprite", 12))
+-        {
+-          ret = GLEW_ARB_point_sprite;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_shader_objects
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shader_objects", 14))
+-        {
+-          ret = GLEW_ARB_shader_objects;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_shading_language_100
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shading_language_100", 20))
+-        {
+-          ret = GLEW_ARB_shading_language_100;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_shadow
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow", 6))
+-        {
+-          ret = GLEW_ARB_shadow;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_shadow_ambient
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow_ambient", 14))
+-        {
+-          ret = GLEW_ARB_shadow_ambient;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_border_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_border_clamp", 20))
+-        {
+-          ret = GLEW_ARB_texture_border_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_compression
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression", 19))
+-        {
+-          ret = GLEW_ARB_texture_compression;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_cube_map
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_cube_map", 16))
+-        {
+-          ret = GLEW_ARB_texture_cube_map;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_env_add
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_add", 15))
+-        {
+-          ret = GLEW_ARB_texture_env_add;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_env_combine
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine", 19))
+-        {
+-          ret = GLEW_ARB_texture_env_combine;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_env_crossbar
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_crossbar", 20))
+-        {
+-          ret = GLEW_ARB_texture_env_crossbar;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_env_dot3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_dot3", 16))
+-        {
+-          ret = GLEW_ARB_texture_env_dot3;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_float", 13))
+-        {
+-          ret = GLEW_ARB_texture_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_mirrored_repeat
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirrored_repeat", 23))
+-        {
+-          ret = GLEW_ARB_texture_mirrored_repeat;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_non_power_of_two
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_non_power_of_two", 24))
+-        {
+-          ret = GLEW_ARB_texture_non_power_of_two;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_texture_rectangle
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_rectangle", 17))
+-        {
+-          ret = GLEW_ARB_texture_rectangle;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_transpose_matrix
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"transpose_matrix", 16))
+-        {
+-          ret = GLEW_ARB_transpose_matrix;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_vertex_blend
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_blend", 12))
+-        {
+-          ret = GLEW_ARB_vertex_blend;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_vertex_buffer_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_buffer_object", 20))
+-        {
+-          ret = GLEW_ARB_vertex_buffer_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_vertex_program
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program", 14))
+-        {
+-          ret = GLEW_ARB_vertex_program;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_vertex_shader
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_shader", 13))
+-        {
+-          ret = GLEW_ARB_vertex_shader;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ARB_window_pos
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"window_pos", 10))
+-        {
+-          ret = GLEW_ARB_window_pos;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATIX_", 5))
+-      {
+-#ifdef GL_ATIX_point_sprites
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_sprites", 13))
+-        {
+-          ret = GLEW_ATIX_point_sprites;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATIX_texture_env_combine3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine3", 20))
+-        {
+-          ret = GLEW_ATIX_texture_env_combine3;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATIX_texture_env_route
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_route", 17))
+-        {
+-          ret = GLEW_ATIX_texture_env_route;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATIX_vertex_shader_output_point_size
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_shader_output_point_size", 31))
+-        {
+-          ret = GLEW_ATIX_vertex_shader_output_point_size;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATI_", 4))
+-      {
+-#ifdef GL_ATI_draw_buffers
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_buffers", 12))
+-        {
+-          ret = GLEW_ATI_draw_buffers;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_element_array
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"element_array", 13))
+-        {
+-          ret = GLEW_ATI_element_array;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_envmap_bumpmap
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"envmap_bumpmap", 14))
+-        {
+-          ret = GLEW_ATI_envmap_bumpmap;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_fragment_shader
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_shader", 15))
+-        {
+-          ret = GLEW_ATI_fragment_shader;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_map_object_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"map_object_buffer", 17))
+-        {
+-          ret = GLEW_ATI_map_object_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_pn_triangles
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pn_triangles", 12))
+-        {
+-          ret = GLEW_ATI_pn_triangles;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_separate_stencil
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"separate_stencil", 16))
+-        {
+-          ret = GLEW_ATI_separate_stencil;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_shader_texture_lod
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shader_texture_lod", 18))
+-        {
+-          ret = GLEW_ATI_shader_texture_lod;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_text_fragment_shader
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"text_fragment_shader", 20))
+-        {
+-          ret = GLEW_ATI_text_fragment_shader;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_texture_compression_3dc
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_3dc", 23))
+-        {
+-          ret = GLEW_ATI_texture_compression_3dc;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_texture_env_combine3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine3", 20))
+-        {
+-          ret = GLEW_ATI_texture_env_combine3;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_texture_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_float", 13))
+-        {
+-          ret = GLEW_ATI_texture_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_texture_mirror_once
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirror_once", 19))
+-        {
+-          ret = GLEW_ATI_texture_mirror_once;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_vertex_array_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_object", 19))
+-        {
+-          ret = GLEW_ATI_vertex_array_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_vertex_attrib_array_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_attrib_array_object", 26))
+-        {
+-          ret = GLEW_ATI_vertex_attrib_array_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_ATI_vertex_streams
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_streams", 14))
+-        {
+-          ret = GLEW_ATI_vertex_streams;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"EXT_", 4))
+-      {
+-#ifdef GL_EXT_422_pixels
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"422_pixels", 10))
+-        {
+-          ret = GLEW_EXT_422_pixels;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_Cg_shader
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"Cg_shader", 9))
+-        {
+-          ret = GLEW_EXT_Cg_shader;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_abgr
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"abgr", 4))
+-        {
+-          ret = GLEW_EXT_abgr;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_bgra
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"bgra", 4))
+-        {
+-          ret = GLEW_EXT_bgra;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_bindable_uniform
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"bindable_uniform", 16))
+-        {
+-          ret = GLEW_EXT_bindable_uniform;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_blend_color
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_color", 11))
+-        {
+-          ret = GLEW_EXT_blend_color;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_blend_equation_separate
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_equation_separate", 23))
+-        {
+-          ret = GLEW_EXT_blend_equation_separate;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_blend_func_separate
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_func_separate", 19))
+-        {
+-          ret = GLEW_EXT_blend_func_separate;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_blend_logic_op
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_logic_op", 14))
+-        {
+-          ret = GLEW_EXT_blend_logic_op;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_blend_minmax
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_minmax", 12))
+-        {
+-          ret = GLEW_EXT_blend_minmax;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_blend_subtract
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_subtract", 14))
+-        {
+-          ret = GLEW_EXT_blend_subtract;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_clip_volume_hint
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"clip_volume_hint", 16))
+-        {
+-          ret = GLEW_EXT_clip_volume_hint;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_cmyka
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cmyka", 5))
+-        {
+-          ret = GLEW_EXT_cmyka;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_color_subtable
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_subtable", 14))
+-        {
+-          ret = GLEW_EXT_color_subtable;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_compiled_vertex_array
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"compiled_vertex_array", 21))
+-        {
+-          ret = GLEW_EXT_compiled_vertex_array;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_convolution
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"convolution", 11))
+-        {
+-          ret = GLEW_EXT_convolution;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_coordinate_frame
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"coordinate_frame", 16))
+-        {
+-          ret = GLEW_EXT_coordinate_frame;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_copy_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"copy_texture", 12))
+-        {
+-          ret = GLEW_EXT_copy_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_cull_vertex
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cull_vertex", 11))
+-        {
+-          ret = GLEW_EXT_cull_vertex;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_depth_bounds_test
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_bounds_test", 17))
+-        {
+-          ret = GLEW_EXT_depth_bounds_test;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_draw_buffers2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_buffers2", 13))
+-        {
+-          ret = GLEW_EXT_draw_buffers2;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_draw_instanced
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_instanced", 14))
+-        {
+-          ret = GLEW_EXT_draw_instanced;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_draw_range_elements
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_range_elements", 19))
+-        {
+-          ret = GLEW_EXT_draw_range_elements;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_fog_coord
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_coord", 9))
+-        {
+-          ret = GLEW_EXT_fog_coord;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_fragment_lighting
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_lighting", 17))
+-        {
+-          ret = GLEW_EXT_fragment_lighting;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_framebuffer_blit
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_blit", 16))
+-        {
+-          ret = GLEW_EXT_framebuffer_blit;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_framebuffer_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_multisample", 23))
+-        {
+-          ret = GLEW_EXT_framebuffer_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_framebuffer_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_object", 18))
+-        {
+-          ret = GLEW_EXT_framebuffer_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_framebuffer_sRGB
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_sRGB", 16))
+-        {
+-          ret = GLEW_EXT_framebuffer_sRGB;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_geometry_shader4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"geometry_shader4", 16))
+-        {
+-          ret = GLEW_EXT_geometry_shader4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_gpu_program_parameters
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_program_parameters", 22))
+-        {
+-          ret = GLEW_EXT_gpu_program_parameters;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_gpu_shader4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_shader4", 11))
+-        {
+-          ret = GLEW_EXT_gpu_shader4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_histogram
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"histogram", 9))
+-        {
+-          ret = GLEW_EXT_histogram;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_index_array_formats
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_array_formats", 19))
+-        {
+-          ret = GLEW_EXT_index_array_formats;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_index_func
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_func", 10))
+-        {
+-          ret = GLEW_EXT_index_func;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_index_material
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_material", 14))
+-        {
+-          ret = GLEW_EXT_index_material;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_index_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_texture", 13))
+-        {
+-          ret = GLEW_EXT_index_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_light_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"light_texture", 13))
+-        {
+-          ret = GLEW_EXT_light_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_misc_attribute
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"misc_attribute", 14))
+-        {
+-          ret = GLEW_EXT_misc_attribute;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_multi_draw_arrays
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multi_draw_arrays", 17))
+-        {
+-          ret = GLEW_EXT_multi_draw_arrays;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = GLEW_EXT_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_packed_depth_stencil
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_depth_stencil", 20))
+-        {
+-          ret = GLEW_EXT_packed_depth_stencil;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_packed_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_float", 12))
+-        {
+-          ret = GLEW_EXT_packed_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_packed_pixels
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_pixels", 13))
+-        {
+-          ret = GLEW_EXT_packed_pixels;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_paletted_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"paletted_texture", 16))
+-        {
+-          ret = GLEW_EXT_paletted_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_pixel_buffer_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_buffer_object", 19))
+-        {
+-          ret = GLEW_EXT_pixel_buffer_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_pixel_transform
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_transform", 15))
+-        {
+-          ret = GLEW_EXT_pixel_transform;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_pixel_transform_color_table
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_transform_color_table", 27))
+-        {
+-          ret = GLEW_EXT_pixel_transform_color_table;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_point_parameters
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_parameters", 16))
+-        {
+-          ret = GLEW_EXT_point_parameters;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_polygon_offset
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"polygon_offset", 14))
+-        {
+-          ret = GLEW_EXT_polygon_offset;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_rescale_normal
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"rescale_normal", 14))
+-        {
+-          ret = GLEW_EXT_rescale_normal;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_scene_marker
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"scene_marker", 12))
+-        {
+-          ret = GLEW_EXT_scene_marker;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_secondary_color
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"secondary_color", 15))
+-        {
+-          ret = GLEW_EXT_secondary_color;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_separate_specular_color
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"separate_specular_color", 23))
+-        {
+-          ret = GLEW_EXT_separate_specular_color;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_shadow_funcs
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow_funcs", 12))
+-        {
+-          ret = GLEW_EXT_shadow_funcs;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_shared_texture_palette
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shared_texture_palette", 22))
+-        {
+-          ret = GLEW_EXT_shared_texture_palette;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_stencil_clear_tag
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stencil_clear_tag", 17))
+-        {
+-          ret = GLEW_EXT_stencil_clear_tag;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_stencil_two_side
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stencil_two_side", 16))
+-        {
+-          ret = GLEW_EXT_stencil_two_side;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_stencil_wrap
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stencil_wrap", 12))
+-        {
+-          ret = GLEW_EXT_stencil_wrap;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_subtexture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"subtexture", 10))
+-        {
+-          ret = GLEW_EXT_subtexture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture", 7))
+-        {
+-          ret = GLEW_EXT_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture3D
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture3D", 9))
+-        {
+-          ret = GLEW_EXT_texture3D;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_array
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_array", 13))
+-        {
+-          ret = GLEW_EXT_texture_array;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_buffer_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_buffer_object", 21))
+-        {
+-          ret = GLEW_EXT_texture_buffer_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_compression_dxt1
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_dxt1", 24))
+-        {
+-          ret = GLEW_EXT_texture_compression_dxt1;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_compression_latc
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_latc", 24))
+-        {
+-          ret = GLEW_EXT_texture_compression_latc;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_compression_rgtc
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_rgtc", 24))
+-        {
+-          ret = GLEW_EXT_texture_compression_rgtc;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_compression_s3tc
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_s3tc", 24))
+-        {
+-          ret = GLEW_EXT_texture_compression_s3tc;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_cube_map
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_cube_map", 16))
+-        {
+-          ret = GLEW_EXT_texture_cube_map;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_edge_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_edge_clamp", 18))
+-        {
+-          ret = GLEW_EXT_texture_edge_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_env
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env", 11))
+-        {
+-          ret = GLEW_EXT_texture_env;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_env_add
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_add", 15))
+-        {
+-          ret = GLEW_EXT_texture_env_add;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_env_combine
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine", 19))
+-        {
+-          ret = GLEW_EXT_texture_env_combine;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_env_dot3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_dot3", 16))
+-        {
+-          ret = GLEW_EXT_texture_env_dot3;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_filter_anisotropic
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_filter_anisotropic", 26))
+-        {
+-          ret = GLEW_EXT_texture_filter_anisotropic;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_integer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_integer", 15))
+-        {
+-          ret = GLEW_EXT_texture_integer;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_lod_bias
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lod_bias", 16))
+-        {
+-          ret = GLEW_EXT_texture_lod_bias;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_mirror_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirror_clamp", 20))
+-        {
+-          ret = GLEW_EXT_texture_mirror_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_object", 14))
+-        {
+-          ret = GLEW_EXT_texture_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_perturb_normal
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_perturb_normal", 22))
+-        {
+-          ret = GLEW_EXT_texture_perturb_normal;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_rectangle
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_rectangle", 17))
+-        {
+-          ret = GLEW_EXT_texture_rectangle;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_sRGB
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_sRGB", 12))
+-        {
+-          ret = GLEW_EXT_texture_sRGB;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_texture_shared_exponent
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shared_exponent", 23))
+-        {
+-          ret = GLEW_EXT_texture_shared_exponent;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_timer_query
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"timer_query", 11))
+-        {
+-          ret = GLEW_EXT_timer_query;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_vertex_array
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array", 12))
+-        {
+-          ret = GLEW_EXT_vertex_array;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_vertex_shader
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_shader", 13))
+-        {
+-          ret = GLEW_EXT_vertex_shader;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_EXT_vertex_weighting
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_weighting", 16))
+-        {
+-          ret = GLEW_EXT_vertex_weighting;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"GREMEDY_", 8))
+-      {
+-#ifdef GL_GREMEDY_frame_terminator
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"frame_terminator", 16))
+-        {
+-          ret = GLEW_GREMEDY_frame_terminator;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_GREMEDY_string_marker
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"string_marker", 13))
+-        {
+-          ret = GLEW_GREMEDY_string_marker;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"HP_", 3))
+-      {
+-#ifdef GL_HP_convolution_border_modes
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"convolution_border_modes", 24))
+-        {
+-          ret = GLEW_HP_convolution_border_modes;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_HP_image_transform
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"image_transform", 15))
+-        {
+-          ret = GLEW_HP_image_transform;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_HP_occlusion_test
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"occlusion_test", 14))
+-        {
+-          ret = GLEW_HP_occlusion_test;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_HP_texture_lighting
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lighting", 16))
+-        {
+-          ret = GLEW_HP_texture_lighting;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"IBM_", 4))
+-      {
+-#ifdef GL_IBM_cull_vertex
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cull_vertex", 11))
+-        {
+-          ret = GLEW_IBM_cull_vertex;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_IBM_multimode_draw_arrays
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multimode_draw_arrays", 21))
+-        {
+-          ret = GLEW_IBM_multimode_draw_arrays;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_IBM_rasterpos_clip
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"rasterpos_clip", 14))
+-        {
+-          ret = GLEW_IBM_rasterpos_clip;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_IBM_static_data
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"static_data", 11))
+-        {
+-          ret = GLEW_IBM_static_data;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_IBM_texture_mirrored_repeat
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirrored_repeat", 23))
+-        {
+-          ret = GLEW_IBM_texture_mirrored_repeat;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_IBM_vertex_array_lists
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_lists", 18))
+-        {
+-          ret = GLEW_IBM_vertex_array_lists;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"INGR_", 5))
+-      {
+-#ifdef GL_INGR_color_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_clamp", 11))
+-        {
+-          ret = GLEW_INGR_color_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_INGR_interlace_read
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"interlace_read", 14))
+-        {
+-          ret = GLEW_INGR_interlace_read;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"INTEL_", 6))
+-      {
+-#ifdef GL_INTEL_parallel_arrays
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"parallel_arrays", 15))
+-        {
+-          ret = GLEW_INTEL_parallel_arrays;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_INTEL_texture_scissor
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_scissor", 15))
+-        {
+-          ret = GLEW_INTEL_texture_scissor;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"KTX_", 4))
+-      {
+-#ifdef GL_KTX_buffer_region
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"buffer_region", 13))
+-        {
+-          ret = GLEW_KTX_buffer_region;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"MESAX_", 6))
+-      {
+-#ifdef GL_MESAX_texture_stack
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_stack", 13))
+-        {
+-          ret = GLEW_MESAX_texture_stack;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"MESA_", 5))
+-      {
+-#ifdef GL_MESA_pack_invert
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pack_invert", 11))
+-        {
+-          ret = GLEW_MESA_pack_invert;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_MESA_resize_buffers
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"resize_buffers", 14))
+-        {
+-          ret = GLEW_MESA_resize_buffers;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_MESA_window_pos
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"window_pos", 10))
+-        {
+-          ret = GLEW_MESA_window_pos;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_MESA_ycbcr_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ycbcr_texture", 13))
+-        {
+-          ret = GLEW_MESA_ycbcr_texture;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"NV_", 3))
+-      {
+-#ifdef GL_NV_blend_square
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_square", 12))
+-        {
+-          ret = GLEW_NV_blend_square;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_copy_depth_to_color
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"copy_depth_to_color", 19))
+-        {
+-          ret = GLEW_NV_copy_depth_to_color;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_depth_buffer_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_buffer_float", 18))
+-        {
+-          ret = GLEW_NV_depth_buffer_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_depth_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_clamp", 11))
+-        {
+-          ret = GLEW_NV_depth_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_depth_range_unclamped
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_range_unclamped", 21))
+-        {
+-          ret = GLEW_NV_depth_range_unclamped;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_evaluators
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"evaluators", 10))
+-        {
+-          ret = GLEW_NV_evaluators;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_fence
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fence", 5))
+-        {
+-          ret = GLEW_NV_fence;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_float_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_buffer", 12))
+-        {
+-          ret = GLEW_NV_float_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_fog_distance
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_distance", 12))
+-        {
+-          ret = GLEW_NV_fog_distance;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_fragment_program
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program", 16))
+-        {
+-          ret = GLEW_NV_fragment_program;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_fragment_program2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program2", 17))
+-        {
+-          ret = GLEW_NV_fragment_program2;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_fragment_program4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program4", 17))
+-        {
+-          ret = GLEW_NV_fragment_program4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_fragment_program_option
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program_option", 23))
+-        {
+-          ret = GLEW_NV_fragment_program_option;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_framebuffer_multisample_coverage
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_multisample_coverage", 32))
+-        {
+-          ret = GLEW_NV_framebuffer_multisample_coverage;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_geometry_program4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"geometry_program4", 17))
+-        {
+-          ret = GLEW_NV_geometry_program4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_geometry_shader4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"geometry_shader4", 16))
+-        {
+-          ret = GLEW_NV_geometry_shader4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_gpu_program4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_program4", 12))
+-        {
+-          ret = GLEW_NV_gpu_program4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_half_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"half_float", 10))
+-        {
+-          ret = GLEW_NV_half_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_light_max_exponent
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"light_max_exponent", 18))
+-        {
+-          ret = GLEW_NV_light_max_exponent;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_multisample_filter_hint
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample_filter_hint", 23))
+-        {
+-          ret = GLEW_NV_multisample_filter_hint;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_occlusion_query
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"occlusion_query", 15))
+-        {
+-          ret = GLEW_NV_occlusion_query;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_packed_depth_stencil
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_depth_stencil", 20))
+-        {
+-          ret = GLEW_NV_packed_depth_stencil;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_parameter_buffer_object
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"parameter_buffer_object", 23))
+-        {
+-          ret = GLEW_NV_parameter_buffer_object;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_pixel_data_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_data_range", 16))
+-        {
+-          ret = GLEW_NV_pixel_data_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_point_sprite
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_sprite", 12))
+-        {
+-          ret = GLEW_NV_point_sprite;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_primitive_restart
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"primitive_restart", 17))
+-        {
+-          ret = GLEW_NV_primitive_restart;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_register_combiners
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"register_combiners", 18))
+-        {
+-          ret = GLEW_NV_register_combiners;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_register_combiners2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"register_combiners2", 19))
+-        {
+-          ret = GLEW_NV_register_combiners2;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texgen_emboss
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texgen_emboss", 13))
+-        {
+-          ret = GLEW_NV_texgen_emboss;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texgen_reflection
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texgen_reflection", 17))
+-        {
+-          ret = GLEW_NV_texgen_reflection;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texture_compression_vtc
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_vtc", 23))
+-        {
+-          ret = GLEW_NV_texture_compression_vtc;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texture_env_combine4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine4", 20))
+-        {
+-          ret = GLEW_NV_texture_env_combine4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texture_expand_normal
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_expand_normal", 21))
+-        {
+-          ret = GLEW_NV_texture_expand_normal;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texture_rectangle
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_rectangle", 17))
+-        {
+-          ret = GLEW_NV_texture_rectangle;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texture_shader
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shader", 14))
+-        {
+-          ret = GLEW_NV_texture_shader;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texture_shader2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shader2", 15))
+-        {
+-          ret = GLEW_NV_texture_shader2;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_texture_shader3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shader3", 15))
+-        {
+-          ret = GLEW_NV_texture_shader3;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_transform_feedback
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"transform_feedback", 18))
+-        {
+-          ret = GLEW_NV_transform_feedback;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_array_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
+-        {
+-          ret = GLEW_NV_vertex_array_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_array_range2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range2", 19))
+-        {
+-          ret = GLEW_NV_vertex_array_range2;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_program
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program", 14))
+-        {
+-          ret = GLEW_NV_vertex_program;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_program1_1
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program1_1", 17))
+-        {
+-          ret = GLEW_NV_vertex_program1_1;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_program2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program2", 15))
+-        {
+-          ret = GLEW_NV_vertex_program2;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_program2_option
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program2_option", 22))
+-        {
+-          ret = GLEW_NV_vertex_program2_option;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_program3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program3", 15))
+-        {
+-          ret = GLEW_NV_vertex_program3;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_NV_vertex_program4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program4", 15))
+-        {
+-          ret = GLEW_NV_vertex_program4;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OES_", 4))
+-      {
+-#ifdef GL_OES_byte_coordinates
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"byte_coordinates", 16))
+-        {
+-          ret = GLEW_OES_byte_coordinates;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_OES_compressed_paletted_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"compressed_paletted_texture", 27))
+-        {
+-          ret = GLEW_OES_compressed_paletted_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_OES_read_format
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"read_format", 11))
+-        {
+-          ret = GLEW_OES_read_format;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_OES_single_precision
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"single_precision", 16))
+-        {
+-          ret = GLEW_OES_single_precision;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OML_", 4))
+-      {
+-#ifdef GL_OML_interlace
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"interlace", 9))
+-        {
+-          ret = GLEW_OML_interlace;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_OML_resample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"resample", 8))
+-        {
+-          ret = GLEW_OML_resample;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_OML_subsample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"subsample", 9))
+-        {
+-          ret = GLEW_OML_subsample;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"PGI_", 4))
+-      {
+-#ifdef GL_PGI_misc_hints
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"misc_hints", 10))
+-        {
+-          ret = GLEW_PGI_misc_hints;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_PGI_vertex_hints
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_hints", 12))
+-        {
+-          ret = GLEW_PGI_vertex_hints;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"REND_", 5))
+-      {
+-#ifdef GL_REND_screen_coordinates
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"screen_coordinates", 18))
+-        {
+-          ret = GLEW_REND_screen_coordinates;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"S3_", 3))
+-      {
+-#ifdef GL_S3_s3tc
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"s3tc", 4))
+-        {
+-          ret = GLEW_S3_s3tc;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIS_", 5))
+-      {
+-#ifdef GL_SGIS_color_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_range", 11))
+-        {
+-          ret = GLEW_SGIS_color_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_detail_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"detail_texture", 14))
+-        {
+-          ret = GLEW_SGIS_detail_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_fog_function
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_function", 12))
+-        {
+-          ret = GLEW_SGIS_fog_function;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_generate_mipmap
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"generate_mipmap", 15))
+-        {
+-          ret = GLEW_SGIS_generate_mipmap;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = GLEW_SGIS_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_pixel_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_texture", 13))
+-        {
+-          ret = GLEW_SGIS_pixel_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_sharpen_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sharpen_texture", 15))
+-        {
+-          ret = GLEW_SGIS_sharpen_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_texture4D
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture4D", 9))
+-        {
+-          ret = GLEW_SGIS_texture4D;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_texture_border_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_border_clamp", 20))
+-        {
+-          ret = GLEW_SGIS_texture_border_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_texture_edge_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_edge_clamp", 18))
+-        {
+-          ret = GLEW_SGIS_texture_edge_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_texture_filter4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_filter4", 15))
+-        {
+-          ret = GLEW_SGIS_texture_filter4;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_texture_lod
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lod", 11))
+-        {
+-          ret = GLEW_SGIS_texture_lod;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIS_texture_select
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_select", 14))
+-        {
+-          ret = GLEW_SGIS_texture_select;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIX_", 5))
+-      {
+-#ifdef GL_SGIX_async
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"async", 5))
+-        {
+-          ret = GLEW_SGIX_async;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_async_histogram
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"async_histogram", 15))
+-        {
+-          ret = GLEW_SGIX_async_histogram;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_async_pixel
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"async_pixel", 11))
+-        {
+-          ret = GLEW_SGIX_async_pixel;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_blend_alpha_minmax
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_alpha_minmax", 18))
+-        {
+-          ret = GLEW_SGIX_blend_alpha_minmax;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_clipmap
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"clipmap", 7))
+-        {
+-          ret = GLEW_SGIX_clipmap;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_depth_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_texture", 13))
+-        {
+-          ret = GLEW_SGIX_depth_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_flush_raster
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"flush_raster", 12))
+-        {
+-          ret = GLEW_SGIX_flush_raster;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_fog_offset
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_offset", 10))
+-        {
+-          ret = GLEW_SGIX_fog_offset;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_fog_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_texture", 11))
+-        {
+-          ret = GLEW_SGIX_fog_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_fragment_specular_lighting
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_specular_lighting", 26))
+-        {
+-          ret = GLEW_SGIX_fragment_specular_lighting;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_framezoom
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framezoom", 9))
+-        {
+-          ret = GLEW_SGIX_framezoom;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_interlace
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"interlace", 9))
+-        {
+-          ret = GLEW_SGIX_interlace;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_ir_instrument1
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ir_instrument1", 14))
+-        {
+-          ret = GLEW_SGIX_ir_instrument1;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_list_priority
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"list_priority", 13))
+-        {
+-          ret = GLEW_SGIX_list_priority;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_pixel_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_texture", 13))
+-        {
+-          ret = GLEW_SGIX_pixel_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_pixel_texture_bits
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_texture_bits", 18))
+-        {
+-          ret = GLEW_SGIX_pixel_texture_bits;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_reference_plane
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"reference_plane", 15))
+-        {
+-          ret = GLEW_SGIX_reference_plane;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_resample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"resample", 8))
+-        {
+-          ret = GLEW_SGIX_resample;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_shadow
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow", 6))
+-        {
+-          ret = GLEW_SGIX_shadow;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_shadow_ambient
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow_ambient", 14))
+-        {
+-          ret = GLEW_SGIX_shadow_ambient;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_sprite
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sprite", 6))
+-        {
+-          ret = GLEW_SGIX_sprite;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_tag_sample_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"tag_sample_buffer", 17))
+-        {
+-          ret = GLEW_SGIX_tag_sample_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_texture_add_env
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_add_env", 15))
+-        {
+-          ret = GLEW_SGIX_texture_add_env;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_texture_coordinate_clamp
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_coordinate_clamp", 24))
+-        {
+-          ret = GLEW_SGIX_texture_coordinate_clamp;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_texture_lod_bias
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lod_bias", 16))
+-        {
+-          ret = GLEW_SGIX_texture_lod_bias;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_texture_multi_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_multi_buffer", 20))
+-        {
+-          ret = GLEW_SGIX_texture_multi_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_texture_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_range", 13))
+-        {
+-          ret = GLEW_SGIX_texture_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_texture_scale_bias
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_scale_bias", 18))
+-        {
+-          ret = GLEW_SGIX_texture_scale_bias;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_vertex_preclip
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_preclip", 14))
+-        {
+-          ret = GLEW_SGIX_vertex_preclip;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_vertex_preclip_hint
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_preclip_hint", 19))
+-        {
+-          ret = GLEW_SGIX_vertex_preclip_hint;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGIX_ycrcb
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ycrcb", 5))
+-        {
+-          ret = GLEW_SGIX_ycrcb;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGI_", 4))
+-      {
+-#ifdef GL_SGI_color_matrix
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_matrix", 12))
+-        {
+-          ret = GLEW_SGI_color_matrix;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGI_color_table
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_table", 11))
+-        {
+-          ret = GLEW_SGI_color_table;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SGI_texture_color_table
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_color_table", 19))
+-        {
+-          ret = GLEW_SGI_texture_color_table;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SUNX_", 5))
+-      {
+-#ifdef GL_SUNX_constant_data
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"constant_data", 13))
+-        {
+-          ret = GLEW_SUNX_constant_data;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SUN_", 4))
+-      {
+-#ifdef GL_SUN_convolution_border_modes
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"convolution_border_modes", 24))
+-        {
+-          ret = GLEW_SUN_convolution_border_modes;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SUN_global_alpha
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"global_alpha", 12))
+-        {
+-          ret = GLEW_SUN_global_alpha;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SUN_mesh_array
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"mesh_array", 10))
+-        {
+-          ret = GLEW_SUN_mesh_array;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SUN_read_video_pixels
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"read_video_pixels", 17))
+-        {
+-          ret = GLEW_SUN_read_video_pixels;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SUN_slice_accum
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"slice_accum", 11))
+-        {
+-          ret = GLEW_SUN_slice_accum;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SUN_triangle_list
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"triangle_list", 13))
+-        {
+-          ret = GLEW_SUN_triangle_list;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_SUN_vertex
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex", 6))
+-        {
+-          ret = GLEW_SUN_vertex;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"WIN_", 4))
+-      {
+-#ifdef GL_WIN_phong_shading
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"phong_shading", 13))
+-        {
+-          ret = GLEW_WIN_phong_shading;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_WIN_specular_fog
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"specular_fog", 12))
+-        {
+-          ret = GLEW_WIN_specular_fog;
+-          continue;
+-        }
+-#endif
+-#ifdef GL_WIN_swap_hint
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_hint", 9))
+-        {
+-          ret = GLEW_WIN_swap_hint;
+-          continue;
+-        }
+-#endif
+-      }
+-    }
+-    ret = (len == 0);
+-  }
+-  return ret;
+-}
+-
+-#if defined(_WIN32)
+-
+-#if defined(GLEW_MX)
+-GLboolean wglewContextIsSupported (WGLEWContext* ctx, const char* name)
+-#else
+-GLboolean wglewIsSupported (const char* name)
+-#endif
+-{
+-  GLubyte* pos = (GLubyte*)name;
+-  GLuint len = _glewStrLen(pos);
+-  GLboolean ret = GL_TRUE;
+-  while (ret && len > 0)
+-  {
+-    if (_glewStrSame1(&pos, &len, (const GLubyte*)"WGL_", 4))
+-    {
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DFX_", 5))
+-      {
+-#ifdef WGL_3DFX_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = WGLEW_3DFX_multisample;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DL_", 4))
+-      {
+-#ifdef WGL_3DL_stereo_control
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stereo_control", 14))
+-        {
+-          ret = WGLEW_3DL_stereo_control;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ARB_", 4))
+-      {
+-#ifdef WGL_ARB_buffer_region
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"buffer_region", 13))
+-        {
+-          ret = WGLEW_ARB_buffer_region;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ARB_extensions_string
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"extensions_string", 17))
+-        {
+-          ret = WGLEW_ARB_extensions_string;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ARB_make_current_read
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"make_current_read", 17))
+-        {
+-          ret = WGLEW_ARB_make_current_read;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ARB_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = WGLEW_ARB_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ARB_pbuffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pbuffer", 7))
+-        {
+-          ret = WGLEW_ARB_pbuffer;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ARB_pixel_format
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format", 12))
+-        {
+-          ret = WGLEW_ARB_pixel_format;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ARB_pixel_format_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_float", 18))
+-        {
+-          ret = WGLEW_ARB_pixel_format_float;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ARB_render_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture", 14))
+-        {
+-          ret = WGLEW_ARB_render_texture;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATI_", 4))
+-      {
+-#ifdef WGL_ATI_pixel_format_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_float", 18))
+-        {
+-          ret = WGLEW_ATI_pixel_format_float;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_ATI_render_texture_rectangle
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture_rectangle", 24))
+-        {
+-          ret = WGLEW_ATI_render_texture_rectangle;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"EXT_", 4))
+-      {
+-#ifdef WGL_EXT_depth_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_float", 11))
+-        {
+-          ret = WGLEW_EXT_depth_float;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_display_color_table
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"display_color_table", 19))
+-        {
+-          ret = WGLEW_EXT_display_color_table;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_extensions_string
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"extensions_string", 17))
+-        {
+-          ret = WGLEW_EXT_extensions_string;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_framebuffer_sRGB
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_sRGB", 16))
+-        {
+-          ret = WGLEW_EXT_framebuffer_sRGB;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_make_current_read
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"make_current_read", 17))
+-        {
+-          ret = WGLEW_EXT_make_current_read;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = WGLEW_EXT_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_pbuffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pbuffer", 7))
+-        {
+-          ret = WGLEW_EXT_pbuffer;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_pixel_format
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format", 12))
+-        {
+-          ret = WGLEW_EXT_pixel_format;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_pixel_format_packed_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_packed_float", 25))
+-        {
+-          ret = WGLEW_EXT_pixel_format_packed_float;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_EXT_swap_control
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_control", 12))
+-        {
+-          ret = WGLEW_EXT_swap_control;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"I3D_", 4))
+-      {
+-#ifdef WGL_I3D_digital_video_control
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"digital_video_control", 21))
+-        {
+-          ret = WGLEW_I3D_digital_video_control;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_I3D_gamma
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gamma", 5))
+-        {
+-          ret = WGLEW_I3D_gamma;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_I3D_genlock
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"genlock", 7))
+-        {
+-          ret = WGLEW_I3D_genlock;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_I3D_image_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"image_buffer", 12))
+-        {
+-          ret = WGLEW_I3D_image_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_I3D_swap_frame_lock
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_frame_lock", 15))
+-        {
+-          ret = WGLEW_I3D_swap_frame_lock;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_I3D_swap_frame_usage
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_frame_usage", 16))
+-        {
+-          ret = WGLEW_I3D_swap_frame_usage;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"NV_", 3))
+-      {
+-#ifdef WGL_NV_float_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_buffer", 12))
+-        {
+-          ret = WGLEW_NV_float_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_NV_gpu_affinity
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_affinity", 12))
+-        {
+-          ret = WGLEW_NV_gpu_affinity;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_NV_render_depth_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_depth_texture", 20))
+-        {
+-          ret = WGLEW_NV_render_depth_texture;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_NV_render_texture_rectangle
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture_rectangle", 24))
+-        {
+-          ret = WGLEW_NV_render_texture_rectangle;
+-          continue;
+-        }
+-#endif
+-#ifdef WGL_NV_vertex_array_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
+-        {
+-          ret = WGLEW_NV_vertex_array_range;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OML_", 4))
+-      {
+-#ifdef WGL_OML_sync_control
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sync_control", 12))
+-        {
+-          ret = WGLEW_OML_sync_control;
+-          continue;
+-        }
+-#endif
+-      }
+-    }
+-    ret = (len == 0);
+-  }
+-  return ret;
+-}
+-
+-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)
+-
+-#if defined(GLEW_MX)
+-GLboolean glxewContextIsSupported (GLXEWContext* ctx, const char* name)
+-#else
+-GLboolean glxewIsSupported (const char* name)
+-#endif
+-{
+-  GLubyte* pos = (GLubyte*)name;
+-  GLuint len = _glewStrLen(pos);
+-  GLboolean ret = GL_TRUE;
+-  while (ret && len > 0)
+-  {
+-    if(_glewStrSame1(&pos, &len, (const GLubyte*)"GLX_", 4))
+-    {
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"VERSION_", 8))
+-      {
+-#ifdef GLX_VERSION_1_2
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_2", 3))
+-        {
+-          ret = GLXEW_VERSION_1_2;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_VERSION_1_3
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_3", 3))
+-        {
+-          ret = GLXEW_VERSION_1_3;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_VERSION_1_4
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_4", 3))
+-        {
+-          ret = GLXEW_VERSION_1_4;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DFX_", 5))
+-      {
+-#ifdef GLX_3DFX_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = GLXEW_3DFX_multisample;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ARB_", 4))
+-      {
+-#ifdef GLX_ARB_fbconfig_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fbconfig_float", 14))
+-        {
+-          ret = GLXEW_ARB_fbconfig_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_ARB_get_proc_address
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"get_proc_address", 16))
+-        {
+-          ret = GLXEW_ARB_get_proc_address;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_ARB_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = GLXEW_ARB_multisample;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATI_", 4))
+-      {
+-#ifdef GLX_ATI_pixel_format_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_float", 18))
+-        {
+-          ret = GLXEW_ATI_pixel_format_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_ATI_render_texture
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture", 14))
+-        {
+-          ret = GLXEW_ATI_render_texture;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"EXT_", 4))
+-      {
+-#ifdef GLX_EXT_fbconfig_packed_float
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fbconfig_packed_float", 21))
+-        {
+-          ret = GLXEW_EXT_fbconfig_packed_float;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_EXT_framebuffer_sRGB
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_sRGB", 16))
+-        {
+-          ret = GLXEW_EXT_framebuffer_sRGB;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_EXT_import_context
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"import_context", 14))
+-        {
+-          ret = GLXEW_EXT_import_context;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_EXT_scene_marker
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"scene_marker", 12))
+-        {
+-          ret = GLXEW_EXT_scene_marker;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_EXT_texture_from_pixmap
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_from_pixmap", 19))
+-        {
+-          ret = GLXEW_EXT_texture_from_pixmap;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_EXT_visual_info
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"visual_info", 11))
+-        {
+-          ret = GLXEW_EXT_visual_info;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_EXT_visual_rating
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"visual_rating", 13))
+-        {
+-          ret = GLXEW_EXT_visual_rating;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"MESA_", 5))
+-      {
+-#ifdef GLX_MESA_agp_offset
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"agp_offset", 10))
+-        {
+-          ret = GLXEW_MESA_agp_offset;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_MESA_copy_sub_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"copy_sub_buffer", 15))
+-        {
+-          ret = GLXEW_MESA_copy_sub_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_MESA_pixmap_colormap
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixmap_colormap", 15))
+-        {
+-          ret = GLXEW_MESA_pixmap_colormap;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_MESA_release_buffers
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"release_buffers", 15))
+-        {
+-          ret = GLXEW_MESA_release_buffers;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_MESA_set_3dfx_mode
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"set_3dfx_mode", 13))
+-        {
+-          ret = GLXEW_MESA_set_3dfx_mode;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"NV_", 3))
+-      {
+-#ifdef GLX_NV_float_buffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_buffer", 12))
+-        {
+-          ret = GLXEW_NV_float_buffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_NV_vertex_array_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
+-        {
+-          ret = GLXEW_NV_vertex_array_range;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OML_", 4))
+-      {
+-#ifdef GLX_OML_swap_method
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_method", 11))
+-        {
+-          ret = GLXEW_OML_swap_method;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_OML_sync_control
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sync_control", 12))
+-        {
+-          ret = GLXEW_OML_sync_control;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIS_", 5))
+-      {
+-#ifdef GLX_SGIS_blended_overlay
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blended_overlay", 15))
+-        {
+-          ret = GLXEW_SGIS_blended_overlay;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIS_color_range
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_range", 11))
+-        {
+-          ret = GLXEW_SGIS_color_range;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIS_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
+-        {
+-          ret = GLXEW_SGIS_multisample;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIS_shared_multisample
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shared_multisample", 18))
+-        {
+-          ret = GLXEW_SGIS_shared_multisample;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIX_", 5))
+-      {
+-#ifdef GLX_SGIX_fbconfig
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fbconfig", 8))
+-        {
+-          ret = GLXEW_SGIX_fbconfig;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIX_hyperpipe
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"hyperpipe", 9))
+-        {
+-          ret = GLXEW_SGIX_hyperpipe;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIX_pbuffer
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pbuffer", 7))
+-        {
+-          ret = GLXEW_SGIX_pbuffer;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIX_swap_barrier
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_barrier", 12))
+-        {
+-          ret = GLXEW_SGIX_swap_barrier;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIX_swap_group
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_group", 10))
+-        {
+-          ret = GLXEW_SGIX_swap_group;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIX_video_resize
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"video_resize", 12))
+-        {
+-          ret = GLXEW_SGIX_video_resize;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGIX_visual_select_group
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"visual_select_group", 19))
+-        {
+-          ret = GLXEW_SGIX_visual_select_group;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGI_", 4))
+-      {
+-#ifdef GLX_SGI_cushion
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cushion", 7))
+-        {
+-          ret = GLXEW_SGI_cushion;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGI_make_current_read
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"make_current_read", 17))
+-        {
+-          ret = GLXEW_SGI_make_current_read;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGI_swap_control
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_control", 12))
+-        {
+-          ret = GLXEW_SGI_swap_control;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SGI_video_sync
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"video_sync", 10))
+-        {
+-          ret = GLXEW_SGI_video_sync;
+-          continue;
+-        }
+-#endif
+-      }
+-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SUN_", 4))
+-      {
+-#ifdef GLX_SUN_get_transparent_index
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"get_transparent_index", 21))
+-        {
+-          ret = GLXEW_SUN_get_transparent_index;
+-          continue;
+-        }
+-#endif
+-#ifdef GLX_SUN_video_resize
+-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"video_resize", 12))
+-        {
+-          ret = GLXEW_SUN_video_resize;
+-          continue;
+-        }
+-#endif
+-      }
+-    }
+-    ret = (len == 0);
+-  }
+-  return ret;
+-}
+-
+-#endif /* _WIN32 */
+diff --git a/nvcommon/include/framebufferObject.h b/nvcommon/include/framebufferObject.h
+deleted file mode 100644
+index c7561b9..0000000
+--- a/nvcommon/include/framebufferObject.h
++++ /dev/null
+@@ -1,219 +0,0 @@
+-/*
+-  Copyright (c) 2005, 
+-	  Aaron Lefohn	  (lefohn@cs.ucdavis.edu)
+-	  Robert Strzodka (strzodka@stanford.edu)
+-	  Adam Moerschell (atmoerschell@ucdavis.edu)
+-  All rights reserved.
+-
+-  This software is licensed under the BSD open-source license. See
+-  http://www.opensource.org/licenses/bsd-license.php for more detail.
+-
+-  *************************************************************
+-  Redistribution and use in source and binary forms, with or 
+-  without modification, are permitted provided that the following 
+-  conditions are met:
+-
+-  Redistributions of source code must retain the above copyright notice, 
+-  this list of conditions and the following disclaimer. 
+-
+-  Redistributions in binary form must reproduce the above copyright notice, 
+-  this list of conditions and the following disclaimer in the documentation 
+-  and/or other materials provided with the distribution. 
+-
+-  Neither the name of the University of Californa, Davis nor the names of 
+-  the contributors may be used to endorse or promote products derived 
+-  from this software without specific prior written permission.
+-
+-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
+-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
+-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
+-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
+-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
+-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
+-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
+-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
+-  OF SUCH DAMAGE.
+-*/
+-
+-#ifndef UCDAVIS_FRAMEBUFFER_OBJECT_H
+-#define UCDAVIS_FRAMEBUFFER_OBJECT_H
+-
+-#ifdef __APPLE__
+-#include <OpenGL/gl.h>
+-#else
+-#include <GL/glew.h>
+-#endif
+-
+-#include <iostream>
+-
+-/*!
+-FramebufferObject Class. This class encapsulates the FramebufferObject
+-(FBO) OpenGL spec. See the official spec at:
+-	http://oss.sgi.com/projects/ogl-sample/registry/EXT/framebuffer_object.txt
+-
+-for details.
+-
+-A framebuffer object (FBO) is conceptually a structure containing pointers
+-to GPU memory. The memory pointed to is either an OpenGL texture or an
+-OpenGL RenderBuffer. FBOs can be used to render to one or more textures,
+-share depth buffers between multiple sets of color buffers/textures and
+-are a complete replacement for pbuffers.
+-
+-Performance Notes:
+-  1) It is more efficient (but not required) to call Bind() 
+-     on an FBO before making multiple method calls. For example:
+-		
+-      FramebufferObject fbo;
+-      fbo.Bind();
+-      fbo.AttachTexture(GL_TEXTURE_2D, texId0, GL_COLOR_ATTACHMENT0_EXT);
+-      fbo.AttachTexture(GL_TEXTURE_2D, texId1, GL_COLOR_ATTACHMENT1_EXT);
+-      fbo.IsValid();
+-
+-    To provide a complete encapsulation, the following usage
+-    pattern works correctly but is less efficient:
+-
+-      FramebufferObject fbo;
+-      // NOTE : No Bind() call
+-      fbo.AttachTexture(GL_TEXTURE_2D, texId0, GL_COLOR_ATTACHMENT0_EXT);
+-      fbo.AttachTexture(GL_TEXTURE_2D, texId1, GL_COLOR_ATTACHMENT1_EXT);
+-      fbo.IsValid();
+-
+-    The first usage pattern binds the FBO only once, whereas
+-    the second usage binds/unbinds the FBO for each method call.
+-
+-  2) Use FramebufferObject::Disable() sparingly. We have intentionally
+-     left out an "Unbind()" method because it is largely unnecessary
+-     and encourages rendundant Bind/Unbind coding. Binding an FBO is
+-     usually much faster than enabling/disabling a pbuffer, but is
+-     still a costly operation. When switching between multiple FBOs
+-     and a visible OpenGL framebuffer, the following usage pattern 
+-     is recommended:
+-
+-      FramebufferObject fbo1, fbo2;
+-      fbo1.Bind();
+-        ... Render ...
+-      // NOTE : No Unbind/Disable here...
+-
+-      fbo2.Bind();
+-        ... Render ...
+-
+-      // Disable FBO rendering and return to visible window
+-      // OpenGL framebuffer.
+-      FramebufferObject::Disable();
+-*/
+-class FramebufferObject
+-{
+-public:
+-  /// Ctor/Dtor
+-  FramebufferObject();
+-  virtual ~FramebufferObject();
+-
+-  /// Bind this FBO as current render target
+-  void Bind();
+-
+-  /// Bind a texture to the "attachment" point of this FBO
+-  virtual void AttachTexture( GLenum texTarget, 
+-                              GLuint texId,
+-                              GLenum attachment = GL_COLOR_ATTACHMENT0_EXT,
+-                              int mipLevel      = 0,
+-                              int zSlice        = 0 );
+-
+-  /// Bind an array of textures to multiple "attachment" points of this FBO
+-  ///  - By default, the first 'numTextures' attachments are used,
+-  ///    starting with GL_COLOR_ATTACHMENT0_EXT
+-  virtual void AttachTextures( int numTextures, 
+-                               GLenum texTarget[], 
+-                               GLuint texId[],
+-                               GLenum attachment[] = NULL,
+-                               int mipLevel[]      = NULL,
+-                               int zSlice[]        = NULL );
+-
+-  /// Bind a render buffer to the "attachment" point of this FBO
+-  virtual void AttachRenderBuffer( GLuint buffId,
+-                                   GLenum attachment = GL_COLOR_ATTACHMENT0_EXT );
+-
+-  /// Bind an array of render buffers to corresponding "attachment" points
+-  /// of this FBO.
+-  /// - By default, the first 'numBuffers' attachments are used,
+-  ///   starting with GL_COLOR_ATTACHMENT0_EXT
+-  virtual void AttachRenderBuffers( int numBuffers, GLuint buffId[],
+-                                    GLenum attachment[] = NULL );
+-
+-  /// Free any resource bound to the "attachment" point of this FBO
+-  void Unattach( GLenum attachment );
+-
+-  /// Free any resources bound to any attachment points of this FBO
+-  void UnattachAll();
+-
+-  /// Is this FBO currently a valid render target?
+-  ///  - Sends output to std::cerr by default but can
+-  ///    be a user-defined C++ stream
+-  ///
+-  /// NOTE : This function works correctly in debug build
+-  ///        mode but always returns "true" if NDEBUG is
+-  ///        is defined (optimized builds)
+-#ifndef NDEBUG
+-  bool IsValid( std::ostream& ostr = std::cerr );
+-#else
+-  bool IsValid( std::ostream& ostr = std::cerr ) { 
+-    return true; 
+-  }
+-#endif
+-
+-  /// BEGIN : Accessors
+-
+-    /// Get the FBO ID
+-    GLuint GetID( ) { return m_fboId; }
+-
+-    /// Is attached type GL_RENDERBUFFER_EXT or GL_TEXTURE?
+-    GLenum GetAttachedType( GLenum attachment );
+-
+-    /// What is the Id of Renderbuffer/texture currently 
+-    /// attached to "attachement?"
+-    GLuint GetAttachedId( GLenum attachment );
+-
+-    /// Which mipmap level is currently attached to "attachement?"
+-    GLint  GetAttachedMipLevel( GLenum attachment );
+-
+-    /// Which cube face is currently attached to "attachment?"
+-    GLint  GetAttachedCubeFace( GLenum attachment );
+-
+-    /// Which z-slice is currently attached to "attachment?"
+-    GLint  GetAttachedZSlice( GLenum attachment );
+-  /// END : Accessors
+-
+-
+-  /// BEGIN : Static methods global to all FBOs
+-    /// Return number of color attachments permitted
+-    static GLint GetMaxColorAttachments();
+-
+-    /// Disable all FBO rendering and return to traditional,
+-    /// windowing-system controlled framebuffer
+-    ///  NOTE:
+-    ///     This is NOT an "unbind" for this specific FBO, but rather
+-    ///     disables all FBO rendering. This call is intentionally "static"
+-    ///     and named "Disable" instead of "Unbind" for this reason. The
+-    ///     motivation for this strange semantic is performance. Providing
+-    ///     "Unbind" would likely lead to a large number of unnecessary
+-    ///     FBO enablings/disabling.
+-    static void Disable();
+-  /// END : Static methods global to all FBOs
+-
+-protected:
+-  void  _GuardedBind();
+-  void  _GuardedUnbind();
+-  void  _FramebufferTextureND( GLenum attachment, GLenum texTarget, 
+-                               GLuint texId, int mipLevel, int zSlice );
+-  static GLuint _GenerateFboId();
+-
+-private:
+-  GLuint m_fboId;
+-  GLint  m_savedFboId;
+-};
+-
+-#endif
+-
+diff --git a/nvcommon/include/nvArray.h b/nvcommon/include/nvArray.h
+deleted file mode 100644
+index fcd58e6..0000000
+--- a/nvcommon/include/nvArray.h
++++ /dev/null
+@@ -1,52 +0,0 @@
+-// array classes
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-#ifndef NV_ARRAY_H
+-#define NV_ARRAY_H
+-
+-namespace nv {
+-
+-// 2d array
+-template <class T>
+-class array2
+-{
+-public:
+-    typedef T value_type;
+-
+-	array2(int width, int height, int channels=1)
+-	{
+-		w = width;
+-		h = height;
+-		c = channels;
+-		data = new T [w*h*c];
+-	}
+-
+-	~array2()
+-	{
+-		delete [] data;
+-	}
+-
+-	T & operator () (int x, int y, int channel=0)
+-	{
+-		if (x < 0) x += w;
+-		if (y < 0) y += h;
+-		if (x > w-1) x -= w;
+-		if (y > h-1) y -= h;
+-		return data[((y*w+x)*c)+channel];
+-	}
+-	
+-	T * get_data()
+-	{
+-		return data;
+-	}
+-
+-private:
+-	int w, h, c;
+-	T *data;
+-};
+-
+-};
+-
+-#endif
+\ No newline at end of file
+diff --git a/nvcommon/include/nvGlutManipulators.h b/nvcommon/include/nvGlutManipulators.h
+deleted file mode 100644
+index c13fcd8..0000000
+--- a/nvcommon/include/nvGlutManipulators.h
++++ /dev/null
+@@ -1,335 +0,0 @@
+-// Adaptors to GLUT native commands for manipulator objects
+-//
+-// This code is in part deriver from glh, cross platform glut helper library.
+-// The copyright for glh follows this notice.
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-/*
+-    Copyright (c) 2000 Cass Everitt
+-	Copyright (c) 2000 NVIDIA Corporation
+-    All rights reserved.
+-
+-    Redistribution and use in source and binary forms, with or
+-	without modification, are permitted provided that the following
+-	conditions are met:
+-
+-     * Redistributions of source code must retain the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer.
+-
+-     * Redistributions in binary form must reproduce the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer in the documentation and/or other materials
+-	   provided with the distribution.
+-
+-     * The names of contributors to this software may not be used
+-	   to endorse or promote products derived from this software
+-	   without specific prior written permission. 
+-
+-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+-	   POSSIBILITY OF SUCH DAMAGE. 
+-
+-
+-    Cass Everitt - cass@r3.nu
+-*/
+-
+-#ifndef NV_GLUT_MANIPULATORS_H
+-#define NV_GLUT_MANIPULATORS_H
+-
+-#include <nvManipulators.h>
+-#ifdef __APPLE__
+-#include <GLUT/glut.h>
+-#else
+-#include <GL/glut.h>
+-#endif
+-
+-namespace nv {
+-
+-class GlutManipulator {
+-
+-public:
+-    
+-    GlutManipulator( Manipulator &m) : _manip(m) { } 
+-    virtual ~GlutManipulator() {}
+-
+-    //
+-    //  reshape
+-    //
+-    //    This function should be called, whenever the region containing the control
+-    //  has been resized. Typically, this is a window resize event.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void reshape( int width, int height) { _manip.reshape( width, height); }
+-
+-    //
+-    //  mouse
+-    //
+-    //    This function should be invoked whenever the state of a mouse button
+-    //  changes.
+-    //    
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void mouse( int button, int state, int x, int y) {
+-        _manip.mouse( convertButtonFromGlut(button), convertModifierFromGlut(glutGetModifiers()), state == GLUT_DOWN, x, y);
+-    }
+-
+-    //
+-    //  mouse
+-    //
+-    //    This function should be invoked whenever the state of a mouse button
+-    //  changes.
+-    //    
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void mouse( int button, int state, int modifier, int x, int y) {
+-        _manip.mouse( convertButtonFromGlut(button), convertModifierFromGlut(modifier), state == GLUT_DOWN, x, y);
+-    }
+-
+-    //
+-    //  motion
+-    //
+-    //    This function should be called whenever the mouse is moved
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void motion( int x, int y) { _manip.motion( x, y); }
+-
+-    //
+-    //  idle
+-    //
+-    //    This function should be called when no input is happening,
+-    //  but the manipulator is likely to need to update.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void idle() { _manip.idle(); }
+-
+-    //
+-    //  update
+-    //
+-    //    This function is called to apply the latest forces to the
+-    //  manipulator.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void update() { _manip.update(); }
+-
+-    //
+-    //  applyTransform
+-    //
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void applyTransform() { _manip.applyTransform(); }
+-
+-    //
+-    //  getTransform
+-    //
+-    //    Compute the current transform based on the latest update, and
+-    //  return it as a 4x4 matrix.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual matrix4f getTransform() { return _manip.getTransform(); }
+-
+-	// get a reference to the manipulator
+-	virtual Manipulator &getManipulator() { return _manip; }
+-
+-protected:
+-
+-    //
+-    //  convertButtonFromGlut
+-    //
+-    //    Converts the integer used by GLUT to identify a mouse button
+-    //  to the UI independent enums used by the manipulators
+-    ////////////////////////////////////////////////////////////////////////////
+-    static Manipulator::Button convertButtonFromGlut( int button) {
+-        switch (button) {
+-            case GLUT_LEFT_BUTTON:
+-                return Manipulator::ELeftButton;
+-            case GLUT_MIDDLE_BUTTON:
+-                return Manipulator::EMiddleButton;
+-            case GLUT_RIGHT_BUTTON:
+-                return Manipulator::ERightButton;
+-        }
+-
+-        //handle fallthrough
+-        return Manipulator::ENoButton;
+-    }
+-
+-    //
+-    //  convertModifierFromGlut
+-    //
+-    //    Converts the integer used by GLUT to identify modifier keys
+-    //  to the UI independent enums used by the manipulators
+-    ////////////////////////////////////////////////////////////////////////////
+-    static Manipulator::Modifier convertModifierFromGlut( int modifier) {
+-        int val = (int)Manipulator::ENoModifier;
+-
+-        //need to use a bitwise or, because it could be multiple keys
+-        if (modifier & GLUT_ACTIVE_ALT)
+-            val |= Manipulator::EAltModifier;
+-        
+-        if (modifier & GLUT_ACTIVE_CTRL)
+-            val |= Manipulator::EControlModifier;
+-        
+-        if (modifier & GLUT_ACTIVE_SHIFT)
+-            val |= Manipulator::EShiftModifier;
+-
+-        return (Manipulator::Modifier)val;
+-    }
+-
+-
+-    //
+-    //  Manipulator reference
+-    //
+-    //    This reference is used such that the GLUT manipulator adaptors
+-    //  can all share the same UI message passing code.
+-    ////////////////////////////////////////////////////////////////////////////
+-    Manipulator &_manip;
+-};
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-class GlutTrackball : public GlutManipulator{
+-
+-public:
+-
+-    //
+-    //
+-    /////////////////////////////////////////////////////////////////
+-    GlutTrackball() : GlutManipulator(_trackball) {}
+-
+-    //
+-    //  setTrackballActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballActivate( int button, int modifier = 0) {
+-        _trackball.setTrackballActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
+-    }
+-
+-    //
+-    //  setTrackballScale
+-    //
+-    //    Set the speed for the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballScale( float scale) {
+-        _trackball.setTrackballScale( scale);
+-    }
+-
+-    //
+-    //  setCenterOfRotation
+-    //
+-    //    Set the point around which the trackball will rotate.
+-    //////////////////////////////////////////////////////////////////
+-    void setCenterOfRotation( const vec3f& c) {
+-        _trackball.setCenterOfRotation( c);
+-    }
+-
+-
+-protected:
+-    TrackballManipulator _trackball;
+-};
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-class GlutExamine : public GlutManipulator{
+-
+-public:
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    GlutExamine() : GlutManipulator(_examine) {}
+-
+-    //
+-    //  setTrackballActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballActivate( int button, int modifier = 0) {
+-        _examine.setTrackballActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
+-    }
+-
+-    //
+-    //  setTrackballScale
+-    //
+-    //    Set the speed for the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballScale( float scale) {
+-        _examine.setTrackballScale( scale);
+-    }
+-
+-    //
+-    //  setDollyActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the dolly operation.
+-    //////////////////////////////////////////////////////////////////
+-    void setDollyActivate( int button, int modifier = 0) {
+-        _examine.setDollyActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
+-    }
+-
+-    //
+-    //  setDollyScale
+-    //
+-    //    Set the speed for the dolly operation.
+-    //////////////////////////////////////////////////////////////////
+-    void setDollyScale( float scale) {
+-        _examine.setDollyScale( scale);
+-    }
+-
+-    //
+-    //  setDollyPosition
+-    //
+-    //    Set the Dolly to a specified distance.
+-    //////////////////////////////////////////////////////////////////
+-    void setDollyPosition( float pos) {
+-        _examine.setDollyPosition( pos);
+-    }
+-
+-    //
+-    //  setPanActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the pan operation.
+-    //////////////////////////////////////////////////////////////////
+-    void setPanActivate( int button, int modifier = 0) {
+-        _examine.setPanActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
+-    }
+-
+-    //
+-    //  setPanScale
+-    //
+-    //    Set the speed for panning.
+-    //////////////////////////////////////////////////////////////////
+-    void setPanScale( float scale) {
+-        _examine.setPanScale( scale);
+-    }
+-
+-    //
+-    //  setCenterOfRotation
+-    //
+-    //    Set the point around which the trackball will rotate.
+-    //////////////////////////////////////////////////////////////////
+-    void setCenterOfRotation( const vec3f& c) {
+-        _examine.setCenterOfRotation( c);
+-    }
+-
+-
+-    void rotate( const nv::vec3f& axis, float angle ) {
+-      _examine.rotate(axis, angle);
+-    }
+-
+-protected:
+-    ExamineManipulator _examine;
+-};
+-
+-
+-};
+-
+-#endif
+diff --git a/nvcommon/include/nvManipulators.h b/nvcommon/include/nvManipulators.h
+deleted file mode 100644
+index 703fbe4..0000000
+--- a/nvcommon/include/nvManipulators.h
++++ /dev/null
+@@ -1,616 +0,0 @@
+-// Simple manipulator objects, for applying user input to a model
+-//
+-// This code is in part deriver from glh, cross platform glut helper library.
+-// The copyright for glh follows this notice.
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-/*
+-    Copyright (c) 2000 Cass Everitt
+-	Copyright (c) 2000 NVIDIA Corporation
+-    All rights reserved.
+-
+-    Redistribution and use in source and binary forms, with or
+-	without modification, are permitted provided that the following
+-	conditions are met:
+-
+-     * Redistributions of source code must retain the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer.
+-
+-     * Redistributions in binary form must reproduce the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer in the documentation and/or other materials
+-	   provided with the distribution.
+-
+-     * The names of contributors to this software may not be used
+-	   to endorse or promote products derived from this software
+-	   without specific prior written permission. 
+-
+-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+-	   POSSIBILITY OF SUCH DAMAGE. 
+-
+-
+-    Cass Everitt - cass@r3.nu
+-*/
+-
+-#ifndef NV_MANIPULATORS_H
+-#define NV_MANIPULATORS_H
+-
+-
+-#include <nvMath.h>
+-//#include <GL/glut.h>	// @@ Do not include here!
+-
+-namespace nv {
+-
+-inline void applyRotation(const quaternionf & r)
+-{
+-	float angle;
+-	vec3f axis;
+-	r.get_value(axis, angle);
+-	glRotatef( angle/3.1415926f * 180.0f, axis[0], axis[1], axis[2]);
+-}
+-
+-//
+-//
+-//  Base manipulator class
+-//
+-//////////////////////////////////////////////////////////////////////
+-class Manipulator{
+-
+-public:
+-
+-    enum Button {
+-        ENoButton = 0x0,
+-        ELeftButton = 0x1,
+-        EMiddleButton = 0x2,
+-        ERightButton = 0x4
+-    };
+-
+-    enum Modifier {
+-        ENoModifier = 0x0,
+-        EShiftModifier = 0x1,
+-        EControlModifier = 0x2,
+-        EAltModifier = 0x3
+-    };
+-
+-    Manipulator() : _width(0), _height(0) {}
+-    virtual ~Manipulator() {}
+-
+-    //
+-    //  reshape
+-    //
+-    //    This function should be called, whenever the region containing the control
+-    //  has been resized. Typically, this is a window resize event.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void reshape( int width, int height) { _width = width; _height = height; }
+-
+-    //
+-    //  mouse
+-    //
+-    //    This function should be invoked whenever the state of a mouse button
+-    //  changes.
+-    //    
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void mouse( Button button, Modifier mod, bool depressed, int x, int y) = 0;
+-
+-    //
+-    //  motion
+-    //
+-    //    This function should be called whenever the mouse is moved
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void motion( int x, int y) = 0;
+-
+-    //
+-    //  idle
+-    //
+-    //    This function should be called when no input is happening,
+-    //  but the manipulator is likely to need to update.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void idle() = 0;
+-
+-    //
+-    //  update
+-    //
+-    //    This function is called to apply the latest forces to the
+-    //  manipulator.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void update() = 0;
+-
+-    //
+-    //  applyTransform
+-    //
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual void applyTransform() = 0;
+-
+-    //
+-    //  getTransform
+-    //
+-    //    Compute the current transform based on the latest update, and
+-    //  return it as a 4x4 matrix.
+-    ////////////////////////////////////////////////////////////////////////////
+-    virtual matrix4f getTransform() = 0;
+-
+-protected:
+-
+-    int _width, _height;
+-};
+-
+-
+-//
+-// Trackball Manipulator
+-//
+-//////////////////////////////////////////////////////////////////////
+-class TrackballManipulator : public Manipulator {
+-
+-public:
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    TrackballManipulator() : _activateButton(ELeftButton), _activateModifiers(ENoModifier),  _active(false) {
+-        _r = quaternionf( 0.0f, 1.0f, 0.0f, 0.0f);
+-        _scale = 1.0f;
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void mouse( Button button, Modifier mod, bool depressed, int x, int y) {
+-        
+-        //check to see if this click changes our activation state
+-        if ( button == _activateButton && depressed && ( _activateModifiers != ENoModifier || (_activateModifiers == mod)) ) {
+-            
+-            _active = true;
+-            _x = _x0 = x;
+-            _y = _y0 = y;
+-            _dx = _dy = 0;
+-        }
+-        else if ( button == _activateButton && !depressed) {
+-            if(_dx == 0 && _dy == 0)
+-                update();
+-            _active = false;
+-            _dx = _dy = 0;
+-        }
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void motion( int x, int y) {
+-        if ( _active) {
+-            _dx = x - _x;   _dy = _y - y;
+-            _x = x;   _y = y;
+-            update();
+-        }
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void idle() {
+-        //simply increment the rotation
+-        _r = _incr*_r;
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void update() {
+-        float min = static_cast<float>(_width < _height ? _width : _height);
+-        min *= 0.5f;
+-        vec3f offset(_width/2.f, _height/2.f, 0);
+-        vec3f a(static_cast<float>(_x-_dx), static_cast<float>(_height - (_y+_dy)), 0);
+-        vec3f b(static_cast<float>(    _x), static_cast<float>(_height -      _y ), 0);
+-        a -= offset;
+-        b -= offset;
+-        a /= min;
+-        b /= min;
+-
+-        a[2] = powf(2.0f, -0.5f * length(a));
+-        a = normalize(a);
+-        b[2] = powf(2.0f, -0.5f * length(b));
+-        b = normalize(b);
+-
+-        vec3f axis = cross( a, b);
+-        axis = normalize(axis);
+-
+-        float angle = acos( dot( a, b));
+-
+-        //original glh version had an invert flag and a parent frame, do we need one?
+-
+-        _incr.set_value(axis, angle * _scale);
+-
+-        _r = _incr*_r;        
+-        
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    void applyTransform() {
+-        glTranslatef( _centroid[0], _centroid[1], _centroid[2]);
+-        applyRotation(_r);
+-        glTranslatef( -_centroid[0], -_centroid[1], -_centroid[2]);
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    matrix4f getTransform() {
+-        matrix4f trans, invTrans, rotation;
+-        _r.get_value( rotation);
+-        trans.set_translate( _centroid);
+-        invTrans.set_translate( -_centroid);
+-        return trans * rotation * invTrans;
+-    }
+-
+-    //
+-    //  setTrackballActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballActivate( Button b, Modifier m = ENoModifier) {
+-        _activateButton = b;
+-        _activateModifiers = m;
+-    }
+-
+-    //
+-    //  setTrackballScale
+-    //
+-    //    Set the speed for the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballScale( float scale) {
+-        _scale = scale;
+-    }
+-
+-    //
+-    //  setCenterOfRotation
+-    //
+-    //    Set the point around which the trackball will rotate.
+-    //////////////////////////////////////////////////////////////////
+-    void setCenterOfRotation( const vec3f& c) {
+-        _centroid = c;
+-    }
+-
+-	// get the rotation quaternion
+-	quaternionf &getRotation() { return _r; }
+-
+-protected:
+-
+-    int _x, _y;
+-    int _x0, _y0;
+-    int _dx, _dy;
+-
+-    // UI commands that this trackball responds to (defaults to left mouse button with no modifier key)
+-    Button _activateButton;
+-    Modifier _activateModifiers;
+-
+-    // Variable used to determine if the manipulator is presently tracking the mouse
+-    bool _active;
+-
+-    quaternionf _r;
+-    
+-    float _scale;
+-    quaternionf _incr;
+-    vec3f _centroid;
+-};
+-
+-
+-//
+-// Examine Manipulator
+-//
+-//  Combines a trackball interface with pan and dolly operations
+-//
+-//////////////////////////////////////////////////////////////////////
+-class ExamineManipulator : public Manipulator {
+-
+-public:
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    ExamineManipulator() : _tbActivateButton(ELeftButton), _dActivateButton(ERightButton), _pActivateButton(EMiddleButton),
+-            _tbActivateModifiers(ENoModifier), _dActivateModifiers(ENoModifier), _pActivateModifiers(ENoModifier), _tbActive(false), _dActive(false), _pActive(false) {
+-        _r = quaternionf( 0.0f, 1.0f, 0.0f, 0.0f);
+-        _incr = quaternionf( 0.0f, 0.0f, 0.0f, 1.0f); //no rotation
+-        _tbScale = 1.0f;
+-        _dScale = 0.01f;
+-        _pScale = 0.01f;
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void mouse( Button button, Modifier mod, bool depressed, int x, int y) {
+-        
+-        if ( button == _tbActivateButton && depressed && (_tbActivateModifiers == mod) ) {
+-            
+-            _tbActive = true;
+-            _x = _x0 = x;
+-            _y = _y0 = y;
+-            _dx = _dy = 0;
+-        }
+-        else if ( button == _tbActivateButton && !depressed) {
+-            if(_dx == 0 && _dy == 0)
+-                update();
+-            _tbActive = false;
+-            _dx = _dy = 0;
+-        }
+-        
+-        if ( button == _dActivateButton && depressed && (_dActivateModifiers == mod) ) {
+-            
+-            _dActive = true;
+-            _x = _x0 = x;
+-            _y = _y0 = y;
+-            _dx = _dy = 0;
+-        }
+-        else if ( button == _dActivateButton && !depressed) {
+-            if(_dx == 0 && _dy == 0)
+-                update();
+-            _dActive = false;
+-            _dx = _dy = 0;
+-        }
+-        
+-        if ( button == _pActivateButton && depressed && (_pActivateModifiers == mod) ) {
+-            
+-            _pActive = true;
+-            _x = _x0 = x;
+-            _y = _y0 = y;
+-            _dx = _dy = 0;
+-        }
+-        else if ( button == _pActivateButton && !depressed) {
+-            if(_dx == 0 && _dy == 0)
+-                update();
+-            _pActive = false;
+-            _dx = _dy = 0;
+-        }
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void motion( int x, int y) {
+-        if ( _tbActive || _dActive || _pActive) {
+-            _dx = x - _x;   _dy = _y - y;
+-            _x = x;   _y = y;
+-            update();
+-        }
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void idle() {
+-        //simply increment the rotation
+-        _r = _incr*_r;
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    void updateTrackball() {
+-        float min = static_cast<float>(_width < _height ? _width : _height);
+-        min *= 0.5f;
+-        vec3f offset(_width/2.f, _height/2.f, 0);
+-        vec3f a(static_cast<float>(_x-_dx), static_cast<float>(_height - (_y+_dy)), 0);
+-        vec3f b(static_cast<float>(    _x), static_cast<float>(_height -      _y ), 0);
+-        a -= offset;
+-        b -= offset;
+-        a /= min;
+-        b /= min;
+-
+-        a[2] = pow(2.0f, -0.5f * length(a));
+-        a = normalize(a);
+-        b[2] = pow(2.0f, -0.5f * length(b));
+-        b = normalize(b);
+-
+-        vec3f axis = cross( a, b);
+-        axis = normalize(axis);
+-
+-        float angle = acos( dot( a, b));
+-
+-        //original glh version had an invert flag and a parent frame, do we need one?
+-
+-        _incr.set_value(axis, angle * _tbScale);
+-
+-        _r = _incr*_r;
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    void rotate(const nv::vec3f& axis, float angle) {
+-      nv::quaternionf q;
+-      q.set_value(axis, angle);
+-      _r = q * _r;
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    void updatePan() {
+-        vec3f v(static_cast<float>(_dx), static_cast<float>(_dy), 0);
+-	  
+-        _pan += v * _pScale;
+-	}
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    void updateDolly() {
+-        vec3f v(0,0,static_cast<float>(_dy));
+-
+-        _dolly -= v * _dScale;
+-	}
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    virtual void update() {
+-        if (_tbActive)
+-            updateTrackball();
+-        if (_dActive)
+-            updateDolly();
+-        if (_pActive)
+-            updatePan();
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    void applyTransform() {
+-        glTranslatef( _pan[0], _pan[1], _pan[2]);
+-        glTranslatef( _dolly[0], _dolly[1], _dolly[2]);
+-        glTranslatef( _centroid[0], _centroid[1], _centroid[2]);
+-        applyRotation(_r);
+-        glTranslatef( -_centroid[0], -_centroid[1], -_centroid[2]);
+-    }
+-
+-    //
+-    //
+-    //////////////////////////////////////////////////////////////////
+-    matrix4f getTransform() {
+-        matrix4f trans, invTrans, rotation;
+-        matrix4f pan, dolly;
+-
+-        //create pan and dolly translations
+-        pan.set_translate( _pan);
+-        dolly.set_translate( _dolly);
+-
+-        //create the trackball rotation
+-        _r.get_value( rotation);
+-
+-        //create the translations to move the center of rotation to the origin and back
+-        trans.set_translate( _centroid);
+-        invTrans.set_translate( -_centroid);
+-
+-        //concatenate all the tranforms
+-        return pan * dolly * trans * rotation * invTrans;
+-    }
+-
+-    //
+-    //  setTrackballActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballActivate( Button b, Modifier m = ENoModifier) {
+-        _tbActivateButton = b;
+-        _tbActivateModifiers = m;
+-    }
+-
+-    //
+-    //  setTrackballScale
+-    //
+-    //    Set the speed for the trackball.
+-    //////////////////////////////////////////////////////////////////
+-    void setTrackballScale( float scale) {
+-        _tbScale = scale;
+-    }
+-
+-    //
+-    //  setDollyActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the dolly operation.
+-    //////////////////////////////////////////////////////////////////
+-    void setDollyActivate( Button b, Modifier m = ENoModifier) {
+-        _dActivateButton = b;
+-        _dActivateModifiers = m;
+-    }
+-
+-    //
+-    //  setDollyScale
+-    //
+-    //    Set the speed for the dolly operation.
+-    //////////////////////////////////////////////////////////////////
+-    void setDollyScale( float scale) {
+-        _dScale = scale;
+-    }
+-
+-    //
+-    //  setDollyPosition
+-    //
+-    //    Set the Dolly to a specified distance.
+-    //////////////////////////////////////////////////////////////////
+-    void setDollyPosition( float pos) {
+-        _dolly.z = pos;
+-    }
+-
+-    //
+-    //  setPanActivate
+-    //
+-    //    Set the mouse button and optional modifiers that activate
+-    //  the pan operation.
+-    //////////////////////////////////////////////////////////////////
+-    void setPanActivate( Button b, Modifier m = ENoModifier) {
+-        _pActivateButton = b;
+-        _pActivateModifiers = m;
+-    }
+-
+-    //
+-    //  setPanScale
+-    //
+-    //    Set the speed for panning.
+-    //////////////////////////////////////////////////////////////////
+-    void setPanScale( float scale) {
+-        _pScale = scale;
+-    }
+-
+-    //
+-    //  setCenterOfRotation
+-    //
+-    //    Set the point around which the trackball will rotate.
+-    //////////////////////////////////////////////////////////////////
+-    void setCenterOfRotation( const vec3f& c) {
+-        _centroid = c;
+-    }
+-
+-	// get the rotation quaternion
+-	quaternionf &getRotation() { return _r; }
+-
+-	// get the rotation increment
+-	quaternionf &getIncrement() { return _incr; }
+-
+-protected:
+-
+-    int _x, _y;
+-    int _x0, _y0;
+-    int _dx, _dy;
+-
+-    // UI commands that this trackball responds to (defaults to left mouse button with no modifier key)
+-    Button _tbActivateButton, _dActivateButton, _pActivateButton;
+-    Modifier _tbActivateModifiers, _dActivateModifiers, _pActivateModifiers;
+-
+-    // Variable used to determine if the manipulator is presently tracking the mouse
+-    bool _tbActive;
+-    bool _dActive;
+-    bool _pActive;
+-
+-    quaternionf _r;
+-    vec3f _pan;
+-    vec3f _dolly;
+-    
+-    float _tbScale; //trackball scale
+-    float _dScale;  //dolly scale
+-    float _pScale;   //pan scale
+-    quaternionf _incr;
+-    vec3f _centroid;
+-};
+-
+-};
+-
+-#endif
+diff --git a/nvcommon/include/nvMath.h b/nvcommon/include/nvMath.h
+deleted file mode 100644
+index cba1d14..0000000
+--- a/nvcommon/include/nvMath.h
++++ /dev/null
+@@ -1,77 +0,0 @@
+-//
+-// Template math library for common 3D functionality
+-//
+-// This code is in part deriver from glh, a cross platform glut helper library.
+-// The copyright for glh follows this notice.
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-/*
+-    Copyright (c) 2000 Cass Everitt
+-	Copyright (c) 2000 NVIDIA Corporation
+-    All rights reserved.
+-
+-    Redistribution and use in source and binary forms, with or
+-	without modification, are permitted provided that the following
+-	conditions are met:
+-
+-     * Redistributions of source code must retain the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer.
+-
+-     * Redistributions in binary form must reproduce the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer in the documentation and/or other materials
+-	   provided with the distribution.
+-
+-     * The names of contributors to this software may not be used
+-	   to endorse or promote products derived from this software
+-	   without specific prior written permission. 
+-
+-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+-	   POSSIBILITY OF SUCH DAMAGE. 
+-
+-
+-    Cass Everitt - cass@r3.nu
+-*/
+-
+-#ifndef NV_MATH_H
+-#define NV_MATH_H
+-
+-#include <math.h>
+-
+-#include <nvVector.h>
+-#include <nvMatrix.h>
+-#include <nvQuaternion.h>
+-
+-#define NV_PI   float(3.1415926535897932384626433832795)
+-
+-namespace nv {
+-
+-typedef vec2<float> vec2f;
+-typedef vec2<int> vec2i;
+-typedef vec2<unsigned int> vec2ui;
+-typedef vec3<float> vec3f;
+-typedef vec3<int> vec3i;
+-typedef vec3<unsigned int> vec3ui;
+-typedef vec4<float> vec4f;
+-typedef vec4<int> vec4i;
+-typedef vec4<unsigned int> vec4ui;
+-typedef matrix4<float> matrix4f;
+-typedef quaternion<float> quaternionf;
+-
+-};
+-
+-#endif
+-
+diff --git a/nvcommon/include/nvMatrix.h b/nvcommon/include/nvMatrix.h
+deleted file mode 100644
+index a5dad9c..0000000
+--- a/nvcommon/include/nvMatrix.h
++++ /dev/null
+@@ -1,378 +0,0 @@
+-//
+-// Template math library for common 3D functionality
+-//
+-// nvMatrix.h - template matrix code
+-//
+-// This code is in part deriver from glh, a cross platform glut helper library.
+-// The copyright for glh follows this notice.
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-/*
+-    Copyright (c) 2000 Cass Everitt
+-	Copyright (c) 2000 NVIDIA Corporation
+-    All rights reserved.
+-
+-    Redistribution and use in source and binary forms, with or
+-	without modification, are permitted provided that the following
+-	conditions are met:
+-
+-     * Redistributions of source code must retain the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer.
+-
+-     * Redistributions in binary form must reproduce the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer in the documentation and/or other materials
+-	   provided with the distribution.
+-
+-     * The names of contributors to this software may not be used
+-	   to endorse or promote products derived from this software
+-	   without specific prior written permission. 
+-
+-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+-	   POSSIBILITY OF SUCH DAMAGE. 
+-
+-
+-    Cass Everitt - cass@r3.nu
+-*/
+-
+-#ifndef NV_MATRIX_H
+-#define NV_MATRIX_H
+-
+-namespace nv {
+-
+-template <class T> class vec2;
+-template <class T> class vec3;
+-template <class T> class vec4;
+-
+-////////////////////////////////////////////////////////////////////////////////
+-//
+-//  Matrix
+-//
+-////////////////////////////////////////////////////////////////////////////////
+-template<class T>
+-class matrix4
+-{
+-
+-public:
+-
+-    matrix4() { make_identity(); }
+-
+-    matrix4( T t ) 
+-    { set_value(t); }
+-
+-    matrix4( const T * m )
+-    { set_value(m); }
+-
+-    matrix4( T a00, T a01, T a02, T a03,
+-        T a10, T a11, T a12, T a13,
+-        T a20, T a21, T a22, T a23,
+-        T a30, T a31, T a32, T a33 ) :
+-    _11(a00), _12(a01), _13(a02), _14(a03),
+-    _21(a10), _22(a11), _23(a12), _24(a13),
+-    _31(a20), _32(a21), _33(a22), _34(a23),
+-    _41(a30), _42(a31), _43(a32), _44(a33)
+-    {}
+-
+-
+-    void get_value( T * mp ) const {
+-        int c = 0;
+-        for(int j=0; j < 4; j++)
+-            for(int i=0; i < 4; i++)
+-                mp[c++] = element(i,j);
+-    }
+-
+-    const T * get_value() const {
+-        return _array;
+-    }
+-
+-    void set_value( T * mp) {
+-        int c = 0;
+-        for(int j=0; j < 4; j++)
+-            for(int i=0; i < 4; i++)
+-                element(i,j) = mp[c++];
+-    }
+-
+-    void set_value( T r ) {
+-        for(int i=0; i < 4; i++)
+-            for(int j=0; j < 4; j++)
+-                element(i,j) = r;
+-    }
+-
+-    void make_identity() {
+-        element(0,0) = 1.0;
+-        element(0,1) = 0.0;
+-        element(0,2) = 0.0; 
+-        element(0,3) = 0.0;
+-
+-        element(1,0) = 0.0;
+-        element(1,1) = 1.0; 
+-        element(1,2) = 0.0;
+-        element(1,3) = 0.0;
+-
+-        element(2,0) = 0.0;
+-        element(2,1) = 0.0;
+-        element(2,2) = 1.0;
+-        element(2,3) = 0.0;
+-
+-        element(3,0) = 0.0; 
+-        element(3,1) = 0.0; 
+-        element(3,2) = 0.0;
+-        element(3,3) = 1.0;
+-    }
+-
+-    // set a uniform scale
+-    void set_scale( T s ) {
+-        element(0,0) = s;
+-        element(1,1) = s;
+-        element(2,2) = s;
+-    }
+-
+-    void set_scale( const vec3<T> & s ) {
+-        for (int i = 0; i < 3; i++) element(i,i) = s[i];
+-    }
+-
+-
+-    void set_translate( const vec3<T> & t ) {
+-        for (int i = 0; i < 3; i++) element(i,3) = t[i];
+-    }
+-
+-    void set_row(int r, const vec4<T> & t) {
+-        for (int i = 0; i < 4; i++) element(r,i) = t[i];
+-    }
+-
+-    void set_column(int c, const vec4<T> & t) {
+-        for (int i = 0; i < 4; i++) element(i,c) = t[i];
+-    }
+-
+-    vec4<T> get_row(int r) const {
+-        vec4<T> v;
+-        for (int i = 0; i < 4; i++) v[i] = element(r,i);
+-        return v;
+-    }
+-
+-    vec4<T> get_column(int c) const {
+-        vec4<T> v;
+-        for (int i = 0; i < 4; i++) v[i] = element(i,c);
+-        return v;
+-    }
+-
+-    friend matrix4 inverse( const matrix4 & m) {
+-        matrix4 minv;
+-
+-        T r1[8], r2[8], r3[8], r4[8];
+-        T *s[4], *tmprow;
+-
+-        s[0] = &r1[0];
+-        s[1] = &r2[0];
+-        s[2] = &r3[0];
+-        s[3] = &r4[0];
+-
+-        int i,j,p,jj;
+-        for(i=0;i<4;i++) {
+-            for(j=0;j<4;j++) {
+-                s[i][j] = m.element(i,j);
+-                if(i==j) s[i][j+4] = 1.0;
+-                else     s[i][j+4] = 0.0;
+-            }
+-        }
+-        T scp[4];
+-        for(i=0;i<4;i++) {
+-            scp[i] = T(fabs(s[i][0]));
+-            for(j=1;j<4;j++)
+-                if(T(fabs(s[i][j])) > scp[i]) scp[i] = T(fabs(s[i][j]));
+-            if(scp[i] == 0.0) return minv; // singular matrix!
+-        }
+-
+-        int pivot_to;
+-        T scp_max;
+-        for(i=0;i<4;i++) {
+-            // select pivot row
+-            pivot_to = i;
+-            scp_max = T(fabs(s[i][i]/scp[i]));
+-            // find out which row should be on top
+-            for(p=i+1;p<4;p++)
+-                if (T(fabs(s[p][i]/scp[p])) > scp_max) {
+-                    scp_max = T(fabs(s[p][i]/scp[p]));
+-                    pivot_to = p;
+-                }
+-            // Pivot if necessary
+-            if(pivot_to != i) {
+-                tmprow = s[i];
+-                s[i] = s[pivot_to];
+-                s[pivot_to] = tmprow;
+-                T tmpscp;
+-                tmpscp = scp[i];
+-                scp[i] = scp[pivot_to];
+-                scp[pivot_to] = tmpscp;
+-            }
+-
+-            T mji;
+-            // perform gaussian elimination
+-            for(j=i+1;j<4;j++) {
+-                mji = s[j][i]/s[i][i];
+-                s[j][i] = 0.0;
+-                for(jj=i+1;jj<8;jj++)
+-                    s[j][jj] -= mji*s[i][jj];
+-            }
+-        }
+-        if(s[3][3] == 0.0) return minv; // singular matrix!
+-
+-        //
+-        // Now we have an upper triangular matrix.
+-        //
+-        //  x x x x | y y y y
+-        //  0 x x x | y y y y 
+-        //  0 0 x x | y y y y
+-        //  0 0 0 x | y y y y
+-        //
+-        //  we'll back substitute to get the inverse
+-        //
+-        //  1 0 0 0 | z z z z
+-        //  0 1 0 0 | z z z z
+-        //  0 0 1 0 | z z z z
+-        //  0 0 0 1 | z z z z 
+-        //
+-
+-        T mij;
+-        for(i=3;i>0;i--) {
+-            for(j=i-1;j > -1; j--) {
+-                mij = s[j][i]/s[i][i];
+-                for(jj=j+1;jj<8;jj++)
+-                    s[j][jj] -= mij*s[i][jj];
+-            }
+-        }
+-
+-        for(i=0;i<4;i++)
+-            for(j=0;j<4;j++)
+-                minv(i,j) = s[i][j+4] / s[i][i];
+-
+-        return minv;
+-    }
+-
+-
+-    friend matrix4 transpose( const matrix4 & m) {
+-        matrix4 mtrans;
+-
+-        for(int i=0;i<4;i++)
+-            for(int j=0;j<4;j++)
+-                mtrans(i,j) = m.element(j,i);		
+-        return mtrans;
+-    }
+-
+-    matrix4 & operator *= ( const matrix4 & rhs ) {
+-        matrix4 mt(*this);
+-        set_value(T(0));
+-
+-        for(int i=0; i < 4; i++)
+-            for(int j=0; j < 4; j++)
+-                for(int c=0; c < 4; c++)
+-                    element(i,j) += mt(i,c) * rhs(c,j);
+-        return *this;
+-    }
+-
+-    friend matrix4 operator * ( const matrix4 & lhs, const matrix4 & rhs ) {
+-        matrix4 r(T(0));
+-
+-        for(int i=0; i < 4; i++)
+-            for(int j=0; j < 4; j++)
+-                for(int c=0; c < 4; c++)
+-                    r.element(i,j) += lhs(i,c) * rhs(c,j);
+-        return r;
+-    }
+-
+-    // dst = M * src
+-    vec4<T> operator *( const vec4<T> &src) const {
+-        vec4<T> r;
+-        for ( int i = 0; i < 4; i++)
+-            r[i]  = ( src[0] * element(i,0) + src[1] * element(i,1) +
+-                      src[2] * element(i,2) + src[3] * element(i,3));
+-        return r;
+-    }
+-
+-    // dst = src * M
+-    friend vec4<T> operator *( const vec4<T> &lhs, const matrix4 &rhs) {
+-        vec4<T> r;
+-        for ( int i = 0; i < 4; i++)
+-            r[i]  = ( lhs[0] * rhs.element(0,i) + lhs[1] * rhs.element(1,i) +
+-                      lhs[2] * rhs.element(2,i) + lhs[3] * rhs.element(3,i));
+-        return r;
+-    }
+-
+-    T & operator () (int row, int col) {
+-        return element(row,col);
+-    }
+-
+-    const T & operator () (int row, int col) const {
+-        return element(row,col);
+-    }
+-
+-    T & element (int row, int col) {
+-        return _array[row | (col<<2)];
+-    }
+-
+-    const T & element (int row, int col) const {
+-        return _array[row | (col<<2)];
+-    }
+-
+-    matrix4 & operator *= ( const T & r ) {
+-        for (int i = 0; i < 4; ++i) {
+-            element(0,i) *= r;
+-            element(1,i) *= r;
+-            element(2,i) *= r;
+-            element(3,i) *= r;
+-        }
+-        return *this;
+-    }
+-
+-    matrix4 & operator += ( const matrix4 & mat ) {
+-        for (int i = 0; i < 4; ++i) {
+-            element(0,i) += mat.element(0,i);
+-            element(1,i) += mat.element(1,i);
+-            element(2,i) += mat.element(2,i);
+-            element(3,i) += mat.element(3,i);
+-        }
+-        return *this;
+-    }
+-
+-    
+-    friend bool operator == ( const matrix4 & lhs, const matrix4 & rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < 16; i++)
+-            r &= lhs._array[i] == rhs._array[i];
+-        return r;
+-    }
+-
+-    friend bool operator != ( const matrix4 & lhs, const matrix4 & rhs )  {
+-        bool r = true;
+-        for (int i = 0; i < 16; i++)
+-            r &= lhs._array[i] != rhs._array[i];
+-        return r;
+-    }
+-
+-    union {
+-        struct {
+-            T _11, _12, _13, _14;   // standard names for components
+-            T _21, _22, _23, _24;   // standard names for components
+-            T _31, _32, _33, _34;   // standard names for components
+-            T _41, _42, _43, _44;   // standard names for components
+-        };
+-        T _array[16];     // array access
+-    };
+-};
+-
+-};
+-
+-#endif
+diff --git a/nvcommon/include/nvQuaternion.h b/nvcommon/include/nvQuaternion.h
+deleted file mode 100644
+index 40f4a98..0000000
+--- a/nvcommon/include/nvQuaternion.h
++++ /dev/null
+@@ -1,457 +0,0 @@
+-//
+-// Template math library for common 3D functionality
+-//
+-// nvQuaterion.h - quaternion template and utility functions
+-//
+-// This code is in part deriver from glh, a cross platform glut helper library.
+-// The copyright for glh follows this notice.
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-/*
+-    Copyright (c) 2000 Cass Everitt
+-	Copyright (c) 2000 NVIDIA Corporation
+-    All rights reserved.
+-
+-    Redistribution and use in source and binary forms, with or
+-	without modification, are permitted provided that the following
+-	conditions are met:
+-
+-     * Redistributions of source code must retain the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer.
+-
+-     * Redistributions in binary form must reproduce the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer in the documentation and/or other materials
+-	   provided with the distribution.
+-
+-     * The names of contributors to this software may not be used
+-	   to endorse or promote products derived from this software
+-	   without specific prior written permission. 
+-
+-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+-	   POSSIBILITY OF SUCH DAMAGE. 
+-
+-
+-    Cass Everitt - cass@r3.nu
+-*/
+-#ifndef NV_QUATERNION_H
+-#define NV_QUATERNION_H
+-
+-namespace nv {
+-
+-template <class T> class vec2;
+-template <class T> class vec3;
+-template <class T> class vec4;
+-
+-////////////////////////////////////////////////////////////////////////////////
+-//
+-//  Quaternion
+-//
+-////////////////////////////////////////////////////////////////////////////////
+-
+-template< class T>
+-class quaternion
+-{
+-public:
+-
+-    quaternion() : x(0.0), y(0.0), z(0.0), w(0.0)
+-    {
+-    }
+-
+-    quaternion( const T v[4] )
+-    {
+-        set_value( v );
+-    }
+-
+-
+-    quaternion( T q0, T q1, T q2, T q3 )
+-    {
+-        set_value( q0, q1, q2, q3 );
+-    }
+-
+-
+-    quaternion( const matrix4<T> & m )
+-    {
+-        set_value( m );
+-    }
+-
+-
+-    quaternion( const vec3<T> &axis, T radians )
+-    {
+-        set_value( axis, radians );
+-    }
+-
+-
+-    quaternion( const vec3<T> &rotateFrom, const vec3<T> &rotateTo )
+-    {
+-        set_value( rotateFrom, rotateTo );
+-    }
+-
+-    quaternion( const vec3<T> & from_look, const vec3<T> & from_up,
+-        const vec3<T>& to_look, const vec3<T>& to_up)
+-    {
+-        set_value(from_look, from_up, to_look, to_up);
+-    }
+-
+-    const T * get_value() const
+-    {
+-        return  &_array[0];
+-    }
+-
+-    void get_value( T &q0, T &q1, T &q2, T &q3 ) const
+-    {
+-        q0 = x;
+-        q1 = y;
+-        q2 = z;
+-        q3 = w;
+-    }
+-
+-    quaternion & set_value( T q0, T q1, T q2, T q3 )
+-    {
+-        _array[0] = q0;
+-        _array[1] = q1;
+-        _array[2] = q2;
+-        _array[3] = q3;
+-        return *this;
+-    }
+-
+-    void get_value( vec3<T> &axis, T &radians ) const
+-    {
+-        radians = T(acos( _array[3] ) * T(2.0));
+-        if ( radians == T(0.0) )
+-            axis = vec3<T>( 0.0, 0.0, 1.0 );
+-        else
+-        {
+-            axis[0] = _array[0];
+-            axis[1] = _array[1];
+-            axis[2] = _array[2];
+-            axis = normalize(axis);
+-        }
+-    }
+-
+-    void get_value( matrix4<T> & m ) const
+-    {
+-        T s, xs, ys, zs, wx, wy, wz, xx, xy, xz, yy, yz, zz;
+-
+-        T norm = _array[0] * _array[0] + _array[1] * _array[1] + _array[2] * _array[2] + _array[3] * _array[3];
+-
+-        s = ( norm == T(0.0)) ? T(0.0) : ( T(2.0) / norm );
+-
+-        xs = _array[0] * s;
+-        ys = _array[1] * s;
+-        zs = _array[2] * s;
+-
+-        wx = _array[3] * xs;
+-        wy = _array[3] * ys;
+-        wz = _array[3] * zs;
+-
+-        xx = _array[0] * xs;
+-        xy = _array[0] * ys;
+-        xz = _array[0] * zs;
+-
+-        yy = _array[1] * ys;
+-        yz = _array[1] * zs;
+-        zz = _array[2] * zs;
+-
+-        m(0,0) = T( T(1.0) - ( yy + zz ));
+-        m(1,0) = T ( xy + wz );
+-        m(2,0) = T ( xz - wy );
+-
+-        m(0,1) = T ( xy - wz );
+-        m(1,1) = T ( T(1.0) - ( xx + zz ));
+-        m(2,1) = T ( yz + wx );
+-
+-        m(0,2) = T ( xz + wy );
+-        m(1,2) = T ( yz - wx );
+-        m(2,2) = T ( T(1.0) - ( xx + yy ));
+-
+-        m(3,0) = m(3,1) = m(3,2) = m(0,3) = m(1,3) = m(2,3) = T(0.0);
+-        m(3,3) = T(1.0);
+-    }
+-
+-    quaternion & set_value( const T * qp )
+-    {
+-        for ( int i = 0; i < 4; i++) _array[i] = qp[i];
+-
+-        return *this;
+-    }
+-
+-    quaternion & set_value( const matrix4<T> & m )
+-    {
+-        T tr, s;
+-        int i, j, k;
+-        const int nxt[3] = { 1, 2, 0 };
+-
+-        tr = m(0,0) + m(1,1) + m(2,2);
+-
+-        if ( tr > T(0) )
+-        {
+-            s = T(sqrt( tr + m(3,3) ));
+-            _array[3] = T ( s * 0.5 );
+-            s = T(0.5) / s;
+-
+-            _array[0] = T ( ( m(1,2) - m(2,1) ) * s );
+-            _array[1] = T ( ( m(2,0) - m(0,2) ) * s );
+-            _array[2] = T ( ( m(0,1) - m(1,0) ) * s );
+-        }
+-        else
+-        {
+-            i = 0;
+-            if ( m(1,1) > m(0,0) )
+-                i = 1;
+-
+-            if ( m(2,2) > m(i,i) )
+-                i = 2;
+-
+-            j = nxt[i];
+-            k = nxt[j];
+-
+-            s = T(sqrt( ( m(i,j) - ( m(j,j) + m(k,k) )) + T(1.0) ));
+-
+-            _array[i] = T ( s * 0.5 );
+-            s = T(0.5 / s);
+-
+-            _array[3] = T ( ( m(j,k) - m(k,j) ) * s );
+-            _array[j] = T ( ( m(i,j) + m(j,i) ) * s );
+-            _array[k] = T ( ( m(i,k) + m(k,i) ) * s );
+-        }
+-
+-        return *this;
+-    }
+-
+-    quaternion & set_value( const vec3<T> &axis, T theta )
+-    {
+-        T sqnorm = square_norm(axis);
+-
+-        if (sqnorm == T(0.0))
+-        {
+-            // axis too small.
+-            x = y = z = T(0.0);
+-            w = T(1.0);
+-        } 
+-        else 
+-        {
+-            theta *= T(0.5);
+-            T sin_theta = T(sin(theta));
+-
+-            if ( sqnorm != T(1)) 
+-                sin_theta /= T(sqrt(sqnorm));
+-            x = sin_theta * axis[0];
+-            y = sin_theta * axis[1];
+-            z = sin_theta * axis[2];
+-            w = T(cos(theta));
+-        }
+-        return *this;
+-    }
+-
+-    quaternion & set_value( const vec3<T> & rotateFrom, const vec3<T> & rotateTo )
+-    {
+-        vec3<T> p1, p2;
+-        T alpha;
+-
+-        p1 = normalize(rotateFrom);
+-        p2 = normalize(rotateTo);
+-
+-        alpha = dot( p1, p2);
+-
+-        if( alpha == T(1.0) ) {
+-            *this = quaternion(); 
+-            return *this; 
+-        }
+-
+-        // ensures that the anti-parallel case leads to a positive dot
+-        if( alpha == T(-1.0))
+-        {
+-            vec3<T> v;
+-
+-            if(p1[0] != p1[1] || p1[0] != p1[2])
+-                v = vec3<T>(p1[1], p1[2], p1[0]);
+-            else
+-                v = vec3<T>(-p1[0], p1[1], p1[2]);
+-
+-            v -= p1 * dot( p1, v);
+-            v = normalize(v);
+-
+-            set_value(v, T(3.1415926));
+-            return *this;
+-        }
+-
+-        p1 = normalize( cross( p1, p2));  
+-        
+-        set_value(p1,T(acos(alpha)));
+-
+-        return *this;
+-    }
+-
+-    quaternion & set_value( const vec3<T> & from_look, const vec3<T> & from_up,
+-        const vec3<T> & to_look, const vec3<T> & to_up)
+-    {
+-        quaternion r_look = quaternion(from_look, to_look);
+-
+-        vec3<T> rotated_from_up(from_up);
+-        r_look.mult_vec(rotated_from_up);
+-
+-        quaternion r_twist = quaternion(rotated_from_up, to_up);
+-
+-        *this = r_twist;
+-        *this *= r_look;
+-        return *this;
+-    }
+-
+-    quaternion & operator *= ( const quaternion<T> & qr ) {
+-        quaternion ql(*this);
+-
+-        w = ql.w * qr.w - ql.x * qr.x - ql.y * qr.y - ql.z * qr.z;
+-        x = ql.w * qr.x + ql.x * qr.w + ql.y * qr.z - ql.z * qr.y;
+-        y = ql.w * qr.y + ql.y * qr.w + ql.z * qr.x - ql.x * qr.z;
+-        z = ql.w * qr.z + ql.z * qr.w + ql.x * qr.y - ql.y * qr.x;
+-
+-        return *this;
+-    }
+-
+-    friend quaternion normalize( const quaternion<T> &q) {
+-        quaternion r(q);
+-        T rnorm = T(1.0) / T(sqrt( q.w * q.w + q.x * q.x + q.y * q.y + q.z * q.z));
+-        
+-        r.x *= rnorm;
+-        r.y *= rnorm;
+-        r.z *= rnorm;
+-        r.w *= rnorm;
+-    }
+-
+-    friend quaternion<T> conjugate( const quaternion<T> & q) {
+-        quaternion<T> r(q);
+-        r._array[0] *= T(-1.0);
+-        r._array[1] *= T(-1.0);
+-        r._array[2] *= T(-1.0);
+-        return r;
+-    }
+-
+-    friend quaternion<T> inverse( const quaternion<T> & q) {
+-        return conjugate(q);
+-    }
+-
+-    //
+-    // Quaternion multiplication with cartesian vector
+-    // v' = q*v*q(star)
+-    //
+-    void mult_vec( const vec3<T> &src, vec3<T> &dst ) const
+-    {
+-        T v_coef = w * w - x * x - y * y - z * z;                     
+-        T u_coef = T(2.0) * (src[0] * x + src[1] * y + src[2] * z);  
+-        T c_coef = T(2.0) * w;                                       
+-
+-        dst.v[0] = v_coef * src.v[0] + u_coef * x + c_coef * (y * src.v[2] - z * src.v[1]);
+-        dst.v[1] = v_coef * src.v[1] + u_coef * y + c_coef * (z * src.v[0] - x * src.v[2]);
+-        dst.v[2] = v_coef * src.v[2] + u_coef * z + c_coef * (x * src.v[1] - y * src.v[0]);
+-    }
+-
+-    void mult_vec( vec3<T> & src_and_dst) const
+-    {
+-        mult_vec(vec3<T>(src_and_dst), src_and_dst);
+-    }
+-
+-    void scale_angle( T scaleFactor ) {
+-        vec3<T> axis;
+-        T radians;
+-
+-        get_value(axis, radians);
+-        radians *= scaleFactor;
+-        set_value(axis, radians);
+-    }
+-
+-    friend quaternion<T> slerp( const quaternion<T> & p, const quaternion<T> & q, T alpha )
+-    {
+-        quaternion r;
+-
+-        T cos_omega = p.x * q.x + p.y * q.y + p.z * q.z + p.w * q.w;
+-        // if B is on opposite hemisphere from A, use -B instead
+-
+-        int bflip;
+-        if ( ( bflip = (cos_omega < T(0))) )
+-            cos_omega = -cos_omega;
+-
+-        // complementary interpolation parameter
+-        T beta = T(1) - alpha;     
+-
+-        if(cos_omega >= T(1))
+-            return p;
+-
+-        T omega = T(acos(cos_omega));
+-        T one_over_sin_omega = T(1.0) / T(sin(omega));
+-
+-        beta    = T(sin(omega*beta)  * one_over_sin_omega);
+-        alpha   = T(sin(omega*alpha) * one_over_sin_omega);
+-
+-        if (bflip)
+-            alpha = -alpha;
+-
+-        r.x = beta * p._array[0]+ alpha * q._array[0];
+-        r.y = beta * p._array[1]+ alpha * q._array[1];
+-        r.z = beta * p._array[2]+ alpha * q._array[2];
+-        r.w = beta * p._array[3]+ alpha * q._array[3];
+-        return r;
+-    }
+-
+-    T & operator []( int i ) {
+-        return _array[i];
+-    }
+-
+-    const T & operator []( int i ) const {
+-        return _array[i];
+-    }
+-
+-    
+-    friend bool operator == ( const quaternion<T> & lhs, const quaternion<T> & rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < 4; i++)
+-            r &= lhs._array[i] == rhs._array[i]; 
+-        return r;
+-    }
+-
+-    friend bool operator != ( const quaternion<T> & lhs, const quaternion<T> & rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < 4; i++)
+-            r &= lhs._array[i] == rhs._array[i]; 
+-        return r;
+-    }
+-
+-    friend quaternion<T> operator * ( const quaternion<T> & lhs, const quaternion<T> & rhs ) {	
+-        quaternion r(lhs); 
+-        r *= rhs; 
+-        return r; 
+-    }
+-
+-
+-    union 
+-    {
+-        struct
+-        {
+-            T x;
+-            T y;
+-            T z;
+-            T w;
+-        };
+-        T _array[4];
+-    };
+-
+-};
+-
+-
+-
+-};
+-
+-#endif
+diff --git a/nvcommon/include/nvSDKPath.h b/nvcommon/include/nvSDKPath.h
+deleted file mode 100644
+index 93dfe2f..0000000
+--- a/nvcommon/include/nvSDKPath.h
++++ /dev/null
+@@ -1,82 +0,0 @@
+-//
+-//
+-//
+-//
+-//
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////////////////////////
+-
+-#ifndef NV_SDK_PATH_H
+-#define NV_SDK_PATH_H
+-
+-#include <stdlib.h>
+-#include <stdio.h>
+-#include <vector>
+-#include <string>
+-
+-namespace nv {
+-
+-    class SDKPath {
+-    
+-    public:
+-        SDKPath() {
+-            const char *env = getenv("NVSDK10OGL_ROOT");
+-
+-            //search local paths first, in-case someone has the SDK installed while hacking another copy 
+-            _pathList.push_back("./");  // present directory
+-            _pathList.push_back("../"); // back one
+-            _pathList.push_back("../../"); // back two
+-
+-            if ( env) {
+-                _pathList.push_back(std::string(env) + "/");  // Path lacks a terminating slash
+-            }
+-        }
+-
+-        void addPath( const std::string &path) {
+-            _pathList.push_back(path);
+-        }
+-
+-        void clearPaths() {
+-            _pathList.clear();
+-        }
+-
+-        bool getFilePath( const std::string &file, std::string &path) {
+-            std::string pathString;
+-            
+-            for ( std::vector<std::string>::iterator it = _pathList.begin(); it != _pathList.end(); it++) {
+-                pathString = *it + file;
+-                FILE *fp = fopen( pathString.c_str(), "rb");
+-                if (fp) {
+-                    fclose(fp);
+-                    path = pathString;
+-                    return true;
+-                }
+-            }
+-
+-            return false;
+-        }
+-
+-        bool getPath( const std::string &file, std::string &path) {
+-            std::string pathString;
+-            
+-            for ( std::vector<std::string>::iterator it = _pathList.begin(); it != _pathList.end(); it++) {
+-                pathString = *it + file;
+-                FILE *fp = fopen( pathString.c_str(), "rb");
+-                if (fp) {
+-                    fclose(fp);
+-                    path = *it;
+-                    return true;
+-                }
+-            }
+-
+-            return false;
+-        }
+-
+-    private:
+-        std::vector<std::string> _pathList;
+-
+-    };
+-};
+-
+-#endif 
+diff --git a/nvcommon/include/nvShaderUtils.h b/nvcommon/include/nvShaderUtils.h
+deleted file mode 100644
+index 69862d9..0000000
+--- a/nvcommon/include/nvShaderUtils.h
++++ /dev/null
+@@ -1,223 +0,0 @@
+-//
+-// Utility functions for compiling shaders and programs
+-//
+-// Author: Evan Hart
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-
+-#ifndef NV_SHADER_UTILS_H
+-#define NV_SHADER_UTILS_H
+-
+-#include <stdio.h>
+-#include <string.h>
+-
+-#include <GL/glew.h>
+-
+-namespace nv
+-{
+-
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-inline GLuint CompileGLSLShader( GLenum target, const char* shader)
+-{
+-    GLuint object;
+-
+-    object = glCreateShader( target);
+-
+-    if (!object)
+-        return object;
+-
+-    glShaderSource( object, 1, &shader, NULL);
+-
+-    glCompileShader(object);
+-
+-    // check if shader compiled
+-    GLint compiled = 0;
+-    glGetShaderiv(object, GL_COMPILE_STATUS, &compiled);
+-
+-    if (!compiled)
+-    {
+-#ifdef NV_REPORT_COMPILE_ERRORS
+-        char temp[256] = "";
+-        glGetShaderInfoLog( object, 256, NULL, temp);
+-        fprintf( stderr, "Compile failed:\n%s\n", temp);
+-#endif
+-        glDeleteShader( object);
+-        return 0;
+-    }
+-
+-    return object;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-inline GLuint CompileGLSLShaderFromFile( GLenum target, const char* filename)
+-{
+-    FILE *shaderFile;
+-    char *text;
+-    long size;
+-
+-    //must read files as binary to prevent problems from newline translation
+-    shaderFile = fopen( filename, "rb");
+-
+-    if ( shaderFile == NULL)
+-        return 0;
+-
+-    fseek( shaderFile, 0, SEEK_END);
+-
+-    size = ftell(shaderFile);
+-
+-    fseek( shaderFile, 0, SEEK_SET);
+-
+-    text = new char[size+1];
+-
+-    fread( text, size, 1, shaderFile);
+-
+-    fclose( shaderFile);
+-
+-    text[size] = '\0';
+-
+-    GLuint object = CompileGLSLShader( target, text);
+-
+-    delete []text;
+-
+-    return object;
+-}
+-
+-
+-// Create a program composed of vertex and fragment shaders.
+-inline GLuint LinkGLSLProgram( GLuint vertexShader, GLuint fragmentShader)
+-{
+-    GLuint program = glCreateProgram();
+-    glAttachShader(program, vertexShader);
+-    glAttachShader(program, fragmentShader);
+-    glLinkProgram(program);
+-
+-#ifdef NV_REPORT_COMPILE_ERRORS
+-    // Get error log.
+-    GLint charsWritten, infoLogLength;
+-    glGetProgramiv(program, GL_INFO_LOG_LENGTH, &infoLogLength);
+-
+-    char * infoLog = new char[infoLogLength];
+-    glGetProgramInfoLog(program, infoLogLength, &charsWritten, infoLog);
+-    printf(infoLog);
+-    delete [] infoLog;
+-#endif
+-
+-    // Test linker result.
+-    GLint linkSucceed = GL_FALSE;
+-    glGetProgramiv(program, GL_LINK_STATUS, &linkSucceed);
+-    
+-    if (linkSucceed == GL_FALSE)
+-    {
+-        glDeleteProgram(program);
+-        return 0;
+-    }
+-
+-    return program;
+-}
+-
+-
+-// Create a program composed of vertex, geometry and fragment shaders.
+-inline GLuint LinkGLSLProgram( GLuint vertexShader, GLuint geometryShader, GLint inputType, GLint vertexOut, GLint outputType, GLuint fragmentShader)
+-{
+-    GLuint program = glCreateProgram();
+-    glAttachShader(program, vertexShader);
+-    glAttachShader(program, geometryShader);
+-	glProgramParameteriEXT(program, GL_GEOMETRY_INPUT_TYPE_EXT, inputType);
+-    glProgramParameteriEXT(program, GL_GEOMETRY_VERTICES_OUT_EXT, vertexOut);
+-    glProgramParameteriEXT(program, GL_GEOMETRY_OUTPUT_TYPE_EXT, outputType);
+-    glAttachShader(program, fragmentShader);
+-    glLinkProgram(program);
+-
+-#ifdef NV_REPORT_COMPILE_ERRORS
+-    // Get error log.
+-    GLint charsWritten, infoLogLength;
+-    glGetProgramiv(program, GL_INFO_LOG_LENGTH, &infoLogLength);
+-
+-    char * infoLog = new char[infoLogLength];
+-    glGetProgramInfoLog(program, infoLogLength, &charsWritten, infoLog);
+-    printf(infoLog);
+-    delete [] infoLog;
+-#endif
+-
+-    // Test linker result.
+-    GLint linkSucceed = GL_FALSE;
+-    glGetProgramiv(program, GL_LINK_STATUS, &linkSucceed);
+-    
+-    if (linkSucceed == GL_FALSE)
+-    {
+-        glDeleteProgram(program);
+-        return 0;
+-    }
+-
+-    return program;
+-}
+-
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-inline GLuint CompileASMShader(GLenum program_type, const char *code)
+-{
+-    GLuint program_id;
+-    glGenProgramsARB(1, &program_id);
+-    glBindProgramARB(program_type, program_id);
+-    glProgramStringARB(program_type, GL_PROGRAM_FORMAT_ASCII_ARB, (GLsizei) strlen(code), (GLubyte *) code);
+-
+-    GLint error_pos;
+-    glGetIntegerv(GL_PROGRAM_ERROR_POSITION_ARB, &error_pos);
+-    if (error_pos != -1) {
+-#ifdef NV_REPORT_COMPILE_ERRORS
+-        const GLubyte *error_string;
+-        error_string = glGetString(GL_PROGRAM_ERROR_STRING_ARB);
+-        fprintf(stderr, "Program error at position: %d\n%s\n", (int)error_pos, error_string);
+-#endif
+-        return 0;
+-    }
+-    return program_id;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-inline GLuint CompileASMShaderFromFile( GLenum target, const char* filename)
+-{
+-    FILE *shaderFile;
+-    char *text;
+-    long size;
+-
+-    //must read files as binary to prevent problems from newline translation
+-    shaderFile = fopen( filename, "rb");
+-
+-    if ( shaderFile == NULL)
+-        return 0;
+-
+-    fseek( shaderFile, 0, SEEK_END);
+-
+-    size = ftell(shaderFile);
+-
+-    fseek( shaderFile, 0, SEEK_SET);
+-
+-    text = new char[size+1];
+-
+-    fread( text, size, 1, shaderFile);
+-
+-    fclose( shaderFile);
+-
+-    text[size] = '\0';
+-
+-    GLuint program_id = CompileASMShader( target, text);
+-
+-    delete []text;
+-
+-    return program_id;
+-}
+-
+-} // nv namespace
+-
+-#endif 
+\ No newline at end of file
+diff --git a/nvcommon/include/nvShape.h b/nvcommon/include/nvShape.h
+deleted file mode 100644
+index 958b3e9..0000000
+--- a/nvcommon/include/nvShape.h
++++ /dev/null
+@@ -1,177 +0,0 @@
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-
+-#ifndef NV_SHAPE_H
+-#define NV_SHAPE_H
+-
+-#include "nvVertexBuffer.h"
+-
+-class nvShape {
+-public:
+-	nvShape(GLenum prim, int nindices) : m_prim(prim) {
+-		m_geom = new nvGeometryBuffer(nindices);
+-	}
+-
+-	~nvShape() {
+-		delete m_geom;
+-	}
+-
+-	void Draw() {
+-		m_geom->SetPointers();
+-		m_geom->EnableArrays();
+-		m_geom->DrawElements(m_prim);
+-		m_geom->DisableArrays();
+-	};
+-
+-	void DrawInstanced(int ninstances)
+-	{
+-		m_geom->SetPointers();
+-		m_geom->EnableArrays();
+-		m_geom->DrawElementsInstanced(m_prim, ninstances);
+-		m_geom->DisableArrays();
+-	}
+-
+-	GLenum m_prim;
+-	nvGeometryBuffer *m_geom;
+-};
+-
+-class nvTorusShape : public nvShape
+-{
+-public:
+-	nvTorusShape(float r, float R, int nsides, int rings)
+-		: nvShape(GL_QUADS, 4*rings*nsides)
+-	{
+-		int nverts = rings*(nsides+1)*2;
+-		nvVertexAttribBuffer *position_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::POSITION, nverts, 3, GL_FLOAT);
+-		nvVertexAttribBuffer *normal_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::NORMAL, nverts, 3, GL_FLOAT);
+-		m_geom->AddAttribute(position_buffer);
+-		m_geom->AddAttribute(normal_buffer);
+-
+-		float *vptr= (float *) position_buffer->Map(GL_WRITE_ONLY_ARB);
+-        float *nptr= (float *) normal_buffer->Map(GL_WRITE_ONLY_ARB);
+-
+-        // generate vertex and normal data
+-        int i, j;
+-        float theta, phi, theta1;
+-        float cosTheta, sinTheta;
+-        float cosTheta1, sinTheta1;
+-        float ringDelta, sideDelta;
+-
+-        ringDelta = 2.0 * NV_PI / rings;
+-        sideDelta = 2.0 * NV_PI / nsides;
+-
+-        theta = 0.0;
+-        cosTheta = 1.0;
+-        sinTheta = 0.0;
+-        for (i = rings - 1; i >= 0; i--) {
+-            theta1 = theta + ringDelta;
+-            cosTheta1 = cos(theta1);
+-            sinTheta1 = sin(theta1);
+-            phi = 0.0;
+-            for (j = nsides; j >= 0; j--) {
+-                float cosPhi, sinPhi, dist;
+-
+-                phi += sideDelta;
+-                cosPhi = cos(phi);
+-                sinPhi = sin(phi);
+-                dist = R + r * cosPhi;
+-
+-                *nptr++ = cosTheta1 * cosPhi;
+-                *nptr++ = -sinTheta1 * cosPhi;
+-                *nptr++ = sinPhi;
+-
+-                *vptr++ = cosTheta1 * dist;
+-                *vptr++ = -sinTheta1 * dist;
+-                *vptr++ = r * sinPhi;
+-
+-                *nptr++ = cosTheta * cosPhi;
+-                *nptr++ = -sinTheta * cosPhi;
+-                *nptr++ = sinPhi;
+-
+-                *vptr++ = cosTheta * dist;
+-                *vptr++ = -sinTheta * dist;
+-                *vptr++ = r * sinPhi;
+-            }
+-            theta = theta1;
+-            cosTheta = cosTheta1;
+-            sinTheta = sinTheta1;
+-        }
+-
+-        // unmap buffers
+-	    position_buffer->Unmap();
+-	    normal_buffer->Unmap();
+-
+-        // create indices
+-        unsigned short *iptr= (unsigned short *) m_geom->GetIndexBuffer()->Map(GL_WRITE_ONLY_ARB);
+-        int v = 0;
+-        for (i = rings - 1; i >= 0; i--) {
+-            for (j = nsides; j >= 0; j--) {
+-                if (j > 0) {
+-                    *iptr++ = v;
+-                    *iptr++ = v+1;
+-                    *iptr++ = v+3;
+-                    *iptr++ = v+2;
+-                }
+-                v+=2;
+-            }
+-        }
+-        m_geom->GetIndexBuffer()->Unmap();
+-	}
+-};
+-
+-
+-class nvCubeShape : public nvShape
+-{
+-public:
+-	nvCubeShape(float s)
+-		: nvShape(GL_TRIANGLES, 6*2*3)
+-    {
+-        float v[][3] = {
+-            -s, -s, -s,  // 0
+-            s, -s, -s,   // 1
+-            s,  s, -s,   // 2
+-            -s,  s, -s,  // 3
+-            -s, -s, s,   // 4
+-            s, -s, s,    // 5
+-            s,  s, s,    // 6
+-            -s,  s, s,   // 7
+-        };
+-
+-        float n[][3] = {
+-            -1, -1, -1,  // 0
+-            1, -1, -1,   // 1
+-            1,  1, -1,   // 2
+-            -1,  1, -1,  // 3
+-            -1, -1, 1,   // 4
+-            1, -1, 1,    // 5
+-            1,  1, 1,    // 6
+-            -1,  1, 1,   // 7
+-        };
+-
+-        unsigned short indices[] = {
+-            0, 1, 2,
+-            2, 3, 0,
+-            1, 5, 6,
+-            6, 2, 1,
+-            5, 4, 7,
+-            7, 6, 5,
+-            4, 0, 3,
+-            3, 7, 4,
+-            1, 0, 4, 
+-            4, 5, 1,
+-            3, 2, 6,
+-            6, 7, 3,
+-        };
+-
+-        int nverts = 8;
+-		nvVertexAttribBuffer *position_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::POSITION, nverts, 3, GL_FLOAT);
+-		nvVertexAttribBuffer *normal_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::NORMAL, nverts, 3, GL_FLOAT);
+-		m_geom->AddAttribute(position_buffer);
+-		m_geom->AddAttribute(normal_buffer);
+-
+-		position_buffer->SetData(v);
+-		normal_buffer->SetData(n);
+-		m_geom->GetIndexBuffer()->SetData(indices);
+-    }
+-};
+-
+-#endif
+diff --git a/nvcommon/include/nvTime.h b/nvcommon/include/nvTime.h
+deleted file mode 100644
+index bb9dafc..0000000
+--- a/nvcommon/include/nvTime.h
++++ /dev/null
+@@ -1,144 +0,0 @@
+-//
+-// nvTime.h - Timer and perf counter classes
+-//
+-//
+-// Author: Samuel Gateau
+-// Email: sdkfeedback@nvidia.com
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-#ifndef NV_TIME_H
+-#define NV_TIME_H
+-
+-namespace nv
+-{
+-    //*************************************************************************
+-    // Timer
+-    class Timer 
+-    {
+-    public:
+-        /******************************** METHODS *********************************/
+-
+-	    /**
+-	     * Default constructor.
+-	     */
+-	    Timer();
+-
+-        /**
+-	     * Destructor.
+-	     */
+-	    ~Timer();
+-
+-	    /**
+-	     * Start the timer (Reset total elapsed time).
+-	     * Stop the timer.
+-	     * Check if the timer is started.
+-	     */
+-	    void start();
+-	    void stop();
+-	    bool isStarted() const { return mStartTime != -1.0; }
+-
+-	    /** 
+-	     * Get the total timer elapsed time since start [s].
+-	     */
+-	    double getTotalElapsedTime() const;
+-
+-	    /** 
+-	     * Get the timer elapsed time since last 
+-	     * call to the same method or start [s].
+-	     */
+-	    double getElapsedTime() const;
+-
+-	    /**
+-	     * Query the current Application time.
+-	     * It's a date expressed in s.
+-	     */
+-	    static double queryAppTime();
+-
+-    private:
+-        /******************************* ATTRIBUTES *******************************/
+-
+-	    /**
+-	     * The start time
+-	     * -1 if not started;
+-	     */
+-	    double mStartTime;
+-    	
+-	    /**
+-	     * The last time queried.
+-	     */
+-	    mutable double mLastQueryTime;
+-
+-	    /**
+-	     * The inverse frequency of the CPU on which the thread is running and used
+-	     * to measure the elapsed time.
+-	     */
+-	    static double msInvFrequency;
+-
+-	    /******************************** METHODS *********************************/
+-
+-	    /**
+-	     * initialize the inv frequency (done once on the first timer created.
+-	     */
+-	    static void initializeClass();
+-    };
+-
+-
+-    //*************************************************************************
+-    // FrameTimer
+-    class  FrameTimer : public Timer
+-    {
+-    public:
+-        /******************************** METHODS *********************************/
+-
+-	    /**
+-	     * Default constructor.
+-	     */
+-        FrameTimer() : 
+-            Timer(),
+-            mCurrentFrameNb(0),
+-            mAverageFrameNb(0),
+-            mCurrentFrameDuration(0.0)
+-        {}
+-
+-        /**
+-	     * Destructor.
+-	     */
+-        ~FrameTimer() {}
+- 
+-        /** 
+-         * Notify a new frame
+-         * Evaluate the current frame duration
+-         */
+-        void newFrame()
+-        {
+-            mCurrentFrameNb++;
+-            mAverageFrameNb++;
+-            if (mAverageFrameNb > 10)
+-            {
+-                mCurrentFrameDuration =  getElapsedTime() / ((double) mAverageFrameNb);
+-                mAverageFrameNb = 0;
+-            }
+-        }
+-
+-        double getFrameDuration() const { return mCurrentFrameDuration; }
+-        double getFramerate() const { return (1.0/mCurrentFrameDuration); }
+-        int getFrameNb() const { return mCurrentFrameNb; }
+- 
+-    private:
+-        /******************************* ATTRIBUTES *******************************/
+-
+-        /**
+-         * The current frame nb
+-         */
+-        int mCurrentFrameNb;
+-        int mAverageFrameNb;
+-
+-        /**
+-         * The current frame duration
+-         */
+-        double mCurrentFrameDuration;
+-    };
+-};
+-
+-#endif  // NV_TIME_H
+diff --git a/nvcommon/include/nvVector.h b/nvcommon/include/nvVector.h
+deleted file mode 100644
+index 1055415..0000000
+--- a/nvcommon/include/nvVector.h
++++ /dev/null
+@@ -1,744 +0,0 @@
+-//
+-// Template math library for common 3D functionality
+-//
+-// nvVector.h - 2-vector, 3-vector, and 4-vector templates and utilities
+-//
+-// This code is in part deriver from glh, a cross platform glut helper library.
+-// The copyright for glh follows this notice.
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-/*
+-    Copyright (c) 2000 Cass Everitt
+-	Copyright (c) 2000 NVIDIA Corporation
+-    All rights reserved.
+-
+-    Redistribution and use in source and binary forms, with or
+-	without modification, are permitted provided that the following
+-	conditions are met:
+-
+-     * Redistributions of source code must retain the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer.
+-
+-     * Redistributions in binary form must reproduce the above
+-	   copyright notice, this list of conditions and the following
+-	   disclaimer in the documentation and/or other materials
+-	   provided with the distribution.
+-
+-     * The names of contributors to this software may not be used
+-	   to endorse or promote products derived from this software
+-	   without specific prior written permission. 
+-
+-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+-	   POSSIBILITY OF SUCH DAMAGE. 
+-
+-
+-    Cass Everitt - cass@r3.nu
+-*/
+-#ifndef NV_VECTOR_H
+-#define NV_VECTOR_H
+-
+-#include <algorithm>
+-
+-namespace nv {
+-
+-template <class T> class vec2;
+-template <class T> class vec3;
+-template <class T> class vec4;
+-
+-//////////////////////////////////////////////////////////////////////
+-//
+-// vec2 - template class for 2-tuple vector
+-//
+-//////////////////////////////////////////////////////////////////////
+-template <class T>   
+-class vec2 {
+-public:
+-
+-    typedef T value_type;
+-    int size() const { return 2;}
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Constructors
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // Default/scalar constructor
+-    vec2(const T & t = T()) {
+-        for(int i = 0; i < size(); i++) _array[i] = t;
+-    }
+-
+-    // Construct from array
+-    vec2(const T * tp) {
+-        for(int i = 0; i < size(); i++) _array[i] = tp[i];
+-    }
+-
+-    // Construct from explicit values
+-    vec2( const T v0, const T v1) {
+-        x = v0;
+-        y = v1;
+-    }
+-
+-    explicit vec2( const vec3<T> &u) {
+-        for(int i = 0; i < size(); i++) _array[i] = u._array[i];
+-    }
+-
+-    explicit vec2( const vec4<T> &u) {
+-        for(int i = 0; i < size(); i++) _array[i] = u._array[i];
+-    }
+-    
+-    const T * get_value() const {
+-        return _array;
+-    }
+-    
+-    vec2<T> & set_value( const T * rhs ) {
+-        for(int i = 0; i < size(); i++) _array[i] = rhs[i];
+-        return *this;
+-    }
+-    
+-    // indexing operators
+-    T & operator [] ( int i ) {
+-        return _array[i];
+-    }
+-    
+-    const T & operator [] ( int i ) const {
+-        return _array[i];
+-    }
+-
+-    // type-cast operators
+-    operator T * () {
+-        return _array;
+-    }
+-
+-    operator const T * () const {
+-        return _array;
+-    }
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Math operators
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // scalar multiply assign
+-    friend vec2<T> & operator *= ( vec2<T> &lhs, T d ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= d;
+-        return lhs;
+-    }
+-
+-    // component-wise vector multiply assign
+-    friend vec2<T> & operator *= ( vec2<T> &lhs, const vec2<T> &rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= rhs[i];
+-        return lhs;
+-    }
+-
+-    // scalar divide assign
+-    friend vec2<T> & operator /= ( vec2<T> &lhs, T d ) {
+-        if(d == 0) return lhs;
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= d;
+-        return lhs;
+-    }
+-
+-    // component-wise vector divide assign
+-    friend vec2<T> & operator /= ( vec2<T> &lhs, const vec2<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // component-wise vector add assign
+-    friend vec2<T> & operator += ( vec2<T> &lhs, const vec2<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] += rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // component-wise vector subtract assign
+-    friend vec2<T> & operator -= ( vec2<T> &lhs, const vec2<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] -= rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // unary negate
+-    friend vec2<T> operator - ( const vec2<T> &rhs) {
+-        vec2<T> rv;
+-        for(int i = 0; i < rhs.size(); i++) rv._array[i] = -rhs._array[i];
+-        return rv;
+-    }
+-
+-    // vector add
+-    friend vec2<T> operator + ( const vec2<T> & lhs, const vec2<T> & rhs) {
+-        vec2<T> rt(lhs);
+-        return rt += rhs;
+-    }
+-
+-    // vector subtract 
+-    friend vec2<T> operator - ( const vec2<T> & lhs, const vec2<T> & rhs) {
+-        vec2<T> rt(lhs);
+-        return rt -= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec2<T> operator * ( const vec2<T> & lhs, T rhs) {
+-        vec2<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec2<T> operator * ( T lhs, const vec2<T> & rhs) {
+-        vec2<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // vector component-wise multiply
+-    friend vec2<T> operator * ( const vec2<T> & lhs, const vec2<T> & rhs){
+-        vec2<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec2<T> operator / ( const vec2<T> & lhs, T rhs) {
+-        vec2<T> rt(lhs);
+-        return rt /= rhs;
+-    }
+-
+-    // vector component-wise multiply
+-    friend vec2<T> operator / ( const vec2<T> & lhs, const vec2<T> & rhs){
+-        vec2<T> rt(lhs);
+-        return rt /= rhs;
+-    }
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Comparison operators
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // equality
+-    friend bool operator == ( const vec2<T> &lhs, const vec2<T> &rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < lhs.size(); i++)
+-            r &= lhs._array[i] == rhs._array[i];
+-        return r;
+-    }
+-
+-    // inequality
+-    friend bool operator != ( const vec2<T> &lhs, const vec2<T> &rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < lhs.size(); i++)
+-            r &= lhs._array[i] != rhs._array[i];
+-        return r;
+-    }
+-   
+-    //data intentionally left public to allow vec2.x
+-    union {
+-        struct {
+-            T x,y;          // standard names for components
+-        };
+-        struct {
+-            T s,t;          // standard names for components
+-        };
+-        T _array[2];     // array access
+-    };
+-};
+-
+-//////////////////////////////////////////////////////////////////////
+-//
+-// vec3 - template class for 3-tuple vector
+-//
+-//////////////////////////////////////////////////////////////////////
+-template <class T>
+-class vec3 {
+-public:
+-
+-    typedef T value_type;
+-    int size() const { return 3;}
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Constructors
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // Default/scalar constructor
+-    vec3(const T & t = T()) {
+-        for(int i = 0; i < size(); i++) _array[i] = t;
+-    }
+-
+-    // Construct from array
+-    vec3(const T * tp) {
+-        for(int i = 0; i < size(); i++) _array[i] = tp[i];
+-    }
+-
+-    // Construct from explicit values
+-    vec3( const T v0, const T v1, const T v2) {
+-        x = v0;
+-        y = v1;
+-        z = v2;
+-    }
+-
+-    explicit vec3( const vec4<T> &u) {
+-        for(int i = 0; i < size(); i++) _array[i] = u._array[i];
+-    }
+-
+-    explicit vec3( const vec2<T> &u, T v0) {
+-        x = u.x;
+-        y = u.y;
+-        z = v0;
+-    }
+-    
+-    const T * get_value() const {
+-        return _array;
+-    }
+-    
+-    vec3<T> & set_value( const T * rhs ) {
+-        for(int i = 0; i < size(); i++) _array[i] = rhs[i];
+-        return *this;
+-    }
+-    
+-    // indexing operators
+-    T & operator [] ( int i ) {
+-        return _array[i];
+-    }
+-    
+-    const T & operator [] ( int i ) const {
+-        return _array[i];
+-    }
+-
+-    // type-cast operators
+-    operator T * () {
+-        return _array;
+-    }
+-
+-    operator const T * () const {
+-        return _array;
+-    }
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Math operators
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // scalar multiply assign
+-    friend vec3<T> & operator *= ( vec3<T> &lhs, T d ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= d;
+-        return lhs;
+-    }
+-
+-    // component-wise vector multiply assign
+-    friend vec3<T> & operator *= ( vec3<T> &lhs, const vec3<T> &rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= rhs[i];
+-        return lhs;
+-    }
+-
+-    // scalar divide assign
+-    friend vec3<T> & operator /= ( vec3<T> &lhs, T d ) {
+-        if(d == 0) return lhs;
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= d;
+-        return lhs;
+-    }
+-
+-    // component-wise vector divide assign
+-    friend vec3<T> & operator /= ( vec3<T> &lhs, const vec3<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // component-wise vector add assign
+-    friend vec3<T> & operator += ( vec3<T> &lhs, const vec3<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] += rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // component-wise vector subtract assign
+-    friend vec3<T> & operator -= ( vec3<T> &lhs, const vec3<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] -= rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // unary negate
+-    friend vec3<T> operator - ( const vec3<T> &rhs) {
+-        vec3<T> rv;
+-        for(int i = 0; i < rhs.size(); i++) rv._array[i] = -rhs._array[i];
+-        return rv;
+-    }
+-
+-    // vector add
+-    friend vec3<T> operator + ( const vec3<T> & lhs, const vec3<T> & rhs) {
+-        vec3<T> rt(lhs);
+-        return rt += rhs;
+-    }
+-
+-    // vector subtract 
+-    friend vec3<T> operator - ( const vec3<T> & lhs, const vec3<T> & rhs) {
+-        vec3<T> rt(lhs);
+-        return rt -= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec3<T> operator * ( const vec3<T> & lhs, T rhs) {
+-        vec3<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec3<T> operator * ( T lhs, const vec3<T> & rhs) {
+-        vec3<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // vector component-wise multiply
+-    friend vec3<T> operator * ( const vec3<T> & lhs, const vec3<T> & rhs){
+-        vec3<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec3<T> operator / ( const vec3<T> & lhs, T rhs) {
+-        vec3<T> rt(lhs);
+-        return rt /= rhs;
+-    }
+-
+-    // vector component-wise multiply
+-    friend vec3<T> operator / ( const vec3<T> & lhs, const vec3<T> & rhs){
+-        vec3<T> rt(lhs);
+-        return rt /= rhs;
+-    }
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Comparison operators
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // equality
+-    friend bool operator == ( const vec3<T> &lhs, const vec3<T> &rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < lhs.size(); i++)
+-            r &= lhs._array[i] == rhs._array[i];
+-        return r;
+-    }
+-
+-    // inequality
+-    friend bool operator != ( const vec3<T> &lhs, const vec3<T> &rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < lhs.size(); i++)
+-            r &= lhs._array[i] != rhs._array[i];
+-        return r;
+-    }
+-
+-    ////////////////////////////////////////////////////////////////////////////////
+-    //
+-    // dimension specific operations
+-    //
+-    ////////////////////////////////////////////////////////////////////////////////
+-
+-    // cross product
+-    friend vec3<T> cross( const vec3<T> & lhs, const vec3<T> & rhs) {
+-        vec3<T> r;
+-
+-        r.x = lhs.y * rhs.z - lhs.z * rhs.y;
+-        r.y = lhs.z * rhs.x - lhs.x * rhs.z;
+-        r.z = lhs.x * rhs.y - lhs.y * rhs.x;
+-
+-        return r;
+-    }
+-   
+-    //data intentionally left public to allow vec2.x
+-    union {
+-        struct {
+-            T x, y, z;          // standard names for components
+-        };
+-        struct {
+-            T s, t, r;          // standard names for components
+-        };
+-        T _array[3];     // array access
+-    };
+-};
+-
+-//////////////////////////////////////////////////////////////////////
+-//
+-// vec4 - template class for 4-tuple vector
+-//
+-//////////////////////////////////////////////////////////////////////
+-template <class T>
+-class vec4 {
+-public:
+-
+-    typedef T value_type;
+-    int size() const { return 4;}
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Constructors
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // Default/scalar constructor
+-    vec4(const T & t = T()) {
+-        for(int i = 0; i < size(); i++) _array[i] = t;
+-    }
+-
+-    // Construct from array
+-    vec4(const T * tp) {
+-        for(int i = 0; i < size(); i++) _array[i] = tp[i];
+-    }
+-
+-    // Construct from explicit values
+-    vec4( const T v0, const T v1, const T v2, const T v3) {
+-        x = v0;
+-        y = v1;
+-        z = v2;
+-        w = v3;
+-    }
+-
+-    explicit vec4( const vec3<T> &u, T v0) {
+-        x = u.x;
+-        y = u.y;
+-        z = u.z;
+-        w = v0;
+-    }
+-
+-    explicit vec4( const vec2<T> &u, T v0, T v1) {
+-        x = u.x;
+-        y = u.y;
+-        z = v0;
+-        w = v1;
+-    }
+-    
+-    const T * get_value() const {
+-        return _array;
+-    }
+-    
+-    vec4<T> & set_value( const T * rhs ) {
+-        for(int i = 0; i < size(); i++) _array[i] = rhs[i];
+-        return *this;
+-    }
+-    
+-    // indexing operators
+-    T & operator [] ( int i ) {
+-        return _array[i];
+-    }
+-    
+-    const T & operator [] ( int i ) const {
+-        return _array[i];
+-    }
+-
+-    // type-cast operators
+-    operator T * () {
+-        return _array;
+-    }
+-
+-    operator const T * () const {
+-        return _array;
+-    }
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Math operators
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // scalar multiply assign
+-    friend vec4<T> & operator *= ( vec4<T> &lhs, T d ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= d;
+-        return lhs;
+-    }
+-
+-    // component-wise vector multiply assign
+-    friend vec4<T> & operator *= ( vec4<T> &lhs, const vec4<T> &rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= rhs[i];
+-        return lhs;
+-    }
+-
+-    // scalar divide assign
+-    friend vec4<T> & operator /= ( vec4<T> &lhs, T d ) {
+-        if(d == 0) return lhs;
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= d;
+-        return lhs;
+-    }
+-
+-    // component-wise vector divide assign
+-    friend vec4<T> & operator /= ( vec4<T> &lhs, const vec4<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // component-wise vector add assign
+-    friend vec4<T> & operator += ( vec4<T> &lhs, const vec4<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] += rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // component-wise vector subtract assign
+-    friend vec4<T> & operator -= ( vec4<T> &lhs, const vec4<T> & rhs ) {
+-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] -= rhs._array[i];
+-        return lhs;
+-    }
+-
+-    // unary negate
+-    friend vec4<T> operator - ( const vec4<T> &rhs) {
+-        vec4<T> rv;
+-        for(int i = 0; i < rhs.size(); i++) rv._array[i] = -rhs._array[i];
+-        return rv;
+-    }
+-
+-    // vector add
+-    friend vec4<T> operator + ( const vec4<T> & lhs, const vec4<T> & rhs) {
+-        vec4<T> rt(lhs);
+-        return rt += rhs;
+-    }
+-
+-    // vector subtract 
+-    friend vec4<T> operator - ( const vec4<T> & lhs, const vec4<T> & rhs) {
+-        vec4<T> rt(lhs);
+-        return rt -= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec4<T> operator * ( const vec4<T> & lhs, T rhs) {
+-        vec4<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec4<T> operator * ( T lhs, const vec4<T> & rhs) {
+-        vec4<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // vector component-wise multiply
+-    friend vec4<T> operator * ( const vec4<T> & lhs, const vec4<T> & rhs){
+-        vec4<T> rt(lhs);
+-        return rt *= rhs;
+-    }
+-
+-    // scalar multiply
+-    friend vec4<T> operator / ( const vec4<T> & lhs, T rhs) {
+-        vec4<T> rt(lhs);
+-        return rt /= rhs;
+-    }
+-
+-    // vector component-wise multiply
+-    friend vec4<T> operator / ( const vec4<T> & lhs, const vec4<T> & rhs){
+-        vec4<T> rt(lhs);
+-        return rt /= rhs;
+-    }
+-
+-    ////////////////////////////////////////////////////////
+-    //
+-    //  Comparison operators
+-    //
+-    ////////////////////////////////////////////////////////
+-
+-    // equality
+-    friend bool operator == ( const vec4<T> &lhs, const vec4<T> &rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < lhs.size(); i++)
+-            r &= lhs._array[i] == rhs._array[i];
+-        return r;
+-    }
+-
+-    // inequality
+-    friend bool operator != ( const vec4<T> &lhs, const vec4<T> &rhs ) {
+-        bool r = true;
+-        for (int i = 0; i < lhs.size(); i++)
+-            r &= lhs._array[i] != rhs._array[i];
+-        return r;
+-    }
+-   
+-    //data intentionally left public to allow vec2.x
+-    union {
+-        struct {
+-            T x, y, z, w;          // standard names for components
+-        };
+-        struct {
+-            T s, t, r, q;          // standard names for components
+-        };
+-        T _array[4];     // array access
+-    };
+-};
+-
+-////////////////////////////////////////////////////////////////////////////////
+-//
+-// Generic vector operations
+-//
+-////////////////////////////////////////////////////////////////////////////////
+-
+-// compute the dot product of two vectors
+-template<class T>
+-inline typename T::value_type dot( const T & lhs, const T & rhs ) { 
+-    typename T::value_type r = 0;
+-    for(int i = 0; i < lhs.size(); i++) r += lhs._array[i] * rhs._array[i];
+-    return r;
+-}
+-
+-// return the length of the provided vector
+-template< class T>
+-  inline typename T::value_type length( const T & vec) {
+-    typename T::value_type r = 0;
+-    for(int i = 0; i < vec.size(); i++) r += vec._array[i]*vec._array[i]; 
+-    return typename T::value_type(sqrt(r));
+-}
+-
+-// return the squared norm
+-template< class T>
+-inline typename T::value_type square_norm( const T & vec) {
+-    typename T::value_type r = 0;
+-    for(int i = 0; i < vec.size(); i++) r += vec._array[i]*vec._array[i]; 
+-    return r;
+-}
+-
+-// return the normalized version of the vector
+-template< class T>
+-inline T normalize( const T & vec) { 
+-    typename T::value_type sum = 0;
+-    T r;
+-    for(int i = 0; i < vec.size(); i++) 
+-        sum += vec._array[i] * vec._array[i];
+-    sum = typename T::value_type(sqrt(sum));
+-    if (sum > 0)
+-        for(int i = 0; i < vec.size(); i++) 
+-            r._array[i] = vec._array[i] / sum;
+-    return r;
+-}
+-
+-// In VC8 : min and max are already defined by a #define...
+-#ifdef min
+-#undef min
+-#endif
+-#ifdef max
+-#undef max
+-#endif
+-//componentwise min
+-template< class T>
+-inline T min( const T & lhs, const T & rhs ) {
+-    T rt;
+-    for (int i = 0; i < lhs.size(); i++) rt._array[i] = std::min( lhs._array[i], rhs._array[i]);
+-    return rt;
+-}
+-
+-// componentwise max
+-template< class T>
+-inline T max( const T & lhs, const T & rhs ) {
+-    T rt;
+-    for (int i = 0; i < lhs.size(); i++) rt._array[i] = std::max( lhs._array[i], rhs._array[i]);
+-    return rt;
+-}
+-
+-
+-};
+-
+-#endif
+diff --git a/nvcommon/include/nvVertexBuffer.h b/nvcommon/include/nvVertexBuffer.h
+deleted file mode 100644
+index 28d072b..0000000
+--- a/nvcommon/include/nvVertexBuffer.h
++++ /dev/null
+@@ -1,175 +0,0 @@
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-
+-#ifndef NV_VERTEXBUFFER_H
+-#define NV_VERTEXBUFFER_H
+-
+-#include <vector>
+-
+-// class representing a buffer object
+-class nvBufferObject {
+-public:
+-	nvBufferObject(GLenum target, GLsizeiptrARB size, GLenum usage=GL_STATIC_DRAW_ARB)
+-		: m_target(target),
+-		  m_size(size),
+-		  m_usage(usage)
+-	{
+-		glGenBuffersARB(1, &m_id);
+-		Bind();
+-        glBufferDataARB(m_target, m_size, 0, m_usage);
+-	}
+-
+-	~nvBufferObject() {
+-		glDeleteBuffersARB(1, &m_id);
+-	}
+-
+-	void Bind() {
+-		glBindBufferARB(m_target, m_id);
+-	}
+-
+-	void Unbind() {
+-		glBindBufferARB(m_target, 0);
+-	}
+-
+-	void SetData(void *data) {
+-		Bind();
+-        glBufferDataARB(m_target, m_size, data, m_usage);
+-	}
+-
+-	void *Map(GLenum access) {
+-		Bind();
+-        return glMapBufferARB(m_target, access);
+-	}
+-
+-	bool Unmap() {
+-		Bind();
+-        return glUnmapBufferARB(m_target) == GL_TRUE;
+-	}
+-
+-private:
+-	GLenum m_target;
+-	GLsizeiptrARB m_size;
+-	GLenum m_usage;
+-	GLuint m_id;
+-};
+-
+-
+-// extends nvBufferObject to represent a vertex array stored in a buffer object
+-class nvVertexAttribBuffer : public nvBufferObject {
+-public:
+-	nvVertexAttribBuffer(GLuint index, GLuint nverts, GLint size, GLenum type, GLboolean normalized=GL_FALSE, GLsizei stride=0, GLenum usage=GL_STATIC_DRAW_ARB)
+-		: m_index(index),
+-		  m_size(size),
+-		  m_type(type),
+-		  m_normalized(normalized),
+-		  m_stride(stride),
+-		  nvBufferObject(GL_ARRAY_BUFFER_ARB, nverts*size*GetTypeSize(type), usage)
+-	{
+-	}
+-
+-	~nvVertexAttribBuffer()
+-	{
+-	}
+-
+-	enum Attribute { POSITION=0, WEIGHT, NORMAL, COLOR0, COLOR1, FOGCOORD, TEXCOORD0=8 };
+-
+-	int GetTypeSize(GLenum type) {
+-		switch(type) {
+-			case GL_FLOAT:
+-				return sizeof(float);
+-				break;
+-			case GL_INT:
+-				return sizeof(int);
+-				break;
+-			case GL_SHORT:
+-				return sizeof(short);
+-				break;
+-			default:
+-				fprintf(stderr, "Error: unsupported vertex type\n");
+-				return 0;
+-		}
+-	}
+-
+-	void SetPointer() {
+-		Bind();
+-        glVertexAttribPointerARB(m_index, m_size, m_type, m_normalized, m_stride, 0);
+-    }
+-
+-	void Enable() {
+-        glEnableVertexAttribArrayARB(m_index);   
+-	}
+-
+-	void Disable() {
+-        glDisableVertexAttribArrayARB(m_index);   
+-	}
+-
+-private:
+-	GLuint m_index;
+-	GLint m_size;
+-	GLenum m_type;
+-	GLboolean m_normalized;
+-	GLsizei m_stride;
+-};
+-
+-// geometry buffer is a collection of vertex attributes plus an index buffer
+-class nvGeometryBuffer
+-{
+-public:
+-	nvGeometryBuffer(int nindices)
+-		: m_nindices(nindices)
+-	{
+-		m_index_buffer = new nvBufferObject(GL_ELEMENT_ARRAY_BUFFER_ARB, sizeof(short)*nindices);
+-	}
+-
+-	~nvGeometryBuffer()
+-	{
+-		delete m_index_buffer;
+-		for(unsigned int i=0; i<m_attrib.size(); i++) {
+-			delete m_attrib[i];
+-		}
+-	}
+-
+-	void AddAttribute(nvVertexAttribBuffer *attrib) {
+-		m_attrib.push_back(attrib);
+-	}
+-
+-    void SetPointers() {
+-		for(unsigned int i=0; i<m_attrib.size(); i++) {
+-			m_attrib[i]->SetPointer();
+-		}
+-    }
+-
+-    void EnableArrays() {
+-		for(unsigned int i=0; i<m_attrib.size(); i++) {
+-			m_attrib[i]->Enable();
+-		}
+-    }
+-
+-    void DisableArrays() {
+-		for(unsigned int i=0; i<m_attrib.size(); i++) {
+-			m_attrib[i]->Disable();
+-		}
+-    }
+-
+-	void DrawElementsInstanced(GLenum mode, GLsizei instances)
+-    {
+-		m_index_buffer->Bind();
+-        glDrawElementsInstancedEXT(mode, m_nindices, GL_UNSIGNED_SHORT, 0, instances);
+-		m_index_buffer->Unbind();
+-	}
+-
+-	void DrawElements(GLenum mode)
+-    {
+-		m_index_buffer->Bind();
+-        glDrawElements(mode, m_nindices, GL_UNSIGNED_SHORT, 0);
+-		m_index_buffer->Unbind();
+-	}
+-
+-	nvBufferObject *GetIndexBuffer() { return m_index_buffer; }
+-
+-private:
+-	int m_nverts, m_nindices;
+-	nvBufferObject *m_index_buffer;
+-	std::vector<nvVertexAttribBuffer *> m_attrib;
+-};
+-
+-#endif
+diff --git a/nvcommon/include/renderVertexArray.h b/nvcommon/include/renderVertexArray.h
+deleted file mode 100644
+index a67943f..0000000
+--- a/nvcommon/include/renderVertexArray.h
++++ /dev/null
+@@ -1,38 +0,0 @@
+-/*
+-  Render to vertex array class
+-  sgreen 2/2004
+-
+-  Copyright (c) NVIDIA Corporation. All rights reserved.
+-*/
+-
+-#ifndef RENDERVERTEXARRAY_H
+-#define RENDERVERTEXARRAY_H
+-
+-#ifdef WIN32
+-#include <windows.h>
+-#endif
+-#include <gl/glew.h>
+-
+-class RenderVertexArray {
+-public:
+-  RenderVertexArray(int nverts, GLint size, GLenum type = GL_FLOAT);
+-  ~RenderVertexArray();
+-
+-  void LoadData(void *data);                // load vertex data from memory
+-  void Read(GLenum buffer, int w, int h, int offset=0);   // read vertex data from frame buffer
+-  void SetPointer(GLuint index, GLsizei stride=0, GLuint offset=0);
+-
+-  GLuint getHandle() { return m_buffer; }
+-
+-private:
+-    GLenum m_usage;     // vbo usage flag
+-    GLuint m_buffer;
+-    GLuint m_index;
+-    GLuint m_nverts;
+-    GLint m_size;       // size of attribute       
+-    GLenum m_format;    // readpixels image format
+-    GLenum m_type;      // FLOAT or HALF_FLOAT
+-    int m_bytes_per_component;
+-};
+-
+-#endif
+diff --git a/nvcommon/include/renderbuffer.h b/nvcommon/include/renderbuffer.h
+deleted file mode 100644
+index ab739b6..0000000
+--- a/nvcommon/include/renderbuffer.h
++++ /dev/null
+@@ -1,96 +0,0 @@
+-/*
+-  Copyright (c) 2005, 
+-	  Aaron Lefohn	(lefohn@cs.ucdavis.edu)
+-	  Adam Moerschell (atmoerschell@ucdavis.edu)
+-  All rights reserved.
+-
+-  This software is licensed under the BSD open-source license. See
+-  http://www.opensource.org/licenses/bsd-license.php for more detail.
+-
+-  *************************************************************
+-  Redistribution and use in source and binary forms, with or 
+-  without modification, are permitted provided that the following 
+-  conditions are met:
+-
+-  Redistributions of source code must retain the above copyright notice, 
+-  this list of conditions and the following disclaimer. 
+-
+-  Redistributions in binary form must reproduce the above copyright notice, 
+-  this list of conditions and the following disclaimer in the documentation 
+-  and/or other materials provided with the distribution. 
+-
+-  Neither the name of the University of Californa, Davis nor the names of 
+-  the contributors may be used to endorse or promote products derived 
+-  from this software without specific prior written permission.
+-
+-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
+-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
+-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
+-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
+-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
+-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
+-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
+-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
+-  OF SUCH DAMAGE.
+-*/
+-
+-#ifndef UCDAVIS_RENDER_BUFFER_H
+-#define UCDAVIS_RENDER_BUFFER_H
+-
+-#include "framebufferObject.h"
+-
+-/*!
+-Renderbuffer Class. This class encapsulates the Renderbuffer OpenGL
+-object described in the FramebufferObject (FBO) OpenGL spec. 
+-See the official spec at:
+-	http://oss.sgi.com/projects/ogl-sample/registry/EXT/framebuffer_object.txt
+-for complete details.
+-
+-A "Renderbuffer" is a chunk of GPU memory used by FramebufferObjects to
+-represent "traditional" framebuffer memory (depth, stencil, and color buffers).
+-By "traditional," we mean that the memory cannot be bound as a texture. 
+-With respect to GPU shaders, Renderbuffer memory is "write-only." Framebuffer
+-operations such as alpha blending, depth test, alpha test, stencil test, etc.
+-read from this memory in post-fragement-shader (ROP) operations.
+-
+-The most common use of Renderbuffers is to create depth and stencil buffers.
+-Note that as of 7/1/05, NVIDIA drivers to do not support stencil Renderbuffers.
+-
+-Usage Notes:
+-  1) "internalFormat" can be any of the following:
+-      Valid OpenGL internal formats beginning with:
+-        RGB, RGBA, DEPTH_COMPONENT
+-
+-      or a stencil buffer format (not currently supported 
+-      in NVIDIA drivers as of 7/1/05).
+-        STENCIL_INDEX1_EXT 
+-        STENCIL_INDEX4_EXT     
+-        STENCIL_INDEX8_EXT     
+-        STENCIL_INDEX16_EXT
+-*/
+-class Renderbuffer
+-{
+-public:
+-  /// Ctors/Dtors
+-  Renderbuffer();
+-  Renderbuffer(GLenum internalFormat, int width, int height);
+-  ~Renderbuffer();
+-
+-  void   Bind();
+-  void   Unbind();
+-  void   Set(GLenum internalFormat, int width, int height);
+-  GLuint GetId() const;
+-
+-  static GLint GetMaxSize();
+-
+-private:
+-  GLuint m_bufId;
+-  static GLuint _CreateBufferId();
+-};
+-
+-#endif
+-
+diff --git a/nvcommon/nvModel/CMakeLists.txt b/nvcommon/nvModel/CMakeLists.txt
+deleted file mode 100644
+index 1965581..0000000
+--- a/nvcommon/nvModel/CMakeLists.txt
++++ /dev/null
+@@ -1,29 +0,0 @@
+-
+-#
+-#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+-#
+-#  NVIDIA Corporation and its licensors retain all intellectual property and proprietary
+-#  rights in and to this software, related documentation and any modifications thereto.
+-#  Any use, reproduction, disclosure or distribution of this software and related
+-#  documentation without an express license agreement from NVIDIA Corporation is strictly
+-#  prohibited.
+-#
+-#  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
+-#  AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
+-#  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+-#  PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
+-#  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
+-#  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
+-#  BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
+-#  INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
+-#  SUCH DAMAGES
+-#
+-
+-include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
+-
+-add_library( nvModel STATIC
+-  src/nvModel.cpp
+-  src/nvModelObj.cpp
+-  src/nvModelQuery.cpp
+-  )
+-set_property(TARGET nvModel PROPERTY FOLDER "${OPTIX_IDE_FOLDER}")
+diff --git a/nvcommon/nvModel/include/nvModel.h b/nvcommon/nvModel/include/nvModel.h
+deleted file mode 100644
+index 5a98c38..0000000
+--- a/nvcommon/nvModel/include/nvModel.h
++++ /dev/null
+@@ -1,247 +0,0 @@
+-//
+-// nvModel.h - Model support class
+-//
+-// The nvModel class implements an interface for a multipurpose model
+-// object. This class is useful for loading and formatting meshes
+-// for use by OpenGL. It can compute face normals, tangents, and
+-// adjacency information. The class supports the obj file format.
+-//
+-// Author: Evan Hart
+-// Email: sdkfeedback@nvidia.com
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-#ifndef NV_MODEL_H
+-#define NV_MODEL_H
+-
+-// #ifdef WIN32
+-// #ifdef NVMODEL_EXPORTS
+-// #define NVSDKENTRY __declspec(dllexport)
+-// #else
+-// #define NVSDKENTRY __declspec(dllimport)
+-// #endif
+-// #else
+-// #define NVSDKENTRY
+-// #endif
+-#define NVSDKENTRY
+-
+-#include <vector>
+-#include <assert.h>
+-
+-#ifdef __APPLE__
+-#include <OpenGL/gl.h>
+-#else
+-#include <GL/glew.h>
+-#endif
+-#include <nvMath.h>
+-
+-namespace nv {
+-
+-    class Model {
+-    public:
+-
+-        //
+-        // Enumeration of primitive types
+-        //
+-        //////////////////////////////////////////////////////////////
+-        enum PrimType {
+-            eptNone = 0x0,
+-            eptPoints = 0x1,
+-            eptEdges = 0x2,
+-            eptTriangles = 0x4,
+-            eptTrianglesWithAdjacency = 0x8,
+-            eptAll = 0xf
+-        };
+-
+-        static const int NumPrimTypes = 4;
+-
+-		NVSDKENTRY static Model* CreateModel();
+-
+-        NVSDKENTRY Model();
+-        NVSDKENTRY virtual ~Model();
+-
+-        //
+-        // loadModelFromFile
+-        //
+-        //    This function attempts to determine the type of
+-        //  the filename passed as a parameter. If it understands
+-        //  that file type, it attempts to parse and load the file
+-        //  into its raw data structures. If the file type is
+-        //  recognized and successfully parsed, the function returns
+-        //  true, otherwise it returns false.
+-        //
+-        //////////////////////////////////////////////////////////////
+-        NVSDKENTRY bool loadModelFromFile( const char* file);
+-
+-        //
+-        //  compileModel
+-        //
+-        //    This function takes the raw model data in the internal
+-        //  structures, and attempts to bring it to a format directly
+-        //  accepted for vertex array style rendering. This means that
+-        //  a unique compiled vertex will exist for each unique
+-        //  combination of position, normal, tex coords, etc that are
+-        //  used in the model. The prim parameter, tells the model
+-        //  what type of index list to compile. By default it compiles
+-        //  a simple triangle mesh with no connectivity. 
+-        //
+-        //////////////////////////////////////////////////////////////
+-        NVSDKENTRY void compileModel( PrimType prim = eptTriangles);
+-
+-        //
+-        //  computeBoundingBox
+-        //
+-        //    This function returns the points defining the axis-
+-        //  aligned bounding box containing the model.
+-        //
+-        //////////////////////////////////////////////////////////////
+-        NVSDKENTRY void computeBoundingBox( vec3f &minVal, vec3f &maxVal);
+-
+-        //
+-        //  rescale
+-        //
+-        //  rescales object based on bounding box
+-        //
+-        //////////////////////////////////////////////////////////////
+-        NVSDKENTRY void rescale( float radius);
+-
+-        //
+-        //  buildTangents
+-        //
+-        //    This function computes tangents in the s direction on
+-        //  the model. It operates on the raw data, so it should only
+-        //  be used before compiling a model into a HW friendly form.
+-        //
+-        //////////////////////////////////////////////////////////////
+-        NVSDKENTRY void computeTangents();
+-
+-        //
+-        //  computeNormals
+-        //
+-        //    This function computes vertex normals for a model
+-        //  which did not have them. It computes them on the raw
+-        //  data, so it should be done before compiling the model
+-        //  into a HW friendly format.
+-        //
+-        //////////////////////////////////////////////////////////////
+-        NVSDKENTRY void computeNormals();
+-
+-        NVSDKENTRY void removeDegeneratePrims();
+-
+-        //
+-        //general query functions
+-        //
+-        NVSDKENTRY bool hasNormals() const;
+-        NVSDKENTRY bool hasTexCoords() const;
+-        NVSDKENTRY bool hasTangents() const;
+-        NVSDKENTRY bool hasColors() const;
+-
+-        NVSDKENTRY int getPositionSize() const;
+-        NVSDKENTRY int getNormalSize() const;
+-        NVSDKENTRY int getTexCoordSize() const;
+-        NVSDKENTRY int getTangentSize() const;
+-        NVSDKENTRY int getColorSize() const;
+-
+-        //
+-        //  Functions for the management of raw data
+-        //
+-        NVSDKENTRY void clearNormals();
+-        NVSDKENTRY void clearTexCoords();
+-        NVSDKENTRY void clearTangents();
+-        NVSDKENTRY void clearColors();
+-
+-        //
+-        //raw data access functions
+-        //  These are to be used to get the raw array data from the file, each array has its own index
+-        //
+-        NVSDKENTRY const float* getPositions() const;
+-        NVSDKENTRY const float* getNormals() const;
+-        NVSDKENTRY const float* getTexCoords() const;
+-        NVSDKENTRY const float* getTangents() const;
+-        NVSDKENTRY const float* getColors() const;
+-
+-        NVSDKENTRY const GLuint* getPositionIndices() const;
+-        NVSDKENTRY const GLuint* getNormalIndices() const;
+-        NVSDKENTRY const GLuint* getTexCoordIndices() const;
+-        NVSDKENTRY const GLuint* getTangentIndices() const;
+-        NVSDKENTRY const GLuint* getColorIndices() const;
+-
+-        NVSDKENTRY int getPositionCount() const;
+-        NVSDKENTRY int getNormalCount() const;
+-        NVSDKENTRY int getTexCoordCount() const;
+-        NVSDKENTRY int getTangentCount() const;
+-        NVSDKENTRY int getColorCount() const;
+-
+-        NVSDKENTRY int getIndexCount() const;
+-
+-        //
+-        //compiled data access functions
+-        //
+-        NVSDKENTRY const float* getCompiledVertices() const;
+-        NVSDKENTRY const GLuint* getCompiledIndices( PrimType prim = eptTriangles) const;
+-
+-        NVSDKENTRY int getCompiledPositionOffset() const;
+-        NVSDKENTRY int getCompiledNormalOffset() const;
+-        NVSDKENTRY int getCompiledTexCoordOffset() const;
+-        NVSDKENTRY int getCompiledTangentOffset() const;
+-        NVSDKENTRY int getCompiledColorOffset() const;
+-
+-        // returns the size of the merged vertex in # of floats
+-        NVSDKENTRY int getCompiledVertexSize() const;
+-
+-        NVSDKENTRY int getCompiledVertexCount() const;
+-        NVSDKENTRY int getCompiledIndexCount( PrimType prim = eptTriangles) const;
+-
+-        NVSDKENTRY int getOpenEdgeCount() const;
+-
+-    protected:
+-
+-        //Would all this be better done as a channel abstraction to handle more arbitrary data?
+-
+-        //data structures for model data, not optimized for rendering
+-        std::vector<float> _positions;
+-        std::vector<float> _normals;
+-        std::vector<float> _texCoords;
+-        std::vector<float> _sTangents;
+-        std::vector<float> _colors;
+-        int _posSize;
+-        int _tcSize;
+-        int _cSize;
+-
+-        std::vector<GLuint> _pIndex;
+-        std::vector<GLuint> _nIndex;
+-        std::vector<GLuint> _tIndex;
+-        std::vector<GLuint> _tanIndex;
+-        std::vector<GLuint> _cIndex;
+-
+-        //data structures optimized for rendering, compiled model
+-        std::vector<GLuint> _indices[NumPrimTypes];
+-        std::vector<float> _vertices;
+-        int _pOffset;
+-        int _nOffset;
+-        int _tcOffset;
+-        int _sTanOffset;
+-        int _cOffset;
+-        int _vtxSize;
+-
+-        int _openEdges;
+-
+-        //
+-        // Static elements used to dispatch to proper sub-readers
+-        //
+-        //////////////////////////////////////////////////////////////
+-        struct FormatInfo {
+-            const char* extension;
+-            bool (*reader)( const char* file, Model& i);
+-        };
+-
+-        static FormatInfo formatTable[]; 
+-
+-        NVSDKENTRY static bool loadObjFromFile( const char *file, Model &m);
+-    };
+-};
+-
+-
+-#endif
+-
+diff --git a/nvcommon/nvModel/src/nvModel.cpp b/nvcommon/nvModel/src/nvModel.cpp
+deleted file mode 100644
+index 4f4a51d..0000000
+--- a/nvcommon/nvModel/src/nvModel.cpp
++++ /dev/null
+@@ -1,738 +0,0 @@
+-//
+-// nvModel.cpp - Model support class
+-//
+-// The nvModel class implements an interface for a multipurpose model
+-// object. This class is useful for loading and formatting meshes
+-// for use by OpenGL. It can compute face normals, tangents, and
+-// adjacency information. The class supports the obj file format.
+-//
+-// This file implements the fomat independent part of the code.
+-//
+-// Author: Evan Hart
+-// Email: sdkfeedback@nvidia.com
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-#include <stdio.h>
+-
+-#include <set>
+-#include <map>
+-#include <algorithm>
+-#include <string.h>
+-
+-#include "nvModel.h"
+-
+-#include <nvMath.h>
+-
+-
+-//fix for non-standard naming
+-#ifdef WIN32
+-#define strcasecmp _stricmp
+-#endif
+-
+-using std::vector;
+-using std::set;
+-using std::map;
+-using std::min;
+-using std::max;
+-
+-namespace nv {
+-
+-//////////////////////////////////////////////////////////////////////
+-//
+-// Local data structures
+-//
+-//////////////////////////////////////////////////////////////////////
+-
+-//
+-//  Index gathering and ordering structure
+-////////////////////////////////////////////////////////////
+-struct IdxSet {
+-    GLuint pIndex;
+-    GLuint nIndex;
+-    GLuint tIndex;
+-    GLuint tanIndex;
+-    GLuint cIndex;
+-
+-    bool operator< ( const IdxSet &rhs) const {
+-        if (pIndex < rhs.pIndex)
+-            return true;
+-        else if (pIndex == rhs.pIndex) {
+-            if (nIndex < rhs.nIndex)
+-                return true;
+-            else if (nIndex == rhs.nIndex) {
+-            
+-                if ( tIndex < rhs.tIndex)
+-                    return true;
+-                else if ( tIndex == rhs.tIndex) {
+-                    if (tanIndex < rhs.tanIndex)
+-                        return true;
+-                    else if (tanIndex == rhs.tanIndex)
+-                        return (cIndex < rhs.cIndex);
+-                }
+-            }
+-        }
+-
+-        return false;
+-    }
+-};
+-
+-//
+-//  Edge connectivity structure 
+-////////////////////////////////////////////////////////////
+-struct Edge {
+-    GLuint pIndex[2]; //position indices
+-
+-    bool operator< (const Edge &rhs) const {
+-        return ( pIndex[0] == rhs.pIndex[0]) ? ( pIndex[1] < rhs.pIndex[1]) : pIndex[0] < rhs.pIndex[0];
+-    }
+-
+-    Edge( GLuint v0, GLuint v1) {
+-        pIndex[0] = std::min( v0, v1);
+-        pIndex[1] = std::max( v0, v1);
+-    }
+-
+-private:
+-    Edge() {} // disallow the default constructor
+-};
+-
+-//////////////////////////////////////////////////////////////////////
+-//
+-//  Static data
+-//
+-//////////////////////////////////////////////////////////////////////
+-Model::FormatInfo Model::formatTable[] = {
+-    { "obj", Model::loadObjFromFile }
+-};
+-
+-Model* Model::CreateModel() {
+-	return new Model;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-Model::Model() : _posSize(0), _tcSize(0), _cSize(0), _pOffset(-1), _nOffset(-1), _tcOffset(-1), _sTanOffset(-1), _cOffset(-1), _vtxSize(0), _openEdges(0) {
+-    //nv::vec2<float> val;
+-}
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-Model::~Model() {
+-    //dynamic allocations presently all handled via stl
+-}
+-
+-//
+-//initialize a model from a file
+-//////////////////////////////////////////////////////////////////////
+-bool Model::loadModelFromFile( const char* file) {
+-    const char* extension;
+-    extension = strrchr( file, '.');
+-
+-    if (extension)
+-        extension++; //start looking after the .
+-    else
+-        return false; //don't try to place guess the file type
+-
+-    int formatCount = sizeof(Model::formatTable) / sizeof(Model::FormatInfo);
+-
+-    //try to match by format first
+-    for ( int ii = 0; ii < formatCount; ii++) {
+-        if ( ! strcasecmp( formatTable[ii].extension, extension)) {
+-            //extension matches, load it
+-            return formatTable[ii].reader( file, *this);
+-        }
+-    }
+-
+-
+-    return false;
+-}
+-
+-//
+-// compile the model to an acceptable format
+-//////////////////////////////////////////////////////////////////////
+-void Model::compileModel( Model::PrimType prim) {
+-    bool needsTriangles = false;
+-    bool needsTrianglesWithAdj = false;
+-    bool needsEdges = false;
+-    bool needsPoints = false;
+-
+-    if ( (prim & Model::eptPoints) == Model::eptPoints)
+-        needsPoints = true;
+-
+-    if ( (prim & Model::eptTriangles) == Model::eptTriangles)
+-        needsTriangles = true;
+-
+-    if ( (prim & Model::eptTrianglesWithAdjacency) == Model::eptTrianglesWithAdjacency) {
+-        needsTriangles = true;
+-        needsTrianglesWithAdj = true;
+-    }
+-
+-    if ( (prim & Model::eptEdges) == Model::eptEdges) {
+-        needsTriangles = true;
+-        needsEdges = true;
+-    }
+-
+-
+-    //merge the points
+-    map<IdxSet, GLuint> pts;
+-
+-    //find whether a position is unique
+-    set<GLuint> ptSet;
+-    
+-    {
+-        vector<GLuint>::iterator pit = _pIndex.begin();
+-        vector<GLuint>::iterator nit = _nIndex.begin();
+-        vector<GLuint>::iterator tit = _tIndex.begin();
+-        vector<GLuint>::iterator tanit = _tanIndex.begin();
+-        vector<GLuint>::iterator cit = _cIndex.begin();
+-
+-        while ( pit < _pIndex.end()) {
+-            IdxSet idx;
+-            idx.pIndex = *pit;
+-
+-            if ( _normals.size() > 0)
+-                idx.nIndex = *nit;
+-            else
+-                idx.nIndex = 0;
+-
+-            if ( _tIndex.size() > 0)
+-                idx.tIndex = *tit;
+-            else
+-                idx.tIndex = 0;
+-
+-            if ( _tanIndex.size() > 0)
+-                idx.tanIndex = *tanit;
+-            else
+-                idx.tanIndex = 0;
+-
+-            if ( _cIndex.size() > 0)
+-                idx.cIndex = *cit;
+-            else
+-                idx.cIndex = 0;
+-
+-            map<IdxSet,GLuint>::iterator mit = pts.find(idx);
+-
+-            if (mit == pts.end()) {
+-
+-                if (needsTriangles)
+-                    _indices[2].push_back( (GLuint)pts.size());
+-
+-                //since this one is a new vertex, check to see if this position is already referenced
+-                if (needsPoints && ptSet.find(idx.pIndex) != ptSet.end()) {
+-                    ptSet.insert( idx.pIndex);
+-                }
+-
+-                pts.insert( map<IdxSet,GLuint>::value_type(idx, (GLuint)pts.size()));
+-
+-                //position
+-                _vertices.push_back( _positions[idx.pIndex*_posSize]);
+-                _vertices.push_back( _positions[idx.pIndex*_posSize + 1]);
+-                _vertices.push_back( _positions[idx.pIndex*_posSize + 2]);
+-                if (_posSize == 4)
+-                    _vertices.push_back( _positions[idx.pIndex*_posSize + 3]);
+-
+-                //normal
+-                if (_normals.size() > 0) {
+-                    _vertices.push_back( _normals[idx.nIndex*3]);
+-                    _vertices.push_back( _normals[idx.nIndex*3 + 1]);
+-                    _vertices.push_back( _normals[idx.nIndex*3 + 2]);
+-                }
+-
+-                //texture coordinate
+-                if (_texCoords.size() > 0) {
+-                    _vertices.push_back( _texCoords[idx.tIndex*_tcSize]);
+-                    _vertices.push_back( _texCoords[idx.tIndex*_tcSize + 1]);
+-                    if (_tcSize == 3)
+-                        _vertices.push_back( _texCoords[idx.tIndex*_tcSize + 2]);
+-                }
+-
+-                //tangents
+-                if (_sTangents.size() > 0) {
+-                    _vertices.push_back( _sTangents[idx.tanIndex*3]);
+-                    _vertices.push_back( _sTangents[idx.tanIndex*3 + 1]);
+-                    _vertices.push_back( _sTangents[idx.tanIndex*3 + 2]);
+-                }
+-
+-                //colors
+-                if (_colors.size() > 0) {
+-                    _vertices.push_back( _colors[idx.cIndex*_cSize]);
+-                    _vertices.push_back( _colors[idx.cIndex*_cSize + 1]);
+-                    _vertices.push_back( _colors[idx.cIndex*_cSize + 2]);
+-                    if (_cSize == 4)
+-                        _vertices.push_back( _colors[idx.cIndex*_cSize + 3]);
+-                }
+-            }
+-            else {
+-                if (needsTriangles)
+-                    _indices[2].push_back( mit->second);
+-            }
+-
+-            //advance the iterators if the components are present
+-            pit++;
+-
+-            if (hasNormals())
+-                nit++;
+-
+-            if (hasTexCoords())
+-                tit++;
+-
+-            if (hasTangents())
+-                tanit++;
+-
+-            if (hasColors())
+-                cit++;
+-        }
+-    }
+-
+-    //create an edge list, if necessary
+-    if (needsEdges || needsTrianglesWithAdj) {
+-        std::multimap<Edge, GLuint> edges;
+-
+-
+-        //edges are only based on positions only
+-        for (int ii = 0; ii < (int)_pIndex.size(); ii += 3) {
+-            for (int jj = 0; jj < 3; jj++) {
+-                Edge w( _pIndex[ii + jj], _pIndex[ii + (jj +1) % 3]);
+-                std::multimap<Edge, GLuint>::iterator it = edges.find(w);
+-
+-                //if we are storing edges, make sure we store only one copy
+-                if (needsEdges && it == edges.end()) {
+-                    _indices[1].push_back( _indices[2][ii+jj]);
+-                    _indices[1].push_back( _indices[2][ii + (jj +1) % 3]);
+-                }
+-                edges.insert( std::multimap<Edge, GLuint>::value_type( w, ii / 3));
+-            }
+-        }
+-
+-
+-        //now handle triangles with adjacency
+-        if (needsTrianglesWithAdj) {
+-            for (unsigned int ii = 0; ii < _pIndex.size(); ii += 3) {
+-                for (int jj = 0; jj < 3; jj++) {
+-                    Edge w( _pIndex[ii + jj], _pIndex[ii + (jj + 1) % 3]);
+-                    std::multimap<Edge, GLuint>::iterator it = edges.lower_bound(w);
+-                    std::multimap<Edge, GLuint>::iterator limit = edges.upper_bound(w);
+-                    GLuint adjVertex = 0;
+-
+-                    while ( it != edges.end() && it->second == ii /3 && it != limit)
+-                        it++;
+-
+-                    if ( it == edges.end() || it == limit || it->first.pIndex[0] != w.pIndex[0] || it->first.pIndex[1] != w.pIndex[1] ) {
+-                        //no adjacent triangle found, duplicate the vertex
+-                        adjVertex = _indices[2][ii + jj];
+-                        _openEdges++;
+-                        
+-                    }
+-                    else {
+-                        GLuint triOffset = it->second * 3; //compute the starting index of the triangle
+-                        adjVertex = _indices[2][triOffset]; //set the vertex to a default, in case the adjacent triangle it a degenerate
+-
+-                        //find the unshared vertex
+-                        for ( int kk=0; kk<3; kk++) {
+-                            if ( _pIndex[triOffset + kk] != w.pIndex[0] && _pIndex[triOffset + kk] != w.pIndex[1] ) {
+-                                adjVertex = _indices[2][triOffset + kk];
+-                                break;
+-                            }
+-                        }
+-                    }
+-
+-                    //store the vertices for this edge
+-                    _indices[3].push_back( _indices[2][ii + jj]);
+-                    _indices[3].push_back( adjVertex);
+-                }
+-            }
+-        }
+-
+-    }
+-
+-    //create selected prim
+-
+-    //set the offsets and vertex size
+-    _pOffset = 0; //always first
+-    _vtxSize = _posSize;
+-    if ( hasNormals()) {
+-        _nOffset = _vtxSize;
+-        _vtxSize += 3;
+-    }
+-    else {
+-        _nOffset = -1;
+-    }
+-    if ( hasTexCoords()) {
+-        _tcOffset = _vtxSize;
+-        _vtxSize += _tcSize;
+-    }
+-    else {
+-        _tcOffset = -1;
+-    }
+-    if ( hasTangents()) {
+-        _sTanOffset = _vtxSize;
+-        _vtxSize += 3;
+-    }
+-    else {
+-        _sTanOffset = -1;
+-    }
+-    if ( hasColors()) {
+-        _cOffset = _vtxSize;
+-        _vtxSize += _cSize;
+-    }
+-    else {
+-        _cOffset = -1;
+-    }
+-
+-    
+-}
+-
+-//
+-// compute tangents in the S direction
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::computeTangents() {
+-
+-    //make sure tangents don't already exist
+-    if ( hasTangents()) 
+-        return;
+-
+-    //make sure that the model has texcoords
+-    if ( !hasTexCoords())
+-        return;
+-
+-    //alloc memory and initialize to 0
+-    _tanIndex.reserve( _pIndex.size());
+-    _sTangents.resize( (_texCoords.size() / _tcSize) * 3, 0.0f);
+-
+-    // the collision map records any alternate locations for the tangents
+-    std::multimap< GLuint, GLuint> collisionMap;
+-
+-    //process each face, compute the tangent and try to add it
+-    for (int ii = 0; ii < (int)_pIndex.size(); ii += 3) {
+-        vec3f p0(&_positions[_pIndex[ii]*_posSize]);
+-        vec3f p1(&_positions[_pIndex[ii+1]*_posSize]);
+-        vec3f p2(&_positions[_pIndex[ii+2]*_posSize]);
+-        vec2f st0(&_texCoords[_tIndex[ii]*_tcSize]);
+-        vec2f st1(&_texCoords[_tIndex[ii+1]*_tcSize]);
+-        vec2f st2(&_texCoords[_tIndex[ii+2]*_tcSize]);
+-
+-        //compute the edge and tc differentials
+-        vec3f dp0 = p1 - p0;
+-        vec3f dp1 = p2 - p0;
+-        vec2f dst0 = st1 - st0;
+-        vec2f dst1 = st2 - st0;
+-
+-        float factor = 1.0f / (dst0[0] * dst1[1] - dst1[0] * dst0[1]);
+-
+-        //compute sTangent
+-        vec3f sTan;
+-        sTan[0] = dp0[0] * dst1[1] - dp1[0] * dst0[1];
+-        sTan[1] = dp0[1] * dst1[1] - dp1[1] * dst0[1];
+-        sTan[2] = dp0[2] * dst1[1] - dp1[2] * dst0[1];
+-        sTan *= factor;
+-
+-        //should this really renormalize?
+-        sTan =normalize( sTan);
+-
+-        //loop over the vertices, to update the tangents
+-        for (int jj = 0; jj < 3; jj++) {
+-            //get the present accumulated tangnet
+-            vec3f curTan(&_sTangents[_tIndex[ii + jj]*3]);
+-
+-            //check to see if it is uninitialized, if so, insert it
+-            if (curTan[0] == 0.0f && curTan[1] == 0.0f && curTan[2] == 0.0f) {
+-                _sTangents[_tIndex[ii + jj]*3] = sTan[0];
+-                _sTangents[_tIndex[ii + jj]*3+1] = sTan[1];
+-                _sTangents[_tIndex[ii + jj]*3+2] = sTan[2];
+-                _tanIndex.push_back(_tIndex[ii + jj]);
+-            }
+-            else {
+-                //check for agreement
+-                curTan = normalize( curTan);
+-
+-                if ( dot( curTan, sTan) >= cosf( 3.1415926f * 0.333333f)) {
+-                    //tangents are in agreement
+-                    _sTangents[_tIndex[ii + jj]*3] += sTan[0];
+-                    _sTangents[_tIndex[ii + jj]*3+1] += sTan[1];
+-                    _sTangents[_tIndex[ii + jj]*3+2] += sTan[2];
+-                    _tanIndex.push_back(_tIndex[ii + jj]);
+-                }
+-                else {
+-                    //tangents disagree, this vertex must be split in tangent space 
+-                    std::multimap< GLuint, GLuint>::iterator it = collisionMap.find( _tIndex[ii + jj]);
+-
+-                    //loop through all hits on this index, until one agrees
+-                    while ( it != collisionMap.end() && it->first == _tIndex[ii + jj]) {
+-                        curTan = vec3f( &_sTangents[it->second*3]);
+-
+-                        curTan = normalize(curTan);
+-                        if ( dot( curTan, sTan) >= cosf( 3.1415926f * 0.333333f))
+-                            break;
+-
+-                        it++;
+-                    }
+-
+-                    //check for agreement with an earlier collision
+-                    if ( it != collisionMap.end() && it->first == _tIndex[ii + jj]) {
+-                        //found agreement with an earlier collision, use that one
+-                        _sTangents[it->second*3] += sTan[0];
+-                        _sTangents[it->second*3+1] += sTan[1];
+-                        _sTangents[it->second*3+2] += sTan[2];
+-                        _tanIndex.push_back(it->second);
+-                    }
+-                    else {
+-                        //we have a new collision, create a new tangent
+-                        GLuint target = (GLuint)_sTangents.size() / 3;
+-                        _sTangents.push_back( sTan[0]);
+-                        _sTangents.push_back( sTan[1]);
+-                        _sTangents.push_back( sTan[2]);
+-                        _tanIndex.push_back( target);
+-                        collisionMap.insert( std::multimap< GLuint, GLuint>::value_type( _tIndex[ii + jj], target));
+-                    }
+-                } // else ( if tangent agrees)
+-            } // else ( if tangent is uninitialized )
+-        } // for jj = 0 to 2 ( iteration of triangle verts)
+-    } // for ii = 0 to numFaces *3 ( iterations over triangle faces
+-
+-    //normalize all the tangents
+-    for (int ii = 0; ii < (int)_sTangents.size(); ii += 3) {
+-        vec3f tan(&_sTangents[ii]);
+-        tan = normalize(tan);
+-        _sTangents[ii] = tan[0];
+-        _sTangents[ii+1] = tan[1];
+-        _sTangents[ii+2] = tan[2];
+-    }
+-}
+-//
+-//compute vertex normals
+-//////////////////////////////////////////////////////////////////////
+-void Model::computeNormals() {
+-
+-    // don't recompute normals
+-    if (hasNormals())
+-        return;
+-
+-    //allocate and initialize the normal values
+-    _normals.resize( (_positions.size() / _posSize) * 3, 0.0f);
+-    _nIndex.reserve( _pIndex.size());
+-
+-    // the collision map records any alternate locations for the normals
+-    std::multimap< GLuint, GLuint> collisionMap;
+-
+-    //iterate over the faces, computing the face normal and summing it them
+-    for ( int ii = 0; ii < (int)_pIndex.size(); ii += 3) {
+-        vec3f p0(&_positions[_pIndex[ii]*_posSize]);
+-        vec3f p1(&_positions[_pIndex[ii+1]*_posSize]);
+-        vec3f p2(&_positions[_pIndex[ii+2]*_posSize]);
+-
+-        //compute the edge vectors
+-        vec3f dp0 = p1 - p0;
+-        vec3f dp1 = p2 - p0;
+-
+-        vec3f fNormal = cross( dp0, dp1); // compute the face normal
+-        vec3f nNormal = normalize(fNormal);  // compute a normalized normal
+-
+-        //iterate over the vertices, adding the face normal influence to each
+-        for ( int jj = 0; jj < 3; jj++) {
+-            // get the current normal from the default location (index shared with position) 
+-            vec3f cNormal( &_normals[_pIndex[ii + jj]*3]);
+-
+-            // check to see if this normal has not yet been touched 
+-            if ( cNormal[0] == 0.0f && cNormal[1] == 0.0f && cNormal[2] == 0.0f) {
+-                // first instance of this index, just store it as is
+-                _normals[_pIndex[ii + jj]*3] = fNormal[0];
+-                _normals[_pIndex[ii + jj]*3 + 1] = fNormal[1];
+-                _normals[_pIndex[ii + jj]*3 + 2] = fNormal[2];
+-                _nIndex.push_back( _pIndex[ii + jj]); 
+-            }
+-            else {
+-                // check for agreement
+-                cNormal = normalize( cNormal);
+-
+-                if ( dot( cNormal, nNormal) >= cosf( 3.1415926f * 0.333333f)) {
+-                    //normal agrees, so add it
+-                    _normals[_pIndex[ii + jj]*3] += fNormal[0];
+-                    _normals[_pIndex[ii + jj]*3 + 1] += fNormal[1];
+-                    _normals[_pIndex[ii + jj]*3 + 2] += fNormal[2];
+-                    _nIndex.push_back( _pIndex[ii + jj]);
+-                }
+-                else {
+-                    //normals disagree, this vertex must be along a facet edge 
+-                    std::multimap< GLuint, GLuint>::iterator it = collisionMap.find( _pIndex[ii + jj]);
+-
+-                    //loop through all hits on this index, until one agrees
+-                    while ( it != collisionMap.end() && it->first == _pIndex[ii + jj]) {
+-                        cNormal = normalize(vec3f( &_normals[it->second*3]));
+-
+-                        if ( dot( cNormal, nNormal) >= cosf( 3.1415926f * 0.333333f))
+-                            break;
+-
+-                        it++;
+-                    }
+-
+-                    //check for agreement with an earlier collision
+-                    if ( it != collisionMap.end() && it->first == _pIndex[ii + jj]) {
+-                        //found agreement with an earlier collision, use that one
+-                        _normals[it->second*3] += fNormal[0];
+-                        _normals[it->second*3+1] += fNormal[1];
+-                        _normals[it->second*3+2] += fNormal[2];
+-                        _nIndex.push_back(it->second);
+-                    }
+-                    else {
+-                        //we have a new collision, create a new normal
+-                        GLuint target = (GLuint)_normals.size() / 3;
+-                        _normals.push_back( fNormal[0]);
+-                        _normals.push_back( fNormal[1]);
+-                        _normals.push_back( fNormal[2]);
+-                        _nIndex.push_back( target);
+-                        collisionMap.insert( std::multimap< GLuint, GLuint>::value_type( _pIndex[ii + jj], target));
+-                    }
+-                } // else ( if normal agrees)
+-            } // else (if normal is uninitialized)
+-        } // for each vertex in triangle
+-    } // for each face
+-
+-    //now normalize all the normals
+-    for ( int ii = 0; ii < (int)_normals.size(); ii += 3) {
+-        vec3f norm(&_normals[ii]);
+-        norm =normalize(norm);
+-        _normals[ii] = norm[0];
+-        _normals[ii+1] = norm[1];
+-        _normals[ii+2] = norm[2];
+-    }
+-
+-}
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::computeBoundingBox( vec3f &minVal, vec3f &maxVal) {
+-
+-    if ( _positions.empty())
+-        return;
+-
+-    minVal = vec3f( 1e10f, 1e10f, 1e10f);
+-    maxVal = -minVal;
+-
+-    for ( vector<float>::iterator pit = _positions.begin() + _posSize; pit < _positions.end(); pit += _posSize) {
+-        minVal = min( minVal, vec3f( &pit[0]));
+-        maxVal = max( maxVal, vec3f( &pit[0]));
+-    }
+-}
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::rescale( float radius) {
+-
+-    if ( _positions.empty())
+-        return;
+-
+-    vec3f minVal, maxVal;
+-    computeBoundingBox(minVal, maxVal);
+-
+-    vec3f r = 0.5f*(maxVal - minVal);
+-    vec3f center = minVal + r;
+-//    float oldRadius = length(r);
+-    float oldRadius = std::max(r.x, std::max(r.y, r.z));
+-    float scale = radius / oldRadius;
+-
+-    for ( vector<float>::iterator pit = _positions.begin(); pit < _positions.end(); pit += _posSize) {
+-        vec3f np = scale*(vec3f(&pit[0]) - center);
+-        pit[0] = np.x;
+-        pit[1] = np.y;
+-        pit[2] = np.z;
+-    }
+-}
+-
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::clearNormals(){
+-    _normals.clear();
+-    _nIndex.clear();
+-}
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::clearTexCoords(){
+-    _texCoords.clear();
+-    _tIndex.clear();
+-}
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::clearTangents(){
+-    _sTangents.clear();
+-    _tanIndex.clear();
+-}
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::clearColors(){
+-    _colors.clear();
+-    _cIndex.clear();
+-}
+-
+-//
+-//
+-//////////////////////////////////////////////////////////////////////
+-void Model::removeDegeneratePrims() {
+-    GLuint *pSrc = 0, *pDst = 0, *tSrc = 0, *tDst = 0, *nSrc = 0, *nDst = 0, *cSrc = 0, *cDst = 0;
+-    int degen = 0;
+-
+-    pSrc = &_pIndex[0];
+-    pDst = pSrc;
+-
+-    if (hasTexCoords()) {
+-        tSrc = &_tIndex[0];
+-        tDst = tSrc;
+-    }
+-
+-    if (hasNormals()) {
+-        nSrc = &_nIndex[0];
+-        nDst = nSrc;
+-    }
+-
+-    if (hasColors()) {
+-        cSrc =&_cIndex[0];
+-        cDst = cSrc;
+-    }
+-
+-    for (int ii = 0; ii < (int)_pIndex.size(); ii += 3, pSrc += 3, tSrc += 3, nSrc += 3, cSrc += 3) {
+-        if ( pSrc[0] == pSrc[1] || pSrc[0] == pSrc[2] || pSrc[1] == pSrc[2]) {
+-            degen++;
+-            continue; //skip updating the dest
+-        }
+-
+-        for (int jj = 0; jj < 3; jj++) {
+-            *pDst++ = pSrc[jj];
+-
+-            if (hasTexCoords())
+-                *tDst++ = tSrc[jj];
+-
+-            if (hasNormals())
+-                *nDst++ = nSrc[jj];
+-
+-            if (hasColors())
+-                *cDst++ = cSrc[jj];
+-        }
+-    }
+-
+-    _pIndex.resize( _pIndex.size() - degen * 3);
+-
+-    if (hasTexCoords())
+-        _tIndex.resize( _tIndex.size() - degen * 3);
+-
+-    if (hasNormals())
+-        _nIndex.resize( _nIndex.size() - degen * 3);
+-
+-    if (hasColors())
+-        _cIndex.resize( _cIndex.size() - degen * 3);
+-
+-}
+-
+-};
+diff --git a/nvcommon/nvModel/src/nvModelObj.cpp b/nvcommon/nvModel/src/nvModelObj.cpp
+deleted file mode 100644
+index 8f9c717..0000000
+--- a/nvcommon/nvModel/src/nvModelObj.cpp
++++ /dev/null
+@@ -1,314 +0,0 @@
+-//
+-// nvModelObj.cpp - Model support class
+-//
+-// The nvModel class implements an interface for a multipurpose model
+-// object. This class is useful for loading and formatting meshes
+-// for use by OpenGL. It can compute face normals, tangents, and
+-// adjacency information. The class supports the obj file format.
+-//
+-// This file implements the obj file parser and translator.
+-//
+-// Author: Evan Hart
+-// Email: sdkfeedback@nvidia.com
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-#include "nvModel.h"
+-
+-#include <stdio.h>
+-
+-#define BUF_SIZE 256
+-
+-using std::vector;
+-
+-static void skipLine(char * buf, int size, FILE * fp)
+-{
+-	do {
+-		buf[size-1] = '$';
+-		char* s = fgets(buf, size, fp);
+-                (void)s;
+-	} while (buf[size-1] != '$');
+-}
+-
+-
+-namespace nv {
+-
+-bool Model::loadObjFromFile( const char *file, Model &m) {
+-    FILE *fp;
+-
+-    fp = fopen( file, "r");
+-    if (!fp) {
+-        return false;
+-    }
+-
+-    char buf[BUF_SIZE];
+-    float val[4];
+-    int idx[3][3];
+-    int match;
+-    bool vtx4Comp = false;
+-    bool tex3Comp = false;
+-    bool hasTC = false;
+-    bool hasNormals = false;
+-    int ret;
+-
+-    while ( fscanf( fp, "%s", buf) != EOF ) {
+-
+-        switch (buf[0]) {
+-            case '#':
+-                //comment line, eat the remainder
+-				skipLine( buf, BUF_SIZE, fp);
+-                break;
+-
+-            case 'v':
+-                switch (buf[1]) {
+-                
+-                    case '\0':
+-                        //vertex, 3 or 4 components
+-                        val[3] = 1.0f;  //default w coordinate
+-                        match = fscanf( fp, "%f %f %f %f", &val[0], &val[1], &val[2], &val[3]);
+-                        m._positions.push_back( val[0]);
+-                        m._positions.push_back( val[1]);
+-                        m._positions.push_back( val[2]);
+-                        m._positions.push_back( val[3]);
+-                        vtx4Comp |= ( match == 4);
+-                        assert( match > 2 && match < 5);
+-                        break;
+-
+-                    case 'n':
+-                        //normal, 3 components
+-                        match = fscanf( fp, "%f %f %f", &val[0], &val[1], &val[2]);
+-                        m._normals.push_back( val[0]);
+-                        m._normals.push_back( val[1]);
+-                        m._normals.push_back( val[2]);
+-                        assert( match == 3);
+-                        break;
+-
+-                    case 't':
+-                        //texcoord, 2 or 3 components
+-                        val[2] = 0.0f;  //default r coordinate
+-                        val[3] = 0.0f;  //default q coordinate
+-                        match = fscanf( fp, "%f %f %f %f", &val[0], &val[1], &val[2], &val[3]);
+-                        m._texCoords.push_back( val[0]);
+-                        m._texCoords.push_back( val[1]);
+-                        m._texCoords.push_back( val[2]);
+-                        tex3Comp |= ( match == 3);
+-                        assert( match > 1 && match < 4);
+-                        break;
+-                }
+-                break;
+-
+-            case 'f':
+-                //face
+-                ret = fscanf( fp, "%s", buf);
+-
+-                //determine the type, and read the initial vertex, all entries in a face must have the same format
+-                if ( sscanf( buf, "%d//%d", &idx[0][0], &idx[0][1]) == 2) {
+-                    //This face has vertex and normal indices
+-
+-                    //remap them to the right spot
+-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
+-                    idx[0][1] = (idx[0][1] > 0) ? (idx[0][1] - 1) : ((int)m._normals.size() - idx[0][1]);
+-
+-                    //grab the second vertex to prime
+-                    ret = fscanf( fp, "%d//%d", &idx[1][0], &idx[1][1]);
+-
+-                    //remap them to the right spot
+-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
+-                    idx[1][1] = (idx[1][1] > 0) ? (idx[1][1] - 1) : ((int)m._normals.size() - idx[1][1]);
+-
+-                    //create the fan
+-                    while ( fscanf( fp, "%d//%d", &idx[2][0], &idx[2][1]) == 2) {
+-                        //remap them to the right spot
+-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
+-                        idx[2][1] = (idx[2][1] > 0) ? (idx[2][1] - 1) : ((int)m._normals.size() - idx[2][1]);
+-
+-                        //add the indices
+-                        for (int ii = 0; ii < 3; ii++) {
+-                            m._pIndex.push_back( idx[ii][0]);
+-                            m._nIndex.push_back( idx[ii][1]);
+-                            m._tIndex.push_back(0); // dummy index, to ensure that the buffers are of identical size
+-                        }
+-                        
+-                        //prepare for the next iteration
+-                        idx[1][0] = idx[2][0];
+-                        idx[1][1] = idx[2][1];
+-                    }
+-                    hasNormals = true;
+-                }
+-                else if ( sscanf( buf, "%d/%d/%d", &idx[0][0], &idx[0][1], &idx[0][2]) == 3) {
+-                    //This face has vertex, texture coordinate, and normal indices
+-
+-                    //remap them to the right spot
+-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
+-                    idx[0][1] = (idx[0][1] > 0) ? (idx[0][1] - 1) : ((int)m._texCoords.size() - idx[0][1]);
+-                    idx[0][2] = (idx[0][2] > 0) ? (idx[0][2] - 1) : ((int)m._normals.size() - idx[0][2]);
+-
+-                    //grab the second vertex to prime
+-                    ret = fscanf( fp, "%d/%d/%d", &idx[1][0], &idx[1][1], &idx[1][2]);
+-
+-                    //remap them to the right spot
+-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
+-                    idx[1][1] = (idx[1][1] > 0) ? (idx[1][1] - 1) : ((int)m._texCoords.size() - idx[1][1]);
+-                    idx[1][2] = (idx[1][2] > 0) ? (idx[1][2] - 1) : ((int)m._normals.size() - idx[1][2]);
+-
+-                    //create the fan
+-                    while ( fscanf( fp, "%d/%d/%d", &idx[2][0], &idx[2][1], &idx[2][2]) == 3) {
+-                        //remap them to the right spot
+-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
+-                        idx[2][1] = (idx[2][1] > 0) ? (idx[2][1] - 1) : ((int)m._texCoords.size() - idx[2][1]);
+-                        idx[2][2] = (idx[2][2] > 0) ? (idx[2][2] - 1) : ((int)m._normals.size() - idx[2][2]);
+-
+-                        //add the indices
+-                        for (int ii = 0; ii < 3; ii++) {
+-                            m._pIndex.push_back( idx[ii][0]);
+-                            m._tIndex.push_back( idx[ii][1]);
+-                            m._nIndex.push_back( idx[ii][2]);
+-                        }
+-                        
+-                        //prepare for the next iteration
+-                        idx[1][0] = idx[2][0];
+-                        idx[1][1] = idx[2][1];
+-                        idx[1][2] = idx[2][2];
+-                    }
+-
+-                    hasTC = true;
+-                    hasNormals = true;
+-                }
+-                else if ( sscanf( buf, "%d/%d", &idx[0][0], &idx[0][1]) == 2) {
+-                    //This face has vertex and texture coordinate indices
+-
+-                    //remap them to the right spot
+-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
+-                    idx[0][1] = (idx[0][1] > 0) ? (idx[0][1] - 1) : ((int)m._texCoords.size() - idx[0][1]);
+-
+-                    //grab the second vertex to prime
+-                    ret = fscanf( fp, "%d/%d", &idx[1][0], &idx[1][1]);
+-
+-                    //remap them to the right spot
+-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
+-                    idx[1][1] = (idx[1][1] > 0) ? (idx[1][1] - 1) : ((int)m._texCoords.size() - idx[1][1]);
+-
+-                    //create the fan
+-                    while ( fscanf( fp, "%d/%d", &idx[2][0], &idx[2][1]) == 2) {
+-                        //remap them to the right spot
+-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
+-                        idx[2][1] = (idx[2][1] > 0) ? (idx[2][1] - 1) : ((int)m._texCoords.size() - idx[2][1]);
+-
+-                        //add the indices
+-                        for (int ii = 0; ii < 3; ii++) {
+-                            m._pIndex.push_back( idx[ii][0]);
+-                            m._tIndex.push_back( idx[ii][1]);
+-                            m._nIndex.push_back( 0); //dummy normal index to keep everything in synch
+-                        }
+-                        
+-                        //prepare for the next iteration
+-                        idx[1][0] = idx[2][0];
+-                        idx[1][1] = idx[2][1];
+-                    }
+-                    hasTC = true;
+-                }
+-                else if ( sscanf( buf, "%d", &idx[0][0]) == 1) {
+-                    //This face has only vertex indices
+-
+-                    //remap them to the right spot
+-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
+-
+-                    //grab the second vertex to prime
+-                    ret = fscanf( fp, "%d", &idx[1][0]);
+-
+-                    //remap them to the right spot
+-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
+-
+-                    //create the fan
+-                    while ( fscanf( fp, "%d", &idx[2][0]) == 1) {
+-                        //remap them to the right spot
+-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
+-
+-                        //add the indices
+-                        for (int ii = 0; ii < 3; ii++) {
+-                            m._pIndex.push_back( idx[ii][0]);
+-                            m._tIndex.push_back( 0); //dummy index to keep things in synch
+-                            m._nIndex.push_back( 0); //dummy normal index to keep everything in synch
+-                        }
+-                        
+-                        //prepare for the next iteration
+-                        idx[1][0] = idx[2][0];
+-                    }
+-                }
+-                else {
+-                    //bad format
+-                    assert(0);
+-                    skipLine( buf, BUF_SIZE, fp);
+-                }
+-                break;
+-
+-            case 's':
+-            case 'g':
+-            case 'u':
+-                //all presently ignored
+-            default:
+-				skipLine( buf, BUF_SIZE, fp);
+-
+-        }
+-        (void)ret;
+-    }
+-
+-    fclose(fp);
+-
+-    //post-process data
+-
+-    //free anything that ended up being unused
+-    if (!hasNormals) {
+-        m._normals.clear();
+-        m._nIndex.clear();
+-    }
+-
+-    if (!hasTC) {
+-        m._texCoords.clear();
+-        m._tIndex.clear();
+-    }
+-
+-    //set the defaults as the worst-case for an obj file
+-    m._posSize = 4;
+-    m._tcSize = 3;
+-
+-    //compact to 3 component vertices if possible
+-    if (!vtx4Comp) {
+-        vector<float>::iterator src = m._positions.begin();
+-        vector<float>::iterator dst = m._positions.begin();
+-
+-        for ( ; src < m._positions.end(); ) {
+-            *(dst++) = *(src++);
+-            *(dst++) = *(src++);
+-            *(dst++) = *(src++);
+-            src++;
+-        }
+-
+-        m._positions.resize( (m._positions.size() / 4) * 3);
+-
+-        m._posSize = 3;
+-    }
+-
+-    //compact to 2 component tex coords if possible
+-    if (!tex3Comp) {
+-        vector<float>::iterator src = m._texCoords.begin();
+-        vector<float>::iterator dst = m._texCoords.begin();
+-
+-        for ( ; src < m._texCoords.end(); ) {
+-            *(dst++) = *(src++);
+-            *(dst++) = *(src++);
+-            src++;
+-        }
+-
+-        m._texCoords.resize( (m._texCoords.size() / 3) * 2);
+-
+-        m._tcSize = 2; 
+-    }
+-
+-    return true;
+-}
+-
+-
+-};
+-
+diff --git a/nvcommon/nvModel/src/nvModelQuery.cpp b/nvcommon/nvModel/src/nvModelQuery.cpp
+deleted file mode 100644
+index c0b3e08..0000000
+--- a/nvcommon/nvModel/src/nvModelQuery.cpp
++++ /dev/null
+@@ -1,314 +0,0 @@
+-//
+-// nvModelQuery.h - Model support class
+-//
+-// The nvModel class implements an interface for a multipurpose model
+-// object. This class is useful for loading and formatting meshes
+-// for use by OpenGL. It can compute face normals, tangents, and
+-// adjacency information. The class supports the obj file format.
+-//
+-// This function implements the query functions. (number of vertices, etc)
+-//
+-// Author: Evan Hart
+-// Email: sdkfeedback@nvidia.com
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-
+-#include "nvModel.h"
+-
+-//fix for non-standard naming
+-#ifdef WIN32
+-#define strcasecmp _stricmp
+-#endif
+-
+-using std::vector;
+-
+-namespace nv {
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-bool Model::hasNormals() const {
+-    return _normals.size() > 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-bool Model::hasTexCoords() const {
+-    return _texCoords.size() > 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-bool Model::hasTangents() const {
+-    return _sTangents.size() > 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-bool Model::hasColors() const {
+-    return _colors.size() > 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getPositionSize() const {
+-    return _posSize;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getNormalSize() const {
+-    return 3;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getTexCoordSize() const {
+-    return _tcSize;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getTangentSize() const {
+-    return 3;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getColorSize() const {
+-    return _cSize;
+-}
+-
+-
+-//raw data access functions
+-//  These are to be used to get the raw array data from the file, each array has its own index
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const float* Model::getPositions() const {
+-    return ( _positions.size() > 0) ? &(_positions[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const float* Model::getNormals() const {
+-    return ( _normals.size() > 0) ? &(_normals[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const float* Model::getTexCoords() const {
+-    return ( _texCoords.size() > 0) ? &(_texCoords[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const float* Model::getTangents() const {
+-    return ( _sTangents.size() > 0) ? &(_sTangents[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const float* Model::getColors() const {
+-    return ( _colors.size() > 0) ? &(_colors[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const GLuint* Model::getPositionIndices() const {
+-    return ( _pIndex.size() > 0) ? &(_pIndex[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const GLuint* Model::getNormalIndices() const {
+-    return ( _nIndex.size() > 0) ? &(_nIndex[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const GLuint* Model::getTexCoordIndices() const {
+-    return ( _tIndex.size() > 0) ? &(_tIndex[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const GLuint* Model::getTangentIndices() const {
+-    return ( _tanIndex.size() > 0) ? &(_tanIndex[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const GLuint* Model::getColorIndices() const {
+-    return ( _cIndex.size() > 0) ? &(_cIndex[0]) : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getPositionCount() const {
+-    return (_posSize > 0) ? (int)_positions.size() / _posSize : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getNormalCount() const {
+-    return (int)_normals.size() / 3;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getTexCoordCount() const {
+-    return (_tcSize > 0) ? (int)_texCoords.size() / _tcSize : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getTangentCount() const {
+-    return (int)_sTangents.size() / 3;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getColorCount() const {
+-    return (_cSize > 0) ? (int)_colors.size() / _cSize : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getIndexCount() const {
+-    return (int)_pIndex.size();
+-}
+-
+-//compiled data access functions
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const float* Model::getCompiledVertices() const {
+-    return (_vertices.size() > 0) ? &_vertices[0] : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-const GLuint* Model::getCompiledIndices( Model::PrimType prim) const {
+-    switch (prim) {
+-        case Model::eptPoints:
+-            return (_indices[0].size() > 0) ? &_indices[0][0] : 0;
+-        case Model::eptEdges:
+-            return (_indices[1].size() > 0) ? &_indices[1][0] : 0;
+-        case Model::eptTriangles:
+-            return (_indices[2].size() > 0) ? &_indices[2][0] : 0;
+-        case Model::eptTrianglesWithAdjacency:
+-            return (_indices[3].size() > 0) ? &_indices[3][0] : 0;
+-        default:
+-            break;
+-    }
+-
+-    return 0; 
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledPositionOffset() const {
+-    return _pOffset;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledNormalOffset() const {
+-    return _nOffset;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledTexCoordOffset() const {
+-    return _tcOffset;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledTangentOffset() const {
+-    return _sTanOffset;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledColorOffset() const {
+-    return _cOffset;
+-}
+-
+-// returns the size of the merged vertex in # of floats
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledVertexSize() const {
+-    return _vtxSize;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledVertexCount() const {
+-    return (_vtxSize > 0) ? (int)_vertices.size() / _vtxSize : 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getCompiledIndexCount( Model::PrimType prim) const {
+-    switch (prim) {
+-        case Model::eptPoints:
+-            return (int)_indices[0].size();
+-        case Model::eptEdges:
+-            return (int)_indices[1].size();
+-        case Model::eptTriangles:
+-            return (int)_indices[2].size();
+-        case Model::eptTrianglesWithAdjacency:
+-            return (int)_indices[3].size();
+-        default:
+-            break;
+-    }
+-
+-    return 0;
+-}
+-
+-//
+-//
+-////////////////////////////////////////////////////////////
+-int Model::getOpenEdgeCount() const {
+-    return _openEdges;
+-}
+-
+-};
+-
+diff --git a/nvcommon/src/framebufferObject.cpp b/nvcommon/src/framebufferObject.cpp
+deleted file mode 100644
+index 4de6734..0000000
+--- a/nvcommon/src/framebufferObject.cpp
++++ /dev/null
+@@ -1,342 +0,0 @@
+-/*
+-  Copyright (c) 2005, 
+-      Aaron Lefohn    (lefohn@cs.ucdavis.edu)
+-      Robert Strzodka (strzodka@stanford.edu)
+-      Adam Moerschell (atmoerschell@ucdavis.edu)
+-  All rights reserved.
+-
+-  This software is licensed under the BSD open-source license. See
+-  http://www.opensource.org/licenses/bsd-license.php for more detail.
+-
+-  *************************************************************
+-  Redistribution and use in source and binary forms, with or 
+-  without modification, are permitted provided that the following 
+-  conditions are met:
+-
+-  Redistributions of source code must retain the above copyright notice, 
+-  this list of conditions and the following disclaimer. 
+-
+-  Redistributions in binary form must reproduce the above copyright notice, 
+-  this list of conditions and the following disclaimer in the documentation 
+-  and/or other materials provided with the distribution. 
+-
+-  Neither the name of the University of Californa, Davis nor the names of 
+-  the contributors may be used to endorse or promote products derived 
+-  from this software without specific prior written permission.
+-
+-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
+-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
+-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
+-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
+-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
+-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
+-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
+-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
+-  OF SUCH DAMAGE.
+-*/
+-
+-#include "framebufferObject.h"
+-#include <iostream>
+-using namespace std;
+-
+-FramebufferObject::FramebufferObject()
+-  : m_fboId(_GenerateFboId()),
+-    m_savedFboId(0)
+-{
+-  // Bind this FBO so that it actually gets created now
+-  _GuardedBind();
+-  _GuardedUnbind();
+-}
+-
+-FramebufferObject::~FramebufferObject() 
+-{
+-  glDeleteFramebuffersEXT(1, &m_fboId);
+-}
+-
+-void FramebufferObject::Bind() 
+-{
+-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_fboId);
+-}
+-
+-void FramebufferObject::Disable() 
+-{
+-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+-}
+-
+-void
+-FramebufferObject::AttachTexture( GLenum texTarget, GLuint texId, 
+-                                  GLenum attachment, int mipLevel, int zSlice )
+-{
+-  _GuardedBind();
+-
+-  /*
+-#ifndef NDEBUG
+-  if( GetAttachedId(attachment) != texId ) {
+-#endif
+-  */
+-
+-    _FramebufferTextureND( attachment, texTarget,
+-                           texId, mipLevel, zSlice );
+-
+-/*
+-#ifndef NDEBUG
+-  }
+-  else {
+-    cerr << "FramebufferObject::AttachTexture PERFORMANCE WARNING:\n"
+-      << "\tRedundant bind of texture (id = " << texId << ").\n"
+-      << "\tHINT : Compile with -DNDEBUG to remove this warning.\n";
+-  }
+-#endif
+-*/
+-
+-  _GuardedUnbind();
+-}
+-
+-void
+-FramebufferObject::AttachTextures( int numTextures, GLenum texTarget[], GLuint texId[],
+-                                  GLenum attachment[], int mipLevel[], int zSlice[] )
+-{
+-  for(int i = 0; i < numTextures; ++i) {
+-    AttachTexture( texTarget[i], texId[i], 
+-                   attachment ? attachment[i] : (GL_COLOR_ATTACHMENT0_EXT + i), 
+-                   mipLevel ? mipLevel[i] : 0, 
+-                   zSlice ? zSlice[i] : 0 );
+-  }
+-}
+-
+-void
+-FramebufferObject::AttachRenderBuffer( GLuint buffId, GLenum attachment )
+-{
+-  _GuardedBind();
+-
+-#ifndef NDEBUG
+-  if( GetAttachedId(attachment) != buffId ) {
+-#endif
+-
+-    glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, attachment, 
+-                                 GL_RENDERBUFFER_EXT, buffId);
+-
+-#ifndef NDEBUG
+-  }
+-  else {
+-    cerr << "FramebufferObject::AttachRenderBuffer PERFORMANCE WARNING:\n"
+-      << "\tRedundant bind of Renderbuffer (id = " << buffId << ")\n"
+-      << "\tHINT : Compile with -DNDEBUG to remove this warning.\n";
+-  }
+-#endif
+-
+-  _GuardedUnbind();
+-}
+-
+-void
+-FramebufferObject::AttachRenderBuffers( int numBuffers, GLuint buffId[], GLenum attachment[] )
+-{
+-  for(int i = 0; i < numBuffers; ++i) {
+-    AttachRenderBuffer( buffId[i], 
+-                        attachment ? attachment[i] : (GL_COLOR_ATTACHMENT0_EXT + i) );
+-  }
+-}
+-
+-void
+-FramebufferObject::Unattach( GLenum attachment )
+-{
+-  _GuardedBind();
+-  GLenum type = GetAttachedType(attachment);
+-
+-  switch(type) {
+-  case GL_NONE:
+-    break;
+-  case GL_RENDERBUFFER_EXT:
+-    AttachRenderBuffer( 0, attachment );
+-    break;
+-  case GL_TEXTURE:
+-    AttachTexture( GL_TEXTURE_2D, 0, attachment );
+-    break;
+-  default:
+-    cerr << "FramebufferObject::unbind_attachment ERROR: Unknown attached resource type\n";
+-  }
+-  _GuardedUnbind();
+-}
+-
+-void
+-FramebufferObject::UnattachAll()
+-{
+-  int numAttachments = GetMaxColorAttachments();
+-  for(int i = 0; i < numAttachments; ++i) {
+-    Unattach( GL_COLOR_ATTACHMENT0_EXT + i );
+-  }
+-}
+-
+-GLint FramebufferObject::GetMaxColorAttachments()
+-{
+-  GLint maxAttach = 0;
+-  glGetIntegerv( GL_MAX_COLOR_ATTACHMENTS_EXT, &maxAttach );
+-  return maxAttach;
+-}
+-
+-GLuint FramebufferObject::_GenerateFboId()
+-{
+-  GLuint id = 0;
+-  glGenFramebuffersEXT(1, &id);
+-  return id;
+-}
+-
+-void FramebufferObject::_GuardedBind() 
+-{
+-  // Only binds if m_fboId is different than the currently bound FBO
+-  glGetIntegerv( GL_FRAMEBUFFER_BINDING_EXT, &m_savedFboId );
+-  if (m_fboId != (GLuint)m_savedFboId) {
+-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_fboId);
+-  }
+-}
+-
+-void FramebufferObject::_GuardedUnbind() 
+-{
+-  // Returns FBO binding to the previously enabled FBO
+-  if (m_fboId != (GLuint)m_savedFboId) {
+-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, (GLuint)m_savedFboId);
+-  }
+-}
+-
+-void
+-FramebufferObject::_FramebufferTextureND( GLenum attachment, GLenum texTarget,
+-                                         GLuint texId, int mipLevel,
+-                                         int zSlice )
+-{
+-  if (texTarget == GL_TEXTURE_1D) {
+-    glFramebufferTexture1DEXT( GL_FRAMEBUFFER_EXT, attachment,
+-                               GL_TEXTURE_1D, texId, mipLevel );
+-  }
+-  else if (texTarget == GL_TEXTURE_3D) {
+-    glFramebufferTexture3DEXT( GL_FRAMEBUFFER_EXT, attachment,
+-                               GL_TEXTURE_3D, texId, mipLevel, zSlice );
+-  }
+-  else {
+-    // Default is GL_TEXTURE_2D, GL_TEXTURE_RECTANGLE_ARB, or cube faces
+-    glFramebufferTexture2DEXT( GL_FRAMEBUFFER_EXT, attachment,
+-                               texTarget, texId, mipLevel );
+-  }
+-}
+-
+-#ifndef NDEBUG
+-bool FramebufferObject::IsValid( ostream& ostr )
+-{
+-  _GuardedBind();
+-
+-  bool isOK = false;
+-
+-  GLenum status;                                            
+-  status = glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT);
+-  switch(status) {                                          
+-  case GL_FRAMEBUFFER_COMPLETE_EXT: // Everything's OK
+-    isOK = true;
+-    break;
+-  case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT\n";
+-    isOK = false;
+-    break;
+-  case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT\n";
+-    isOK = false;
+-    break;
+-  case GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT\n";
+-    isOK = false;
+-    break;
+-  case GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT\n";
+-    isOK = false;
+-    break;
+-  case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT\n";
+-    isOK = false;
+-    break;
+-  case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT\n";
+-    isOK = false;
+-    break;
+-  case GL_FRAMEBUFFER_UNSUPPORTED_EXT:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "GL_FRAMEBUFFER_UNSUPPORTED_EXT\n";
+-    isOK = false;
+-    break;
+-  default:
+-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
+-      << "Unknown ERROR\n";
+-    isOK = false;
+-  }
+-
+-  _GuardedUnbind();
+-  return isOK;
+-}
+-#endif // NDEBUG
+-
+-/// Accessors
+-GLenum FramebufferObject::GetAttachedType( GLenum attachment )
+-{
+-  // Returns GL_RENDERBUFFER_EXT or GL_TEXTURE
+-  _GuardedBind();
+-  GLint type = 0;
+-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
+-                                           GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT, 
+-                                           &type);
+-  _GuardedUnbind();
+-  return GLenum(type);
+-}
+-
+-GLuint FramebufferObject::GetAttachedId( GLenum attachment )
+-{
+-  _GuardedBind();
+-  GLint id = 0;
+-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
+-                                           GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT,
+-                                           &id);
+-  _GuardedUnbind();
+-  return GLuint(id);
+-}
+-
+-GLint FramebufferObject::GetAttachedMipLevel( GLenum attachment )
+-{
+-  _GuardedBind();
+-  GLint level = 0;
+-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
+-                                           GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT, 
+-                                           &level);
+-  _GuardedUnbind();
+-  return level;
+-}
+-
+-GLint FramebufferObject::GetAttachedCubeFace( GLenum attachment )
+-{
+-  _GuardedBind();
+-  GLint level = 0;
+-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
+-                                           GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT,
+-                                           &level);
+-  _GuardedUnbind();
+-  return level;
+-}
+-
+-GLint FramebufferObject::GetAttachedZSlice( GLenum attachment )
+-{
+-  _GuardedBind();
+-  GLint slice = 0;
+-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
+-                                           GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT,
+-                                           &slice);
+-  _GuardedUnbind();
+-  return slice;
+-}
+-
+-
+-
+diff --git a/nvcommon/src/nvTime.cpp b/nvcommon/src/nvTime.cpp
+deleted file mode 100644
+index 9eca5bf..0000000
+--- a/nvcommon/src/nvTime.cpp
++++ /dev/null
+@@ -1,115 +0,0 @@
+-//
+-// nvTime.cpp - Timer and perf counter classes
+-//
+-//
+-// Author: Samuel Gateau
+-// Email: sdkfeedback@nvidia.com
+-//
+-// Copyright (c) NVIDIA Corporation. All rights reserved.
+-////////////////////////////////////////////////////////////////////////////////
+-#include "nvTime.h"
+-
+-#ifdef WIN32
+-#include <windows.h>
+-#else
+-#include <sys/time.h>
+-#endif
+-
+-using namespace nv;
+-
+-/**
+- * The inverse frequency of the CPU on which the thread is running and used
+- * to measure the elapsed time.
+- */
+-double Timer::msInvFrequency = 0.0;
+-	
+-/**
+- * initialize the inv frequency (done once on the first timer created.
+- */
+-void Timer::initializeClass()
+-{
+-	if (!msInvFrequency )
+-	{
+-#ifdef WIN32
+-		LARGE_INTEGER lFreq;
+-		QueryPerformanceFrequency(&lFreq);
+-		msInvFrequency = 1.0 / double(lFreq.QuadPart);
+-#else
+-                msInvFrequency = 1.0;
+-#endif
+-	}
+-}
+-
+-/**
+- * Default constructor.
+- */
+-Timer::Timer() :
+-	mStartTime(-1),
+-	mLastQueryTime(-1)
+-{
+-	initializeClass();
+-}
+-
+-/**
+- * Destructor.
+- */
+-Timer::~Timer()
+-{
+-}
+-
+-/**
+- * Start the timer (Reset total elapsed time).
+- * Stop the timer.
+- */
+-void Timer::start()
+-{
+-	mStartTime = mLastQueryTime = queryAppTime();
+-}
+-
+-void Timer::stop()
+-{
+-	mStartTime = mLastQueryTime = 0.0;
+-}
+-
+-/** 
+- * Get the total timer elapsed time since start [s].
+- */
+-double Timer::getTotalElapsedTime() const
+-{
+-	return queryAppTime() - mStartTime;
+-}
+-
+-/** 
+- * Get the timer elapsed time since last 
+- * call to the same method or start [s].
+- */
+-double Timer::getElapsedTime() const
+-{
+-	if (isStarted())
+-	{
+-		double lTime = mLastQueryTime;
+-		mLastQueryTime = queryAppTime();
+-		return mLastQueryTime - lTime;
+-	}
+-	return 0.0;
+-}
+-
+-/**
+- * Query the current Application time.
+- * It's a date expressed in s.
+- */
+-double Timer::queryAppTime()
+-{
+-#ifdef WIN32
+-		LARGE_INTEGER lCount;
+-		QueryPerformanceCounter(&lCount);
+-		return (lCount.QuadPart * msInvFrequency);
+-#else
+-                double seconds;
+-                timeval time;
+-                gettimeofday(&time,0);
+-                seconds = time.tv_sec + (time.tv_usec/1e6f);
+-                return seconds;
+-#endif
+-}
+-
+diff --git a/nvcommon/src/renderVertexArray.cpp b/nvcommon/src/renderVertexArray.cpp
+deleted file mode 100644
+index 02c8e31..0000000
+--- a/nvcommon/src/renderVertexArray.cpp
++++ /dev/null
+@@ -1,106 +0,0 @@
+-/*
+-  Render to vertex array
+-
+-  This class implements "render to vertex array" functionality using vertex and pixel buffer objects (VBO and PBO).
+-
+-  Operation:
+-  1. A buffer object is created
+-  2. The buffer object is bound to the pixel pack (destination) buffer
+-  3. glReadPixels is used to read from the frame buffer to the buffer object
+-  4. The buffer object is bound to the vertex array
+-  5. Vertex array pointers are set
+-  
+-  Usage:
+-  1. Create a floating point pbuffer
+-  2. Create a RenderVertexArray object for each vertex attribute you want to render to
+-  3. Render vertex data to pbuffer using a fragment program (could use multiple draw buffers here)
+-  4. Call Read() method to read data from pbuffer to vertex array
+-  5. Call SetPointer() method to set vertex array pointers
+-  6. Set any other other static vertex array attribute pointers
+-  6. Render geometry as usual using glDrawArrays or glDrawElements
+-
+-  sgreen 2/2004
+-
+-  Copyright (c) NVIDIA Corporation. All rights reserved.
+-*/
+-
+-#include <stdio.h>
+-#include <GL/glew.h>
+-
+-#include "renderVertexArray.h"
+-
+-RenderVertexArray::RenderVertexArray(int nverts, GLint size, GLenum type) :
+-    m_nverts(nverts), m_size(size), m_usage(GL_STREAM_COPY), m_type(type)
+-{
+-    switch(m_type) {
+-        case GL_HALF_FLOAT_NV:
+-            m_bytes_per_component = 2; break;
+-        case GL_FLOAT:
+-            m_bytes_per_component = sizeof(float); break;
+-        default:
+-            fprintf(stderr, "Error: unsupported RenderVertexArray type\n");
+-            return;
+-    }
+-
+-    // create the buffer object
+-    glGenBuffersARB(1, &m_buffer);
+-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, m_buffer);
+-    glBufferDataARB(GL_PIXEL_PACK_BUFFER_EXT, m_nverts*m_size*m_bytes_per_component, 0, m_usage); // undefined data
+-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, 0);
+-
+-    // set equivalent image format
+-    switch(m_size) {
+-        case 1:
+-            m_format = GL_LUMINANCE; break;
+-        case 3:
+-            m_format = GL_RGB; break;
+-        case 4:
+-            m_format = GL_RGBA; break;
+-        default:
+-            fprintf(stderr, "Error: unsupported RenderVertexArray size\n");
+-            return;
+-    }
+-}
+-
+-RenderVertexArray::~RenderVertexArray()
+-{
+-    glDeleteBuffersARB(1, &m_buffer);
+-}
+-
+-void
+-RenderVertexArray::LoadData(void *data)
+-{
+-    // load data to buffer object
+-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, m_buffer);
+-    glBufferDataARB(GL_PIXEL_PACK_BUFFER_EXT, m_nverts*m_size*m_bytes_per_component, data, m_usage);
+-
+-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, 0);
+-}
+-
+-void
+-RenderVertexArray::Read(GLenum buffer, int w, int h, int offset)
+-{
+-    // bind buffer object to pixel pack buffer
+-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, m_buffer);
+-    // read from frame buffer to buffer object
+-    glReadBuffer(buffer);
+-    glReadPixels(0, 0, w, h, m_format, m_type, (GLvoid*)offset);
+-
+-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, 0);
+-}
+-
+-void
+-RenderVertexArray::SetPointer(GLuint index, GLsizei stride, GLuint offset)
+-{
+-#ifdef _WIN32
+-#  pragma warning( disable : 4312)
+-#endif
+-    // bind buffer object to vertex array 
+-    glBindBufferARB(GL_ARRAY_BUFFER, m_buffer);
+-    glVertexAttribPointerARB(index, m_size, m_type, GL_FALSE, stride, (GLvoid *) offset);
+-#ifdef _WIN32
+-#  pragma warning( default : 4312)
+-#endif
+-
+-    glBindBufferARB(GL_ARRAY_BUFFER, 0);
+-}
+diff --git a/nvcommon/src/renderbuffer.cpp b/nvcommon/src/renderbuffer.cpp
+deleted file mode 100644
+index 7277e81..0000000
+--- a/nvcommon/src/renderbuffer.cpp
++++ /dev/null
+@@ -1,113 +0,0 @@
+-/*
+-  Copyright (c) 2005, 
+-	  Aaron Lefohn	(lefohn@cs.ucdavis.edu)
+-	  Adam Moerschell (atmoerschell@ucdavis.edu)
+-  All rights reserved.
+-
+-  This software is licensed under the BSD open-source license. See
+-  http://www.opensource.org/licenses/bsd-license.php for more detail.
+-
+-  *************************************************************
+-  Redistribution and use in source and binary forms, with or 
+-  without modification, are permitted provided that the following 
+-  conditions are met:
+-
+-  Redistributions of source code must retain the above copyright notice, 
+-  this list of conditions and the following disclaimer. 
+-
+-  Redistributions in binary form must reproduce the above copyright notice, 
+-  this list of conditions and the following disclaimer in the documentation 
+-  and/or other materials provided with the distribution. 
+-
+-  Neither the name of the University of Californa, Davis nor the names of 
+-  the contributors may be used to endorse or promote products derived 
+-  from this software without specific prior written permission.
+-
+-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
+-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
+-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
+-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
+-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
+-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
+-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
+-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
+-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
+-  OF SUCH DAMAGE.
+-*/
+-
+-#include "renderbuffer.h"
+-#include <iostream>
+-using namespace std;
+-
+-Renderbuffer::Renderbuffer()
+-  : m_bufId(_CreateBufferId())
+-{}
+-
+-Renderbuffer::Renderbuffer(GLenum internalFormat, int width, int height)
+-  : m_bufId(_CreateBufferId())
+-{
+-  Set(internalFormat, width, height);
+-}
+-
+-Renderbuffer::~Renderbuffer()
+-{
+-  glDeleteRenderbuffersEXT(1, &m_bufId);
+-}
+-
+-void Renderbuffer::Bind() 
+-{
+-  glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, m_bufId);
+-}
+-
+-void Renderbuffer::Unbind() 
+-{
+-  glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, 0);
+-}
+-
+-void Renderbuffer::Set(GLenum internalFormat, int width, int height)
+-{
+-  int maxSize = Renderbuffer::GetMaxSize();
+-  if (width > maxSize || height > maxSize ) {
+-    cerr << "Renderbuffer::Renderbuffer() ERROR:\n\t"
+-         << "Size too big (" << width << ", " << height << ")\n";
+-    return;
+-  }
+-
+-  // Guarded bind
+-  GLint savedId = 0;
+-  glGetIntegerv( GL_RENDERBUFFER_BINDING_EXT, &savedId );
+-  if (savedId != (GLint)m_bufId) {
+-    Bind();
+-  }
+-
+-  // Allocate memory for renderBuffer
+-  glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, internalFormat, width, height );
+-
+-  // Guarded unbind
+-  if (savedId != (GLint)m_bufId) {
+-    glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, savedId);
+-  }
+-}
+-
+-GLuint Renderbuffer::GetId() const 
+-{
+-  return m_bufId;
+-}
+-
+-GLint Renderbuffer::GetMaxSize()
+-{
+-  GLint maxAttach = 0;
+-  glGetIntegerv( GL_MAX_RENDERBUFFER_SIZE_EXT, &maxAttach );
+-  return maxAttach;
+-}
+-
+-GLuint Renderbuffer::_CreateBufferId() 
+-{
+-  GLuint id = 0;
+-  glGenRenderbuffersEXT(1, &id);
+-  return id;
+-}
+-
+diff --git a/progressivePhotonMap/CMakeLists.txt b/progressivePhotonMap/CMakeLists.txt
+index d8e9d87..bf1a734 100644
+--- a/progressivePhotonMap/CMakeLists.txt
++++ b/progressivePhotonMap/CMakeLists.txt
+@@ -30,8 +30,6 @@ if(GLUT_FOUND AND OPENGL_FOUND)
+     ppm.cpp
+     ppm.h
+     select.h
+-    PpmObjLoader.h
+-    PpmObjLoader.cpp
+     ppm_rtpass.cu
+     ppm_ppass.cu
+     ppm_gather.cu
+diff --git a/progressivePhotonMap/HitRecordInitialize.cu b/progressivePhotonMap/HitRecordInitialize.cu
+index 2a3a036..8b92c66 100644
+--- a/progressivePhotonMap/HitRecordInitialize.cu
++++ b/progressivePhotonMap/HitRecordInitialize.cu
+@@ -5,7 +5,7 @@
+ 
+ using namespace optix;
+ 
+-rtBuffer<HitRecord, 2>           rtpass_output_buffer;
++rtBuffer<HitRecord, 3>           rtpass_output_buffer;
+ rtDeclareVariable(float,         rtpass_default_radius2, , );
+ 
+ rtDeclareVariable(uint2, launchIndex, rtLaunchIndex, );
+@@ -22,5 +22,6 @@ RT_PROGRAM void kernel()
+     rec.flux = make_float3(0.0f, 0.0f, 0.0f);
+     rec.accum_atten = 0.0f;
+     rec.volumetricRadiance = make_float3(0.0f);
+-    rtpass_output_buffer[launchIndex] = rec;
++	for (int i = 0; i < TOTAL_FRAME; ++i)
++		rtpass_output_buffer[make_uint3(launchIndex, i)] = rec;
+ }
+\ No newline at end of file
+diff --git a/progressivePhotonMap/ParticipatingMedium.cu b/progressivePhotonMap/ParticipatingMedium.cu
+index 158c3cf..07872ab 100644
+--- a/progressivePhotonMap/ParticipatingMedium.cu
++++ b/progressivePhotonMap/ParticipatingMedium.cu
+@@ -66,6 +66,7 @@ RT_PROGRAM void closestHitRadiance()
+         hitPrd.volumetricRadiance *= transmittance;
+         hitPrd.volumetricRadiance += attenSaved*volRadiancePrd.radiance;
+         hitPrd.attenuation *= transmittance;
++		hitPrd.frame = volRadiancePrd.frame;
+ 
+         //rtPrintf("%f\n", volRadiancePrd.radiance.x);
+         //if (volRadiancePrd.numHits>0) rtPrintf("%f %f %f %d \n", distance , transmittance, hitPrd.volumetricRadiance.x, volRadiancePrd.numHits);
+diff --git a/progressivePhotonMap/PpmObjLoader.cpp b/progressivePhotonMap/PpmObjLoader.cpp
+deleted file mode 100644
+index 605aa58..0000000
+--- a/progressivePhotonMap/PpmObjLoader.cpp
++++ /dev/null
+@@ -1,376 +0,0 @@
+-
+-/*
+- * Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+- *
+- * NVIDIA Corporation and its licensors retain all intellectual property and proprietary
+- * rights in and to this software, related documentation and any modifications thereto.
+- * Any use, reproduction, disclosure or distribution of this software and related
+- * documentation without an express license agreement from NVIDIA Corporation is strictly
+- * prohibited.
+- *
+- * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
+- * AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
+- * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+- * PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
+- * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
+- * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
+- * BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
+- * INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
+- * SUCH DAMAGES
+- */
+-
+-#include "PpmObjLoader.h"
+-#include "ppm.h"
+-
+-#include <optixu/optixu_math_namespace.h>
+-#include <ImageLoader.h>
+-
+-#include <cassert>
+-#include <fstream>
+-#include <iostream>
+-#include <sstream>
+-#include <vector>
+-#include <string.h>
+-
+-using namespace optix;
+-
+-
+-//------------------------------------------------------------------------------
+-// 
+-//  Helper functions
+-//
+-//------------------------------------------------------------------------------
+-
+-namespace 
+-{
+-  std::string getExtension( const std::string& filename )
+-  {
+-    // Get the filename extension
+-    std::string::size_type extension_index = filename.find_last_of( "." );
+-    return extension_index != std::string::npos ?
+-           filename.substr( extension_index+1 ) :
+-           std::string();
+-  }
+-}
+-
+-
+-//------------------------------------------------------------------------------
+-// 
+-//  PpmObjLoader class definition 
+-//
+-//------------------------------------------------------------------------------
+-
+-PpmObjLoader::PpmObjLoader( const std::string& filename,
+-                            Context context,
+-                            GeometryGroup geometrygroup,
+-                            const AccelDescriptor& accel_desc,
+-                            Material material )
+-: m_filename( filename ),
+-  m_context( context ),
+-  m_geometrygroup( geometrygroup ),
+-  m_vbuffer( 0 ),
+-  m_nbuffer( 0 ),
+-  m_tbuffer( 0 ),
+-  m_material( material ),
+-  m_have_default_material( true ),
+-  m_aabb(),
+-  m_accel_desc( accel_desc )
+-{
+-  m_pathname = m_filename.substr(0,m_filename.find_last_of("/\\")+1);
+-}
+-
+-
+-PpmObjLoader::PpmObjLoader( const std::string& filename,
+-                            Context context,
+-                            GeometryGroup geometrygroup,
+-                            const AccelDescriptor& accel_desc )
+-: m_filename( filename ),
+-  m_context( context ),
+-  m_geometrygroup( geometrygroup ),
+-  m_vbuffer( 0 ),
+-  m_nbuffer( 0 ),
+-  m_tbuffer( 0 ),
+-  m_material( 0 ),
+-  m_have_default_material( false ),
+-  m_aabb(),
+-  m_accel_desc( accel_desc )
+-{
+-  m_pathname = m_filename.substr(0,m_filename.find_last_of("/\\")+1);
+-}
+-
+-
+-void PpmObjLoader::load() 
+-{
+-  // parse the OBJ file
+-  GLMmodel* model = glmReadOBJ( m_filename.c_str() );
+-  if ( !model ) {
+-    std::stringstream ss;
+-    ss << "PpmObjLoader::loadImpl - glmReadOBJ( '" << m_filename << "' ) failed" << std::endl;
+-    throw Exception( ss.str() );
+-  }
+-
+-  // Create a single material to be shared by all GeometryInstances
+-  createMaterial(); 
+-  
+-  // Create vertex data buffers to be shared by all Geometries
+-  loadVertexData( model );
+-
+-  // Load triangle_mesh programs
+-  std::string path = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_triangle_mesh.cu.ptx";
+-  Program mesh_intersect = m_context->createProgramFromPTXFile( path, "mesh_intersect" );
+-  Program mesh_bbox      = m_context->createProgramFromPTXFile( path, "mesh_bounds" );
+-
+-  // Create a GeometryInstance and Geometry for each obj group
+-  createMaterialParams( model );
+-  createGeometryInstances( model, mesh_intersect, mesh_bbox );
+-
+-  glmDelete( model );
+-}
+-
+-
+-void PpmObjLoader::createMaterial() 
+-{
+-  if ( m_have_default_material ) return;
+-
+-  std::string path1 = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_ppm_rtpass.cu.ptx";
+-  std::string path2 = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_ppm_ppass.cu.ptx";
+-  std::string path3 = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_ppm_gather.cu.ptx";
+-
+-  Program closest_hit1 = m_context->createProgramFromPTXFile( path1, "rtpass_closest_hit" );
+-  Program closest_hit2 = m_context->createProgramFromPTXFile( path2, "ppass_closest_hit" );
+-  Program any_hit      = m_context->createProgramFromPTXFile( path3, "gather_any_hit" );
+-  m_material           = m_context->createMaterial();
+-  m_material->setClosestHitProgram( rtpass_ray_type, closest_hit1 );
+-  m_material->setClosestHitProgram( ppass_and_gather_ray_type, closest_hit2 );
+-  m_material->setAnyHitProgram( shadow_ray_type, any_hit );
+-
+-  m_material->setClosestHitProgram(radiance_in_participating_medium, closest_hit1);
+-  m_material->setClosestHitProgram(photon_in_participating_medium, closest_hit2);
+-}
+-
+-
+-void PpmObjLoader::loadVertexData( GLMmodel* model ) 
+-{
+-  unsigned int num_vertices  = model->numvertices;
+-  unsigned int num_texcoords = model->numtexcoords;
+-  unsigned int num_normals   = model->numnormals;
+-
+-  // Create vertex buffer
+-  m_vbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_FLOAT3, num_vertices );
+-  float3* vbuffer_data = static_cast<float3*>( m_vbuffer->map() );
+-
+-  // Create normal buffer
+-  m_nbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_FLOAT3, num_normals );
+-  float3* nbuffer_data = static_cast<float3*>( m_nbuffer->map() );
+-
+-  // Create texcoord buffer
+-  m_tbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_FLOAT2, num_texcoords );
+-  float2* tbuffer_data = static_cast<float2*>( m_tbuffer->map() );
+-
+-  // Copy vertex, normal and texcoord arrays into buffers 
+-  memcpy( static_cast<void*>( vbuffer_data ),
+-          static_cast<void*>( &(model->vertices[3]) ),
+-          sizeof( float )*num_vertices*3 ); 
+-  memcpy( static_cast<void*>( nbuffer_data ),
+-          static_cast<void*>( &(model->normals[3]) ),
+-          sizeof( float )*num_normals*3 ); 
+-  memcpy( static_cast<void*>( tbuffer_data ),
+-          static_cast<void*>( &(model->texcoords[2]) ),
+-          sizeof( float )*num_texcoords*2 ); 
+-
+-  m_vbuffer->unmap();
+-  m_nbuffer->unmap();
+-  m_tbuffer->unmap();
+-
+-  // Calculate bbox of model
+-  for ( unsigned int i = 1u; i <= num_vertices; ++i )
+-  {
+-    unsigned int index = i*3u;
+-    float3 t;
+-    t.x = model->vertices[ index + 0u ];
+-    t.y = model->vertices[ index + 1u ];
+-    t.z = model->vertices[ index + 2u ];
+-
+-    m_aabb.include( t );
+-  }
+-}
+-
+-
+-void PpmObjLoader::createGeometryInstances( GLMmodel* model,
+-                                           Program mesh_intersect,
+-                                           Program mesh_bbox)
+-{
+-  std::vector<GeometryInstance> instances;
+-
+-  // Loop over all groups -- grab the triangles and material props from each group
+-  unsigned int triangle_count = 0u;
+-  unsigned int group_count = 0u;
+-  for ( GLMgroup* obj_group = model->groups;
+-        obj_group != 0;
+-        obj_group = obj_group->next, group_count++ ) {
+-
+-    unsigned int num_triangles = obj_group->numtriangles;
+-    if ( num_triangles == 0 ) continue; 
+-
+-    // Create vertex index buffers
+-    Buffer vindex_buffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_INT3, num_triangles );
+-    int3* vindex_buffer_data = static_cast<int3*>( vindex_buffer->map() );
+-
+-    Buffer tindex_buffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_INT3, num_triangles );
+-    int3* tindex_buffer_data = static_cast<int3*>( tindex_buffer->map() );
+-
+-    Buffer nindex_buffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_INT3, num_triangles );
+-    int3* nindex_buffer_data = static_cast<int3*>( nindex_buffer->map() );
+-
+-    // TODO: Create empty buffer for mat indices, have obj_material check for zero length
+-    Buffer mbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_UNSIGNED_INT, num_triangles );
+-    uint* mbuffer_data = static_cast<uint*>( mbuffer->map() );
+-
+-    // Create the mesh object
+-    Geometry mesh = m_context->createGeometry();
+-    mesh->setPrimitiveCount( num_triangles );
+-    mesh->setIntersectionProgram( mesh_intersect);
+-    mesh->setBoundingBoxProgram( mesh_bbox );
+-    mesh[ "vertex_buffer" ]->setBuffer( m_vbuffer );
+-    mesh[ "normal_buffer" ]->setBuffer( m_nbuffer );
+-    mesh[ "texcoord_buffer" ]->setBuffer( m_tbuffer );
+-    mesh[ "vindex_buffer" ]->setBuffer( vindex_buffer );
+-    mesh[ "tindex_buffer" ]->setBuffer( tindex_buffer );
+-    mesh[ "nindex_buffer" ]->setBuffer( nindex_buffer );
+-    mesh[ "material_buffer" ]->setBuffer( mbuffer );
+-
+-    // Create the geom instance to hold mesh and material params
+-    GeometryInstance instance = m_context->createGeometryInstance( mesh, &m_material, &m_material+1 );
+-    loadMaterialParams( instance, obj_group->material );
+-    instances.push_back( instance );
+-
+-    for ( unsigned int i = 0; i < obj_group->numtriangles; ++i, ++triangle_count ) {
+-
+-      unsigned int tindex = obj_group->triangles[i];
+-      int3 vindices;
+-      vindices.x = model->triangles[ tindex ].vindices[0] - 1; 
+-      vindices.y = model->triangles[ tindex ].vindices[1] - 1; 
+-      vindices.z = model->triangles[ tindex ].vindices[2] - 1; 
+-      
+-      int3 nindices;
+-      nindices.x = model->triangles[ tindex ].nindices[0] - 1; 
+-      nindices.y = model->triangles[ tindex ].nindices[1] - 1; 
+-      nindices.z = model->triangles[ tindex ].nindices[2] - 1; 
+-
+-      int3 tindices;
+-      tindices.x = model->triangles[ tindex ].tindices[0] - 1; 
+-      tindices.y = model->triangles[ tindex ].tindices[1] - 1; 
+-      tindices.z = model->triangles[ tindex ].tindices[2] - 1; 
+-
+-      vindex_buffer_data[ i ] = vindices;
+-      nindex_buffer_data[ i ] = nindices;
+-      tindex_buffer_data[ i ] = tindices;
+-      mbuffer_data[ i ] = 0; // See above TODO
+-    }
+-
+-    vindex_buffer->unmap();
+-    tindex_buffer->unmap();
+-    nindex_buffer->unmap();
+-    mbuffer->unmap();
+-  }
+-
+-  assert( triangle_count == model->numtriangles );
+-  
+-  // Set up group 
+-  m_geometrygroup->setChildCount( static_cast<unsigned int>(instances.size()) );
+-  Acceleration acceleration = m_context->createAcceleration(m_accel_desc.builder.c_str(), m_accel_desc.traverser.c_str());
+-  acceleration->setProperty( "vertex_buffer_name", "vertex_buffer" );
+-  acceleration->setProperty( "index_buffer_name", "vindex_buffer" );
+-  m_geometrygroup->setAcceleration( acceleration );
+-  acceleration->markDirty();
+-
+-
+-  for ( unsigned int i = 0; i < instances.size(); ++i )
+-    m_geometrygroup->setChild( i, instances[i] );
+-}
+-
+-
+-bool PpmObjLoader::isMyFile( const std::string& filename )
+-{
+-  return getExtension( filename ) == "obj";
+-}
+-
+-
+-void PpmObjLoader::loadMaterialParams( GeometryInstance gi, unsigned int index )
+-{
+-  // We dont need any material params if we have default material
+-  if ( m_have_default_material ) {
+-    return;
+-  }
+-
+-  // If no materials were given in model use reasonable defaults
+-  if ( m_material_params.empty() ) {
+-    std::cerr << " PpmPpmObjLoader not setup to use material override yet! " << std::endl;
+-    gi[ "emissive" ]->setFloat( 0.0f, 0.0f, 0.0f );
+-    gi[ "phong_exp" ]->setFloat( 32.0f );
+-    gi[ "reflectivity" ]->setFloat( 0.3f, 0.3f, 0.3f );
+-    gi[ "illum" ]->setInt( 2 );
+-
+-    gi["ambient_map"]->setTextureSampler( loadTexture( m_context, "", make_float3( 0.2f, 0.2f, 0.2f ) ) );
+-    gi["diffuse_map"]->setTextureSampler( loadTexture( m_context, "", make_float3( 0.8f, 0.8f, 0.8f ) ) );
+-    gi["specular_map"]->setTextureSampler( loadTexture( m_context, "", make_float3( 0.0f, 0.0f, 0.0f ) ) );
+-    return;
+-  }
+-
+-  // Load params from this material into the GI 
+-  if ( index < m_material_params.size() ) {
+-    MatParams& mp = m_material_params[index];
+-    gi[ "emitted" ]->setFloat( 0.0f, 0.0f, 0.0f );
+-    gi[ "Kd"  ]->setFloat( mp.Kd );
+-    gi[ "Ks"  ]->setFloat( mp.Ks );
+-    gi[ "grid_color"  ]->setFloat( 0.5f, 0.5f, 0.5f );
+-    gi[ "use_grid"  ]->setUint( mp.name == "01_-_Default" ? 1u : 0 );
+-    return;
+-  }
+-
+-  // Should never reach this point
+-  std::cerr << "WARNING -- PpmObjLoader::loadMaterialParams given index out of range: "
+-            << index << std::endl;
+-}
+-
+-
+-void PpmObjLoader::createMaterialParams( GLMmodel* model )
+-{
+-  m_material_params.resize( model->nummaterials );
+-  for ( unsigned int i = 0; i < model->nummaterials; ++i ) {
+-
+-    GLMmaterial& mat = model->materials[i];
+-    MatParams& params = m_material_params[i];
+-
+-    /*
+-    params.emissive     = make_float3( mat.emmissive[0], mat.emmissive[1], mat.emmissive[2] );
+-    params.reflectivity = make_float3( mat.specular[0], mat.specular[1], mat.specular[2] );
+-    params.phong_exp    = mat.shininess; 
+-    params.illum        = ( (mat.shader > 3) ? 2 : mat.shader ); // use 2 as default if out-of-range
+-    */
+-
+-    float3 Kd = make_float3( mat.diffuse[0],
+-                             mat.diffuse[1],
+-                             mat.diffuse[2] );
+-    //float3 Ka = make_float3( mat.ambient[0],
+-    //                         mat.ambient[1],
+-    //                         mat.ambient[2] );
+-    float3 Ks = make_float3( mat.specular[0],
+-                             mat.specular[1],
+-                             mat.specular[2] );
+-    params.Kd = Kd;
+-    params.Ks = Ks;
+-    params.name = mat.name;
+-
+-    /*
+-    // load textures relatively to OBJ main file
+-    std::string ambient_map  = strlen(mat.ambient_map)  ? m_pathname + mat.ambient_map  : "";
+-    std::string diffuse_map  = strlen(mat.diffuse_map)  ? m_pathname + mat.diffuse_map  : "";
+-    std::string specular_map = strlen(mat.specular_map) ? m_pathname + mat.specular_map : "";
+-
+-    params.ambient_map = loadTexture( m_context, ambient_map, Ka );
+-    params.diffuse_map = loadTexture( m_context, diffuse_map, Kd );
+-    params.specular_map = loadTexture( m_context, specular_map, Ks );
+-    */
+-  }
+-}
+diff --git a/progressivePhotonMap/PpmObjLoader.h b/progressivePhotonMap/PpmObjLoader.h
+deleted file mode 100644
+index 50f95eb..0000000
+--- a/progressivePhotonMap/PpmObjLoader.h
++++ /dev/null
+@@ -1,94 +0,0 @@
+-
+-/*
+- * Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+- *
+- * NVIDIA Corporation and its licensors retain all intellectual property and proprietary
+- * rights in and to this software, related documentation and any modifications thereto.
+- * Any use, reproduction, disclosure or distribution of this software and related
+- * documentation without an express license agreement from NVIDIA Corporation is strictly
+- * prohibited.
+- *
+- * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
+- * AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
+- * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+- * PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
+- * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
+- * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
+- * BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
+- * INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
+- * SUCH DAMAGES
+- */
+-
+-#pragma once
+-
+-#include "AccelDescriptor.h"
+-#include <sutil.h>
+-#include <optixu/optixpp_namespace.h>
+-#include <optixu/optixu_aabb_namespace.h>
+-#include <glm.h>
+-#include <string>
+-
+-
+-//-----------------------------------------------------------------------------
+-// 
+-//  PpmObjLoader class declaration 
+-//
+-//-----------------------------------------------------------------------------
+-
+-class PpmObjLoader
+-{
+-public:
+-  PpmObjLoader( const std::string& filename,          // Model filename
+-                optix::Context context,               // Context for RT object creation
+-                optix::GeometryGroup geometrygroup,   // Empty geom group to hold model
+-                const AccelDescriptor& accel_desc);   // Acceleration structure preferences
+-
+-  PpmObjLoader( const std::string& filename,
+-                optix::Context context,
+-                optix::GeometryGroup geometrygroup,
+-                const AccelDescriptor& accel_desc,
+-                optix::Material material );           // Material override
+-
+-  void load();
+-
+-  optix::Aabb getSceneBBox()const { return m_aabb; }
+-
+-  static bool isMyFile( const std::string& filename );
+-
+-private:
+-
+-  struct MatParams
+-  {
+-    std::string name;
+-    optix::float3 emissive;
+-    optix::float3 reflectivity;
+-    float  phong_exp;
+-    int    illum;
+-    optix::float3 Kd;
+-    optix::float3 Ks;
+-    optix::TextureSampler ambient_map;
+-    optix::TextureSampler diffuse_map;
+-    optix::TextureSampler specular_map;
+-  };
+-
+-  void createMaterial();
+-  void createGeometryInstances( GLMmodel* model,
+-                                optix::Program mesh_intersect,
+-                                optix::Program mesh_bbox );
+-  void loadVertexData( GLMmodel* model );
+-  void createMaterialParams( GLMmodel* model );
+-  void loadMaterialParams( optix::GeometryInstance gi, unsigned int index );
+-
+-  std::string            m_pathname;
+-  std::string            m_filename;
+-  optix::Context         m_context;
+-  optix::GeometryGroup   m_geometrygroup;
+-  optix::Buffer          m_vbuffer;
+-  optix::Buffer          m_nbuffer;
+-  optix::Buffer          m_tbuffer;
+-  optix::Material        m_material;
+-  bool                   m_have_default_material;
+-  optix::Aabb            m_aabb;
+-  std::vector<MatParams> m_material_params;
+-  AccelDescriptor        m_accel_desc;
+-};
+diff --git a/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu b/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu
+index 5bed80e..6587d4a 100644
+--- a/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu
++++ b/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu
+@@ -19,12 +19,16 @@ rtDeclareVariable(float, volumetricRadius, ,);
+ RT_PROGRAM void anyHitRadiance()
+ {
+     float t = dot(photonPosition-ray.origin, ray.direction)/100;
+-
++	float3 dist3 = photonPosition - make_float3(343.0f, 548.6f, 227.0f);
++	float dist = dist3.x * dist3.x + dist3.y * dist3.y + dist3.z * dist3.z;
++	float totalDist = 1000000;
++	unsigned int frame = floor(dist * TOTAL_FRAME / totalDist);
+     if(t < ray.tmax && t > ray.tmin)
+     {
+         volRadiancePrd.radiance += (1/(M_PIf*volumetricRadius*volumetricRadius)) * photonPower * exp(-volRadiancePrd.sigma_t*t) * (1.f/(4.f*M_PIf));
+         //rtPrintf("%f %f %f %f\n", t, volumetricRadius, photonPower.x, (1/(M_PIf*volumetricRadius*volumetricRadius)) * photonPower.x * exp(-volRadiancePrd.sigma_t*t) * (1.f/(4.f*M_PIf)));
+         volRadiancePrd.numHits++;
++		volRadiancePrd.frame = frame;
+     }
+     rtIgnoreIntersection();
+ }
+\ No newline at end of file
+diff --git a/progressivePhotonMap/glass.cu b/progressivePhotonMap/glass.cu
+index bc111fb..b835e21 100644
+--- a/progressivePhotonMap/glass.cu
++++ b/progressivePhotonMap/glass.cu
+@@ -66,7 +66,7 @@ RT_PROGRAM void gather_any_hit_glass()
+ }
+ 
+ rtDeclareVariable(HitPRD, hit_prd, rtPayload, );
+-rtBuffer<HitRecord, 2>           rtpass_output_buffer;
++rtBuffer<HitRecord, 3>           rtpass_output_buffer;
+ 
+ rtTextureSampler<float4, 2>      diffuse_map;
+ rtDeclareVariable(float, diffuse_map_scale, , );
+@@ -107,7 +107,7 @@ RT_PROGRAM void rtpass_closest_hit_glass()
+ 		float v     = 0.5f * ( 1.0f + sin(phi) );
+ 		float3 result = make_float3(tex2D(envmap, u, v));
+ 
+-		HitRecord rec = rtpass_output_buffer[launch_index];
++		HitRecord rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
+ 		// We hit a diffuse surface; record hit and return
+ 		rec.position = hit_point;
+ 		rec.normal = ffnormal;
+@@ -119,7 +119,7 @@ RT_PROGRAM void rtpass_closest_hit_glass()
+ 		rec.attenuated_Kd += result*2;
+ 		//rtPrintf("%f %f %f\n", result.x, result.y, result.z);
+ 		//rtPrintf("%f %f %f\n", rec.attenuated_Kd.x, rec.attenuated_Kd.y, rec.attenuated_Kd.z);
+-		rtpass_output_buffer[launch_index] = rec;
++		rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)] = rec;
+ 	}
+ 	hit_prd.lastTHit = tHitStack;
+ }
+diff --git a/progressivePhotonMap/ppm.cpp b/progressivePhotonMap/ppm.cpp
+index 3a81001..b547973 100644
+--- a/progressivePhotonMap/ppm.cpp
++++ b/progressivePhotonMap/ppm.cpp
+@@ -37,7 +37,6 @@
+ #include <limits>
+ #include "ppm.h"
+ #include "select.h"
+-#include "PpmObjLoader.h"
+ #include "random.h"
+ #include "model.h"
+ #include <fstream>
+@@ -183,6 +182,7 @@ private:
+ 	Material      m_glass_material;
+ 
+ 	Buffer        m_display_buffer;
++	std::vector<Buffer> m_display_buffer_frames;
+ 	Buffer        m_photons;
+ 	Buffer        m_photon_map;
+ 	Buffer        m_debug_buffer;
+@@ -295,6 +295,7 @@ void ProgressivePhotonScene::initScene(InitialCameraData& camera_data)
+ 	m_display_buffer = createOutputBuffer(RT_FORMAT_FLOAT4, WIDTH, HEIGHT);
+ 	m_context["output_buffer"]->set(m_display_buffer);
+ 
++
+ 	// Debug output buffer
+ 	m_debug_buffer = m_context->createBuffer(RT_BUFFER_OUTPUT);
+ 	m_debug_buffer->setFormat(RT_FORMAT_FLOAT4);
+@@ -305,7 +306,7 @@ void ProgressivePhotonScene::initScene(InitialCameraData& camera_data)
+ 	Buffer output_buffer = m_context->createBuffer(RT_BUFFER_OUTPUT);
+ 	output_buffer->setFormat(RT_FORMAT_USER);
+ 	output_buffer->setElementSize(sizeof(HitRecord));
+-	output_buffer->setSize(WIDTH, HEIGHT);
++	output_buffer->setSize(WIDTH, HEIGHT, TOTAL_FRAME);
+ 	m_context["rtpass_output_buffer"]->set(output_buffer);
+ 
+ 	// RTPass pixel sample buffers
+@@ -671,8 +672,8 @@ void ProgressivePhotonScene::createPhotonMap()
+ void ProgressivePhotonScene::trace(const RayGenCameraData& camera_data)
+ {
+ 	Buffer output_buffer = m_context["rtpass_output_buffer"]->getBuffer();
+-	RTsize buffer_width, buffer_height;
+-	output_buffer->getSize(buffer_width, buffer_height);
++	RTsize buffer_width, buffer_height, buffer_frame;
++	output_buffer->getSize(buffer_width, buffer_height, buffer_frame);
+ 
+ 	m_frame_number = m_camera_changed ? 0u : m_frame_number + 1;
+ 
+@@ -829,7 +830,7 @@ void ProgressivePhotonScene::trace(const RayGenCameraData& camera_data)
+ void ProgressivePhotonScene::doResize(unsigned int width, unsigned int height)
+ {
+ 	// display buffer resizing handled in base class
+-	m_context["rtpass_output_buffer"]->getBuffer()->setSize(width, height);
++	m_context["rtpass_output_buffer"]->getBuffer()->setSize(width, height, TOTAL_FRAME);
+ 	m_context["output_buffer"]->getBuffer()->setSize(width, height);
+ 	m_context["image_rnd_seeds"]->getBuffer()->setSize(width, height);
+ 	m_context["debug_buffer"]->getBuffer()->setSize(width, height);
+diff --git a/progressivePhotonMap/ppm.h b/progressivePhotonMap/ppm.h
+index b9b560d..44ea52e 100644
+--- a/progressivePhotonMap/ppm.h
++++ b/progressivePhotonMap/ppm.h
+@@ -30,6 +30,7 @@
+ #define  PPM_IN_SHADOW ( 1 << 5 )
+ #define  PPM_OVERFLOW  ( 1 << 6 )
+ #define  PPM_HIT       ( 1 << 7 )
++#define TOTAL_FRAME 4
+ 
+ enum RayTypes
+ {
+@@ -92,6 +93,7 @@ struct HitPRD
+     optix::uint   ray_depth;
+     optix::float3 volumetricRadiance;
+     float lastTHit;
++	optix::uint frame;
+ };
+ 
+ 
+@@ -136,6 +138,7 @@ struct VolumetricRadiancePRD
+     float sigma_s;
+     optix::float3 radiance;
+     unsigned int numHits;
++	optix::uint frame;
+ };
+ 
+ struct Photon
+diff --git a/progressivePhotonMap/ppm_gather.cu b/progressivePhotonMap/ppm_gather.cu
+index bfa4120..0e3b44b 100644
+--- a/progressivePhotonMap/ppm_gather.cu
++++ b/progressivePhotonMap/ppm_gather.cu
+@@ -36,7 +36,7 @@ rtDeclareVariable(rtObject,      top_object, , );
+ rtBuffer<float4, 2>              output_buffer;
+ rtBuffer<float4, 2>              debug_buffer;
+ rtBuffer<PackedPhotonRecord, 1>  photon_map;
+-rtBuffer<PackedHitRecord, 2>     rtpass_output_buffer;
++rtBuffer<PackedHitRecord, 3>     rtpass_output_buffer;
+ rtBuffer<uint2, 2>               image_rnd_seeds;
+ rtDeclareVariable(float,         scene_epsilon, , );
+ rtDeclareVariable(float,         alpha, , );
+@@ -82,7 +82,7 @@ void accumulatePhoton( const PackedPhotonRecord& photon,
+ RT_PROGRAM void gather()
+ {
+   clock_t start = clock();
+-  PackedHitRecord rec = rtpass_output_buffer[launch_index];
++  PackedHitRecord rec = rtpass_output_buffer[make_uint3(launch_index, 1)];
+   float3 rec_position = make_float3( rec.a.x, rec.a.y, rec.a.z );
+   float3 rec_normal   = make_float3( rec.a.w, rec.b.x, rec.b.y );
+   float3 rec_atten_Kd = make_float3( rec.b.z, rec.b.w, rec.c.x );
+@@ -226,7 +226,7 @@ RT_PROGRAM void gather()
+ 
+   //rec_atten_Kd += make_float3(tex2D(diffuse_map, texcoord.x*diffuse_map_scale, texcoord.y*diffuse_map_scale));
+   float3 direct_flux = light.power * avg_atten *rec_atten_Kd;
+-  rtpass_output_buffer[launch_index] = rec;
++  rtpass_output_buffer[make_uint3(launch_index, 1)] = rec;
+   //float3 final_color = indirect_flux;
+   float3 final_color = direct_flux + indirect_flux + rec_volumetricRadiance / total_emitted + ambient_light*rec_atten_Kd;
+   //float3 final_color = indirect_flux ;
+diff --git a/progressivePhotonMap/ppm_rtpass.cu b/progressivePhotonMap/ppm_rtpass.cu
+index edb06da..fd23826 100644
+--- a/progressivePhotonMap/ppm_rtpass.cu
++++ b/progressivePhotonMap/ppm_rtpass.cu
+@@ -36,7 +36,7 @@ rtDeclareVariable(rtObject,      top_object, , );
+ //
+ // Ray generation program
+ //
+-rtBuffer<HitRecord, 2>           rtpass_output_buffer;
++rtBuffer<HitRecord, 3>           rtpass_output_buffer;
+ rtBuffer<uint2, 2>               image_rnd_seeds;
+ rtDeclareVariable(float,         rtpass_default_radius2, , );
+ rtDeclareVariable(float3,        rtpass_eye, , );
+@@ -47,7 +47,8 @@ rtDeclareVariable(uint2,      launch_index, rtLaunchIndex, );
+ 
+ RT_PROGRAM void rtpass_camera()
+ {
+-  float2 screen = make_float2( rtpass_output_buffer.size() );
++
++  float2 screen = make_float2(rtpass_output_buffer.size().x, rtpass_output_buffer.size().y);
+   /*
+   uint   seed   = image_rnd_seeds[index];                       // If we start writing into this buffer here we will
+   float2 sample = make_float2( rnd(seed.x), rnd(seed.y) );      // need to make it an INPUT_OUTPUT buffer.  For now it
+@@ -67,8 +68,7 @@ RT_PROGRAM void rtpass_camera()
+   prd.ray_depth   = 0u;
+   prd.volumetricRadiance = make_float3(0.0f);
+   rtTrace( top_object, ray, prd );
+-  rtpass_output_buffer[launch_index].volumetricRadiance += prd.volumetricRadiance;
+-
++  rtpass_output_buffer[make_uint3(launch_index, prd.frame)].volumetricRadiance += prd.volumetricRadiance;
+ }
+ 
+ // 
+@@ -96,7 +96,7 @@ RT_PROGRAM void rtpass_closest_hit()
+ {
+   // Check if this is a light source
+   if( fmaxf( emitted ) > 0.0f ) {
+-    HitRecord& rec = rtpass_output_buffer[ launch_index ];
++	  HitRecord& rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
+     rec.attenuated_Kd = emitted*hit_prd.attenuation; 
+     rec.flags = 0u;
+     return;
+@@ -111,7 +111,7 @@ RT_PROGRAM void rtpass_closest_hit()
+   double tHitStack = t_hit + 0.1 - 0.1; // Important, prevents compiler optimization on variable
+   if( fmaxf( Kd ) > 0.0f ) {
+     // We hit a diffuse surface; record hit and return
+-    HitRecord rec = rtpass_output_buffer[ launch_index ];;
++	  HitRecord rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
+     rec.position = hit_point; 
+     rec.normal = ffnormal;
+     if( !use_grid ) {
+@@ -131,7 +131,7 @@ RT_PROGRAM void rtpass_closest_hit()
+     rec.flags = PPM_HIT;
+ 	rec.attenuated_Kd *= make_float3(tex2D(diffuse_map, texcoord.x*diffuse_map_scale, texcoord.y*diffuse_map_scale));
+     //rtPrintf("%f %f %f\n", rec.attenuated_Kd.x, rec.attenuated_Kd.y, rec.attenuated_Kd.z);
+-    rtpass_output_buffer[launch_index] = rec;
++	rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)] = rec;
+   } else {
+     // Make reflection ray
+     hit_prd.attenuation = hit_prd.attenuation * Ks;
+@@ -155,7 +155,7 @@ RT_PROGRAM void rtpass_miss()
+   float v     = 0.5f * ( 1.0f + sin(phi) );
+   float3 result = make_float3(tex2D(envmap, u, v));
+ 
+-  HitRecord& rec = rtpass_output_buffer[launch_index];
++  HitRecord& rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
+   rec.flags = 0u;
+   rec.attenuated_Kd = hit_prd.attenuation * result;
+ }
+@@ -179,7 +179,7 @@ RT_PROGRAM void rtpass_miss()
+ rtDeclareVariable(float3, rtpass_bad_color, , );
+ RT_PROGRAM void rtpass_exception()
+ {
+-  HitRecord& rec = rtpass_output_buffer[launch_index];
++	HitRecord& rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
+ 
+   rec.flags = PPM_OVERFLOW;
+   rec.attenuated_Kd = rtpass_bad_color;
diff --git a/nvcommon/CMakeLists.txt b/nvcommon/CMakeLists.txt
deleted file mode 100644
index b6cb28e..0000000
--- a/nvcommon/CMakeLists.txt
+++ /dev/null
@@ -1,45 +0,0 @@
-
-#
-#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
-#
-#  NVIDIA Corporation and its licensors retain all intellectual property and proprietary
-#  rights in and to this software, related documentation and any modifications thereto.
-#  Any use, reproduction, disclosure or distribution of this software and related
-#  documentation without an express license agreement from NVIDIA Corporation is strictly
-#  prohibited.
-#
-#  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
-#  AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
-#  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-#  PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
-#  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
-#  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
-#  BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
-#  INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
-#  SUCH DAMAGES
-#
-
-include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
-
-add_subdirectory(nvModel)
-
-add_library(nvCommon STATIC
-  src/nvTime.cpp
-  src/framebufferObject.cpp
-  include/framebufferObject.h
-  include/nvArray.h
-  include/nvGlutManipulators.h
-  include/nvManipulators.h
-  include/nvMath.h
-  include/nvMatrix.h
-  include/nvQuaternion.h
-  include/nvSDKPath.h
-  include/nvShaderUtils.h
-  include/nvShape.h
-  include/nvTime.h
-  include/nvVector.h
-  include/nvVertexBuffer.h
-  include/renderVertexArray.h
-  include/renderbuffer.h
-  )
-set_property(TARGET nvCommon PROPERTY FOLDER "${OPTIX_IDE_FOLDER}")
diff --git a/nvcommon/GLEW/include/GL/glew.h b/nvcommon/GLEW/include/GL/glew.h
deleted file mode 100644
index 48debd2..0000000
--- a/nvcommon/GLEW/include/GL/glew.h
+++ /dev/null
@@ -1,10787 +0,0 @@
-/*
-** The OpenGL Extension Wrangler Library
-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
-** Copyright (C) 2002, Lev Povalahev
-** All rights reserved.
-** 
-** Redistribution and use in source and binary forms, with or without 
-** modification, are permitted provided that the following conditions are met:
-** 
-** * Redistributions of source code must retain the above copyright notice, 
-**   this list of conditions and the following disclaimer.
-** * Redistributions in binary form must reproduce the above copyright notice, 
-**   this list of conditions and the following disclaimer in the documentation 
-**   and/or other materials provided with the distribution.
-** * The name of the author may be used to endorse or promote products 
-**   derived from this software without specific prior written permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-** THE POSSIBILITY OF SUCH DAMAGE.
-*/
-
-/*
- * Mesa 3-D graphics library
- * Version:  7.0
- *
- * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included
- * in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
- * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
- * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-/*
-** Copyright (c) 2007 The Khronos Group Inc.
-** 
-** Permission is hereby granted, free of charge, to any person obtaining a
-** copy of this software and/or associated documentation files (the
-** "Materials"), to deal in the Materials without restriction, including
-** without limitation the rights to use, copy, modify, merge, publish,
-** distribute, sublicense, and/or sell copies of the Materials, and to
-** permit persons to whom the Materials are furnished to do so, subject to
-** the following conditions:
-** 
-** The above copyright notice and this permission notice shall be included
-** in all copies or substantial portions of the Materials.
-** 
-** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
-*/
-
-#ifndef __glew_h__
-#define __glew_h__
-#define __GLEW_H__
-
-#if defined(__gl_h_) || defined(__GL_H__)
-#error gl.h included before glew.h
-#endif
-#if defined(__glext_h_) || defined(__GLEXT_H_)
-#error glext.h included before glew.h
-#endif
-#if defined(__gl_ATI_h_)
-#error glATI.h included before glew.h
-#endif
-
-#define __gl_h_
-#define __GL_H__
-#define __glext_h_
-#define __GLEXT_H_
-#define __gl_ATI_h_
-
-#if defined(_WIN32)
-
-/*
- * GLEW does not include <windows.h> to avoid name space pollution.
- * GL needs GLAPI and GLAPIENTRY, GLU needs APIENTRY, CALLBACK, and wchar_t
- * defined properly.
- */
-/* <windef.h> */
-#ifndef APIENTRY
-#define GLEW_APIENTRY_DEFINED
-#  if defined(__MINGW32__)
-#    define APIENTRY __stdcall
-#  elif (_MSC_VER >= 800) || defined(_STDCALL_SUPPORTED) || defined(__BORLANDC__)
-#    define APIENTRY __stdcall
-#  else
-#    define APIENTRY
-#  endif
-#endif
-#ifndef GLAPI
-#  if defined(__MINGW32__)
-#    define GLAPI extern
-#  endif
-#endif
-/* <winnt.h> */
-#ifndef CALLBACK
-#define GLEW_CALLBACK_DEFINED
-#  if defined(__MINGW32__)
-#    define CALLBACK __attribute__ ((__stdcall__))
-#  elif (defined(_M_MRX000) || defined(_M_IX86) || defined(_M_ALPHA) || defined(_M_PPC)) && !defined(MIDL_PASS)
-#    define CALLBACK __stdcall
-#  else
-#    define CALLBACK
-#  endif
-#endif
-/* <wingdi.h> and <winnt.h> */
-#ifndef WINGDIAPI
-#define GLEW_WINGDIAPI_DEFINED
-#define WINGDIAPI __declspec(dllimport)
-#endif
-/* <ctype.h> */
-#if (defined(_MSC_VER) || defined(__BORLANDC__)) && !defined(_WCHAR_T_DEFINED)
-typedef unsigned short wchar_t;
-#  define _WCHAR_T_DEFINED
-#endif
-/* <stddef.h> */
-#if !defined(_W64)
-#  if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
-#    define _W64 __w64
-#  else
-#    define _W64
-#  endif
-#endif
-#if !defined(_PTRDIFF_T_DEFINED) && !defined(_PTRDIFF_T_)
-#  ifdef _WIN64
-typedef __int64 ptrdiff_t;
-#  else
-typedef _W64 int ptrdiff_t;
-#  endif
-#  define _PTRDIFF_T_DEFINED
-#  define _PTRDIFF_T_
-#endif
-
-#ifndef GLAPI
-#  if defined(__MINGW32__)
-#    define GLAPI extern
-#  else
-#    define GLAPI WINGDIAPI
-#  endif
-#endif
-
-#ifndef GLAPIENTRY
-#define GLAPIENTRY APIENTRY
-#endif
-
-/*
- * GLEW_STATIC needs to be set when using the static version.
- * GLEW_BUILD is set when building the DLL version.
- */
-#ifndef GLEW_STATIC
-# define GLEW_STATIC
-#endif
-
-#ifdef GLEW_STATIC
-#define GLEWAPI extern
-#else
-#  ifdef GLEW_BUILD
-#    define GLEWAPI extern __declspec(dllexport)
-#  else
-#    define GLEWAPI extern __declspec(dllimport)
-#  endif
-#endif
-
-#else /* _UNIX */
-
-/*
- * Needed for ptrdiff_t in turn needed by VBO.  This is defined by ISO
- * C.  On my system, this amounts to _3 lines_ of included code, all of
- * them pretty much harmless.  If you know of a way of detecting 32 vs
- * 64 _targets_ at compile time you are free to replace this with
- * something that's portable.  For now, _this_ is the portable solution.
- * (mem, 2004-01-04)
- */
-
-#include <stddef.h>
-
-#define GLEW_APIENTRY_DEFINED
-#define APIENTRY
-#define GLEWAPI extern
-
-/* <glu.h> */
-#ifndef GLAPI
-#define GLAPI extern
-#endif
-#ifndef GLAPIENTRY
-#define GLAPIENTRY
-#endif
-
-#endif /* _WIN32 */
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* ----------------------------- GL_VERSION_1_1 ---------------------------- */
-
-#ifndef GL_VERSION_1_1
-#define GL_VERSION_1_1 1
-
-#if defined(__APPLE__)
-typedef unsigned long GLenum;
-typedef unsigned long GLbitfield;
-typedef unsigned long GLuint;
-typedef long GLint;
-typedef long GLsizei;
-#else
-typedef unsigned int GLenum;
-typedef unsigned int GLbitfield;
-typedef unsigned int GLuint;
-typedef int GLint;
-typedef int GLsizei;
-#endif
-typedef unsigned char GLboolean;
-typedef signed char GLbyte;
-typedef short GLshort;
-typedef unsigned char GLubyte;
-typedef unsigned short GLushort;
-typedef unsigned long GLulong;
-typedef float GLfloat;
-typedef float GLclampf;
-typedef double GLdouble;
-typedef double GLclampd;
-typedef void GLvoid;
-#if defined(_MSC_VER) && _MSC_VER < 1400
-typedef __int64 GLint64EXT;
-typedef unsigned __int64 GLuint64EXT;
-#else
-typedef signed long long GLint64EXT;
-typedef unsigned long long GLuint64EXT;
-#endif
-
-#define GL_ACCUM 0x0100
-#define GL_LOAD 0x0101
-#define GL_RETURN 0x0102
-#define GL_MULT 0x0103
-#define GL_ADD 0x0104
-#define GL_NEVER 0x0200
-#define GL_LESS 0x0201
-#define GL_EQUAL 0x0202
-#define GL_LEQUAL 0x0203
-#define GL_GREATER 0x0204
-#define GL_NOTEQUAL 0x0205
-#define GL_GEQUAL 0x0206
-#define GL_ALWAYS 0x0207
-#define GL_CURRENT_BIT 0x00000001
-#define GL_POINT_BIT 0x00000002
-#define GL_LINE_BIT 0x00000004
-#define GL_POLYGON_BIT 0x00000008
-#define GL_POLYGON_STIPPLE_BIT 0x00000010
-#define GL_PIXEL_MODE_BIT 0x00000020
-#define GL_LIGHTING_BIT 0x00000040
-#define GL_FOG_BIT 0x00000080
-#define GL_DEPTH_BUFFER_BIT 0x00000100
-#define GL_ACCUM_BUFFER_BIT 0x00000200
-#define GL_STENCIL_BUFFER_BIT 0x00000400
-#define GL_VIEWPORT_BIT 0x00000800
-#define GL_TRANSFORM_BIT 0x00001000
-#define GL_ENABLE_BIT 0x00002000
-#define GL_COLOR_BUFFER_BIT 0x00004000
-#define GL_HINT_BIT 0x00008000
-#define GL_EVAL_BIT 0x00010000
-#define GL_LIST_BIT 0x00020000
-#define GL_TEXTURE_BIT 0x00040000
-#define GL_SCISSOR_BIT 0x00080000
-#define GL_ALL_ATTRIB_BITS 0x000fffff
-#define GL_POINTS 0x0000
-#define GL_LINES 0x0001
-#define GL_LINE_LOOP 0x0002
-#define GL_LINE_STRIP 0x0003
-#define GL_TRIANGLES 0x0004
-#define GL_TRIANGLE_STRIP 0x0005
-#define GL_TRIANGLE_FAN 0x0006
-#define GL_QUADS 0x0007
-#define GL_QUAD_STRIP 0x0008
-#define GL_POLYGON 0x0009
-#define GL_ZERO 0
-#define GL_ONE 1
-#define GL_SRC_COLOR 0x0300
-#define GL_ONE_MINUS_SRC_COLOR 0x0301
-#define GL_SRC_ALPHA 0x0302
-#define GL_ONE_MINUS_SRC_ALPHA 0x0303
-#define GL_DST_ALPHA 0x0304
-#define GL_ONE_MINUS_DST_ALPHA 0x0305
-#define GL_DST_COLOR 0x0306
-#define GL_ONE_MINUS_DST_COLOR 0x0307
-#define GL_SRC_ALPHA_SATURATE 0x0308
-#define GL_TRUE 1
-#define GL_FALSE 0
-#define GL_CLIP_PLANE0 0x3000
-#define GL_CLIP_PLANE1 0x3001
-#define GL_CLIP_PLANE2 0x3002
-#define GL_CLIP_PLANE3 0x3003
-#define GL_CLIP_PLANE4 0x3004
-#define GL_CLIP_PLANE5 0x3005
-#define GL_BYTE 0x1400
-#define GL_UNSIGNED_BYTE 0x1401
-#define GL_SHORT 0x1402
-#define GL_UNSIGNED_SHORT 0x1403
-#define GL_INT 0x1404
-#define GL_UNSIGNED_INT 0x1405
-#define GL_FLOAT 0x1406
-#define GL_2_BYTES 0x1407
-#define GL_3_BYTES 0x1408
-#define GL_4_BYTES 0x1409
-#define GL_DOUBLE 0x140A
-#define GL_NONE 0
-#define GL_FRONT_LEFT 0x0400
-#define GL_FRONT_RIGHT 0x0401
-#define GL_BACK_LEFT 0x0402
-#define GL_BACK_RIGHT 0x0403
-#define GL_FRONT 0x0404
-#define GL_BACK 0x0405
-#define GL_LEFT 0x0406
-#define GL_RIGHT 0x0407
-#define GL_FRONT_AND_BACK 0x0408
-#define GL_AUX0 0x0409
-#define GL_AUX1 0x040A
-#define GL_AUX2 0x040B
-#define GL_AUX3 0x040C
-#define GL_NO_ERROR 0
-#define GL_INVALID_ENUM 0x0500
-#define GL_INVALID_VALUE 0x0501
-#define GL_INVALID_OPERATION 0x0502
-#define GL_STACK_OVERFLOW 0x0503
-#define GL_STACK_UNDERFLOW 0x0504
-#define GL_OUT_OF_MEMORY 0x0505
-#define GL_2D 0x0600
-#define GL_3D 0x0601
-#define GL_3D_COLOR 0x0602
-#define GL_3D_COLOR_TEXTURE 0x0603
-#define GL_4D_COLOR_TEXTURE 0x0604
-#define GL_PASS_THROUGH_TOKEN 0x0700
-#define GL_POINT_TOKEN 0x0701
-#define GL_LINE_TOKEN 0x0702
-#define GL_POLYGON_TOKEN 0x0703
-#define GL_BITMAP_TOKEN 0x0704
-#define GL_DRAW_PIXEL_TOKEN 0x0705
-#define GL_COPY_PIXEL_TOKEN 0x0706
-#define GL_LINE_RESET_TOKEN 0x0707
-#define GL_EXP 0x0800
-#define GL_EXP2 0x0801
-#define GL_CW 0x0900
-#define GL_CCW 0x0901
-#define GL_COEFF 0x0A00
-#define GL_ORDER 0x0A01
-#define GL_DOMAIN 0x0A02
-#define GL_CURRENT_COLOR 0x0B00
-#define GL_CURRENT_INDEX 0x0B01
-#define GL_CURRENT_NORMAL 0x0B02
-#define GL_CURRENT_TEXTURE_COORDS 0x0B03
-#define GL_CURRENT_RASTER_COLOR 0x0B04
-#define GL_CURRENT_RASTER_INDEX 0x0B05
-#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
-#define GL_CURRENT_RASTER_POSITION 0x0B07
-#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
-#define GL_CURRENT_RASTER_DISTANCE 0x0B09
-#define GL_POINT_SMOOTH 0x0B10
-#define GL_POINT_SIZE 0x0B11
-#define GL_POINT_SIZE_RANGE 0x0B12
-#define GL_POINT_SIZE_GRANULARITY 0x0B13
-#define GL_LINE_SMOOTH 0x0B20
-#define GL_LINE_WIDTH 0x0B21
-#define GL_LINE_WIDTH_RANGE 0x0B22
-#define GL_LINE_WIDTH_GRANULARITY 0x0B23
-#define GL_LINE_STIPPLE 0x0B24
-#define GL_LINE_STIPPLE_PATTERN 0x0B25
-#define GL_LINE_STIPPLE_REPEAT 0x0B26
-#define GL_LIST_MODE 0x0B30
-#define GL_MAX_LIST_NESTING 0x0B31
-#define GL_LIST_BASE 0x0B32
-#define GL_LIST_INDEX 0x0B33
-#define GL_POLYGON_MODE 0x0B40
-#define GL_POLYGON_SMOOTH 0x0B41
-#define GL_POLYGON_STIPPLE 0x0B42
-#define GL_EDGE_FLAG 0x0B43
-#define GL_CULL_FACE 0x0B44
-#define GL_CULL_FACE_MODE 0x0B45
-#define GL_FRONT_FACE 0x0B46
-#define GL_LIGHTING 0x0B50
-#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
-#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
-#define GL_LIGHT_MODEL_AMBIENT 0x0B53
-#define GL_SHADE_MODEL 0x0B54
-#define GL_COLOR_MATERIAL_FACE 0x0B55
-#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
-#define GL_COLOR_MATERIAL 0x0B57
-#define GL_FOG 0x0B60
-#define GL_FOG_INDEX 0x0B61
-#define GL_FOG_DENSITY 0x0B62
-#define GL_FOG_START 0x0B63
-#define GL_FOG_END 0x0B64
-#define GL_FOG_MODE 0x0B65
-#define GL_FOG_COLOR 0x0B66
-#define GL_DEPTH_RANGE 0x0B70
-#define GL_DEPTH_TEST 0x0B71
-#define GL_DEPTH_WRITEMASK 0x0B72
-#define GL_DEPTH_CLEAR_VALUE 0x0B73
-#define GL_DEPTH_FUNC 0x0B74
-#define GL_ACCUM_CLEAR_VALUE 0x0B80
-#define GL_STENCIL_TEST 0x0B90
-#define GL_STENCIL_CLEAR_VALUE 0x0B91
-#define GL_STENCIL_FUNC 0x0B92
-#define GL_STENCIL_VALUE_MASK 0x0B93
-#define GL_STENCIL_FAIL 0x0B94
-#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
-#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
-#define GL_STENCIL_REF 0x0B97
-#define GL_STENCIL_WRITEMASK 0x0B98
-#define GL_MATRIX_MODE 0x0BA0
-#define GL_NORMALIZE 0x0BA1
-#define GL_VIEWPORT 0x0BA2
-#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
-#define GL_PROJECTION_STACK_DEPTH 0x0BA4
-#define GL_TEXTURE_STACK_DEPTH 0x0BA5
-#define GL_MODELVIEW_MATRIX 0x0BA6
-#define GL_PROJECTION_MATRIX 0x0BA7
-#define GL_TEXTURE_MATRIX 0x0BA8
-#define GL_ATTRIB_STACK_DEPTH 0x0BB0
-#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
-#define GL_ALPHA_TEST 0x0BC0
-#define GL_ALPHA_TEST_FUNC 0x0BC1
-#define GL_ALPHA_TEST_REF 0x0BC2
-#define GL_DITHER 0x0BD0
-#define GL_BLEND_DST 0x0BE0
-#define GL_BLEND_SRC 0x0BE1
-#define GL_BLEND 0x0BE2
-#define GL_LOGIC_OP_MODE 0x0BF0
-#define GL_INDEX_LOGIC_OP 0x0BF1
-#define GL_COLOR_LOGIC_OP 0x0BF2
-#define GL_AUX_BUFFERS 0x0C00
-#define GL_DRAW_BUFFER 0x0C01
-#define GL_READ_BUFFER 0x0C02
-#define GL_SCISSOR_BOX 0x0C10
-#define GL_SCISSOR_TEST 0x0C11
-#define GL_INDEX_CLEAR_VALUE 0x0C20
-#define GL_INDEX_WRITEMASK 0x0C21
-#define GL_COLOR_CLEAR_VALUE 0x0C22
-#define GL_COLOR_WRITEMASK 0x0C23
-#define GL_INDEX_MODE 0x0C30
-#define GL_RGBA_MODE 0x0C31
-#define GL_DOUBLEBUFFER 0x0C32
-#define GL_STEREO 0x0C33
-#define GL_RENDER_MODE 0x0C40
-#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
-#define GL_POINT_SMOOTH_HINT 0x0C51
-#define GL_LINE_SMOOTH_HINT 0x0C52
-#define GL_POLYGON_SMOOTH_HINT 0x0C53
-#define GL_FOG_HINT 0x0C54
-#define GL_TEXTURE_GEN_S 0x0C60
-#define GL_TEXTURE_GEN_T 0x0C61
-#define GL_TEXTURE_GEN_R 0x0C62
-#define GL_TEXTURE_GEN_Q 0x0C63
-#define GL_PIXEL_MAP_I_TO_I 0x0C70
-#define GL_PIXEL_MAP_S_TO_S 0x0C71
-#define GL_PIXEL_MAP_I_TO_R 0x0C72
-#define GL_PIXEL_MAP_I_TO_G 0x0C73
-#define GL_PIXEL_MAP_I_TO_B 0x0C74
-#define GL_PIXEL_MAP_I_TO_A 0x0C75
-#define GL_PIXEL_MAP_R_TO_R 0x0C76
-#define GL_PIXEL_MAP_G_TO_G 0x0C77
-#define GL_PIXEL_MAP_B_TO_B 0x0C78
-#define GL_PIXEL_MAP_A_TO_A 0x0C79
-#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
-#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
-#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
-#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
-#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
-#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
-#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
-#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
-#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
-#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
-#define GL_UNPACK_SWAP_BYTES 0x0CF0
-#define GL_UNPACK_LSB_FIRST 0x0CF1
-#define GL_UNPACK_ROW_LENGTH 0x0CF2
-#define GL_UNPACK_SKIP_ROWS 0x0CF3
-#define GL_UNPACK_SKIP_PIXELS 0x0CF4
-#define GL_UNPACK_ALIGNMENT 0x0CF5
-#define GL_PACK_SWAP_BYTES 0x0D00
-#define GL_PACK_LSB_FIRST 0x0D01
-#define GL_PACK_ROW_LENGTH 0x0D02
-#define GL_PACK_SKIP_ROWS 0x0D03
-#define GL_PACK_SKIP_PIXELS 0x0D04
-#define GL_PACK_ALIGNMENT 0x0D05
-#define GL_MAP_COLOR 0x0D10
-#define GL_MAP_STENCIL 0x0D11
-#define GL_INDEX_SHIFT 0x0D12
-#define GL_INDEX_OFFSET 0x0D13
-#define GL_RED_SCALE 0x0D14
-#define GL_RED_BIAS 0x0D15
-#define GL_ZOOM_X 0x0D16
-#define GL_ZOOM_Y 0x0D17
-#define GL_GREEN_SCALE 0x0D18
-#define GL_GREEN_BIAS 0x0D19
-#define GL_BLUE_SCALE 0x0D1A
-#define GL_BLUE_BIAS 0x0D1B
-#define GL_ALPHA_SCALE 0x0D1C
-#define GL_ALPHA_BIAS 0x0D1D
-#define GL_DEPTH_SCALE 0x0D1E
-#define GL_DEPTH_BIAS 0x0D1F
-#define GL_MAX_EVAL_ORDER 0x0D30
-#define GL_MAX_LIGHTS 0x0D31
-#define GL_MAX_CLIP_PLANES 0x0D32
-#define GL_MAX_TEXTURE_SIZE 0x0D33
-#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
-#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
-#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
-#define GL_MAX_NAME_STACK_DEPTH 0x0D37
-#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
-#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
-#define GL_MAX_VIEWPORT_DIMS 0x0D3A
-#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
-#define GL_SUBPIXEL_BITS 0x0D50
-#define GL_INDEX_BITS 0x0D51
-#define GL_RED_BITS 0x0D52
-#define GL_GREEN_BITS 0x0D53
-#define GL_BLUE_BITS 0x0D54
-#define GL_ALPHA_BITS 0x0D55
-#define GL_DEPTH_BITS 0x0D56
-#define GL_STENCIL_BITS 0x0D57
-#define GL_ACCUM_RED_BITS 0x0D58
-#define GL_ACCUM_GREEN_BITS 0x0D59
-#define GL_ACCUM_BLUE_BITS 0x0D5A
-#define GL_ACCUM_ALPHA_BITS 0x0D5B
-#define GL_NAME_STACK_DEPTH 0x0D70
-#define GL_AUTO_NORMAL 0x0D80
-#define GL_MAP1_COLOR_4 0x0D90
-#define GL_MAP1_INDEX 0x0D91
-#define GL_MAP1_NORMAL 0x0D92
-#define GL_MAP1_TEXTURE_COORD_1 0x0D93
-#define GL_MAP1_TEXTURE_COORD_2 0x0D94
-#define GL_MAP1_TEXTURE_COORD_3 0x0D95
-#define GL_MAP1_TEXTURE_COORD_4 0x0D96
-#define GL_MAP1_VERTEX_3 0x0D97
-#define GL_MAP1_VERTEX_4 0x0D98
-#define GL_MAP2_COLOR_4 0x0DB0
-#define GL_MAP2_INDEX 0x0DB1
-#define GL_MAP2_NORMAL 0x0DB2
-#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
-#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
-#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
-#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
-#define GL_MAP2_VERTEX_3 0x0DB7
-#define GL_MAP2_VERTEX_4 0x0DB8
-#define GL_MAP1_GRID_DOMAIN 0x0DD0
-#define GL_MAP1_GRID_SEGMENTS 0x0DD1
-#define GL_MAP2_GRID_DOMAIN 0x0DD2
-#define GL_MAP2_GRID_SEGMENTS 0x0DD3
-#define GL_TEXTURE_1D 0x0DE0
-#define GL_TEXTURE_2D 0x0DE1
-#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
-#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
-#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
-#define GL_SELECTION_BUFFER_POINTER 0x0DF3
-#define GL_SELECTION_BUFFER_SIZE 0x0DF4
-#define GL_TEXTURE_WIDTH 0x1000
-#define GL_TEXTURE_HEIGHT 0x1001
-#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
-#define GL_TEXTURE_BORDER_COLOR 0x1004
-#define GL_TEXTURE_BORDER 0x1005
-#define GL_DONT_CARE 0x1100
-#define GL_FASTEST 0x1101
-#define GL_NICEST 0x1102
-#define GL_LIGHT0 0x4000
-#define GL_LIGHT1 0x4001
-#define GL_LIGHT2 0x4002
-#define GL_LIGHT3 0x4003
-#define GL_LIGHT4 0x4004
-#define GL_LIGHT5 0x4005
-#define GL_LIGHT6 0x4006
-#define GL_LIGHT7 0x4007
-#define GL_AMBIENT 0x1200
-#define GL_DIFFUSE 0x1201
-#define GL_SPECULAR 0x1202
-#define GL_POSITION 0x1203
-#define GL_SPOT_DIRECTION 0x1204
-#define GL_SPOT_EXPONENT 0x1205
-#define GL_SPOT_CUTOFF 0x1206
-#define GL_CONSTANT_ATTENUATION 0x1207
-#define GL_LINEAR_ATTENUATION 0x1208
-#define GL_QUADRATIC_ATTENUATION 0x1209
-#define GL_COMPILE 0x1300
-#define GL_COMPILE_AND_EXECUTE 0x1301
-#define GL_CLEAR 0x1500
-#define GL_AND 0x1501
-#define GL_AND_REVERSE 0x1502
-#define GL_COPY 0x1503
-#define GL_AND_INVERTED 0x1504
-#define GL_NOOP 0x1505
-#define GL_XOR 0x1506
-#define GL_OR 0x1507
-#define GL_NOR 0x1508
-#define GL_EQUIV 0x1509
-#define GL_INVERT 0x150A
-#define GL_OR_REVERSE 0x150B
-#define GL_COPY_INVERTED 0x150C
-#define GL_OR_INVERTED 0x150D
-#define GL_NAND 0x150E
-#define GL_SET 0x150F
-#define GL_EMISSION 0x1600
-#define GL_SHININESS 0x1601
-#define GL_AMBIENT_AND_DIFFUSE 0x1602
-#define GL_COLOR_INDEXES 0x1603
-#define GL_MODELVIEW 0x1700
-#define GL_PROJECTION 0x1701
-#define GL_TEXTURE 0x1702
-#define GL_COLOR 0x1800
-#define GL_DEPTH 0x1801
-#define GL_STENCIL 0x1802
-#define GL_COLOR_INDEX 0x1900
-#define GL_STENCIL_INDEX 0x1901
-#define GL_DEPTH_COMPONENT 0x1902
-#define GL_RED 0x1903
-#define GL_GREEN 0x1904
-#define GL_BLUE 0x1905
-#define GL_ALPHA 0x1906
-#define GL_RGB 0x1907
-#define GL_RGBA 0x1908
-#define GL_LUMINANCE 0x1909
-#define GL_LUMINANCE_ALPHA 0x190A
-#define GL_BITMAP 0x1A00
-#define GL_POINT 0x1B00
-#define GL_LINE 0x1B01
-#define GL_FILL 0x1B02
-#define GL_RENDER 0x1C00
-#define GL_FEEDBACK 0x1C01
-#define GL_SELECT 0x1C02
-#define GL_FLAT 0x1D00
-#define GL_SMOOTH 0x1D01
-#define GL_KEEP 0x1E00
-#define GL_REPLACE 0x1E01
-#define GL_INCR 0x1E02
-#define GL_DECR 0x1E03
-#define GL_VENDOR 0x1F00
-#define GL_RENDERER 0x1F01
-#define GL_VERSION 0x1F02
-#define GL_EXTENSIONS 0x1F03
-#define GL_S 0x2000
-#define GL_T 0x2001
-#define GL_R 0x2002
-#define GL_Q 0x2003
-#define GL_MODULATE 0x2100
-#define GL_DECAL 0x2101
-#define GL_TEXTURE_ENV_MODE 0x2200
-#define GL_TEXTURE_ENV_COLOR 0x2201
-#define GL_TEXTURE_ENV 0x2300
-#define GL_EYE_LINEAR 0x2400
-#define GL_OBJECT_LINEAR 0x2401
-#define GL_SPHERE_MAP 0x2402
-#define GL_TEXTURE_GEN_MODE 0x2500
-#define GL_OBJECT_PLANE 0x2501
-#define GL_EYE_PLANE 0x2502
-#define GL_NEAREST 0x2600
-#define GL_LINEAR 0x2601
-#define GL_NEAREST_MIPMAP_NEAREST 0x2700
-#define GL_LINEAR_MIPMAP_NEAREST 0x2701
-#define GL_NEAREST_MIPMAP_LINEAR 0x2702
-#define GL_LINEAR_MIPMAP_LINEAR 0x2703
-#define GL_TEXTURE_MAG_FILTER 0x2800
-#define GL_TEXTURE_MIN_FILTER 0x2801
-#define GL_TEXTURE_WRAP_S 0x2802
-#define GL_TEXTURE_WRAP_T 0x2803
-#define GL_CLAMP 0x2900
-#define GL_REPEAT 0x2901
-#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
-#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
-#define GL_CLIENT_ALL_ATTRIB_BITS 0xffffffff
-#define GL_POLYGON_OFFSET_FACTOR 0x8038
-#define GL_POLYGON_OFFSET_UNITS 0x2A00
-#define GL_POLYGON_OFFSET_POINT 0x2A01
-#define GL_POLYGON_OFFSET_LINE 0x2A02
-#define GL_POLYGON_OFFSET_FILL 0x8037
-#define GL_ALPHA4 0x803B
-#define GL_ALPHA8 0x803C
-#define GL_ALPHA12 0x803D
-#define GL_ALPHA16 0x803E
-#define GL_LUMINANCE4 0x803F
-#define GL_LUMINANCE8 0x8040
-#define GL_LUMINANCE12 0x8041
-#define GL_LUMINANCE16 0x8042
-#define GL_LUMINANCE4_ALPHA4 0x8043
-#define GL_LUMINANCE6_ALPHA2 0x8044
-#define GL_LUMINANCE8_ALPHA8 0x8045
-#define GL_LUMINANCE12_ALPHA4 0x8046
-#define GL_LUMINANCE12_ALPHA12 0x8047
-#define GL_LUMINANCE16_ALPHA16 0x8048
-#define GL_INTENSITY 0x8049
-#define GL_INTENSITY4 0x804A
-#define GL_INTENSITY8 0x804B
-#define GL_INTENSITY12 0x804C
-#define GL_INTENSITY16 0x804D
-#define GL_R3_G3_B2 0x2A10
-#define GL_RGB4 0x804F
-#define GL_RGB5 0x8050
-#define GL_RGB8 0x8051
-#define GL_RGB10 0x8052
-#define GL_RGB12 0x8053
-#define GL_RGB16 0x8054
-#define GL_RGBA2 0x8055
-#define GL_RGBA4 0x8056
-#define GL_RGB5_A1 0x8057
-#define GL_RGBA8 0x8058
-#define GL_RGB10_A2 0x8059
-#define GL_RGBA12 0x805A
-#define GL_RGBA16 0x805B
-#define GL_TEXTURE_RED_SIZE 0x805C
-#define GL_TEXTURE_GREEN_SIZE 0x805D
-#define GL_TEXTURE_BLUE_SIZE 0x805E
-#define GL_TEXTURE_ALPHA_SIZE 0x805F
-#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
-#define GL_TEXTURE_INTENSITY_SIZE 0x8061
-#define GL_PROXY_TEXTURE_1D 0x8063
-#define GL_PROXY_TEXTURE_2D 0x8064
-#define GL_TEXTURE_PRIORITY 0x8066
-#define GL_TEXTURE_RESIDENT 0x8067
-#define GL_TEXTURE_BINDING_1D 0x8068
-#define GL_TEXTURE_BINDING_2D 0x8069
-#define GL_VERTEX_ARRAY 0x8074
-#define GL_NORMAL_ARRAY 0x8075
-#define GL_COLOR_ARRAY 0x8076
-#define GL_INDEX_ARRAY 0x8077
-#define GL_TEXTURE_COORD_ARRAY 0x8078
-#define GL_EDGE_FLAG_ARRAY 0x8079
-#define GL_VERTEX_ARRAY_SIZE 0x807A
-#define GL_VERTEX_ARRAY_TYPE 0x807B
-#define GL_VERTEX_ARRAY_STRIDE 0x807C
-#define GL_NORMAL_ARRAY_TYPE 0x807E
-#define GL_NORMAL_ARRAY_STRIDE 0x807F
-#define GL_COLOR_ARRAY_SIZE 0x8081
-#define GL_COLOR_ARRAY_TYPE 0x8082
-#define GL_COLOR_ARRAY_STRIDE 0x8083
-#define GL_INDEX_ARRAY_TYPE 0x8085
-#define GL_INDEX_ARRAY_STRIDE 0x8086
-#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
-#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
-#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
-#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
-#define GL_VERTEX_ARRAY_POINTER 0x808E
-#define GL_NORMAL_ARRAY_POINTER 0x808F
-#define GL_COLOR_ARRAY_POINTER 0x8090
-#define GL_INDEX_ARRAY_POINTER 0x8091
-#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
-#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
-#define GL_V2F 0x2A20
-#define GL_V3F 0x2A21
-#define GL_C4UB_V2F 0x2A22
-#define GL_C4UB_V3F 0x2A23
-#define GL_C3F_V3F 0x2A24
-#define GL_N3F_V3F 0x2A25
-#define GL_C4F_N3F_V3F 0x2A26
-#define GL_T2F_V3F 0x2A27
-#define GL_T4F_V4F 0x2A28
-#define GL_T2F_C4UB_V3F 0x2A29
-#define GL_T2F_C3F_V3F 0x2A2A
-#define GL_T2F_N3F_V3F 0x2A2B
-#define GL_T2F_C4F_N3F_V3F 0x2A2C
-#define GL_T4F_C4F_N3F_V4F 0x2A2D
-#define GL_LOGIC_OP GL_INDEX_LOGIC_OP
-#define GL_TEXTURE_COMPONENTS GL_TEXTURE_INTERNAL_FORMAT
-#define GL_COLOR_INDEX1_EXT 0x80E2
-#define GL_COLOR_INDEX2_EXT 0x80E3
-#define GL_COLOR_INDEX4_EXT 0x80E4
-#define GL_COLOR_INDEX8_EXT 0x80E5
-#define GL_COLOR_INDEX12_EXT 0x80E6
-#define GL_COLOR_INDEX16_EXT 0x80E7
-
-GLAPI void GLAPIENTRY glAccum (GLenum op, GLfloat value);
-GLAPI void GLAPIENTRY glAlphaFunc (GLenum func, GLclampf ref);
-GLAPI GLboolean GLAPIENTRY glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
-GLAPI void GLAPIENTRY glArrayElement (GLint i);
-GLAPI void GLAPIENTRY glBegin (GLenum mode);
-GLAPI void GLAPIENTRY glBindTexture (GLenum target, GLuint texture);
-GLAPI void GLAPIENTRY glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
-GLAPI void GLAPIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
-GLAPI void GLAPIENTRY glCallList (GLuint list);
-GLAPI void GLAPIENTRY glCallLists (GLsizei n, GLenum type, const GLvoid *lists);
-GLAPI void GLAPIENTRY glClear (GLbitfield mask);
-GLAPI void GLAPIENTRY glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
-GLAPI void GLAPIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
-GLAPI void GLAPIENTRY glClearDepth (GLclampd depth);
-GLAPI void GLAPIENTRY glClearIndex (GLfloat c);
-GLAPI void GLAPIENTRY glClearStencil (GLint s);
-GLAPI void GLAPIENTRY glClipPlane (GLenum plane, const GLdouble *equation);
-GLAPI void GLAPIENTRY glColor3b (GLbyte red, GLbyte green, GLbyte blue);
-GLAPI void GLAPIENTRY glColor3bv (const GLbyte *v);
-GLAPI void GLAPIENTRY glColor3d (GLdouble red, GLdouble green, GLdouble blue);
-GLAPI void GLAPIENTRY glColor3dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glColor3f (GLfloat red, GLfloat green, GLfloat blue);
-GLAPI void GLAPIENTRY glColor3fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glColor3i (GLint red, GLint green, GLint blue);
-GLAPI void GLAPIENTRY glColor3iv (const GLint *v);
-GLAPI void GLAPIENTRY glColor3s (GLshort red, GLshort green, GLshort blue);
-GLAPI void GLAPIENTRY glColor3sv (const GLshort *v);
-GLAPI void GLAPIENTRY glColor3ub (GLubyte red, GLubyte green, GLubyte blue);
-GLAPI void GLAPIENTRY glColor3ubv (const GLubyte *v);
-GLAPI void GLAPIENTRY glColor3ui (GLuint red, GLuint green, GLuint blue);
-GLAPI void GLAPIENTRY glColor3uiv (const GLuint *v);
-GLAPI void GLAPIENTRY glColor3us (GLushort red, GLushort green, GLushort blue);
-GLAPI void GLAPIENTRY glColor3usv (const GLushort *v);
-GLAPI void GLAPIENTRY glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
-GLAPI void GLAPIENTRY glColor4bv (const GLbyte *v);
-GLAPI void GLAPIENTRY glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
-GLAPI void GLAPIENTRY glColor4dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
-GLAPI void GLAPIENTRY glColor4fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glColor4i (GLint red, GLint green, GLint blue, GLint alpha);
-GLAPI void GLAPIENTRY glColor4iv (const GLint *v);
-GLAPI void GLAPIENTRY glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);
-GLAPI void GLAPIENTRY glColor4sv (const GLshort *v);
-GLAPI void GLAPIENTRY glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
-GLAPI void GLAPIENTRY glColor4ubv (const GLubyte *v);
-GLAPI void GLAPIENTRY glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);
-GLAPI void GLAPIENTRY glColor4uiv (const GLuint *v);
-GLAPI void GLAPIENTRY glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);
-GLAPI void GLAPIENTRY glColor4usv (const GLushort *v);
-GLAPI void GLAPIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
-GLAPI void GLAPIENTRY glColorMaterial (GLenum face, GLenum mode);
-GLAPI void GLAPIENTRY glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-GLAPI void GLAPIENTRY glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
-GLAPI void GLAPIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
-GLAPI void GLAPIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
-GLAPI void GLAPIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
-GLAPI void GLAPIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-GLAPI void GLAPIENTRY glCullFace (GLenum mode);
-GLAPI void GLAPIENTRY glDeleteLists (GLuint list, GLsizei range);
-GLAPI void GLAPIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
-GLAPI void GLAPIENTRY glDepthFunc (GLenum func);
-GLAPI void GLAPIENTRY glDepthMask (GLboolean flag);
-GLAPI void GLAPIENTRY glDepthRange (GLclampd zNear, GLclampd zFar);
-GLAPI void GLAPIENTRY glDisable (GLenum cap);
-GLAPI void GLAPIENTRY glDisableClientState (GLenum array);
-GLAPI void GLAPIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
-GLAPI void GLAPIENTRY glDrawBuffer (GLenum mode);
-GLAPI void GLAPIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
-GLAPI void GLAPIENTRY glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
-GLAPI void GLAPIENTRY glEdgeFlag (GLboolean flag);
-GLAPI void GLAPIENTRY glEdgeFlagPointer (GLsizei stride, const GLvoid *pointer);
-GLAPI void GLAPIENTRY glEdgeFlagv (const GLboolean *flag);
-GLAPI void GLAPIENTRY glEnable (GLenum cap);
-GLAPI void GLAPIENTRY glEnableClientState (GLenum array);
-GLAPI void GLAPIENTRY glEnd (void);
-GLAPI void GLAPIENTRY glEndList (void);
-GLAPI void GLAPIENTRY glEvalCoord1d (GLdouble u);
-GLAPI void GLAPIENTRY glEvalCoord1dv (const GLdouble *u);
-GLAPI void GLAPIENTRY glEvalCoord1f (GLfloat u);
-GLAPI void GLAPIENTRY glEvalCoord1fv (const GLfloat *u);
-GLAPI void GLAPIENTRY glEvalCoord2d (GLdouble u, GLdouble v);
-GLAPI void GLAPIENTRY glEvalCoord2dv (const GLdouble *u);
-GLAPI void GLAPIENTRY glEvalCoord2f (GLfloat u, GLfloat v);
-GLAPI void GLAPIENTRY glEvalCoord2fv (const GLfloat *u);
-GLAPI void GLAPIENTRY glEvalMesh1 (GLenum mode, GLint i1, GLint i2);
-GLAPI void GLAPIENTRY glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
-GLAPI void GLAPIENTRY glEvalPoint1 (GLint i);
-GLAPI void GLAPIENTRY glEvalPoint2 (GLint i, GLint j);
-GLAPI void GLAPIENTRY glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);
-GLAPI void GLAPIENTRY glFinish (void);
-GLAPI void GLAPIENTRY glFlush (void);
-GLAPI void GLAPIENTRY glFogf (GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glFogfv (GLenum pname, const GLfloat *params);
-GLAPI void GLAPIENTRY glFogi (GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glFogiv (GLenum pname, const GLint *params);
-GLAPI void GLAPIENTRY glFrontFace (GLenum mode);
-GLAPI void GLAPIENTRY glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
-GLAPI GLuint GLAPIENTRY glGenLists (GLsizei range);
-GLAPI void GLAPIENTRY glGenTextures (GLsizei n, GLuint *textures);
-GLAPI void GLAPIENTRY glGetBooleanv (GLenum pname, GLboolean *params);
-GLAPI void GLAPIENTRY glGetClipPlane (GLenum plane, GLdouble *equation);
-GLAPI void GLAPIENTRY glGetDoublev (GLenum pname, GLdouble *params);
-GLAPI GLenum GLAPIENTRY glGetError (void);
-GLAPI void GLAPIENTRY glGetFloatv (GLenum pname, GLfloat *params);
-GLAPI void GLAPIENTRY glGetIntegerv (GLenum pname, GLint *params);
-GLAPI void GLAPIENTRY glGetLightfv (GLenum light, GLenum pname, GLfloat *params);
-GLAPI void GLAPIENTRY glGetLightiv (GLenum light, GLenum pname, GLint *params);
-GLAPI void GLAPIENTRY glGetMapdv (GLenum target, GLenum query, GLdouble *v);
-GLAPI void GLAPIENTRY glGetMapfv (GLenum target, GLenum query, GLfloat *v);
-GLAPI void GLAPIENTRY glGetMapiv (GLenum target, GLenum query, GLint *v);
-GLAPI void GLAPIENTRY glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);
-GLAPI void GLAPIENTRY glGetMaterialiv (GLenum face, GLenum pname, GLint *params);
-GLAPI void GLAPIENTRY glGetPixelMapfv (GLenum map, GLfloat *values);
-GLAPI void GLAPIENTRY glGetPixelMapuiv (GLenum map, GLuint *values);
-GLAPI void GLAPIENTRY glGetPixelMapusv (GLenum map, GLushort *values);
-GLAPI void GLAPIENTRY glGetPointerv (GLenum pname, GLvoid* *params);
-GLAPI void GLAPIENTRY glGetPolygonStipple (GLubyte *mask);
-GLAPI const GLubyte * GLAPIENTRY glGetString (GLenum name);
-GLAPI void GLAPIENTRY glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);
-GLAPI void GLAPIENTRY glGetTexEnviv (GLenum target, GLenum pname, GLint *params);
-GLAPI void GLAPIENTRY glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);
-GLAPI void GLAPIENTRY glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);
-GLAPI void GLAPIENTRY glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);
-GLAPI void GLAPIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
-GLAPI void GLAPIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
-GLAPI void GLAPIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
-GLAPI void GLAPIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
-GLAPI void GLAPIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
-GLAPI void GLAPIENTRY glHint (GLenum target, GLenum mode);
-GLAPI void GLAPIENTRY glIndexMask (GLuint mask);
-GLAPI void GLAPIENTRY glIndexPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
-GLAPI void GLAPIENTRY glIndexd (GLdouble c);
-GLAPI void GLAPIENTRY glIndexdv (const GLdouble *c);
-GLAPI void GLAPIENTRY glIndexf (GLfloat c);
-GLAPI void GLAPIENTRY glIndexfv (const GLfloat *c);
-GLAPI void GLAPIENTRY glIndexi (GLint c);
-GLAPI void GLAPIENTRY glIndexiv (const GLint *c);
-GLAPI void GLAPIENTRY glIndexs (GLshort c);
-GLAPI void GLAPIENTRY glIndexsv (const GLshort *c);
-GLAPI void GLAPIENTRY glIndexub (GLubyte c);
-GLAPI void GLAPIENTRY glIndexubv (const GLubyte *c);
-GLAPI void GLAPIENTRY glInitNames (void);
-GLAPI void GLAPIENTRY glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid *pointer);
-GLAPI GLboolean GLAPIENTRY glIsEnabled (GLenum cap);
-GLAPI GLboolean GLAPIENTRY glIsList (GLuint list);
-GLAPI GLboolean GLAPIENTRY glIsTexture (GLuint texture);
-GLAPI void GLAPIENTRY glLightModelf (GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glLightModelfv (GLenum pname, const GLfloat *params);
-GLAPI void GLAPIENTRY glLightModeli (GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glLightModeliv (GLenum pname, const GLint *params);
-GLAPI void GLAPIENTRY glLightf (GLenum light, GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glLightfv (GLenum light, GLenum pname, const GLfloat *params);
-GLAPI void GLAPIENTRY glLighti (GLenum light, GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glLightiv (GLenum light, GLenum pname, const GLint *params);
-GLAPI void GLAPIENTRY glLineStipple (GLint factor, GLushort pattern);
-GLAPI void GLAPIENTRY glLineWidth (GLfloat width);
-GLAPI void GLAPIENTRY glListBase (GLuint base);
-GLAPI void GLAPIENTRY glLoadIdentity (void);
-GLAPI void GLAPIENTRY glLoadMatrixd (const GLdouble *m);
-GLAPI void GLAPIENTRY glLoadMatrixf (const GLfloat *m);
-GLAPI void GLAPIENTRY glLoadName (GLuint name);
-GLAPI void GLAPIENTRY glLogicOp (GLenum opcode);
-GLAPI void GLAPIENTRY glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
-GLAPI void GLAPIENTRY glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
-GLAPI void GLAPIENTRY glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
-GLAPI void GLAPIENTRY glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
-GLAPI void GLAPIENTRY glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);
-GLAPI void GLAPIENTRY glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);
-GLAPI void GLAPIENTRY glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
-GLAPI void GLAPIENTRY glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
-GLAPI void GLAPIENTRY glMaterialf (GLenum face, GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
-GLAPI void GLAPIENTRY glMateriali (GLenum face, GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glMaterialiv (GLenum face, GLenum pname, const GLint *params);
-GLAPI void GLAPIENTRY glMatrixMode (GLenum mode);
-GLAPI void GLAPIENTRY glMultMatrixd (const GLdouble *m);
-GLAPI void GLAPIENTRY glMultMatrixf (const GLfloat *m);
-GLAPI void GLAPIENTRY glNewList (GLuint list, GLenum mode);
-GLAPI void GLAPIENTRY glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);
-GLAPI void GLAPIENTRY glNormal3bv (const GLbyte *v);
-GLAPI void GLAPIENTRY glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);
-GLAPI void GLAPIENTRY glNormal3dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
-GLAPI void GLAPIENTRY glNormal3fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glNormal3i (GLint nx, GLint ny, GLint nz);
-GLAPI void GLAPIENTRY glNormal3iv (const GLint *v);
-GLAPI void GLAPIENTRY glNormal3s (GLshort nx, GLshort ny, GLshort nz);
-GLAPI void GLAPIENTRY glNormal3sv (const GLshort *v);
-GLAPI void GLAPIENTRY glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
-GLAPI void GLAPIENTRY glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
-GLAPI void GLAPIENTRY glPassThrough (GLfloat token);
-GLAPI void GLAPIENTRY glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat *values);
-GLAPI void GLAPIENTRY glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint *values);
-GLAPI void GLAPIENTRY glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort *values);
-GLAPI void GLAPIENTRY glPixelStoref (GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glPixelStorei (GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glPixelTransferf (GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glPixelTransferi (GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glPixelZoom (GLfloat xfactor, GLfloat yfactor);
-GLAPI void GLAPIENTRY glPointSize (GLfloat size);
-GLAPI void GLAPIENTRY glPolygonMode (GLenum face, GLenum mode);
-GLAPI void GLAPIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
-GLAPI void GLAPIENTRY glPolygonStipple (const GLubyte *mask);
-GLAPI void GLAPIENTRY glPopAttrib (void);
-GLAPI void GLAPIENTRY glPopClientAttrib (void);
-GLAPI void GLAPIENTRY glPopMatrix (void);
-GLAPI void GLAPIENTRY glPopName (void);
-GLAPI void GLAPIENTRY glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);
-GLAPI void GLAPIENTRY glPushAttrib (GLbitfield mask);
-GLAPI void GLAPIENTRY glPushClientAttrib (GLbitfield mask);
-GLAPI void GLAPIENTRY glPushMatrix (void);
-GLAPI void GLAPIENTRY glPushName (GLuint name);
-GLAPI void GLAPIENTRY glRasterPos2d (GLdouble x, GLdouble y);
-GLAPI void GLAPIENTRY glRasterPos2dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glRasterPos2f (GLfloat x, GLfloat y);
-GLAPI void GLAPIENTRY glRasterPos2fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glRasterPos2i (GLint x, GLint y);
-GLAPI void GLAPIENTRY glRasterPos2iv (const GLint *v);
-GLAPI void GLAPIENTRY glRasterPos2s (GLshort x, GLshort y);
-GLAPI void GLAPIENTRY glRasterPos2sv (const GLshort *v);
-GLAPI void GLAPIENTRY glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);
-GLAPI void GLAPIENTRY glRasterPos3dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);
-GLAPI void GLAPIENTRY glRasterPos3fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glRasterPos3i (GLint x, GLint y, GLint z);
-GLAPI void GLAPIENTRY glRasterPos3iv (const GLint *v);
-GLAPI void GLAPIENTRY glRasterPos3s (GLshort x, GLshort y, GLshort z);
-GLAPI void GLAPIENTRY glRasterPos3sv (const GLshort *v);
-GLAPI void GLAPIENTRY glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-GLAPI void GLAPIENTRY glRasterPos4dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GLAPI void GLAPIENTRY glRasterPos4fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glRasterPos4i (GLint x, GLint y, GLint z, GLint w);
-GLAPI void GLAPIENTRY glRasterPos4iv (const GLint *v);
-GLAPI void GLAPIENTRY glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);
-GLAPI void GLAPIENTRY glRasterPos4sv (const GLshort *v);
-GLAPI void GLAPIENTRY glReadBuffer (GLenum mode);
-GLAPI void GLAPIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
-GLAPI void GLAPIENTRY glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
-GLAPI void GLAPIENTRY glRectdv (const GLdouble *v1, const GLdouble *v2);
-GLAPI void GLAPIENTRY glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
-GLAPI void GLAPIENTRY glRectfv (const GLfloat *v1, const GLfloat *v2);
-GLAPI void GLAPIENTRY glRecti (GLint x1, GLint y1, GLint x2, GLint y2);
-GLAPI void GLAPIENTRY glRectiv (const GLint *v1, const GLint *v2);
-GLAPI void GLAPIENTRY glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
-GLAPI void GLAPIENTRY glRectsv (const GLshort *v1, const GLshort *v2);
-GLAPI GLint GLAPIENTRY glRenderMode (GLenum mode);
-GLAPI void GLAPIENTRY glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
-GLAPI void GLAPIENTRY glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
-GLAPI void GLAPIENTRY glScaled (GLdouble x, GLdouble y, GLdouble z);
-GLAPI void GLAPIENTRY glScalef (GLfloat x, GLfloat y, GLfloat z);
-GLAPI void GLAPIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
-GLAPI void GLAPIENTRY glSelectBuffer (GLsizei size, GLuint *buffer);
-GLAPI void GLAPIENTRY glShadeModel (GLenum mode);
-GLAPI void GLAPIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
-GLAPI void GLAPIENTRY glStencilMask (GLuint mask);
-GLAPI void GLAPIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
-GLAPI void GLAPIENTRY glTexCoord1d (GLdouble s);
-GLAPI void GLAPIENTRY glTexCoord1dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glTexCoord1f (GLfloat s);
-GLAPI void GLAPIENTRY glTexCoord1fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glTexCoord1i (GLint s);
-GLAPI void GLAPIENTRY glTexCoord1iv (const GLint *v);
-GLAPI void GLAPIENTRY glTexCoord1s (GLshort s);
-GLAPI void GLAPIENTRY glTexCoord1sv (const GLshort *v);
-GLAPI void GLAPIENTRY glTexCoord2d (GLdouble s, GLdouble t);
-GLAPI void GLAPIENTRY glTexCoord2dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glTexCoord2f (GLfloat s, GLfloat t);
-GLAPI void GLAPIENTRY glTexCoord2fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glTexCoord2i (GLint s, GLint t);
-GLAPI void GLAPIENTRY glTexCoord2iv (const GLint *v);
-GLAPI void GLAPIENTRY glTexCoord2s (GLshort s, GLshort t);
-GLAPI void GLAPIENTRY glTexCoord2sv (const GLshort *v);
-GLAPI void GLAPIENTRY glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);
-GLAPI void GLAPIENTRY glTexCoord3dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);
-GLAPI void GLAPIENTRY glTexCoord3fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glTexCoord3i (GLint s, GLint t, GLint r);
-GLAPI void GLAPIENTRY glTexCoord3iv (const GLint *v);
-GLAPI void GLAPIENTRY glTexCoord3s (GLshort s, GLshort t, GLshort r);
-GLAPI void GLAPIENTRY glTexCoord3sv (const GLshort *v);
-GLAPI void GLAPIENTRY glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
-GLAPI void GLAPIENTRY glTexCoord4dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
-GLAPI void GLAPIENTRY glTexCoord4fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glTexCoord4i (GLint s, GLint t, GLint r, GLint q);
-GLAPI void GLAPIENTRY glTexCoord4iv (const GLint *v);
-GLAPI void GLAPIENTRY glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);
-GLAPI void GLAPIENTRY glTexCoord4sv (const GLshort *v);
-GLAPI void GLAPIENTRY glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-GLAPI void GLAPIENTRY glTexEnvf (GLenum target, GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
-GLAPI void GLAPIENTRY glTexEnvi (GLenum target, GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glTexEnviv (GLenum target, GLenum pname, const GLint *params);
-GLAPI void GLAPIENTRY glTexGend (GLenum coord, GLenum pname, GLdouble param);
-GLAPI void GLAPIENTRY glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);
-GLAPI void GLAPIENTRY glTexGenf (GLenum coord, GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);
-GLAPI void GLAPIENTRY glTexGeni (GLenum coord, GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glTexGeniv (GLenum coord, GLenum pname, const GLint *params);
-GLAPI void GLAPIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-GLAPI void GLAPIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-GLAPI void GLAPIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);
-GLAPI void GLAPIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
-GLAPI void GLAPIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);
-GLAPI void GLAPIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
-GLAPI void GLAPIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
-GLAPI void GLAPIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
-GLAPI void GLAPIENTRY glTranslated (GLdouble x, GLdouble y, GLdouble z);
-GLAPI void GLAPIENTRY glTranslatef (GLfloat x, GLfloat y, GLfloat z);
-GLAPI void GLAPIENTRY glVertex2d (GLdouble x, GLdouble y);
-GLAPI void GLAPIENTRY glVertex2dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glVertex2f (GLfloat x, GLfloat y);
-GLAPI void GLAPIENTRY glVertex2fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glVertex2i (GLint x, GLint y);
-GLAPI void GLAPIENTRY glVertex2iv (const GLint *v);
-GLAPI void GLAPIENTRY glVertex2s (GLshort x, GLshort y);
-GLAPI void GLAPIENTRY glVertex2sv (const GLshort *v);
-GLAPI void GLAPIENTRY glVertex3d (GLdouble x, GLdouble y, GLdouble z);
-GLAPI void GLAPIENTRY glVertex3dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glVertex3f (GLfloat x, GLfloat y, GLfloat z);
-GLAPI void GLAPIENTRY glVertex3fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glVertex3i (GLint x, GLint y, GLint z);
-GLAPI void GLAPIENTRY glVertex3iv (const GLint *v);
-GLAPI void GLAPIENTRY glVertex3s (GLshort x, GLshort y, GLshort z);
-GLAPI void GLAPIENTRY glVertex3sv (const GLshort *v);
-GLAPI void GLAPIENTRY glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-GLAPI void GLAPIENTRY glVertex4dv (const GLdouble *v);
-GLAPI void GLAPIENTRY glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GLAPI void GLAPIENTRY glVertex4fv (const GLfloat *v);
-GLAPI void GLAPIENTRY glVertex4i (GLint x, GLint y, GLint z, GLint w);
-GLAPI void GLAPIENTRY glVertex4iv (const GLint *v);
-GLAPI void GLAPIENTRY glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);
-GLAPI void GLAPIENTRY glVertex4sv (const GLshort *v);
-GLAPI void GLAPIENTRY glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-GLAPI void GLAPIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
-
-#define GLEW_VERSION_1_1 GLEW_GET_VAR(__GLEW_VERSION_1_1)
-
-#endif /* GL_VERSION_1_1 */
-
-/* ---------------------------------- GLU ---------------------------------- */
-
-/* this is where we can safely include GLU */
-#if defined(__APPLE__) && defined(__MACH__)
-#include <OpenGL/glu.h>
-#else
-#include <GL/glu.h>
-#endif
-
-/* ----------------------------- GL_VERSION_1_2 ---------------------------- */
-
-#ifndef GL_VERSION_1_2
-#define GL_VERSION_1_2 1
-
-#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
-#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
-#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
-#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
-#define GL_UNSIGNED_BYTE_3_3_2 0x8032
-#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
-#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
-#define GL_UNSIGNED_INT_8_8_8_8 0x8035
-#define GL_UNSIGNED_INT_10_10_10_2 0x8036
-#define GL_RESCALE_NORMAL 0x803A
-#define GL_TEXTURE_BINDING_3D 0x806A
-#define GL_PACK_SKIP_IMAGES 0x806B
-#define GL_PACK_IMAGE_HEIGHT 0x806C
-#define GL_UNPACK_SKIP_IMAGES 0x806D
-#define GL_UNPACK_IMAGE_HEIGHT 0x806E
-#define GL_TEXTURE_3D 0x806F
-#define GL_PROXY_TEXTURE_3D 0x8070
-#define GL_TEXTURE_DEPTH 0x8071
-#define GL_TEXTURE_WRAP_R 0x8072
-#define GL_MAX_3D_TEXTURE_SIZE 0x8073
-#define GL_BGR 0x80E0
-#define GL_BGRA 0x80E1
-#define GL_MAX_ELEMENTS_VERTICES 0x80E8
-#define GL_MAX_ELEMENTS_INDICES 0x80E9
-#define GL_CLAMP_TO_EDGE 0x812F
-#define GL_TEXTURE_MIN_LOD 0x813A
-#define GL_TEXTURE_MAX_LOD 0x813B
-#define GL_TEXTURE_BASE_LEVEL 0x813C
-#define GL_TEXTURE_MAX_LEVEL 0x813D
-#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
-#define GL_SINGLE_COLOR 0x81F9
-#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
-#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
-#define GL_UNSIGNED_SHORT_5_6_5 0x8363
-#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
-#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
-#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
-#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
-#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
-#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
-#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
-
-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
-typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
-
-#define glCopyTexSubImage3D GLEW_GET_FUN(__glewCopyTexSubImage3D)
-#define glDrawRangeElements GLEW_GET_FUN(__glewDrawRangeElements)
-#define glTexImage3D GLEW_GET_FUN(__glewTexImage3D)
-#define glTexSubImage3D GLEW_GET_FUN(__glewTexSubImage3D)
-
-#define GLEW_VERSION_1_2 GLEW_GET_VAR(__GLEW_VERSION_1_2)
-
-#endif /* GL_VERSION_1_2 */
-
-/* ----------------------------- GL_VERSION_1_3 ---------------------------- */
-
-#ifndef GL_VERSION_1_3
-#define GL_VERSION_1_3 1
-
-#define GL_MULTISAMPLE 0x809D
-#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
-#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
-#define GL_SAMPLE_COVERAGE 0x80A0
-#define GL_SAMPLE_BUFFERS 0x80A8
-#define GL_SAMPLES 0x80A9
-#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
-#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
-#define GL_CLAMP_TO_BORDER 0x812D
-#define GL_TEXTURE0 0x84C0
-#define GL_TEXTURE1 0x84C1
-#define GL_TEXTURE2 0x84C2
-#define GL_TEXTURE3 0x84C3
-#define GL_TEXTURE4 0x84C4
-#define GL_TEXTURE5 0x84C5
-#define GL_TEXTURE6 0x84C6
-#define GL_TEXTURE7 0x84C7
-#define GL_TEXTURE8 0x84C8
-#define GL_TEXTURE9 0x84C9
-#define GL_TEXTURE10 0x84CA
-#define GL_TEXTURE11 0x84CB
-#define GL_TEXTURE12 0x84CC
-#define GL_TEXTURE13 0x84CD
-#define GL_TEXTURE14 0x84CE
-#define GL_TEXTURE15 0x84CF
-#define GL_TEXTURE16 0x84D0
-#define GL_TEXTURE17 0x84D1
-#define GL_TEXTURE18 0x84D2
-#define GL_TEXTURE19 0x84D3
-#define GL_TEXTURE20 0x84D4
-#define GL_TEXTURE21 0x84D5
-#define GL_TEXTURE22 0x84D6
-#define GL_TEXTURE23 0x84D7
-#define GL_TEXTURE24 0x84D8
-#define GL_TEXTURE25 0x84D9
-#define GL_TEXTURE26 0x84DA
-#define GL_TEXTURE27 0x84DB
-#define GL_TEXTURE28 0x84DC
-#define GL_TEXTURE29 0x84DD
-#define GL_TEXTURE30 0x84DE
-#define GL_TEXTURE31 0x84DF
-#define GL_ACTIVE_TEXTURE 0x84E0
-#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
-#define GL_MAX_TEXTURE_UNITS 0x84E2
-#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
-#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
-#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
-#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
-#define GL_SUBTRACT 0x84E7
-#define GL_COMPRESSED_ALPHA 0x84E9
-#define GL_COMPRESSED_LUMINANCE 0x84EA
-#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
-#define GL_COMPRESSED_INTENSITY 0x84EC
-#define GL_COMPRESSED_RGB 0x84ED
-#define GL_COMPRESSED_RGBA 0x84EE
-#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
-#define GL_NORMAL_MAP 0x8511
-#define GL_REFLECTION_MAP 0x8512
-#define GL_TEXTURE_CUBE_MAP 0x8513
-#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
-#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
-#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
-#define GL_COMBINE 0x8570
-#define GL_COMBINE_RGB 0x8571
-#define GL_COMBINE_ALPHA 0x8572
-#define GL_RGB_SCALE 0x8573
-#define GL_ADD_SIGNED 0x8574
-#define GL_INTERPOLATE 0x8575
-#define GL_CONSTANT 0x8576
-#define GL_PRIMARY_COLOR 0x8577
-#define GL_PREVIOUS 0x8578
-#define GL_SOURCE0_RGB 0x8580
-#define GL_SOURCE1_RGB 0x8581
-#define GL_SOURCE2_RGB 0x8582
-#define GL_SOURCE0_ALPHA 0x8588
-#define GL_SOURCE1_ALPHA 0x8589
-#define GL_SOURCE2_ALPHA 0x858A
-#define GL_OPERAND0_RGB 0x8590
-#define GL_OPERAND1_RGB 0x8591
-#define GL_OPERAND2_RGB 0x8592
-#define GL_OPERAND0_ALPHA 0x8598
-#define GL_OPERAND1_ALPHA 0x8599
-#define GL_OPERAND2_ALPHA 0x859A
-#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
-#define GL_TEXTURE_COMPRESSED 0x86A1
-#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
-#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
-#define GL_DOT3_RGB 0x86AE
-#define GL_DOT3_RGBA 0x86AF
-#define GL_MULTISAMPLE_BIT 0x20000000
-
-typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREPROC) (GLenum texture);
-typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLvoid *img);
-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);
-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
-
-#define glActiveTexture GLEW_GET_FUN(__glewActiveTexture)
-#define glClientActiveTexture GLEW_GET_FUN(__glewClientActiveTexture)
-#define glCompressedTexImage1D GLEW_GET_FUN(__glewCompressedTexImage1D)
-#define glCompressedTexImage2D GLEW_GET_FUN(__glewCompressedTexImage2D)
-#define glCompressedTexImage3D GLEW_GET_FUN(__glewCompressedTexImage3D)
-#define glCompressedTexSubImage1D GLEW_GET_FUN(__glewCompressedTexSubImage1D)
-#define glCompressedTexSubImage2D GLEW_GET_FUN(__glewCompressedTexSubImage2D)
-#define glCompressedTexSubImage3D GLEW_GET_FUN(__glewCompressedTexSubImage3D)
-#define glGetCompressedTexImage GLEW_GET_FUN(__glewGetCompressedTexImage)
-#define glLoadTransposeMatrixd GLEW_GET_FUN(__glewLoadTransposeMatrixd)
-#define glLoadTransposeMatrixf GLEW_GET_FUN(__glewLoadTransposeMatrixf)
-#define glMultTransposeMatrixd GLEW_GET_FUN(__glewMultTransposeMatrixd)
-#define glMultTransposeMatrixf GLEW_GET_FUN(__glewMultTransposeMatrixf)
-#define glMultiTexCoord1d GLEW_GET_FUN(__glewMultiTexCoord1d)
-#define glMultiTexCoord1dv GLEW_GET_FUN(__glewMultiTexCoord1dv)
-#define glMultiTexCoord1f GLEW_GET_FUN(__glewMultiTexCoord1f)
-#define glMultiTexCoord1fv GLEW_GET_FUN(__glewMultiTexCoord1fv)
-#define glMultiTexCoord1i GLEW_GET_FUN(__glewMultiTexCoord1i)
-#define glMultiTexCoord1iv GLEW_GET_FUN(__glewMultiTexCoord1iv)
-#define glMultiTexCoord1s GLEW_GET_FUN(__glewMultiTexCoord1s)
-#define glMultiTexCoord1sv GLEW_GET_FUN(__glewMultiTexCoord1sv)
-#define glMultiTexCoord2d GLEW_GET_FUN(__glewMultiTexCoord2d)
-#define glMultiTexCoord2dv GLEW_GET_FUN(__glewMultiTexCoord2dv)
-#define glMultiTexCoord2f GLEW_GET_FUN(__glewMultiTexCoord2f)
-#define glMultiTexCoord2fv GLEW_GET_FUN(__glewMultiTexCoord2fv)
-#define glMultiTexCoord2i GLEW_GET_FUN(__glewMultiTexCoord2i)
-#define glMultiTexCoord2iv GLEW_GET_FUN(__glewMultiTexCoord2iv)
-#define glMultiTexCoord2s GLEW_GET_FUN(__glewMultiTexCoord2s)
-#define glMultiTexCoord2sv GLEW_GET_FUN(__glewMultiTexCoord2sv)
-#define glMultiTexCoord3d GLEW_GET_FUN(__glewMultiTexCoord3d)
-#define glMultiTexCoord3dv GLEW_GET_FUN(__glewMultiTexCoord3dv)
-#define glMultiTexCoord3f GLEW_GET_FUN(__glewMultiTexCoord3f)
-#define glMultiTexCoord3fv GLEW_GET_FUN(__glewMultiTexCoord3fv)
-#define glMultiTexCoord3i GLEW_GET_FUN(__glewMultiTexCoord3i)
-#define glMultiTexCoord3iv GLEW_GET_FUN(__glewMultiTexCoord3iv)
-#define glMultiTexCoord3s GLEW_GET_FUN(__glewMultiTexCoord3s)
-#define glMultiTexCoord3sv GLEW_GET_FUN(__glewMultiTexCoord3sv)
-#define glMultiTexCoord4d GLEW_GET_FUN(__glewMultiTexCoord4d)
-#define glMultiTexCoord4dv GLEW_GET_FUN(__glewMultiTexCoord4dv)
-#define glMultiTexCoord4f GLEW_GET_FUN(__glewMultiTexCoord4f)
-#define glMultiTexCoord4fv GLEW_GET_FUN(__glewMultiTexCoord4fv)
-#define glMultiTexCoord4i GLEW_GET_FUN(__glewMultiTexCoord4i)
-#define glMultiTexCoord4iv GLEW_GET_FUN(__glewMultiTexCoord4iv)
-#define glMultiTexCoord4s GLEW_GET_FUN(__glewMultiTexCoord4s)
-#define glMultiTexCoord4sv GLEW_GET_FUN(__glewMultiTexCoord4sv)
-#define glSampleCoverage GLEW_GET_FUN(__glewSampleCoverage)
-
-#define GLEW_VERSION_1_3 GLEW_GET_VAR(__GLEW_VERSION_1_3)
-
-#endif /* GL_VERSION_1_3 */
-
-/* ----------------------------- GL_VERSION_1_4 ---------------------------- */
-
-#ifndef GL_VERSION_1_4
-#define GL_VERSION_1_4 1
-
-#define GL_BLEND_DST_RGB 0x80C8
-#define GL_BLEND_SRC_RGB 0x80C9
-#define GL_BLEND_DST_ALPHA 0x80CA
-#define GL_BLEND_SRC_ALPHA 0x80CB
-#define GL_POINT_SIZE_MIN 0x8126
-#define GL_POINT_SIZE_MAX 0x8127
-#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
-#define GL_POINT_DISTANCE_ATTENUATION 0x8129
-#define GL_GENERATE_MIPMAP 0x8191
-#define GL_GENERATE_MIPMAP_HINT 0x8192
-#define GL_DEPTH_COMPONENT16 0x81A5
-#define GL_DEPTH_COMPONENT24 0x81A6
-#define GL_DEPTH_COMPONENT32 0x81A7
-#define GL_MIRRORED_REPEAT 0x8370
-#define GL_FOG_COORDINATE_SOURCE 0x8450
-#define GL_FOG_COORDINATE 0x8451
-#define GL_FRAGMENT_DEPTH 0x8452
-#define GL_CURRENT_FOG_COORDINATE 0x8453
-#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
-#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
-#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
-#define GL_FOG_COORDINATE_ARRAY 0x8457
-#define GL_COLOR_SUM 0x8458
-#define GL_CURRENT_SECONDARY_COLOR 0x8459
-#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
-#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
-#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
-#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
-#define GL_SECONDARY_COLOR_ARRAY 0x845E
-#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
-#define GL_TEXTURE_FILTER_CONTROL 0x8500
-#define GL_TEXTURE_LOD_BIAS 0x8501
-#define GL_INCR_WRAP 0x8507
-#define GL_DECR_WRAP 0x8508
-#define GL_TEXTURE_DEPTH_SIZE 0x884A
-#define GL_DEPTH_TEXTURE_MODE 0x884B
-#define GL_TEXTURE_COMPARE_MODE 0x884C
-#define GL_TEXTURE_COMPARE_FUNC 0x884D
-#define GL_COMPARE_R_TO_TEXTURE 0x884E
-
-typedef void (GLAPIENTRY * PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONPROC) (GLenum mode);
-typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDDPROC) (GLdouble coord);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDFPROC) (GLfloat coord);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
-typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
-typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount);
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, GLint *params);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVPROC) (const GLdouble *p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVPROC) (const GLfloat *p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVPROC) (const GLint *p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVPROC) (const GLshort *p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVPROC) (const GLdouble *p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVPROC) (const GLfloat *p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVPROC) (const GLint *p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVPROC) (const GLshort *p);
-
-#define glBlendColor GLEW_GET_FUN(__glewBlendColor)
-#define glBlendEquation GLEW_GET_FUN(__glewBlendEquation)
-#define glBlendFuncSeparate GLEW_GET_FUN(__glewBlendFuncSeparate)
-#define glFogCoordPointer GLEW_GET_FUN(__glewFogCoordPointer)
-#define glFogCoordd GLEW_GET_FUN(__glewFogCoordd)
-#define glFogCoorddv GLEW_GET_FUN(__glewFogCoorddv)
-#define glFogCoordf GLEW_GET_FUN(__glewFogCoordf)
-#define glFogCoordfv GLEW_GET_FUN(__glewFogCoordfv)
-#define glMultiDrawArrays GLEW_GET_FUN(__glewMultiDrawArrays)
-#define glMultiDrawElements GLEW_GET_FUN(__glewMultiDrawElements)
-#define glPointParameterf GLEW_GET_FUN(__glewPointParameterf)
-#define glPointParameterfv GLEW_GET_FUN(__glewPointParameterfv)
-#define glPointParameteri GLEW_GET_FUN(__glewPointParameteri)
-#define glPointParameteriv GLEW_GET_FUN(__glewPointParameteriv)
-#define glSecondaryColor3b GLEW_GET_FUN(__glewSecondaryColor3b)
-#define glSecondaryColor3bv GLEW_GET_FUN(__glewSecondaryColor3bv)
-#define glSecondaryColor3d GLEW_GET_FUN(__glewSecondaryColor3d)
-#define glSecondaryColor3dv GLEW_GET_FUN(__glewSecondaryColor3dv)
-#define glSecondaryColor3f GLEW_GET_FUN(__glewSecondaryColor3f)
-#define glSecondaryColor3fv GLEW_GET_FUN(__glewSecondaryColor3fv)
-#define glSecondaryColor3i GLEW_GET_FUN(__glewSecondaryColor3i)
-#define glSecondaryColor3iv GLEW_GET_FUN(__glewSecondaryColor3iv)
-#define glSecondaryColor3s GLEW_GET_FUN(__glewSecondaryColor3s)
-#define glSecondaryColor3sv GLEW_GET_FUN(__glewSecondaryColor3sv)
-#define glSecondaryColor3ub GLEW_GET_FUN(__glewSecondaryColor3ub)
-#define glSecondaryColor3ubv GLEW_GET_FUN(__glewSecondaryColor3ubv)
-#define glSecondaryColor3ui GLEW_GET_FUN(__glewSecondaryColor3ui)
-#define glSecondaryColor3uiv GLEW_GET_FUN(__glewSecondaryColor3uiv)
-#define glSecondaryColor3us GLEW_GET_FUN(__glewSecondaryColor3us)
-#define glSecondaryColor3usv GLEW_GET_FUN(__glewSecondaryColor3usv)
-#define glSecondaryColorPointer GLEW_GET_FUN(__glewSecondaryColorPointer)
-#define glWindowPos2d GLEW_GET_FUN(__glewWindowPos2d)
-#define glWindowPos2dv GLEW_GET_FUN(__glewWindowPos2dv)
-#define glWindowPos2f GLEW_GET_FUN(__glewWindowPos2f)
-#define glWindowPos2fv GLEW_GET_FUN(__glewWindowPos2fv)
-#define glWindowPos2i GLEW_GET_FUN(__glewWindowPos2i)
-#define glWindowPos2iv GLEW_GET_FUN(__glewWindowPos2iv)
-#define glWindowPos2s GLEW_GET_FUN(__glewWindowPos2s)
-#define glWindowPos2sv GLEW_GET_FUN(__glewWindowPos2sv)
-#define glWindowPos3d GLEW_GET_FUN(__glewWindowPos3d)
-#define glWindowPos3dv GLEW_GET_FUN(__glewWindowPos3dv)
-#define glWindowPos3f GLEW_GET_FUN(__glewWindowPos3f)
-#define glWindowPos3fv GLEW_GET_FUN(__glewWindowPos3fv)
-#define glWindowPos3i GLEW_GET_FUN(__glewWindowPos3i)
-#define glWindowPos3iv GLEW_GET_FUN(__glewWindowPos3iv)
-#define glWindowPos3s GLEW_GET_FUN(__glewWindowPos3s)
-#define glWindowPos3sv GLEW_GET_FUN(__glewWindowPos3sv)
-
-#define GLEW_VERSION_1_4 GLEW_GET_VAR(__GLEW_VERSION_1_4)
-
-#endif /* GL_VERSION_1_4 */
-
-/* ----------------------------- GL_VERSION_1_5 ---------------------------- */
-
-#ifndef GL_VERSION_1_5
-#define GL_VERSION_1_5 1
-
-#define GL_FOG_COORD_SRC GL_FOG_COORDINATE_SOURCE
-#define GL_FOG_COORD GL_FOG_COORDINATE
-#define GL_FOG_COORD_ARRAY GL_FOG_COORDINATE_ARRAY
-#define GL_SRC0_RGB GL_SOURCE0_RGB
-#define GL_FOG_COORD_ARRAY_POINTER GL_FOG_COORDINATE_ARRAY_POINTER
-#define GL_FOG_COORD_ARRAY_TYPE GL_FOG_COORDINATE_ARRAY_TYPE
-#define GL_SRC1_ALPHA GL_SOURCE1_ALPHA
-#define GL_CURRENT_FOG_COORD GL_CURRENT_FOG_COORDINATE
-#define GL_FOG_COORD_ARRAY_STRIDE GL_FOG_COORDINATE_ARRAY_STRIDE
-#define GL_SRC0_ALPHA GL_SOURCE0_ALPHA
-#define GL_SRC1_RGB GL_SOURCE1_RGB
-#define GL_FOG_COORD_ARRAY_BUFFER_BINDING GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
-#define GL_SRC2_ALPHA GL_SOURCE2_ALPHA
-#define GL_SRC2_RGB GL_SOURCE2_RGB
-#define GL_BUFFER_SIZE 0x8764
-#define GL_BUFFER_USAGE 0x8765
-#define GL_QUERY_COUNTER_BITS 0x8864
-#define GL_CURRENT_QUERY 0x8865
-#define GL_QUERY_RESULT 0x8866
-#define GL_QUERY_RESULT_AVAILABLE 0x8867
-#define GL_ARRAY_BUFFER 0x8892
-#define GL_ELEMENT_ARRAY_BUFFER 0x8893
-#define GL_ARRAY_BUFFER_BINDING 0x8894
-#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
-#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
-#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
-#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
-#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
-#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
-#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
-#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
-#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
-#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
-#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
-#define GL_READ_ONLY 0x88B8
-#define GL_WRITE_ONLY 0x88B9
-#define GL_READ_WRITE 0x88BA
-#define GL_BUFFER_ACCESS 0x88BB
-#define GL_BUFFER_MAPPED 0x88BC
-#define GL_BUFFER_MAP_POINTER 0x88BD
-#define GL_STREAM_DRAW 0x88E0
-#define GL_STREAM_READ 0x88E1
-#define GL_STREAM_COPY 0x88E2
-#define GL_STATIC_DRAW 0x88E4
-#define GL_STATIC_READ 0x88E5
-#define GL_STATIC_COPY 0x88E6
-#define GL_DYNAMIC_DRAW 0x88E8
-#define GL_DYNAMIC_READ 0x88E9
-#define GL_DYNAMIC_COPY 0x88EA
-#define GL_SAMPLES_PASSED 0x8914
-
-typedef ptrdiff_t GLsizeiptr;
-typedef ptrdiff_t GLintptr;
-
-typedef void (GLAPIENTRY * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
-typedef void (GLAPIENTRY * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
-typedef void (GLAPIENTRY * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
-typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
-typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint* buffers);
-typedef void (GLAPIENTRY * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLENDQUERYPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint* buffers);
-typedef void (GLAPIENTRY * PFNGLGENQUERIESPROC) (GLsizei n, GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid** params);
-typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint* params);
-typedef void (GLAPIENTRY * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERPROC) (GLuint buffer);
-typedef GLboolean (GLAPIENTRY * PFNGLISQUERYPROC) (GLuint id);
-typedef GLvoid* (GLAPIENTRY * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
-typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERPROC) (GLenum target);
-
-#define glBeginQuery GLEW_GET_FUN(__glewBeginQuery)
-#define glBindBuffer GLEW_GET_FUN(__glewBindBuffer)
-#define glBufferData GLEW_GET_FUN(__glewBufferData)
-#define glBufferSubData GLEW_GET_FUN(__glewBufferSubData)
-#define glDeleteBuffers GLEW_GET_FUN(__glewDeleteBuffers)
-#define glDeleteQueries GLEW_GET_FUN(__glewDeleteQueries)
-#define glEndQuery GLEW_GET_FUN(__glewEndQuery)
-#define glGenBuffers GLEW_GET_FUN(__glewGenBuffers)
-#define glGenQueries GLEW_GET_FUN(__glewGenQueries)
-#define glGetBufferParameteriv GLEW_GET_FUN(__glewGetBufferParameteriv)
-#define glGetBufferPointerv GLEW_GET_FUN(__glewGetBufferPointerv)
-#define glGetBufferSubData GLEW_GET_FUN(__glewGetBufferSubData)
-#define glGetQueryObjectiv GLEW_GET_FUN(__glewGetQueryObjectiv)
-#define glGetQueryObjectuiv GLEW_GET_FUN(__glewGetQueryObjectuiv)
-#define glGetQueryiv GLEW_GET_FUN(__glewGetQueryiv)
-#define glIsBuffer GLEW_GET_FUN(__glewIsBuffer)
-#define glIsQuery GLEW_GET_FUN(__glewIsQuery)
-#define glMapBuffer GLEW_GET_FUN(__glewMapBuffer)
-#define glUnmapBuffer GLEW_GET_FUN(__glewUnmapBuffer)
-
-#define GLEW_VERSION_1_5 GLEW_GET_VAR(__GLEW_VERSION_1_5)
-
-#endif /* GL_VERSION_1_5 */
-
-/* ----------------------------- GL_VERSION_2_0 ---------------------------- */
-
-#ifndef GL_VERSION_2_0
-#define GL_VERSION_2_0 1
-
-#define GL_BLEND_EQUATION_RGB GL_BLEND_EQUATION
-#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
-#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
-#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
-#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
-#define GL_CURRENT_VERTEX_ATTRIB 0x8626
-#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
-#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
-#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
-#define GL_STENCIL_BACK_FUNC 0x8800
-#define GL_STENCIL_BACK_FAIL 0x8801
-#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
-#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
-#define GL_MAX_DRAW_BUFFERS 0x8824
-#define GL_DRAW_BUFFER0 0x8825
-#define GL_DRAW_BUFFER1 0x8826
-#define GL_DRAW_BUFFER2 0x8827
-#define GL_DRAW_BUFFER3 0x8828
-#define GL_DRAW_BUFFER4 0x8829
-#define GL_DRAW_BUFFER5 0x882A
-#define GL_DRAW_BUFFER6 0x882B
-#define GL_DRAW_BUFFER7 0x882C
-#define GL_DRAW_BUFFER8 0x882D
-#define GL_DRAW_BUFFER9 0x882E
-#define GL_DRAW_BUFFER10 0x882F
-#define GL_DRAW_BUFFER11 0x8830
-#define GL_DRAW_BUFFER12 0x8831
-#define GL_DRAW_BUFFER13 0x8832
-#define GL_DRAW_BUFFER14 0x8833
-#define GL_DRAW_BUFFER15 0x8834
-#define GL_BLEND_EQUATION_ALPHA 0x883D
-#define GL_POINT_SPRITE 0x8861
-#define GL_COORD_REPLACE 0x8862
-#define GL_MAX_VERTEX_ATTRIBS 0x8869
-#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
-#define GL_MAX_TEXTURE_COORDS 0x8871
-#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
-#define GL_FRAGMENT_SHADER 0x8B30
-#define GL_VERTEX_SHADER 0x8B31
-#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
-#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
-#define GL_MAX_VARYING_FLOATS 0x8B4B
-#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
-#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
-#define GL_SHADER_TYPE 0x8B4F
-#define GL_FLOAT_VEC2 0x8B50
-#define GL_FLOAT_VEC3 0x8B51
-#define GL_FLOAT_VEC4 0x8B52
-#define GL_INT_VEC2 0x8B53
-#define GL_INT_VEC3 0x8B54
-#define GL_INT_VEC4 0x8B55
-#define GL_BOOL 0x8B56
-#define GL_BOOL_VEC2 0x8B57
-#define GL_BOOL_VEC3 0x8B58
-#define GL_BOOL_VEC4 0x8B59
-#define GL_FLOAT_MAT2 0x8B5A
-#define GL_FLOAT_MAT3 0x8B5B
-#define GL_FLOAT_MAT4 0x8B5C
-#define GL_SAMPLER_1D 0x8B5D
-#define GL_SAMPLER_2D 0x8B5E
-#define GL_SAMPLER_3D 0x8B5F
-#define GL_SAMPLER_CUBE 0x8B60
-#define GL_SAMPLER_1D_SHADOW 0x8B61
-#define GL_SAMPLER_2D_SHADOW 0x8B62
-#define GL_DELETE_STATUS 0x8B80
-#define GL_COMPILE_STATUS 0x8B81
-#define GL_LINK_STATUS 0x8B82
-#define GL_VALIDATE_STATUS 0x8B83
-#define GL_INFO_LOG_LENGTH 0x8B84
-#define GL_ATTACHED_SHADERS 0x8B85
-#define GL_ACTIVE_UNIFORMS 0x8B86
-#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
-#define GL_SHADER_SOURCE_LENGTH 0x8B88
-#define GL_ACTIVE_ATTRIBUTES 0x8B89
-#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
-#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
-#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
-#define GL_CURRENT_PROGRAM 0x8B8D
-#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
-#define GL_LOWER_LEFT 0x8CA1
-#define GL_UPPER_LEFT 0x8CA2
-#define GL_STENCIL_BACK_REF 0x8CA3
-#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
-#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
-
-typedef char GLchar;
-
-typedef void (GLAPIENTRY * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
-typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar* name);
-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum, GLenum);
-typedef void (GLAPIENTRY * PFNGLCOMPILESHADERPROC) (GLuint shader);
-typedef GLuint (GLAPIENTRY * PFNGLCREATEPROGRAMPROC) (void);
-typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROC) (GLenum type);
-typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMPROC) (GLuint program);
-typedef void (GLAPIENTRY * PFNGLDELETESHADERPROC) (GLuint shader);
-typedef void (GLAPIENTRY * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
-typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint);
-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum* bufs);
-typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint);
-typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
-typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
-typedef void (GLAPIENTRY * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
-typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar* name);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint* param);
-typedef void (GLAPIENTRY * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
-typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEPROC) (GLint obj, GLsizei maxLength, GLsizei* length, GLchar* source);
-typedef void (GLAPIENTRY * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint* param);
-typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONPROC) (GLint programObj, const GLchar* name);
-typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint, GLenum, GLvoid*);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVPROC) (GLuint, GLenum, GLdouble*);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVPROC) (GLuint, GLenum, GLfloat*);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVPROC) (GLuint, GLenum, GLint*);
-typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMPROC) (GLuint program);
-typedef GLboolean (GLAPIENTRY * PFNGLISSHADERPROC) (GLuint shader);
-typedef void (GLAPIENTRY * PFNGLLINKPROGRAMPROC) (GLuint program);
-typedef void (GLAPIENTRY * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar** strings, const GLint* lengths);
-typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
-typedef void (GLAPIENTRY * PFNGLSTENCILMASKSEPARATEPROC) (GLenum, GLuint);
-typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUSEPROGRAMPROC) (GLuint program);
-typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMPROC) (GLuint program);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
-
-#define glAttachShader GLEW_GET_FUN(__glewAttachShader)
-#define glBindAttribLocation GLEW_GET_FUN(__glewBindAttribLocation)
-#define glBlendEquationSeparate GLEW_GET_FUN(__glewBlendEquationSeparate)
-#define glCompileShader GLEW_GET_FUN(__glewCompileShader)
-#define glCreateProgram GLEW_GET_FUN(__glewCreateProgram)
-#define glCreateShader GLEW_GET_FUN(__glewCreateShader)
-#define glDeleteProgram GLEW_GET_FUN(__glewDeleteProgram)
-#define glDeleteShader GLEW_GET_FUN(__glewDeleteShader)
-#define glDetachShader GLEW_GET_FUN(__glewDetachShader)
-#define glDisableVertexAttribArray GLEW_GET_FUN(__glewDisableVertexAttribArray)
-#define glDrawBuffers GLEW_GET_FUN(__glewDrawBuffers)
-#define glEnableVertexAttribArray GLEW_GET_FUN(__glewEnableVertexAttribArray)
-#define glGetActiveAttrib GLEW_GET_FUN(__glewGetActiveAttrib)
-#define glGetActiveUniform GLEW_GET_FUN(__glewGetActiveUniform)
-#define glGetAttachedShaders GLEW_GET_FUN(__glewGetAttachedShaders)
-#define glGetAttribLocation GLEW_GET_FUN(__glewGetAttribLocation)
-#define glGetProgramInfoLog GLEW_GET_FUN(__glewGetProgramInfoLog)
-#define glGetProgramiv GLEW_GET_FUN(__glewGetProgramiv)
-#define glGetShaderInfoLog GLEW_GET_FUN(__glewGetShaderInfoLog)
-#define glGetShaderSource GLEW_GET_FUN(__glewGetShaderSource)
-#define glGetShaderiv GLEW_GET_FUN(__glewGetShaderiv)
-#define glGetUniformLocation GLEW_GET_FUN(__glewGetUniformLocation)
-#define glGetUniformfv GLEW_GET_FUN(__glewGetUniformfv)
-#define glGetUniformiv GLEW_GET_FUN(__glewGetUniformiv)
-#define glGetVertexAttribPointerv GLEW_GET_FUN(__glewGetVertexAttribPointerv)
-#define glGetVertexAttribdv GLEW_GET_FUN(__glewGetVertexAttribdv)
-#define glGetVertexAttribfv GLEW_GET_FUN(__glewGetVertexAttribfv)
-#define glGetVertexAttribiv GLEW_GET_FUN(__glewGetVertexAttribiv)
-#define glIsProgram GLEW_GET_FUN(__glewIsProgram)
-#define glIsShader GLEW_GET_FUN(__glewIsShader)
-#define glLinkProgram GLEW_GET_FUN(__glewLinkProgram)
-#define glShaderSource GLEW_GET_FUN(__glewShaderSource)
-#define glStencilFuncSeparate GLEW_GET_FUN(__glewStencilFuncSeparate)
-#define glStencilMaskSeparate GLEW_GET_FUN(__glewStencilMaskSeparate)
-#define glStencilOpSeparate GLEW_GET_FUN(__glewStencilOpSeparate)
-#define glUniform1f GLEW_GET_FUN(__glewUniform1f)
-#define glUniform1fv GLEW_GET_FUN(__glewUniform1fv)
-#define glUniform1i GLEW_GET_FUN(__glewUniform1i)
-#define glUniform1iv GLEW_GET_FUN(__glewUniform1iv)
-#define glUniform2f GLEW_GET_FUN(__glewUniform2f)
-#define glUniform2fv GLEW_GET_FUN(__glewUniform2fv)
-#define glUniform2i GLEW_GET_FUN(__glewUniform2i)
-#define glUniform2iv GLEW_GET_FUN(__glewUniform2iv)
-#define glUniform3f GLEW_GET_FUN(__glewUniform3f)
-#define glUniform3fv GLEW_GET_FUN(__glewUniform3fv)
-#define glUniform3i GLEW_GET_FUN(__glewUniform3i)
-#define glUniform3iv GLEW_GET_FUN(__glewUniform3iv)
-#define glUniform4f GLEW_GET_FUN(__glewUniform4f)
-#define glUniform4fv GLEW_GET_FUN(__glewUniform4fv)
-#define glUniform4i GLEW_GET_FUN(__glewUniform4i)
-#define glUniform4iv GLEW_GET_FUN(__glewUniform4iv)
-#define glUniformMatrix2fv GLEW_GET_FUN(__glewUniformMatrix2fv)
-#define glUniformMatrix3fv GLEW_GET_FUN(__glewUniformMatrix3fv)
-#define glUniformMatrix4fv GLEW_GET_FUN(__glewUniformMatrix4fv)
-#define glUseProgram GLEW_GET_FUN(__glewUseProgram)
-#define glValidateProgram GLEW_GET_FUN(__glewValidateProgram)
-#define glVertexAttrib1d GLEW_GET_FUN(__glewVertexAttrib1d)
-#define glVertexAttrib1dv GLEW_GET_FUN(__glewVertexAttrib1dv)
-#define glVertexAttrib1f GLEW_GET_FUN(__glewVertexAttrib1f)
-#define glVertexAttrib1fv GLEW_GET_FUN(__glewVertexAttrib1fv)
-#define glVertexAttrib1s GLEW_GET_FUN(__glewVertexAttrib1s)
-#define glVertexAttrib1sv GLEW_GET_FUN(__glewVertexAttrib1sv)
-#define glVertexAttrib2d GLEW_GET_FUN(__glewVertexAttrib2d)
-#define glVertexAttrib2dv GLEW_GET_FUN(__glewVertexAttrib2dv)
-#define glVertexAttrib2f GLEW_GET_FUN(__glewVertexAttrib2f)
-#define glVertexAttrib2fv GLEW_GET_FUN(__glewVertexAttrib2fv)
-#define glVertexAttrib2s GLEW_GET_FUN(__glewVertexAttrib2s)
-#define glVertexAttrib2sv GLEW_GET_FUN(__glewVertexAttrib2sv)
-#define glVertexAttrib3d GLEW_GET_FUN(__glewVertexAttrib3d)
-#define glVertexAttrib3dv GLEW_GET_FUN(__glewVertexAttrib3dv)
-#define glVertexAttrib3f GLEW_GET_FUN(__glewVertexAttrib3f)
-#define glVertexAttrib3fv GLEW_GET_FUN(__glewVertexAttrib3fv)
-#define glVertexAttrib3s GLEW_GET_FUN(__glewVertexAttrib3s)
-#define glVertexAttrib3sv GLEW_GET_FUN(__glewVertexAttrib3sv)
-#define glVertexAttrib4Nbv GLEW_GET_FUN(__glewVertexAttrib4Nbv)
-#define glVertexAttrib4Niv GLEW_GET_FUN(__glewVertexAttrib4Niv)
-#define glVertexAttrib4Nsv GLEW_GET_FUN(__glewVertexAttrib4Nsv)
-#define glVertexAttrib4Nub GLEW_GET_FUN(__glewVertexAttrib4Nub)
-#define glVertexAttrib4Nubv GLEW_GET_FUN(__glewVertexAttrib4Nubv)
-#define glVertexAttrib4Nuiv GLEW_GET_FUN(__glewVertexAttrib4Nuiv)
-#define glVertexAttrib4Nusv GLEW_GET_FUN(__glewVertexAttrib4Nusv)
-#define glVertexAttrib4bv GLEW_GET_FUN(__glewVertexAttrib4bv)
-#define glVertexAttrib4d GLEW_GET_FUN(__glewVertexAttrib4d)
-#define glVertexAttrib4dv GLEW_GET_FUN(__glewVertexAttrib4dv)
-#define glVertexAttrib4f GLEW_GET_FUN(__glewVertexAttrib4f)
-#define glVertexAttrib4fv GLEW_GET_FUN(__glewVertexAttrib4fv)
-#define glVertexAttrib4iv GLEW_GET_FUN(__glewVertexAttrib4iv)
-#define glVertexAttrib4s GLEW_GET_FUN(__glewVertexAttrib4s)
-#define glVertexAttrib4sv GLEW_GET_FUN(__glewVertexAttrib4sv)
-#define glVertexAttrib4ubv GLEW_GET_FUN(__glewVertexAttrib4ubv)
-#define glVertexAttrib4uiv GLEW_GET_FUN(__glewVertexAttrib4uiv)
-#define glVertexAttrib4usv GLEW_GET_FUN(__glewVertexAttrib4usv)
-#define glVertexAttribPointer GLEW_GET_FUN(__glewVertexAttribPointer)
-
-#define GLEW_VERSION_2_0 GLEW_GET_VAR(__GLEW_VERSION_2_0)
-
-#endif /* GL_VERSION_2_0 */
-
-/* ----------------------------- GL_VERSION_2_1 ---------------------------- */
-
-#ifndef GL_VERSION_2_1
-#define GL_VERSION_2_1 1
-
-#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
-#define GL_PIXEL_PACK_BUFFER 0x88EB
-#define GL_PIXEL_UNPACK_BUFFER 0x88EC
-#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
-#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
-#define GL_FLOAT_MAT2x3 0x8B65
-#define GL_FLOAT_MAT2x4 0x8B66
-#define GL_FLOAT_MAT3x2 0x8B67
-#define GL_FLOAT_MAT3x4 0x8B68
-#define GL_FLOAT_MAT4x2 0x8B69
-#define GL_FLOAT_MAT4x3 0x8B6A
-#define GL_SRGB 0x8C40
-#define GL_SRGB8 0x8C41
-#define GL_SRGB_ALPHA 0x8C42
-#define GL_SRGB8_ALPHA8 0x8C43
-#define GL_SLUMINANCE_ALPHA 0x8C44
-#define GL_SLUMINANCE8_ALPHA8 0x8C45
-#define GL_SLUMINANCE 0x8C46
-#define GL_SLUMINANCE8 0x8C47
-#define GL_COMPRESSED_SRGB 0x8C48
-#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
-#define GL_COMPRESSED_SLUMINANCE 0x8C4A
-#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
-
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
-
-#define glUniformMatrix2x3fv GLEW_GET_FUN(__glewUniformMatrix2x3fv)
-#define glUniformMatrix2x4fv GLEW_GET_FUN(__glewUniformMatrix2x4fv)
-#define glUniformMatrix3x2fv GLEW_GET_FUN(__glewUniformMatrix3x2fv)
-#define glUniformMatrix3x4fv GLEW_GET_FUN(__glewUniformMatrix3x4fv)
-#define glUniformMatrix4x2fv GLEW_GET_FUN(__glewUniformMatrix4x2fv)
-#define glUniformMatrix4x3fv GLEW_GET_FUN(__glewUniformMatrix4x3fv)
-
-#define GLEW_VERSION_2_1 GLEW_GET_VAR(__GLEW_VERSION_2_1)
-
-#endif /* GL_VERSION_2_1 */
-
-/* -------------------------- GL_3DFX_multisample -------------------------- */
-
-#ifndef GL_3DFX_multisample
-#define GL_3DFX_multisample 1
-
-#define GL_MULTISAMPLE_3DFX 0x86B2
-#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
-#define GL_SAMPLES_3DFX 0x86B4
-#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
-
-#define GLEW_3DFX_multisample GLEW_GET_VAR(__GLEW_3DFX_multisample)
-
-#endif /* GL_3DFX_multisample */
-
-/* ---------------------------- GL_3DFX_tbuffer ---------------------------- */
-
-#ifndef GL_3DFX_tbuffer
-#define GL_3DFX_tbuffer 1
-
-typedef void (GLAPIENTRY * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
-
-#define glTbufferMask3DFX GLEW_GET_FUN(__glewTbufferMask3DFX)
-
-#define GLEW_3DFX_tbuffer GLEW_GET_VAR(__GLEW_3DFX_tbuffer)
-
-#endif /* GL_3DFX_tbuffer */
-
-/* -------------------- GL_3DFX_texture_compression_FXT1 ------------------- */
-
-#ifndef GL_3DFX_texture_compression_FXT1
-#define GL_3DFX_texture_compression_FXT1 1
-
-#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
-#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
-
-#define GLEW_3DFX_texture_compression_FXT1 GLEW_GET_VAR(__GLEW_3DFX_texture_compression_FXT1)
-
-#endif /* GL_3DFX_texture_compression_FXT1 */
-
-/* ------------------------ GL_APPLE_client_storage ------------------------ */
-
-#ifndef GL_APPLE_client_storage
-#define GL_APPLE_client_storage 1
-
-#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
-
-#define GLEW_APPLE_client_storage GLEW_GET_VAR(__GLEW_APPLE_client_storage)
-
-#endif /* GL_APPLE_client_storage */
-
-/* ------------------------- GL_APPLE_element_array ------------------------ */
-
-#ifndef GL_APPLE_element_array
-#define GL_APPLE_element_array 1
-
-#define GL_ELEMENT_ARRAY_APPLE 0x8768
-#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8769
-#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x876A
-
-typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
-typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void* pointer);
-typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);
-typedef void (GLAPIENTRY * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount);
-
-#define glDrawElementArrayAPPLE GLEW_GET_FUN(__glewDrawElementArrayAPPLE)
-#define glDrawRangeElementArrayAPPLE GLEW_GET_FUN(__glewDrawRangeElementArrayAPPLE)
-#define glElementPointerAPPLE GLEW_GET_FUN(__glewElementPointerAPPLE)
-#define glMultiDrawElementArrayAPPLE GLEW_GET_FUN(__glewMultiDrawElementArrayAPPLE)
-#define glMultiDrawRangeElementArrayAPPLE GLEW_GET_FUN(__glewMultiDrawRangeElementArrayAPPLE)
-
-#define GLEW_APPLE_element_array GLEW_GET_VAR(__GLEW_APPLE_element_array)
-
-#endif /* GL_APPLE_element_array */
-
-/* ----------------------------- GL_APPLE_fence ---------------------------- */
-
-#ifndef GL_APPLE_fence
-#define GL_APPLE_fence 1
-
-#define GL_DRAW_PIXELS_APPLE 0x8A0A
-#define GL_FENCE_APPLE 0x8A0B
-
-typedef void (GLAPIENTRY * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint* fences);
-typedef void (GLAPIENTRY * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
-typedef void (GLAPIENTRY * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
-typedef void (GLAPIENTRY * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint* fences);
-typedef GLboolean (GLAPIENTRY * PFNGLISFENCEAPPLEPROC) (GLuint fence);
-typedef void (GLAPIENTRY * PFNGLSETFENCEAPPLEPROC) (GLuint fence);
-typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
-typedef GLboolean (GLAPIENTRY * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
-
-#define glDeleteFencesAPPLE GLEW_GET_FUN(__glewDeleteFencesAPPLE)
-#define glFinishFenceAPPLE GLEW_GET_FUN(__glewFinishFenceAPPLE)
-#define glFinishObjectAPPLE GLEW_GET_FUN(__glewFinishObjectAPPLE)
-#define glGenFencesAPPLE GLEW_GET_FUN(__glewGenFencesAPPLE)
-#define glIsFenceAPPLE GLEW_GET_FUN(__glewIsFenceAPPLE)
-#define glSetFenceAPPLE GLEW_GET_FUN(__glewSetFenceAPPLE)
-#define glTestFenceAPPLE GLEW_GET_FUN(__glewTestFenceAPPLE)
-#define glTestObjectAPPLE GLEW_GET_FUN(__glewTestObjectAPPLE)
-
-#define GLEW_APPLE_fence GLEW_GET_VAR(__GLEW_APPLE_fence)
-
-#endif /* GL_APPLE_fence */
-
-/* ------------------------- GL_APPLE_float_pixels ------------------------- */
-
-#ifndef GL_APPLE_float_pixels
-#define GL_APPLE_float_pixels 1
-
-#define GL_HALF_APPLE 0x140B
-#define GL_RGBA_FLOAT32_APPLE 0x8814
-#define GL_RGB_FLOAT32_APPLE 0x8815
-#define GL_ALPHA_FLOAT32_APPLE 0x8816
-#define GL_INTENSITY_FLOAT32_APPLE 0x8817
-#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
-#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
-#define GL_RGBA_FLOAT16_APPLE 0x881A
-#define GL_RGB_FLOAT16_APPLE 0x881B
-#define GL_ALPHA_FLOAT16_APPLE 0x881C
-#define GL_INTENSITY_FLOAT16_APPLE 0x881D
-#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
-#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
-#define GL_COLOR_FLOAT_APPLE 0x8A0F
-
-#define GLEW_APPLE_float_pixels GLEW_GET_VAR(__GLEW_APPLE_float_pixels)
-
-#endif /* GL_APPLE_float_pixels */
-
-/* ---------------------- GL_APPLE_flush_buffer_range ---------------------- */
-
-#ifndef GL_APPLE_flush_buffer_range
-#define GL_APPLE_flush_buffer_range 1
-
-#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
-#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
-
-typedef void (GLAPIENTRY * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
-
-#define glBufferParameteriAPPLE GLEW_GET_FUN(__glewBufferParameteriAPPLE)
-#define glFlushMappedBufferRangeAPPLE GLEW_GET_FUN(__glewFlushMappedBufferRangeAPPLE)
-
-#define GLEW_APPLE_flush_buffer_range GLEW_GET_VAR(__GLEW_APPLE_flush_buffer_range)
-
-#endif /* GL_APPLE_flush_buffer_range */
-
-/* ------------------------- GL_APPLE_pixel_buffer ------------------------- */
-
-#ifndef GL_APPLE_pixel_buffer
-#define GL_APPLE_pixel_buffer 1
-
-#define GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE 0x8A10
-
-#define GLEW_APPLE_pixel_buffer GLEW_GET_VAR(__GLEW_APPLE_pixel_buffer)
-
-#endif /* GL_APPLE_pixel_buffer */
-
-/* ------------------------ GL_APPLE_specular_vector ----------------------- */
-
-#ifndef GL_APPLE_specular_vector
-#define GL_APPLE_specular_vector 1
-
-#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
-
-#define GLEW_APPLE_specular_vector GLEW_GET_VAR(__GLEW_APPLE_specular_vector)
-
-#endif /* GL_APPLE_specular_vector */
-
-/* ------------------------- GL_APPLE_texture_range ------------------------ */
-
-#ifndef GL_APPLE_texture_range
-#define GL_APPLE_texture_range 1
-
-#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
-#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
-#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
-#define GL_STORAGE_PRIVATE_APPLE 0x85BD
-#define GL_STORAGE_CACHED_APPLE 0x85BE
-#define GL_STORAGE_SHARED_APPLE 0x85BF
-
-typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid **params);
-typedef void (GLAPIENTRY * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, GLvoid *pointer);
-
-#define glGetTexParameterPointervAPPLE GLEW_GET_FUN(__glewGetTexParameterPointervAPPLE)
-#define glTextureRangeAPPLE GLEW_GET_FUN(__glewTextureRangeAPPLE)
-
-#define GLEW_APPLE_texture_range GLEW_GET_VAR(__GLEW_APPLE_texture_range)
-
-#endif /* GL_APPLE_texture_range */
-
-/* ------------------------ GL_APPLE_transform_hint ------------------------ */
-
-#ifndef GL_APPLE_transform_hint
-#define GL_APPLE_transform_hint 1
-
-#define GL_TRANSFORM_HINT_APPLE 0x85B1
-
-#define GLEW_APPLE_transform_hint GLEW_GET_VAR(__GLEW_APPLE_transform_hint)
-
-#endif /* GL_APPLE_transform_hint */
-
-/* ---------------------- GL_APPLE_vertex_array_object --------------------- */
-
-#ifndef GL_APPLE_vertex_array_object
-#define GL_APPLE_vertex_array_object 1
-
-#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
-
-typedef void (GLAPIENTRY * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
-typedef void (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
-typedef void (GLAPIENTRY * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);
-typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
-
-#define glBindVertexArrayAPPLE GLEW_GET_FUN(__glewBindVertexArrayAPPLE)
-#define glDeleteVertexArraysAPPLE GLEW_GET_FUN(__glewDeleteVertexArraysAPPLE)
-#define glGenVertexArraysAPPLE GLEW_GET_FUN(__glewGenVertexArraysAPPLE)
-#define glIsVertexArrayAPPLE GLEW_GET_FUN(__glewIsVertexArrayAPPLE)
-
-#define GLEW_APPLE_vertex_array_object GLEW_GET_VAR(__GLEW_APPLE_vertex_array_object)
-
-#endif /* GL_APPLE_vertex_array_object */
-
-/* ---------------------- GL_APPLE_vertex_array_range ---------------------- */
-
-#ifndef GL_APPLE_vertex_array_range
-#define GL_APPLE_vertex_array_range 1
-
-#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
-#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
-#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
-#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE 0x8520
-#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
-#define GL_STORAGE_CACHED_APPLE 0x85BE
-#define GL_STORAGE_SHARED_APPLE 0x85BF
-
-typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void* pointer);
-typedef void (GLAPIENTRY * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void* pointer);
-
-#define glFlushVertexArrayRangeAPPLE GLEW_GET_FUN(__glewFlushVertexArrayRangeAPPLE)
-#define glVertexArrayParameteriAPPLE GLEW_GET_FUN(__glewVertexArrayParameteriAPPLE)
-#define glVertexArrayRangeAPPLE GLEW_GET_FUN(__glewVertexArrayRangeAPPLE)
-
-#define GLEW_APPLE_vertex_array_range GLEW_GET_VAR(__GLEW_APPLE_vertex_array_range)
-
-#endif /* GL_APPLE_vertex_array_range */
-
-/* --------------------------- GL_APPLE_ycbcr_422 -------------------------- */
-
-#ifndef GL_APPLE_ycbcr_422
-#define GL_APPLE_ycbcr_422 1
-
-#define GL_YCBCR_422_APPLE 0x85B9
-#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
-#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
-
-#define GLEW_APPLE_ycbcr_422 GLEW_GET_VAR(__GLEW_APPLE_ycbcr_422)
-
-#endif /* GL_APPLE_ycbcr_422 */
-
-/* ----------------------- GL_ARB_color_buffer_float ----------------------- */
-
-#ifndef GL_ARB_color_buffer_float
-#define GL_ARB_color_buffer_float 1
-
-#define GL_RGBA_FLOAT_MODE_ARB 0x8820
-#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
-#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
-#define GL_CLAMP_READ_COLOR_ARB 0x891C
-#define GL_FIXED_ONLY_ARB 0x891D
-
-typedef void (GLAPIENTRY * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
-
-#define glClampColorARB GLEW_GET_FUN(__glewClampColorARB)
-
-#define GLEW_ARB_color_buffer_float GLEW_GET_VAR(__GLEW_ARB_color_buffer_float)
-
-#endif /* GL_ARB_color_buffer_float */
-
-/* -------------------------- GL_ARB_depth_texture ------------------------- */
-
-#ifndef GL_ARB_depth_texture
-#define GL_ARB_depth_texture 1
-
-#define GL_DEPTH_COMPONENT16_ARB 0x81A5
-#define GL_DEPTH_COMPONENT24_ARB 0x81A6
-#define GL_DEPTH_COMPONENT32_ARB 0x81A7
-#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
-#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
-
-#define GLEW_ARB_depth_texture GLEW_GET_VAR(__GLEW_ARB_depth_texture)
-
-#endif /* GL_ARB_depth_texture */
-
-/* -------------------------- GL_ARB_draw_buffers -------------------------- */
-
-#ifndef GL_ARB_draw_buffers
-#define GL_ARB_draw_buffers 1
-
-#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
-#define GL_DRAW_BUFFER0_ARB 0x8825
-#define GL_DRAW_BUFFER1_ARB 0x8826
-#define GL_DRAW_BUFFER2_ARB 0x8827
-#define GL_DRAW_BUFFER3_ARB 0x8828
-#define GL_DRAW_BUFFER4_ARB 0x8829
-#define GL_DRAW_BUFFER5_ARB 0x882A
-#define GL_DRAW_BUFFER6_ARB 0x882B
-#define GL_DRAW_BUFFER7_ARB 0x882C
-#define GL_DRAW_BUFFER8_ARB 0x882D
-#define GL_DRAW_BUFFER9_ARB 0x882E
-#define GL_DRAW_BUFFER10_ARB 0x882F
-#define GL_DRAW_BUFFER11_ARB 0x8830
-#define GL_DRAW_BUFFER12_ARB 0x8831
-#define GL_DRAW_BUFFER13_ARB 0x8832
-#define GL_DRAW_BUFFER14_ARB 0x8833
-#define GL_DRAW_BUFFER15_ARB 0x8834
-
-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum* bufs);
-
-#define glDrawBuffersARB GLEW_GET_FUN(__glewDrawBuffersARB)
-
-#define GLEW_ARB_draw_buffers GLEW_GET_VAR(__GLEW_ARB_draw_buffers)
-
-#endif /* GL_ARB_draw_buffers */
-
-/* ------------------------ GL_ARB_fragment_program ------------------------ */
-
-#ifndef GL_ARB_fragment_program
-#define GL_ARB_fragment_program 1
-
-#define GL_FRAGMENT_PROGRAM_ARB 0x8804
-#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
-#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
-#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
-#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
-#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
-#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
-#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
-#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
-#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
-#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
-#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
-#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
-#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
-#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
-
-#define GLEW_ARB_fragment_program GLEW_GET_VAR(__GLEW_ARB_fragment_program)
-
-#endif /* GL_ARB_fragment_program */
-
-/* --------------------- GL_ARB_fragment_program_shadow -------------------- */
-
-#ifndef GL_ARB_fragment_program_shadow
-#define GL_ARB_fragment_program_shadow 1
-
-#define GLEW_ARB_fragment_program_shadow GLEW_GET_VAR(__GLEW_ARB_fragment_program_shadow)
-
-#endif /* GL_ARB_fragment_program_shadow */
-
-/* ------------------------- GL_ARB_fragment_shader ------------------------ */
-
-#ifndef GL_ARB_fragment_shader
-#define GL_ARB_fragment_shader 1
-
-#define GL_FRAGMENT_SHADER_ARB 0x8B30
-#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
-#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
-
-#define GLEW_ARB_fragment_shader GLEW_GET_VAR(__GLEW_ARB_fragment_shader)
-
-#endif /* GL_ARB_fragment_shader */
-
-/* ------------------------ GL_ARB_half_float_pixel ------------------------ */
-
-#ifndef GL_ARB_half_float_pixel
-#define GL_ARB_half_float_pixel 1
-
-#define GL_HALF_FLOAT_ARB 0x140B
-
-#define GLEW_ARB_half_float_pixel GLEW_GET_VAR(__GLEW_ARB_half_float_pixel)
-
-#endif /* GL_ARB_half_float_pixel */
-
-/* ----------------------------- GL_ARB_imaging ---------------------------- */
-
-#ifndef GL_ARB_imaging
-#define GL_ARB_imaging 1
-
-#define GL_CONSTANT_COLOR 0x8001
-#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
-#define GL_CONSTANT_ALPHA 0x8003
-#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
-#define GL_BLEND_COLOR 0x8005
-#define GL_FUNC_ADD 0x8006
-#define GL_MIN 0x8007
-#define GL_MAX 0x8008
-#define GL_BLEND_EQUATION 0x8009
-#define GL_FUNC_SUBTRACT 0x800A
-#define GL_FUNC_REVERSE_SUBTRACT 0x800B
-#define GL_CONVOLUTION_1D 0x8010
-#define GL_CONVOLUTION_2D 0x8011
-#define GL_SEPARABLE_2D 0x8012
-#define GL_CONVOLUTION_BORDER_MODE 0x8013
-#define GL_CONVOLUTION_FILTER_SCALE 0x8014
-#define GL_CONVOLUTION_FILTER_BIAS 0x8015
-#define GL_REDUCE 0x8016
-#define GL_CONVOLUTION_FORMAT 0x8017
-#define GL_CONVOLUTION_WIDTH 0x8018
-#define GL_CONVOLUTION_HEIGHT 0x8019
-#define GL_MAX_CONVOLUTION_WIDTH 0x801A
-#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
-#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
-#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
-#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
-#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
-#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
-#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
-#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
-#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
-#define GL_HISTOGRAM 0x8024
-#define GL_PROXY_HISTOGRAM 0x8025
-#define GL_HISTOGRAM_WIDTH 0x8026
-#define GL_HISTOGRAM_FORMAT 0x8027
-#define GL_HISTOGRAM_RED_SIZE 0x8028
-#define GL_HISTOGRAM_GREEN_SIZE 0x8029
-#define GL_HISTOGRAM_BLUE_SIZE 0x802A
-#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
-#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
-#define GL_HISTOGRAM_SINK 0x802D
-#define GL_MINMAX 0x802E
-#define GL_MINMAX_FORMAT 0x802F
-#define GL_MINMAX_SINK 0x8030
-#define GL_TABLE_TOO_LARGE 0x8031
-#define GL_COLOR_MATRIX 0x80B1
-#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
-#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
-#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
-#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
-#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
-#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
-#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
-#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
-#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
-#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
-#define GL_COLOR_TABLE 0x80D0
-#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
-#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
-#define GL_PROXY_COLOR_TABLE 0x80D3
-#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
-#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
-#define GL_COLOR_TABLE_SCALE 0x80D6
-#define GL_COLOR_TABLE_BIAS 0x80D7
-#define GL_COLOR_TABLE_FORMAT 0x80D8
-#define GL_COLOR_TABLE_WIDTH 0x80D9
-#define GL_COLOR_TABLE_RED_SIZE 0x80DA
-#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
-#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
-#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
-#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
-#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
-#define GL_IGNORE_BORDER 0x8150
-#define GL_CONSTANT_BORDER 0x8151
-#define GL_WRAP_BORDER 0x8152
-#define GL_REPLICATE_BORDER 0x8153
-#define GL_CONVOLUTION_BORDER_COLOR 0x8154
-
-typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
-typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (GLAPIENTRY * PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values);
-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
-typedef void (GLAPIENTRY * PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
-typedef void (GLAPIENTRY * PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
-typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLRESETMINMAXPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
-
-#define glColorSubTable GLEW_GET_FUN(__glewColorSubTable)
-#define glColorTable GLEW_GET_FUN(__glewColorTable)
-#define glColorTableParameterfv GLEW_GET_FUN(__glewColorTableParameterfv)
-#define glColorTableParameteriv GLEW_GET_FUN(__glewColorTableParameteriv)
-#define glConvolutionFilter1D GLEW_GET_FUN(__glewConvolutionFilter1D)
-#define glConvolutionFilter2D GLEW_GET_FUN(__glewConvolutionFilter2D)
-#define glConvolutionParameterf GLEW_GET_FUN(__glewConvolutionParameterf)
-#define glConvolutionParameterfv GLEW_GET_FUN(__glewConvolutionParameterfv)
-#define glConvolutionParameteri GLEW_GET_FUN(__glewConvolutionParameteri)
-#define glConvolutionParameteriv GLEW_GET_FUN(__glewConvolutionParameteriv)
-#define glCopyColorSubTable GLEW_GET_FUN(__glewCopyColorSubTable)
-#define glCopyColorTable GLEW_GET_FUN(__glewCopyColorTable)
-#define glCopyConvolutionFilter1D GLEW_GET_FUN(__glewCopyConvolutionFilter1D)
-#define glCopyConvolutionFilter2D GLEW_GET_FUN(__glewCopyConvolutionFilter2D)
-#define glGetColorTable GLEW_GET_FUN(__glewGetColorTable)
-#define glGetColorTableParameterfv GLEW_GET_FUN(__glewGetColorTableParameterfv)
-#define glGetColorTableParameteriv GLEW_GET_FUN(__glewGetColorTableParameteriv)
-#define glGetConvolutionFilter GLEW_GET_FUN(__glewGetConvolutionFilter)
-#define glGetConvolutionParameterfv GLEW_GET_FUN(__glewGetConvolutionParameterfv)
-#define glGetConvolutionParameteriv GLEW_GET_FUN(__glewGetConvolutionParameteriv)
-#define glGetHistogram GLEW_GET_FUN(__glewGetHistogram)
-#define glGetHistogramParameterfv GLEW_GET_FUN(__glewGetHistogramParameterfv)
-#define glGetHistogramParameteriv GLEW_GET_FUN(__glewGetHistogramParameteriv)
-#define glGetMinmax GLEW_GET_FUN(__glewGetMinmax)
-#define glGetMinmaxParameterfv GLEW_GET_FUN(__glewGetMinmaxParameterfv)
-#define glGetMinmaxParameteriv GLEW_GET_FUN(__glewGetMinmaxParameteriv)
-#define glGetSeparableFilter GLEW_GET_FUN(__glewGetSeparableFilter)
-#define glHistogram GLEW_GET_FUN(__glewHistogram)
-#define glMinmax GLEW_GET_FUN(__glewMinmax)
-#define glResetHistogram GLEW_GET_FUN(__glewResetHistogram)
-#define glResetMinmax GLEW_GET_FUN(__glewResetMinmax)
-#define glSeparableFilter2D GLEW_GET_FUN(__glewSeparableFilter2D)
-
-#define GLEW_ARB_imaging GLEW_GET_VAR(__GLEW_ARB_imaging)
-
-#endif /* GL_ARB_imaging */
-
-/* ------------------------- GL_ARB_matrix_palette ------------------------- */
-
-#ifndef GL_ARB_matrix_palette
-#define GL_ARB_matrix_palette 1
-
-#define GL_MATRIX_PALETTE_ARB 0x8840
-#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
-#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
-#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
-#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
-#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
-#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
-#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
-#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
-#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
-
-typedef void (GLAPIENTRY * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, GLubyte *indices);
-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, GLuint *indices);
-typedef void (GLAPIENTRY * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, GLushort *indices);
-
-#define glCurrentPaletteMatrixARB GLEW_GET_FUN(__glewCurrentPaletteMatrixARB)
-#define glMatrixIndexPointerARB GLEW_GET_FUN(__glewMatrixIndexPointerARB)
-#define glMatrixIndexubvARB GLEW_GET_FUN(__glewMatrixIndexubvARB)
-#define glMatrixIndexuivARB GLEW_GET_FUN(__glewMatrixIndexuivARB)
-#define glMatrixIndexusvARB GLEW_GET_FUN(__glewMatrixIndexusvARB)
-
-#define GLEW_ARB_matrix_palette GLEW_GET_VAR(__GLEW_ARB_matrix_palette)
-
-#endif /* GL_ARB_matrix_palette */
-
-/* --------------------------- GL_ARB_multisample -------------------------- */
-
-#ifndef GL_ARB_multisample
-#define GL_ARB_multisample 1
-
-#define GL_MULTISAMPLE_ARB 0x809D
-#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
-#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
-#define GL_SAMPLE_COVERAGE_ARB 0x80A0
-#define GL_SAMPLE_BUFFERS_ARB 0x80A8
-#define GL_SAMPLES_ARB 0x80A9
-#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
-#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
-#define GL_MULTISAMPLE_BIT_ARB 0x20000000
-
-typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
-
-#define glSampleCoverageARB GLEW_GET_FUN(__glewSampleCoverageARB)
-
-#define GLEW_ARB_multisample GLEW_GET_VAR(__GLEW_ARB_multisample)
-
-#endif /* GL_ARB_multisample */
-
-/* -------------------------- GL_ARB_multitexture -------------------------- */
-
-#ifndef GL_ARB_multitexture
-#define GL_ARB_multitexture 1
-
-#define GL_TEXTURE0_ARB 0x84C0
-#define GL_TEXTURE1_ARB 0x84C1
-#define GL_TEXTURE2_ARB 0x84C2
-#define GL_TEXTURE3_ARB 0x84C3
-#define GL_TEXTURE4_ARB 0x84C4
-#define GL_TEXTURE5_ARB 0x84C5
-#define GL_TEXTURE6_ARB 0x84C6
-#define GL_TEXTURE7_ARB 0x84C7
-#define GL_TEXTURE8_ARB 0x84C8
-#define GL_TEXTURE9_ARB 0x84C9
-#define GL_TEXTURE10_ARB 0x84CA
-#define GL_TEXTURE11_ARB 0x84CB
-#define GL_TEXTURE12_ARB 0x84CC
-#define GL_TEXTURE13_ARB 0x84CD
-#define GL_TEXTURE14_ARB 0x84CE
-#define GL_TEXTURE15_ARB 0x84CF
-#define GL_TEXTURE16_ARB 0x84D0
-#define GL_TEXTURE17_ARB 0x84D1
-#define GL_TEXTURE18_ARB 0x84D2
-#define GL_TEXTURE19_ARB 0x84D3
-#define GL_TEXTURE20_ARB 0x84D4
-#define GL_TEXTURE21_ARB 0x84D5
-#define GL_TEXTURE22_ARB 0x84D6
-#define GL_TEXTURE23_ARB 0x84D7
-#define GL_TEXTURE24_ARB 0x84D8
-#define GL_TEXTURE25_ARB 0x84D9
-#define GL_TEXTURE26_ARB 0x84DA
-#define GL_TEXTURE27_ARB 0x84DB
-#define GL_TEXTURE28_ARB 0x84DC
-#define GL_TEXTURE29_ARB 0x84DD
-#define GL_TEXTURE30_ARB 0x84DE
-#define GL_TEXTURE31_ARB 0x84DF
-#define GL_ACTIVE_TEXTURE_ARB 0x84E0
-#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
-#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
-
-typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
-typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
-
-#define glActiveTextureARB GLEW_GET_FUN(__glewActiveTextureARB)
-#define glClientActiveTextureARB GLEW_GET_FUN(__glewClientActiveTextureARB)
-#define glMultiTexCoord1dARB GLEW_GET_FUN(__glewMultiTexCoord1dARB)
-#define glMultiTexCoord1dvARB GLEW_GET_FUN(__glewMultiTexCoord1dvARB)
-#define glMultiTexCoord1fARB GLEW_GET_FUN(__glewMultiTexCoord1fARB)
-#define glMultiTexCoord1fvARB GLEW_GET_FUN(__glewMultiTexCoord1fvARB)
-#define glMultiTexCoord1iARB GLEW_GET_FUN(__glewMultiTexCoord1iARB)
-#define glMultiTexCoord1ivARB GLEW_GET_FUN(__glewMultiTexCoord1ivARB)
-#define glMultiTexCoord1sARB GLEW_GET_FUN(__glewMultiTexCoord1sARB)
-#define glMultiTexCoord1svARB GLEW_GET_FUN(__glewMultiTexCoord1svARB)
-#define glMultiTexCoord2dARB GLEW_GET_FUN(__glewMultiTexCoord2dARB)
-#define glMultiTexCoord2dvARB GLEW_GET_FUN(__glewMultiTexCoord2dvARB)
-#define glMultiTexCoord2fARB GLEW_GET_FUN(__glewMultiTexCoord2fARB)
-#define glMultiTexCoord2fvARB GLEW_GET_FUN(__glewMultiTexCoord2fvARB)
-#define glMultiTexCoord2iARB GLEW_GET_FUN(__glewMultiTexCoord2iARB)
-#define glMultiTexCoord2ivARB GLEW_GET_FUN(__glewMultiTexCoord2ivARB)
-#define glMultiTexCoord2sARB GLEW_GET_FUN(__glewMultiTexCoord2sARB)
-#define glMultiTexCoord2svARB GLEW_GET_FUN(__glewMultiTexCoord2svARB)
-#define glMultiTexCoord3dARB GLEW_GET_FUN(__glewMultiTexCoord3dARB)
-#define glMultiTexCoord3dvARB GLEW_GET_FUN(__glewMultiTexCoord3dvARB)
-#define glMultiTexCoord3fARB GLEW_GET_FUN(__glewMultiTexCoord3fARB)
-#define glMultiTexCoord3fvARB GLEW_GET_FUN(__glewMultiTexCoord3fvARB)
-#define glMultiTexCoord3iARB GLEW_GET_FUN(__glewMultiTexCoord3iARB)
-#define glMultiTexCoord3ivARB GLEW_GET_FUN(__glewMultiTexCoord3ivARB)
-#define glMultiTexCoord3sARB GLEW_GET_FUN(__glewMultiTexCoord3sARB)
-#define glMultiTexCoord3svARB GLEW_GET_FUN(__glewMultiTexCoord3svARB)
-#define glMultiTexCoord4dARB GLEW_GET_FUN(__glewMultiTexCoord4dARB)
-#define glMultiTexCoord4dvARB GLEW_GET_FUN(__glewMultiTexCoord4dvARB)
-#define glMultiTexCoord4fARB GLEW_GET_FUN(__glewMultiTexCoord4fARB)
-#define glMultiTexCoord4fvARB GLEW_GET_FUN(__glewMultiTexCoord4fvARB)
-#define glMultiTexCoord4iARB GLEW_GET_FUN(__glewMultiTexCoord4iARB)
-#define glMultiTexCoord4ivARB GLEW_GET_FUN(__glewMultiTexCoord4ivARB)
-#define glMultiTexCoord4sARB GLEW_GET_FUN(__glewMultiTexCoord4sARB)
-#define glMultiTexCoord4svARB GLEW_GET_FUN(__glewMultiTexCoord4svARB)
-
-#define GLEW_ARB_multitexture GLEW_GET_VAR(__GLEW_ARB_multitexture)
-
-#endif /* GL_ARB_multitexture */
-
-/* ------------------------- GL_ARB_occlusion_query ------------------------ */
-
-#ifndef GL_ARB_occlusion_query
-#define GL_ARB_occlusion_query 1
-
-#define GL_QUERY_COUNTER_BITS_ARB 0x8864
-#define GL_CURRENT_QUERY_ARB 0x8865
-#define GL_QUERY_RESULT_ARB 0x8866
-#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
-#define GL_SAMPLES_PASSED_ARB 0x8914
-
-typedef void (GLAPIENTRY * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
-typedef void (GLAPIENTRY * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLENDQUERYARBPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint* params);
-typedef void (GLAPIENTRY * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISQUERYARBPROC) (GLuint id);
-
-#define glBeginQueryARB GLEW_GET_FUN(__glewBeginQueryARB)
-#define glDeleteQueriesARB GLEW_GET_FUN(__glewDeleteQueriesARB)
-#define glEndQueryARB GLEW_GET_FUN(__glewEndQueryARB)
-#define glGenQueriesARB GLEW_GET_FUN(__glewGenQueriesARB)
-#define glGetQueryObjectivARB GLEW_GET_FUN(__glewGetQueryObjectivARB)
-#define glGetQueryObjectuivARB GLEW_GET_FUN(__glewGetQueryObjectuivARB)
-#define glGetQueryivARB GLEW_GET_FUN(__glewGetQueryivARB)
-#define glIsQueryARB GLEW_GET_FUN(__glewIsQueryARB)
-
-#define GLEW_ARB_occlusion_query GLEW_GET_VAR(__GLEW_ARB_occlusion_query)
-
-#endif /* GL_ARB_occlusion_query */
-
-/* ----------------------- GL_ARB_pixel_buffer_object ---------------------- */
-
-#ifndef GL_ARB_pixel_buffer_object
-#define GL_ARB_pixel_buffer_object 1
-
-#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
-#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
-#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
-#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
-
-#define GLEW_ARB_pixel_buffer_object GLEW_GET_VAR(__GLEW_ARB_pixel_buffer_object)
-
-#endif /* GL_ARB_pixel_buffer_object */
-
-/* ------------------------ GL_ARB_point_parameters ------------------------ */
-
-#ifndef GL_ARB_point_parameters
-#define GL_ARB_point_parameters 1
-
-#define GL_POINT_SIZE_MIN_ARB 0x8126
-#define GL_POINT_SIZE_MAX_ARB 0x8127
-#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
-#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
-
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, GLfloat* params);
-
-#define glPointParameterfARB GLEW_GET_FUN(__glewPointParameterfARB)
-#define glPointParameterfvARB GLEW_GET_FUN(__glewPointParameterfvARB)
-
-#define GLEW_ARB_point_parameters GLEW_GET_VAR(__GLEW_ARB_point_parameters)
-
-#endif /* GL_ARB_point_parameters */
-
-/* -------------------------- GL_ARB_point_sprite -------------------------- */
-
-#ifndef GL_ARB_point_sprite
-#define GL_ARB_point_sprite 1
-
-#define GL_POINT_SPRITE_ARB 0x8861
-#define GL_COORD_REPLACE_ARB 0x8862
-
-#define GLEW_ARB_point_sprite GLEW_GET_VAR(__GLEW_ARB_point_sprite)
-
-#endif /* GL_ARB_point_sprite */
-
-/* ------------------------- GL_ARB_shader_objects ------------------------- */
-
-#ifndef GL_ARB_shader_objects
-#define GL_ARB_shader_objects 1
-
-#define GL_PROGRAM_OBJECT_ARB 0x8B40
-#define GL_SHADER_OBJECT_ARB 0x8B48
-#define GL_OBJECT_TYPE_ARB 0x8B4E
-#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
-#define GL_FLOAT_VEC2_ARB 0x8B50
-#define GL_FLOAT_VEC3_ARB 0x8B51
-#define GL_FLOAT_VEC4_ARB 0x8B52
-#define GL_INT_VEC2_ARB 0x8B53
-#define GL_INT_VEC3_ARB 0x8B54
-#define GL_INT_VEC4_ARB 0x8B55
-#define GL_BOOL_ARB 0x8B56
-#define GL_BOOL_VEC2_ARB 0x8B57
-#define GL_BOOL_VEC3_ARB 0x8B58
-#define GL_BOOL_VEC4_ARB 0x8B59
-#define GL_FLOAT_MAT2_ARB 0x8B5A
-#define GL_FLOAT_MAT3_ARB 0x8B5B
-#define GL_FLOAT_MAT4_ARB 0x8B5C
-#define GL_SAMPLER_1D_ARB 0x8B5D
-#define GL_SAMPLER_2D_ARB 0x8B5E
-#define GL_SAMPLER_3D_ARB 0x8B5F
-#define GL_SAMPLER_CUBE_ARB 0x8B60
-#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
-#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
-#define GL_SAMPLER_2D_RECT_ARB 0x8B63
-#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
-#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
-#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
-#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
-#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
-#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
-#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
-#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
-#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
-#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
-
-typedef char GLcharARB;
-typedef unsigned int GLhandleARB;
-
-typedef void (GLAPIENTRY * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
-typedef void (GLAPIENTRY * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
-typedef GLhandleARB (GLAPIENTRY * PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
-typedef GLhandleARB (GLAPIENTRY * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
-typedef void (GLAPIENTRY * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
-typedef void (GLAPIENTRY * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
-typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
-typedef void (GLAPIENTRY * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB *obj);
-typedef GLhandleARB (GLAPIENTRY * PFNGLGETHANDLEARBPROC) (GLenum pname);
-typedef void (GLAPIENTRY * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *infoLog);
-typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB *source);
-typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
-typedef void (GLAPIENTRY * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint* params);
-typedef void (GLAPIENTRY * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
-typedef void (GLAPIENTRY * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint *length);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
-typedef void (GLAPIENTRY * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
-typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
-
-#define glAttachObjectARB GLEW_GET_FUN(__glewAttachObjectARB)
-#define glCompileShaderARB GLEW_GET_FUN(__glewCompileShaderARB)
-#define glCreateProgramObjectARB GLEW_GET_FUN(__glewCreateProgramObjectARB)
-#define glCreateShaderObjectARB GLEW_GET_FUN(__glewCreateShaderObjectARB)
-#define glDeleteObjectARB GLEW_GET_FUN(__glewDeleteObjectARB)
-#define glDetachObjectARB GLEW_GET_FUN(__glewDetachObjectARB)
-#define glGetActiveUniformARB GLEW_GET_FUN(__glewGetActiveUniformARB)
-#define glGetAttachedObjectsARB GLEW_GET_FUN(__glewGetAttachedObjectsARB)
-#define glGetHandleARB GLEW_GET_FUN(__glewGetHandleARB)
-#define glGetInfoLogARB GLEW_GET_FUN(__glewGetInfoLogARB)
-#define glGetObjectParameterfvARB GLEW_GET_FUN(__glewGetObjectParameterfvARB)
-#define glGetObjectParameterivARB GLEW_GET_FUN(__glewGetObjectParameterivARB)
-#define glGetShaderSourceARB GLEW_GET_FUN(__glewGetShaderSourceARB)
-#define glGetUniformLocationARB GLEW_GET_FUN(__glewGetUniformLocationARB)
-#define glGetUniformfvARB GLEW_GET_FUN(__glewGetUniformfvARB)
-#define glGetUniformivARB GLEW_GET_FUN(__glewGetUniformivARB)
-#define glLinkProgramARB GLEW_GET_FUN(__glewLinkProgramARB)
-#define glShaderSourceARB GLEW_GET_FUN(__glewShaderSourceARB)
-#define glUniform1fARB GLEW_GET_FUN(__glewUniform1fARB)
-#define glUniform1fvARB GLEW_GET_FUN(__glewUniform1fvARB)
-#define glUniform1iARB GLEW_GET_FUN(__glewUniform1iARB)
-#define glUniform1ivARB GLEW_GET_FUN(__glewUniform1ivARB)
-#define glUniform2fARB GLEW_GET_FUN(__glewUniform2fARB)
-#define glUniform2fvARB GLEW_GET_FUN(__glewUniform2fvARB)
-#define glUniform2iARB GLEW_GET_FUN(__glewUniform2iARB)
-#define glUniform2ivARB GLEW_GET_FUN(__glewUniform2ivARB)
-#define glUniform3fARB GLEW_GET_FUN(__glewUniform3fARB)
-#define glUniform3fvARB GLEW_GET_FUN(__glewUniform3fvARB)
-#define glUniform3iARB GLEW_GET_FUN(__glewUniform3iARB)
-#define glUniform3ivARB GLEW_GET_FUN(__glewUniform3ivARB)
-#define glUniform4fARB GLEW_GET_FUN(__glewUniform4fARB)
-#define glUniform4fvARB GLEW_GET_FUN(__glewUniform4fvARB)
-#define glUniform4iARB GLEW_GET_FUN(__glewUniform4iARB)
-#define glUniform4ivARB GLEW_GET_FUN(__glewUniform4ivARB)
-#define glUniformMatrix2fvARB GLEW_GET_FUN(__glewUniformMatrix2fvARB)
-#define glUniformMatrix3fvARB GLEW_GET_FUN(__glewUniformMatrix3fvARB)
-#define glUniformMatrix4fvARB GLEW_GET_FUN(__glewUniformMatrix4fvARB)
-#define glUseProgramObjectARB GLEW_GET_FUN(__glewUseProgramObjectARB)
-#define glValidateProgramARB GLEW_GET_FUN(__glewValidateProgramARB)
-
-#define GLEW_ARB_shader_objects GLEW_GET_VAR(__GLEW_ARB_shader_objects)
-
-#endif /* GL_ARB_shader_objects */
-
-/* ---------------------- GL_ARB_shading_language_100 ---------------------- */
-
-#ifndef GL_ARB_shading_language_100
-#define GL_ARB_shading_language_100 1
-
-#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
-
-#define GLEW_ARB_shading_language_100 GLEW_GET_VAR(__GLEW_ARB_shading_language_100)
-
-#endif /* GL_ARB_shading_language_100 */
-
-/* ----------------------------- GL_ARB_shadow ----------------------------- */
-
-#ifndef GL_ARB_shadow
-#define GL_ARB_shadow 1
-
-#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
-#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
-#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
-
-#define GLEW_ARB_shadow GLEW_GET_VAR(__GLEW_ARB_shadow)
-
-#endif /* GL_ARB_shadow */
-
-/* ------------------------- GL_ARB_shadow_ambient ------------------------- */
-
-#ifndef GL_ARB_shadow_ambient
-#define GL_ARB_shadow_ambient 1
-
-#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
-
-#define GLEW_ARB_shadow_ambient GLEW_GET_VAR(__GLEW_ARB_shadow_ambient)
-
-#endif /* GL_ARB_shadow_ambient */
-
-/* ---------------------- GL_ARB_texture_border_clamp ---------------------- */
-
-#ifndef GL_ARB_texture_border_clamp
-#define GL_ARB_texture_border_clamp 1
-
-#define GL_CLAMP_TO_BORDER_ARB 0x812D
-
-#define GLEW_ARB_texture_border_clamp GLEW_GET_VAR(__GLEW_ARB_texture_border_clamp)
-
-#endif /* GL_ARB_texture_border_clamp */
-
-/* ----------------------- GL_ARB_texture_compression ---------------------- */
-
-#ifndef GL_ARB_texture_compression
-#define GL_ARB_texture_compression 1
-
-#define GL_COMPRESSED_ALPHA_ARB 0x84E9
-#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
-#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
-#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
-#define GL_COMPRESSED_RGB_ARB 0x84ED
-#define GL_COMPRESSED_RGBA_ARB 0x84EE
-#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
-#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
-#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
-#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
-#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
-
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
-typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
-typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, void* img);
-
-#define glCompressedTexImage1DARB GLEW_GET_FUN(__glewCompressedTexImage1DARB)
-#define glCompressedTexImage2DARB GLEW_GET_FUN(__glewCompressedTexImage2DARB)
-#define glCompressedTexImage3DARB GLEW_GET_FUN(__glewCompressedTexImage3DARB)
-#define glCompressedTexSubImage1DARB GLEW_GET_FUN(__glewCompressedTexSubImage1DARB)
-#define glCompressedTexSubImage2DARB GLEW_GET_FUN(__glewCompressedTexSubImage2DARB)
-#define glCompressedTexSubImage3DARB GLEW_GET_FUN(__glewCompressedTexSubImage3DARB)
-#define glGetCompressedTexImageARB GLEW_GET_FUN(__glewGetCompressedTexImageARB)
-
-#define GLEW_ARB_texture_compression GLEW_GET_VAR(__GLEW_ARB_texture_compression)
-
-#endif /* GL_ARB_texture_compression */
-
-/* ------------------------ GL_ARB_texture_cube_map ------------------------ */
-
-#ifndef GL_ARB_texture_cube_map
-#define GL_ARB_texture_cube_map 1
-
-#define GL_NORMAL_MAP_ARB 0x8511
-#define GL_REFLECTION_MAP_ARB 0x8512
-#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
-#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
-#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
-#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
-
-#define GLEW_ARB_texture_cube_map GLEW_GET_VAR(__GLEW_ARB_texture_cube_map)
-
-#endif /* GL_ARB_texture_cube_map */
-
-/* ------------------------- GL_ARB_texture_env_add ------------------------ */
-
-#ifndef GL_ARB_texture_env_add
-#define GL_ARB_texture_env_add 1
-
-#define GLEW_ARB_texture_env_add GLEW_GET_VAR(__GLEW_ARB_texture_env_add)
-
-#endif /* GL_ARB_texture_env_add */
-
-/* ----------------------- GL_ARB_texture_env_combine ---------------------- */
-
-#ifndef GL_ARB_texture_env_combine
-#define GL_ARB_texture_env_combine 1
-
-#define GL_SUBTRACT_ARB 0x84E7
-#define GL_COMBINE_ARB 0x8570
-#define GL_COMBINE_RGB_ARB 0x8571
-#define GL_COMBINE_ALPHA_ARB 0x8572
-#define GL_RGB_SCALE_ARB 0x8573
-#define GL_ADD_SIGNED_ARB 0x8574
-#define GL_INTERPOLATE_ARB 0x8575
-#define GL_CONSTANT_ARB 0x8576
-#define GL_PRIMARY_COLOR_ARB 0x8577
-#define GL_PREVIOUS_ARB 0x8578
-#define GL_SOURCE0_RGB_ARB 0x8580
-#define GL_SOURCE1_RGB_ARB 0x8581
-#define GL_SOURCE2_RGB_ARB 0x8582
-#define GL_SOURCE0_ALPHA_ARB 0x8588
-#define GL_SOURCE1_ALPHA_ARB 0x8589
-#define GL_SOURCE2_ALPHA_ARB 0x858A
-#define GL_OPERAND0_RGB_ARB 0x8590
-#define GL_OPERAND1_RGB_ARB 0x8591
-#define GL_OPERAND2_RGB_ARB 0x8592
-#define GL_OPERAND0_ALPHA_ARB 0x8598
-#define GL_OPERAND1_ALPHA_ARB 0x8599
-#define GL_OPERAND2_ALPHA_ARB 0x859A
-
-#define GLEW_ARB_texture_env_combine GLEW_GET_VAR(__GLEW_ARB_texture_env_combine)
-
-#endif /* GL_ARB_texture_env_combine */
-
-/* ---------------------- GL_ARB_texture_env_crossbar ---------------------- */
-
-#ifndef GL_ARB_texture_env_crossbar
-#define GL_ARB_texture_env_crossbar 1
-
-#define GLEW_ARB_texture_env_crossbar GLEW_GET_VAR(__GLEW_ARB_texture_env_crossbar)
-
-#endif /* GL_ARB_texture_env_crossbar */
-
-/* ------------------------ GL_ARB_texture_env_dot3 ------------------------ */
-
-#ifndef GL_ARB_texture_env_dot3
-#define GL_ARB_texture_env_dot3 1
-
-#define GL_DOT3_RGB_ARB 0x86AE
-#define GL_DOT3_RGBA_ARB 0x86AF
-
-#define GLEW_ARB_texture_env_dot3 GLEW_GET_VAR(__GLEW_ARB_texture_env_dot3)
-
-#endif /* GL_ARB_texture_env_dot3 */
-
-/* -------------------------- GL_ARB_texture_float ------------------------- */
-
-#ifndef GL_ARB_texture_float
-#define GL_ARB_texture_float 1
-
-#define GL_RGBA32F_ARB 0x8814
-#define GL_RGB32F_ARB 0x8815
-#define GL_ALPHA32F_ARB 0x8816
-#define GL_INTENSITY32F_ARB 0x8817
-#define GL_LUMINANCE32F_ARB 0x8818
-#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
-#define GL_RGBA16F_ARB 0x881A
-#define GL_RGB16F_ARB 0x881B
-#define GL_ALPHA16F_ARB 0x881C
-#define GL_INTENSITY16F_ARB 0x881D
-#define GL_LUMINANCE16F_ARB 0x881E
-#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
-#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
-#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
-#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
-#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
-#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
-#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
-#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
-#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
-
-#define GLEW_ARB_texture_float GLEW_GET_VAR(__GLEW_ARB_texture_float)
-
-#endif /* GL_ARB_texture_float */
-
-/* --------------------- GL_ARB_texture_mirrored_repeat -------------------- */
-
-#ifndef GL_ARB_texture_mirrored_repeat
-#define GL_ARB_texture_mirrored_repeat 1
-
-#define GL_MIRRORED_REPEAT_ARB 0x8370
-
-#define GLEW_ARB_texture_mirrored_repeat GLEW_GET_VAR(__GLEW_ARB_texture_mirrored_repeat)
-
-#endif /* GL_ARB_texture_mirrored_repeat */
-
-/* -------------------- GL_ARB_texture_non_power_of_two -------------------- */
-
-#ifndef GL_ARB_texture_non_power_of_two
-#define GL_ARB_texture_non_power_of_two 1
-
-#define GLEW_ARB_texture_non_power_of_two GLEW_GET_VAR(__GLEW_ARB_texture_non_power_of_two)
-
-#endif /* GL_ARB_texture_non_power_of_two */
-
-/* ------------------------ GL_ARB_texture_rectangle ----------------------- */
-
-#ifndef GL_ARB_texture_rectangle
-#define GL_ARB_texture_rectangle 1
-
-#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
-#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
-#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
-#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
-#define GL_SAMPLER_2D_RECT_ARB 0x8B63
-#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
-
-#define GLEW_ARB_texture_rectangle GLEW_GET_VAR(__GLEW_ARB_texture_rectangle)
-
-#endif /* GL_ARB_texture_rectangle */
-
-/* ------------------------ GL_ARB_transpose_matrix ------------------------ */
-
-#ifndef GL_ARB_transpose_matrix
-#define GL_ARB_transpose_matrix 1
-
-#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
-#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
-#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
-#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
-
-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
-typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (GLdouble m[16]);
-typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (GLfloat m[16]);
-
-#define glLoadTransposeMatrixdARB GLEW_GET_FUN(__glewLoadTransposeMatrixdARB)
-#define glLoadTransposeMatrixfARB GLEW_GET_FUN(__glewLoadTransposeMatrixfARB)
-#define glMultTransposeMatrixdARB GLEW_GET_FUN(__glewMultTransposeMatrixdARB)
-#define glMultTransposeMatrixfARB GLEW_GET_FUN(__glewMultTransposeMatrixfARB)
-
-#define GLEW_ARB_transpose_matrix GLEW_GET_VAR(__GLEW_ARB_transpose_matrix)
-
-#endif /* GL_ARB_transpose_matrix */
-
-/* -------------------------- GL_ARB_vertex_blend -------------------------- */
-
-#ifndef GL_ARB_vertex_blend
-#define GL_ARB_vertex_blend 1
-
-#define GL_MODELVIEW0_ARB 0x1700
-#define GL_MODELVIEW1_ARB 0x850A
-#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
-#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
-#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
-#define GL_VERTEX_BLEND_ARB 0x86A7
-#define GL_CURRENT_WEIGHT_ARB 0x86A8
-#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
-#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
-#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
-#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
-#define GL_WEIGHT_ARRAY_ARB 0x86AD
-#define GL_MODELVIEW2_ARB 0x8722
-#define GL_MODELVIEW3_ARB 0x8723
-#define GL_MODELVIEW4_ARB 0x8724
-#define GL_MODELVIEW5_ARB 0x8725
-#define GL_MODELVIEW6_ARB 0x8726
-#define GL_MODELVIEW7_ARB 0x8727
-#define GL_MODELVIEW8_ARB 0x8728
-#define GL_MODELVIEW9_ARB 0x8729
-#define GL_MODELVIEW10_ARB 0x872A
-#define GL_MODELVIEW11_ARB 0x872B
-#define GL_MODELVIEW12_ARB 0x872C
-#define GL_MODELVIEW13_ARB 0x872D
-#define GL_MODELVIEW14_ARB 0x872E
-#define GL_MODELVIEW15_ARB 0x872F
-#define GL_MODELVIEW16_ARB 0x8730
-#define GL_MODELVIEW17_ARB 0x8731
-#define GL_MODELVIEW18_ARB 0x8732
-#define GL_MODELVIEW19_ARB 0x8733
-#define GL_MODELVIEW20_ARB 0x8734
-#define GL_MODELVIEW21_ARB 0x8735
-#define GL_MODELVIEW22_ARB 0x8736
-#define GL_MODELVIEW23_ARB 0x8737
-#define GL_MODELVIEW24_ARB 0x8738
-#define GL_MODELVIEW25_ARB 0x8739
-#define GL_MODELVIEW26_ARB 0x873A
-#define GL_MODELVIEW27_ARB 0x873B
-#define GL_MODELVIEW28_ARB 0x873C
-#define GL_MODELVIEW29_ARB 0x873D
-#define GL_MODELVIEW30_ARB 0x873E
-#define GL_MODELVIEW31_ARB 0x873F
-
-typedef void (GLAPIENTRY * PFNGLVERTEXBLENDARBPROC) (GLint count);
-typedef void (GLAPIENTRY * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
-typedef void (GLAPIENTRY * PFNGLWEIGHTBVARBPROC) (GLint size, GLbyte *weights);
-typedef void (GLAPIENTRY * PFNGLWEIGHTDVARBPROC) (GLint size, GLdouble *weights);
-typedef void (GLAPIENTRY * PFNGLWEIGHTFVARBPROC) (GLint size, GLfloat *weights);
-typedef void (GLAPIENTRY * PFNGLWEIGHTIVARBPROC) (GLint size, GLint *weights);
-typedef void (GLAPIENTRY * PFNGLWEIGHTSVARBPROC) (GLint size, GLshort *weights);
-typedef void (GLAPIENTRY * PFNGLWEIGHTUBVARBPROC) (GLint size, GLubyte *weights);
-typedef void (GLAPIENTRY * PFNGLWEIGHTUIVARBPROC) (GLint size, GLuint *weights);
-typedef void (GLAPIENTRY * PFNGLWEIGHTUSVARBPROC) (GLint size, GLushort *weights);
-
-#define glVertexBlendARB GLEW_GET_FUN(__glewVertexBlendARB)
-#define glWeightPointerARB GLEW_GET_FUN(__glewWeightPointerARB)
-#define glWeightbvARB GLEW_GET_FUN(__glewWeightbvARB)
-#define glWeightdvARB GLEW_GET_FUN(__glewWeightdvARB)
-#define glWeightfvARB GLEW_GET_FUN(__glewWeightfvARB)
-#define glWeightivARB GLEW_GET_FUN(__glewWeightivARB)
-#define glWeightsvARB GLEW_GET_FUN(__glewWeightsvARB)
-#define glWeightubvARB GLEW_GET_FUN(__glewWeightubvARB)
-#define glWeightuivARB GLEW_GET_FUN(__glewWeightuivARB)
-#define glWeightusvARB GLEW_GET_FUN(__glewWeightusvARB)
-
-#define GLEW_ARB_vertex_blend GLEW_GET_VAR(__GLEW_ARB_vertex_blend)
-
-#endif /* GL_ARB_vertex_blend */
-
-/* ---------------------- GL_ARB_vertex_buffer_object ---------------------- */
-
-#ifndef GL_ARB_vertex_buffer_object
-#define GL_ARB_vertex_buffer_object 1
-
-#define GL_BUFFER_SIZE_ARB 0x8764
-#define GL_BUFFER_USAGE_ARB 0x8765
-#define GL_ARRAY_BUFFER_ARB 0x8892
-#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
-#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
-#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
-#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
-#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
-#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
-#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
-#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
-#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
-#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
-#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
-#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
-#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
-#define GL_READ_ONLY_ARB 0x88B8
-#define GL_WRITE_ONLY_ARB 0x88B9
-#define GL_READ_WRITE_ARB 0x88BA
-#define GL_BUFFER_ACCESS_ARB 0x88BB
-#define GL_BUFFER_MAPPED_ARB 0x88BC
-#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
-#define GL_STREAM_DRAW_ARB 0x88E0
-#define GL_STREAM_READ_ARB 0x88E1
-#define GL_STREAM_COPY_ARB 0x88E2
-#define GL_STATIC_DRAW_ARB 0x88E4
-#define GL_STATIC_READ_ARB 0x88E5
-#define GL_STATIC_COPY_ARB 0x88E6
-#define GL_DYNAMIC_DRAW_ARB 0x88E8
-#define GL_DYNAMIC_READ_ARB 0x88E9
-#define GL_DYNAMIC_COPY_ARB 0x88EA
-
-typedef ptrdiff_t GLsizeiptrARB;
-typedef ptrdiff_t GLintptrARB;
-
-typedef void (GLAPIENTRY * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
-typedef void (GLAPIENTRY * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid* data, GLenum usage);
-typedef void (GLAPIENTRY * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid* data);
-typedef void (GLAPIENTRY * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint* buffers);
-typedef void (GLAPIENTRY * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint* buffers);
-typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid** params);
-typedef void (GLAPIENTRY * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid* data);
-typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERARBPROC) (GLuint buffer);
-typedef GLvoid * (GLAPIENTRY * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
-typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERARBPROC) (GLenum target);
-
-#define glBindBufferARB GLEW_GET_FUN(__glewBindBufferARB)
-#define glBufferDataARB GLEW_GET_FUN(__glewBufferDataARB)
-#define glBufferSubDataARB GLEW_GET_FUN(__glewBufferSubDataARB)
-#define glDeleteBuffersARB GLEW_GET_FUN(__glewDeleteBuffersARB)
-#define glGenBuffersARB GLEW_GET_FUN(__glewGenBuffersARB)
-#define glGetBufferParameterivARB GLEW_GET_FUN(__glewGetBufferParameterivARB)
-#define glGetBufferPointervARB GLEW_GET_FUN(__glewGetBufferPointervARB)
-#define glGetBufferSubDataARB GLEW_GET_FUN(__glewGetBufferSubDataARB)
-#define glIsBufferARB GLEW_GET_FUN(__glewIsBufferARB)
-#define glMapBufferARB GLEW_GET_FUN(__glewMapBufferARB)
-#define glUnmapBufferARB GLEW_GET_FUN(__glewUnmapBufferARB)
-
-#define GLEW_ARB_vertex_buffer_object GLEW_GET_VAR(__GLEW_ARB_vertex_buffer_object)
-
-#endif /* GL_ARB_vertex_buffer_object */
-
-/* ------------------------- GL_ARB_vertex_program ------------------------- */
-
-#ifndef GL_ARB_vertex_program
-#define GL_ARB_vertex_program 1
-
-#define GL_COLOR_SUM_ARB 0x8458
-#define GL_VERTEX_PROGRAM_ARB 0x8620
-#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
-#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
-#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
-#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
-#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
-#define GL_PROGRAM_LENGTH_ARB 0x8627
-#define GL_PROGRAM_STRING_ARB 0x8628
-#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
-#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
-#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
-#define GL_CURRENT_MATRIX_ARB 0x8641
-#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
-#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
-#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
-#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
-#define GL_PROGRAM_BINDING_ARB 0x8677
-#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
-#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
-#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
-#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
-#define GL_PROGRAM_FORMAT_ARB 0x8876
-#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
-#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
-#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
-#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
-#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
-#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
-#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
-#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
-#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
-#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
-#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
-#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
-#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
-#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
-#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
-#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
-#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
-#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
-#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
-#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
-#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
-#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
-#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
-#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
-#define GL_MATRIX0_ARB 0x88C0
-#define GL_MATRIX1_ARB 0x88C1
-#define GL_MATRIX2_ARB 0x88C2
-#define GL_MATRIX3_ARB 0x88C3
-#define GL_MATRIX4_ARB 0x88C4
-#define GL_MATRIX5_ARB 0x88C5
-#define GL_MATRIX6_ARB 0x88C6
-#define GL_MATRIX7_ARB 0x88C7
-#define GL_MATRIX8_ARB 0x88C8
-#define GL_MATRIX9_ARB 0x88C9
-#define GL_MATRIX10_ARB 0x88CA
-#define GL_MATRIX11_ARB 0x88CB
-#define GL_MATRIX12_ARB 0x88CC
-#define GL_MATRIX13_ARB 0x88CD
-#define GL_MATRIX14_ARB 0x88CE
-#define GL_MATRIX15_ARB 0x88CF
-#define GL_MATRIX16_ARB 0x88D0
-#define GL_MATRIX17_ARB 0x88D1
-#define GL_MATRIX18_ARB 0x88D2
-#define GL_MATRIX19_ARB 0x88D3
-#define GL_MATRIX20_ARB 0x88D4
-#define GL_MATRIX21_ARB 0x88D5
-#define GL_MATRIX22_ARB 0x88D6
-#define GL_MATRIX23_ARB 0x88D7
-#define GL_MATRIX24_ARB 0x88D8
-#define GL_MATRIX25_ARB 0x88D9
-#define GL_MATRIX26_ARB 0x88DA
-#define GL_MATRIX27_ARB 0x88DB
-#define GL_MATRIX28_ARB 0x88DC
-#define GL_MATRIX29_ARB 0x88DD
-#define GL_MATRIX30_ARB 0x88DE
-#define GL_MATRIX31_ARB 0x88DF
-
-typedef void (GLAPIENTRY * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
-typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint* programs);
-typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
-typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
-typedef void (GLAPIENTRY * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint* programs);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void* string);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid** pointer);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMARBPROC) (GLuint program);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void* string);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
-
-#define glBindProgramARB GLEW_GET_FUN(__glewBindProgramARB)
-#define glDeleteProgramsARB GLEW_GET_FUN(__glewDeleteProgramsARB)
-#define glDisableVertexAttribArrayARB GLEW_GET_FUN(__glewDisableVertexAttribArrayARB)
-#define glEnableVertexAttribArrayARB GLEW_GET_FUN(__glewEnableVertexAttribArrayARB)
-#define glGenProgramsARB GLEW_GET_FUN(__glewGenProgramsARB)
-#define glGetProgramEnvParameterdvARB GLEW_GET_FUN(__glewGetProgramEnvParameterdvARB)
-#define glGetProgramEnvParameterfvARB GLEW_GET_FUN(__glewGetProgramEnvParameterfvARB)
-#define glGetProgramLocalParameterdvARB GLEW_GET_FUN(__glewGetProgramLocalParameterdvARB)
-#define glGetProgramLocalParameterfvARB GLEW_GET_FUN(__glewGetProgramLocalParameterfvARB)
-#define glGetProgramStringARB GLEW_GET_FUN(__glewGetProgramStringARB)
-#define glGetProgramivARB GLEW_GET_FUN(__glewGetProgramivARB)
-#define glGetVertexAttribPointervARB GLEW_GET_FUN(__glewGetVertexAttribPointervARB)
-#define glGetVertexAttribdvARB GLEW_GET_FUN(__glewGetVertexAttribdvARB)
-#define glGetVertexAttribfvARB GLEW_GET_FUN(__glewGetVertexAttribfvARB)
-#define glGetVertexAttribivARB GLEW_GET_FUN(__glewGetVertexAttribivARB)
-#define glIsProgramARB GLEW_GET_FUN(__glewIsProgramARB)
-#define glProgramEnvParameter4dARB GLEW_GET_FUN(__glewProgramEnvParameter4dARB)
-#define glProgramEnvParameter4dvARB GLEW_GET_FUN(__glewProgramEnvParameter4dvARB)
-#define glProgramEnvParameter4fARB GLEW_GET_FUN(__glewProgramEnvParameter4fARB)
-#define glProgramEnvParameter4fvARB GLEW_GET_FUN(__glewProgramEnvParameter4fvARB)
-#define glProgramLocalParameter4dARB GLEW_GET_FUN(__glewProgramLocalParameter4dARB)
-#define glProgramLocalParameter4dvARB GLEW_GET_FUN(__glewProgramLocalParameter4dvARB)
-#define glProgramLocalParameter4fARB GLEW_GET_FUN(__glewProgramLocalParameter4fARB)
-#define glProgramLocalParameter4fvARB GLEW_GET_FUN(__glewProgramLocalParameter4fvARB)
-#define glProgramStringARB GLEW_GET_FUN(__glewProgramStringARB)
-#define glVertexAttrib1dARB GLEW_GET_FUN(__glewVertexAttrib1dARB)
-#define glVertexAttrib1dvARB GLEW_GET_FUN(__glewVertexAttrib1dvARB)
-#define glVertexAttrib1fARB GLEW_GET_FUN(__glewVertexAttrib1fARB)
-#define glVertexAttrib1fvARB GLEW_GET_FUN(__glewVertexAttrib1fvARB)
-#define glVertexAttrib1sARB GLEW_GET_FUN(__glewVertexAttrib1sARB)
-#define glVertexAttrib1svARB GLEW_GET_FUN(__glewVertexAttrib1svARB)
-#define glVertexAttrib2dARB GLEW_GET_FUN(__glewVertexAttrib2dARB)
-#define glVertexAttrib2dvARB GLEW_GET_FUN(__glewVertexAttrib2dvARB)
-#define glVertexAttrib2fARB GLEW_GET_FUN(__glewVertexAttrib2fARB)
-#define glVertexAttrib2fvARB GLEW_GET_FUN(__glewVertexAttrib2fvARB)
-#define glVertexAttrib2sARB GLEW_GET_FUN(__glewVertexAttrib2sARB)
-#define glVertexAttrib2svARB GLEW_GET_FUN(__glewVertexAttrib2svARB)
-#define glVertexAttrib3dARB GLEW_GET_FUN(__glewVertexAttrib3dARB)
-#define glVertexAttrib3dvARB GLEW_GET_FUN(__glewVertexAttrib3dvARB)
-#define glVertexAttrib3fARB GLEW_GET_FUN(__glewVertexAttrib3fARB)
-#define glVertexAttrib3fvARB GLEW_GET_FUN(__glewVertexAttrib3fvARB)
-#define glVertexAttrib3sARB GLEW_GET_FUN(__glewVertexAttrib3sARB)
-#define glVertexAttrib3svARB GLEW_GET_FUN(__glewVertexAttrib3svARB)
-#define glVertexAttrib4NbvARB GLEW_GET_FUN(__glewVertexAttrib4NbvARB)
-#define glVertexAttrib4NivARB GLEW_GET_FUN(__glewVertexAttrib4NivARB)
-#define glVertexAttrib4NsvARB GLEW_GET_FUN(__glewVertexAttrib4NsvARB)
-#define glVertexAttrib4NubARB GLEW_GET_FUN(__glewVertexAttrib4NubARB)
-#define glVertexAttrib4NubvARB GLEW_GET_FUN(__glewVertexAttrib4NubvARB)
-#define glVertexAttrib4NuivARB GLEW_GET_FUN(__glewVertexAttrib4NuivARB)
-#define glVertexAttrib4NusvARB GLEW_GET_FUN(__glewVertexAttrib4NusvARB)
-#define glVertexAttrib4bvARB GLEW_GET_FUN(__glewVertexAttrib4bvARB)
-#define glVertexAttrib4dARB GLEW_GET_FUN(__glewVertexAttrib4dARB)
-#define glVertexAttrib4dvARB GLEW_GET_FUN(__glewVertexAttrib4dvARB)
-#define glVertexAttrib4fARB GLEW_GET_FUN(__glewVertexAttrib4fARB)
-#define glVertexAttrib4fvARB GLEW_GET_FUN(__glewVertexAttrib4fvARB)
-#define glVertexAttrib4ivARB GLEW_GET_FUN(__glewVertexAttrib4ivARB)
-#define glVertexAttrib4sARB GLEW_GET_FUN(__glewVertexAttrib4sARB)
-#define glVertexAttrib4svARB GLEW_GET_FUN(__glewVertexAttrib4svARB)
-#define glVertexAttrib4ubvARB GLEW_GET_FUN(__glewVertexAttrib4ubvARB)
-#define glVertexAttrib4uivARB GLEW_GET_FUN(__glewVertexAttrib4uivARB)
-#define glVertexAttrib4usvARB GLEW_GET_FUN(__glewVertexAttrib4usvARB)
-#define glVertexAttribPointerARB GLEW_GET_FUN(__glewVertexAttribPointerARB)
-
-#define GLEW_ARB_vertex_program GLEW_GET_VAR(__GLEW_ARB_vertex_program)
-
-#endif /* GL_ARB_vertex_program */
-
-/* -------------------------- GL_ARB_vertex_shader ------------------------- */
-
-#ifndef GL_ARB_vertex_shader
-#define GL_ARB_vertex_shader 1
-
-#define GL_VERTEX_SHADER_ARB 0x8B31
-#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
-#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
-#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
-#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
-#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
-#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
-
-typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB* name);
-typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint *size, GLenum *type, GLcharARB *name);
-typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB* name);
-
-#define glBindAttribLocationARB GLEW_GET_FUN(__glewBindAttribLocationARB)
-#define glGetActiveAttribARB GLEW_GET_FUN(__glewGetActiveAttribARB)
-#define glGetAttribLocationARB GLEW_GET_FUN(__glewGetAttribLocationARB)
-
-#define GLEW_ARB_vertex_shader GLEW_GET_VAR(__GLEW_ARB_vertex_shader)
-
-#endif /* GL_ARB_vertex_shader */
-
-/* --------------------------- GL_ARB_window_pos --------------------------- */
-
-#ifndef GL_ARB_window_pos
-#define GL_ARB_window_pos 1
-
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVARBPROC) (const GLint* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVARBPROC) (const GLshort* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVARBPROC) (const GLint* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVARBPROC) (const GLshort* p);
-
-#define glWindowPos2dARB GLEW_GET_FUN(__glewWindowPos2dARB)
-#define glWindowPos2dvARB GLEW_GET_FUN(__glewWindowPos2dvARB)
-#define glWindowPos2fARB GLEW_GET_FUN(__glewWindowPos2fARB)
-#define glWindowPos2fvARB GLEW_GET_FUN(__glewWindowPos2fvARB)
-#define glWindowPos2iARB GLEW_GET_FUN(__glewWindowPos2iARB)
-#define glWindowPos2ivARB GLEW_GET_FUN(__glewWindowPos2ivARB)
-#define glWindowPos2sARB GLEW_GET_FUN(__glewWindowPos2sARB)
-#define glWindowPos2svARB GLEW_GET_FUN(__glewWindowPos2svARB)
-#define glWindowPos3dARB GLEW_GET_FUN(__glewWindowPos3dARB)
-#define glWindowPos3dvARB GLEW_GET_FUN(__glewWindowPos3dvARB)
-#define glWindowPos3fARB GLEW_GET_FUN(__glewWindowPos3fARB)
-#define glWindowPos3fvARB GLEW_GET_FUN(__glewWindowPos3fvARB)
-#define glWindowPos3iARB GLEW_GET_FUN(__glewWindowPos3iARB)
-#define glWindowPos3ivARB GLEW_GET_FUN(__glewWindowPos3ivARB)
-#define glWindowPos3sARB GLEW_GET_FUN(__glewWindowPos3sARB)
-#define glWindowPos3svARB GLEW_GET_FUN(__glewWindowPos3svARB)
-
-#define GLEW_ARB_window_pos GLEW_GET_VAR(__GLEW_ARB_window_pos)
-
-#endif /* GL_ARB_window_pos */
-
-/* ------------------------- GL_ATIX_point_sprites ------------------------- */
-
-#ifndef GL_ATIX_point_sprites
-#define GL_ATIX_point_sprites 1
-
-#define GL_TEXTURE_POINT_MODE_ATIX 0x60B0
-#define GL_TEXTURE_POINT_ONE_COORD_ATIX 0x60B1
-#define GL_TEXTURE_POINT_SPRITE_ATIX 0x60B2
-#define GL_POINT_SPRITE_CULL_MODE_ATIX 0x60B3
-#define GL_POINT_SPRITE_CULL_CENTER_ATIX 0x60B4
-#define GL_POINT_SPRITE_CULL_CLIP_ATIX 0x60B5
-
-#define GLEW_ATIX_point_sprites GLEW_GET_VAR(__GLEW_ATIX_point_sprites)
-
-#endif /* GL_ATIX_point_sprites */
-
-/* ---------------------- GL_ATIX_texture_env_combine3 --------------------- */
-
-#ifndef GL_ATIX_texture_env_combine3
-#define GL_ATIX_texture_env_combine3 1
-
-#define GL_MODULATE_ADD_ATIX 0x8744
-#define GL_MODULATE_SIGNED_ADD_ATIX 0x8745
-#define GL_MODULATE_SUBTRACT_ATIX 0x8746
-
-#define GLEW_ATIX_texture_env_combine3 GLEW_GET_VAR(__GLEW_ATIX_texture_env_combine3)
-
-#endif /* GL_ATIX_texture_env_combine3 */
-
-/* ----------------------- GL_ATIX_texture_env_route ----------------------- */
-
-#ifndef GL_ATIX_texture_env_route
-#define GL_ATIX_texture_env_route 1
-
-#define GL_SECONDARY_COLOR_ATIX 0x8747
-#define GL_TEXTURE_OUTPUT_RGB_ATIX 0x8748
-#define GL_TEXTURE_OUTPUT_ALPHA_ATIX 0x8749
-
-#define GLEW_ATIX_texture_env_route GLEW_GET_VAR(__GLEW_ATIX_texture_env_route)
-
-#endif /* GL_ATIX_texture_env_route */
-
-/* ---------------- GL_ATIX_vertex_shader_output_point_size ---------------- */
-
-#ifndef GL_ATIX_vertex_shader_output_point_size
-#define GL_ATIX_vertex_shader_output_point_size 1
-
-#define GL_OUTPUT_POINT_SIZE_ATIX 0x610E
-
-#define GLEW_ATIX_vertex_shader_output_point_size GLEW_GET_VAR(__GLEW_ATIX_vertex_shader_output_point_size)
-
-#endif /* GL_ATIX_vertex_shader_output_point_size */
-
-/* -------------------------- GL_ATI_draw_buffers -------------------------- */
-
-#ifndef GL_ATI_draw_buffers
-#define GL_ATI_draw_buffers 1
-
-#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
-#define GL_DRAW_BUFFER0_ATI 0x8825
-#define GL_DRAW_BUFFER1_ATI 0x8826
-#define GL_DRAW_BUFFER2_ATI 0x8827
-#define GL_DRAW_BUFFER3_ATI 0x8828
-#define GL_DRAW_BUFFER4_ATI 0x8829
-#define GL_DRAW_BUFFER5_ATI 0x882A
-#define GL_DRAW_BUFFER6_ATI 0x882B
-#define GL_DRAW_BUFFER7_ATI 0x882C
-#define GL_DRAW_BUFFER8_ATI 0x882D
-#define GL_DRAW_BUFFER9_ATI 0x882E
-#define GL_DRAW_BUFFER10_ATI 0x882F
-#define GL_DRAW_BUFFER11_ATI 0x8830
-#define GL_DRAW_BUFFER12_ATI 0x8831
-#define GL_DRAW_BUFFER13_ATI 0x8832
-#define GL_DRAW_BUFFER14_ATI 0x8833
-#define GL_DRAW_BUFFER15_ATI 0x8834
-
-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum* bufs);
-
-#define glDrawBuffersATI GLEW_GET_FUN(__glewDrawBuffersATI)
-
-#define GLEW_ATI_draw_buffers GLEW_GET_VAR(__GLEW_ATI_draw_buffers)
-
-#endif /* GL_ATI_draw_buffers */
-
-/* -------------------------- GL_ATI_element_array ------------------------- */
-
-#ifndef GL_ATI_element_array
-#define GL_ATI_element_array 1
-
-#define GL_ELEMENT_ARRAY_ATI 0x8768
-#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
-#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
-
-typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
-typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void* pointer);
-
-#define glDrawElementArrayATI GLEW_GET_FUN(__glewDrawElementArrayATI)
-#define glDrawRangeElementArrayATI GLEW_GET_FUN(__glewDrawRangeElementArrayATI)
-#define glElementPointerATI GLEW_GET_FUN(__glewElementPointerATI)
-
-#define GLEW_ATI_element_array GLEW_GET_VAR(__GLEW_ATI_element_array)
-
-#endif /* GL_ATI_element_array */
-
-/* ------------------------- GL_ATI_envmap_bumpmap ------------------------- */
-
-#ifndef GL_ATI_envmap_bumpmap
-#define GL_ATI_envmap_bumpmap 1
-
-#define GL_BUMP_ROT_MATRIX_ATI 0x8775
-#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
-#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
-#define GL_BUMP_TEX_UNITS_ATI 0x8778
-#define GL_DUDV_ATI 0x8779
-#define GL_DU8DV8_ATI 0x877A
-#define GL_BUMP_ENVMAP_ATI 0x877B
-#define GL_BUMP_TARGET_ATI 0x877C
-
-typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
-typedef void (GLAPIENTRY * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
-typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
-typedef void (GLAPIENTRY * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
-
-#define glGetTexBumpParameterfvATI GLEW_GET_FUN(__glewGetTexBumpParameterfvATI)
-#define glGetTexBumpParameterivATI GLEW_GET_FUN(__glewGetTexBumpParameterivATI)
-#define glTexBumpParameterfvATI GLEW_GET_FUN(__glewTexBumpParameterfvATI)
-#define glTexBumpParameterivATI GLEW_GET_FUN(__glewTexBumpParameterivATI)
-
-#define GLEW_ATI_envmap_bumpmap GLEW_GET_VAR(__GLEW_ATI_envmap_bumpmap)
-
-#endif /* GL_ATI_envmap_bumpmap */
-
-/* ------------------------- GL_ATI_fragment_shader ------------------------ */
-
-#ifndef GL_ATI_fragment_shader
-#define GL_ATI_fragment_shader 1
-
-#define GL_RED_BIT_ATI 0x00000001
-#define GL_2X_BIT_ATI 0x00000001
-#define GL_4X_BIT_ATI 0x00000002
-#define GL_GREEN_BIT_ATI 0x00000002
-#define GL_COMP_BIT_ATI 0x00000002
-#define GL_BLUE_BIT_ATI 0x00000004
-#define GL_8X_BIT_ATI 0x00000004
-#define GL_NEGATE_BIT_ATI 0x00000004
-#define GL_BIAS_BIT_ATI 0x00000008
-#define GL_HALF_BIT_ATI 0x00000008
-#define GL_QUARTER_BIT_ATI 0x00000010
-#define GL_EIGHTH_BIT_ATI 0x00000020
-#define GL_SATURATE_BIT_ATI 0x00000040
-#define GL_FRAGMENT_SHADER_ATI 0x8920
-#define GL_REG_0_ATI 0x8921
-#define GL_REG_1_ATI 0x8922
-#define GL_REG_2_ATI 0x8923
-#define GL_REG_3_ATI 0x8924
-#define GL_REG_4_ATI 0x8925
-#define GL_REG_5_ATI 0x8926
-#define GL_CON_0_ATI 0x8941
-#define GL_CON_1_ATI 0x8942
-#define GL_CON_2_ATI 0x8943
-#define GL_CON_3_ATI 0x8944
-#define GL_CON_4_ATI 0x8945
-#define GL_CON_5_ATI 0x8946
-#define GL_CON_6_ATI 0x8947
-#define GL_CON_7_ATI 0x8948
-#define GL_MOV_ATI 0x8961
-#define GL_ADD_ATI 0x8963
-#define GL_MUL_ATI 0x8964
-#define GL_SUB_ATI 0x8965
-#define GL_DOT3_ATI 0x8966
-#define GL_DOT4_ATI 0x8967
-#define GL_MAD_ATI 0x8968
-#define GL_LERP_ATI 0x8969
-#define GL_CND_ATI 0x896A
-#define GL_CND0_ATI 0x896B
-#define GL_DOT2_ADD_ATI 0x896C
-#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
-#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
-#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
-#define GL_NUM_PASSES_ATI 0x8970
-#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
-#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
-#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
-#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
-#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
-#define GL_SWIZZLE_STR_ATI 0x8976
-#define GL_SWIZZLE_STQ_ATI 0x8977
-#define GL_SWIZZLE_STR_DR_ATI 0x8978
-#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
-#define GL_SWIZZLE_STRQ_ATI 0x897A
-#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
-
-typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
-typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
-typedef void (GLAPIENTRY * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
-typedef void (GLAPIENTRY * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
-typedef void (GLAPIENTRY * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
-typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
-typedef void (GLAPIENTRY * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
-typedef void (GLAPIENTRY * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLENDFRAGMENTSHADERATIPROC) (void);
-typedef GLuint (GLAPIENTRY * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
-typedef void (GLAPIENTRY * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
-typedef void (GLAPIENTRY * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
-typedef void (GLAPIENTRY * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat* value);
-
-#define glAlphaFragmentOp1ATI GLEW_GET_FUN(__glewAlphaFragmentOp1ATI)
-#define glAlphaFragmentOp2ATI GLEW_GET_FUN(__glewAlphaFragmentOp2ATI)
-#define glAlphaFragmentOp3ATI GLEW_GET_FUN(__glewAlphaFragmentOp3ATI)
-#define glBeginFragmentShaderATI GLEW_GET_FUN(__glewBeginFragmentShaderATI)
-#define glBindFragmentShaderATI GLEW_GET_FUN(__glewBindFragmentShaderATI)
-#define glColorFragmentOp1ATI GLEW_GET_FUN(__glewColorFragmentOp1ATI)
-#define glColorFragmentOp2ATI GLEW_GET_FUN(__glewColorFragmentOp2ATI)
-#define glColorFragmentOp3ATI GLEW_GET_FUN(__glewColorFragmentOp3ATI)
-#define glDeleteFragmentShaderATI GLEW_GET_FUN(__glewDeleteFragmentShaderATI)
-#define glEndFragmentShaderATI GLEW_GET_FUN(__glewEndFragmentShaderATI)
-#define glGenFragmentShadersATI GLEW_GET_FUN(__glewGenFragmentShadersATI)
-#define glPassTexCoordATI GLEW_GET_FUN(__glewPassTexCoordATI)
-#define glSampleMapATI GLEW_GET_FUN(__glewSampleMapATI)
-#define glSetFragmentShaderConstantATI GLEW_GET_FUN(__glewSetFragmentShaderConstantATI)
-
-#define GLEW_ATI_fragment_shader GLEW_GET_VAR(__GLEW_ATI_fragment_shader)
-
-#endif /* GL_ATI_fragment_shader */
-
-/* ------------------------ GL_ATI_map_object_buffer ----------------------- */
-
-#ifndef GL_ATI_map_object_buffer
-#define GL_ATI_map_object_buffer 1
-
-typedef void* (GLAPIENTRY * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
-typedef void (GLAPIENTRY * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
-
-#define glMapObjectBufferATI GLEW_GET_FUN(__glewMapObjectBufferATI)
-#define glUnmapObjectBufferATI GLEW_GET_FUN(__glewUnmapObjectBufferATI)
-
-#define GLEW_ATI_map_object_buffer GLEW_GET_VAR(__GLEW_ATI_map_object_buffer)
-
-#endif /* GL_ATI_map_object_buffer */
-
-/* -------------------------- GL_ATI_pn_triangles -------------------------- */
-
-#ifndef GL_ATI_pn_triangles
-#define GL_ATI_pn_triangles 1
-
-#define GL_PN_TRIANGLES_ATI 0x87F0
-#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
-#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
-#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
-#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
-#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
-#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
-#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
-#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
-
-typedef void (GLAPIENTRY * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
-
-#define glPNTrianglesfATI GLEW_GET_FUN(__glPNTrianglewesfATI)
-#define glPNTrianglesiATI GLEW_GET_FUN(__glPNTrianglewesiATI)
-
-#define GLEW_ATI_pn_triangles GLEW_GET_VAR(__GLEW_ATI_pn_triangles)
-
-#endif /* GL_ATI_pn_triangles */
-
-/* ------------------------ GL_ATI_separate_stencil ------------------------ */
-
-#ifndef GL_ATI_separate_stencil
-#define GL_ATI_separate_stencil 1
-
-#define GL_STENCIL_BACK_FUNC_ATI 0x8800
-#define GL_STENCIL_BACK_FAIL_ATI 0x8801
-#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
-#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
-
-typedef void (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
-typedef void (GLAPIENTRY * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
-
-#define glStencilFuncSeparateATI GLEW_GET_FUN(__glewStencilFuncSeparateATI)
-#define glStencilOpSeparateATI GLEW_GET_FUN(__glewStencilOpSeparateATI)
-
-#define GLEW_ATI_separate_stencil GLEW_GET_VAR(__GLEW_ATI_separate_stencil)
-
-#endif /* GL_ATI_separate_stencil */
-
-/* ----------------------- GL_ATI_shader_texture_lod ----------------------- */
-
-#ifndef GL_ATI_shader_texture_lod
-#define GL_ATI_shader_texture_lod 1
-
-#define GLEW_ATI_shader_texture_lod GLEW_GET_VAR(__GLEW_ATI_shader_texture_lod)
-
-#endif /* GL_ATI_shader_texture_lod */
-
-/* ---------------------- GL_ATI_text_fragment_shader ---------------------- */
-
-#ifndef GL_ATI_text_fragment_shader
-#define GL_ATI_text_fragment_shader 1
-
-#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
-
-#define GLEW_ATI_text_fragment_shader GLEW_GET_VAR(__GLEW_ATI_text_fragment_shader)
-
-#endif /* GL_ATI_text_fragment_shader */
-
-/* --------------------- GL_ATI_texture_compression_3dc -------------------- */
-
-#ifndef GL_ATI_texture_compression_3dc
-#define GL_ATI_texture_compression_3dc 1
-
-#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI 0x8837
-
-#define GLEW_ATI_texture_compression_3dc GLEW_GET_VAR(__GLEW_ATI_texture_compression_3dc)
-
-#endif /* GL_ATI_texture_compression_3dc */
-
-/* ---------------------- GL_ATI_texture_env_combine3 ---------------------- */
-
-#ifndef GL_ATI_texture_env_combine3
-#define GL_ATI_texture_env_combine3 1
-
-#define GL_MODULATE_ADD_ATI 0x8744
-#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
-#define GL_MODULATE_SUBTRACT_ATI 0x8746
-
-#define GLEW_ATI_texture_env_combine3 GLEW_GET_VAR(__GLEW_ATI_texture_env_combine3)
-
-#endif /* GL_ATI_texture_env_combine3 */
-
-/* -------------------------- GL_ATI_texture_float ------------------------- */
-
-#ifndef GL_ATI_texture_float
-#define GL_ATI_texture_float 1
-
-#define GL_RGBA_FLOAT32_ATI 0x8814
-#define GL_RGB_FLOAT32_ATI 0x8815
-#define GL_ALPHA_FLOAT32_ATI 0x8816
-#define GL_INTENSITY_FLOAT32_ATI 0x8817
-#define GL_LUMINANCE_FLOAT32_ATI 0x8818
-#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
-#define GL_RGBA_FLOAT16_ATI 0x881A
-#define GL_RGB_FLOAT16_ATI 0x881B
-#define GL_ALPHA_FLOAT16_ATI 0x881C
-#define GL_INTENSITY_FLOAT16_ATI 0x881D
-#define GL_LUMINANCE_FLOAT16_ATI 0x881E
-#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
-
-#define GLEW_ATI_texture_float GLEW_GET_VAR(__GLEW_ATI_texture_float)
-
-#endif /* GL_ATI_texture_float */
-
-/* ----------------------- GL_ATI_texture_mirror_once ---------------------- */
-
-#ifndef GL_ATI_texture_mirror_once
-#define GL_ATI_texture_mirror_once 1
-
-#define GL_MIRROR_CLAMP_ATI 0x8742
-#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
-
-#define GLEW_ATI_texture_mirror_once GLEW_GET_VAR(__GLEW_ATI_texture_mirror_once)
-
-#endif /* GL_ATI_texture_mirror_once */
-
-/* ----------------------- GL_ATI_vertex_array_object ---------------------- */
-
-#ifndef GL_ATI_vertex_array_object
-#define GL_ATI_vertex_array_object 1
-
-#define GL_STATIC_ATI 0x8760
-#define GL_DYNAMIC_ATI 0x8761
-#define GL_PRESERVE_ATI 0x8762
-#define GL_DISCARD_ATI 0x8763
-#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
-#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
-#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
-#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
-
-typedef void (GLAPIENTRY * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
-typedef void (GLAPIENTRY * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
-typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
-typedef GLuint (GLAPIENTRY * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void* pointer, GLenum usage);
-typedef void (GLAPIENTRY * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve);
-typedef void (GLAPIENTRY * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
-
-#define glArrayObjectATI GLEW_GET_FUN(__glewArrayObjectATI)
-#define glFreeObjectBufferATI GLEW_GET_FUN(__glewFreeObjectBufferATI)
-#define glGetArrayObjectfvATI GLEW_GET_FUN(__glewGetArrayObjectfvATI)
-#define glGetArrayObjectivATI GLEW_GET_FUN(__glewGetArrayObjectivATI)
-#define glGetObjectBufferfvATI GLEW_GET_FUN(__glewGetObjectBufferfvATI)
-#define glGetObjectBufferivATI GLEW_GET_FUN(__glewGetObjectBufferivATI)
-#define glGetVariantArrayObjectfvATI GLEW_GET_FUN(__glewGetVariantArrayObjectfvATI)
-#define glGetVariantArrayObjectivATI GLEW_GET_FUN(__glewGetVariantArrayObjectivATI)
-#define glIsObjectBufferATI GLEW_GET_FUN(__glewIsObjectBufferATI)
-#define glNewObjectBufferATI GLEW_GET_FUN(__glewNewObjectBufferATI)
-#define glUpdateObjectBufferATI GLEW_GET_FUN(__glewUpdateObjectBufferATI)
-#define glVariantArrayObjectATI GLEW_GET_FUN(__glewVariantArrayObjectATI)
-
-#define GLEW_ATI_vertex_array_object GLEW_GET_VAR(__GLEW_ATI_vertex_array_object)
-
-#endif /* GL_ATI_vertex_array_object */
-
-/* ------------------- GL_ATI_vertex_attrib_array_object ------------------- */
-
-#ifndef GL_ATI_vertex_attrib_array_object
-#define GL_ATI_vertex_attrib_array_object 1
-
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
-
-#define glGetVertexAttribArrayObjectfvATI GLEW_GET_FUN(__glewGetVertexAttribArrayObjectfvATI)
-#define glGetVertexAttribArrayObjectivATI GLEW_GET_FUN(__glewGetVertexAttribArrayObjectivATI)
-#define glVertexAttribArrayObjectATI GLEW_GET_FUN(__glewVertexAttribArrayObjectATI)
-
-#define GLEW_ATI_vertex_attrib_array_object GLEW_GET_VAR(__GLEW_ATI_vertex_attrib_array_object)
-
-#endif /* GL_ATI_vertex_attrib_array_object */
-
-/* ------------------------- GL_ATI_vertex_streams ------------------------- */
-
-#ifndef GL_ATI_vertex_streams
-#define GL_ATI_vertex_streams 1
-
-#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
-#define GL_VERTEX_SOURCE_ATI 0x876C
-#define GL_VERTEX_STREAM0_ATI 0x876D
-#define GL_VERTEX_STREAM1_ATI 0x876E
-#define GL_VERTEX_STREAM2_ATI 0x876F
-#define GL_VERTEX_STREAM3_ATI 0x8770
-#define GL_VERTEX_STREAM4_ATI 0x8771
-#define GL_VERTEX_STREAM5_ATI 0x8772
-#define GL_VERTEX_STREAM6_ATI 0x8773
-#define GL_VERTEX_STREAM7_ATI 0x8774
-
-typedef void (GLAPIENTRY * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte x, GLbyte y, GLbyte z);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *v);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (GLAPIENTRY * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *v);
-
-#define glClientActiveVertexStreamATI GLEW_GET_FUN(__glewClientActiveVertexStreamATI)
-#define glNormalStream3bATI GLEW_GET_FUN(__glewNormalStream3bATI)
-#define glNormalStream3bvATI GLEW_GET_FUN(__glewNormalStream3bvATI)
-#define glNormalStream3dATI GLEW_GET_FUN(__glewNormalStream3dATI)
-#define glNormalStream3dvATI GLEW_GET_FUN(__glewNormalStream3dvATI)
-#define glNormalStream3fATI GLEW_GET_FUN(__glewNormalStream3fATI)
-#define glNormalStream3fvATI GLEW_GET_FUN(__glewNormalStream3fvATI)
-#define glNormalStream3iATI GLEW_GET_FUN(__glewNormalStream3iATI)
-#define glNormalStream3ivATI GLEW_GET_FUN(__glewNormalStream3ivATI)
-#define glNormalStream3sATI GLEW_GET_FUN(__glewNormalStream3sATI)
-#define glNormalStream3svATI GLEW_GET_FUN(__glewNormalStream3svATI)
-#define glVertexBlendEnvfATI GLEW_GET_FUN(__glewVertexBlendEnvfATI)
-#define glVertexBlendEnviATI GLEW_GET_FUN(__glewVertexBlendEnviATI)
-#define glVertexStream2dATI GLEW_GET_FUN(__glewVertexStream2dATI)
-#define glVertexStream2dvATI GLEW_GET_FUN(__glewVertexStream2dvATI)
-#define glVertexStream2fATI GLEW_GET_FUN(__glewVertexStream2fATI)
-#define glVertexStream2fvATI GLEW_GET_FUN(__glewVertexStream2fvATI)
-#define glVertexStream2iATI GLEW_GET_FUN(__glewVertexStream2iATI)
-#define glVertexStream2ivATI GLEW_GET_FUN(__glewVertexStream2ivATI)
-#define glVertexStream2sATI GLEW_GET_FUN(__glewVertexStream2sATI)
-#define glVertexStream2svATI GLEW_GET_FUN(__glewVertexStream2svATI)
-#define glVertexStream3dATI GLEW_GET_FUN(__glewVertexStream3dATI)
-#define glVertexStream3dvATI GLEW_GET_FUN(__glewVertexStream3dvATI)
-#define glVertexStream3fATI GLEW_GET_FUN(__glewVertexStream3fATI)
-#define glVertexStream3fvATI GLEW_GET_FUN(__glewVertexStream3fvATI)
-#define glVertexStream3iATI GLEW_GET_FUN(__glewVertexStream3iATI)
-#define glVertexStream3ivATI GLEW_GET_FUN(__glewVertexStream3ivATI)
-#define glVertexStream3sATI GLEW_GET_FUN(__glewVertexStream3sATI)
-#define glVertexStream3svATI GLEW_GET_FUN(__glewVertexStream3svATI)
-#define glVertexStream4dATI GLEW_GET_FUN(__glewVertexStream4dATI)
-#define glVertexStream4dvATI GLEW_GET_FUN(__glewVertexStream4dvATI)
-#define glVertexStream4fATI GLEW_GET_FUN(__glewVertexStream4fATI)
-#define glVertexStream4fvATI GLEW_GET_FUN(__glewVertexStream4fvATI)
-#define glVertexStream4iATI GLEW_GET_FUN(__glewVertexStream4iATI)
-#define glVertexStream4ivATI GLEW_GET_FUN(__glewVertexStream4ivATI)
-#define glVertexStream4sATI GLEW_GET_FUN(__glewVertexStream4sATI)
-#define glVertexStream4svATI GLEW_GET_FUN(__glewVertexStream4svATI)
-
-#define GLEW_ATI_vertex_streams GLEW_GET_VAR(__GLEW_ATI_vertex_streams)
-
-#endif /* GL_ATI_vertex_streams */
-
-/* --------------------------- GL_EXT_422_pixels --------------------------- */
-
-#ifndef GL_EXT_422_pixels
-#define GL_EXT_422_pixels 1
-
-#define GL_422_EXT 0x80CC
-#define GL_422_REV_EXT 0x80CD
-#define GL_422_AVERAGE_EXT 0x80CE
-#define GL_422_REV_AVERAGE_EXT 0x80CF
-
-#define GLEW_EXT_422_pixels GLEW_GET_VAR(__GLEW_EXT_422_pixels)
-
-#endif /* GL_EXT_422_pixels */
-
-/* ---------------------------- GL_EXT_Cg_shader --------------------------- */
-
-#ifndef GL_EXT_Cg_shader
-#define GL_EXT_Cg_shader 1
-
-#define GL_CG_VERTEX_SHADER_EXT 0x890E
-#define GL_CG_FRAGMENT_SHADER_EXT 0x890F
-
-#define GLEW_EXT_Cg_shader GLEW_GET_VAR(__GLEW_EXT_Cg_shader)
-
-#endif /* GL_EXT_Cg_shader */
-
-/* ------------------------------ GL_EXT_abgr ------------------------------ */
-
-#ifndef GL_EXT_abgr
-#define GL_EXT_abgr 1
-
-#define GL_ABGR_EXT 0x8000
-
-#define GLEW_EXT_abgr GLEW_GET_VAR(__GLEW_EXT_abgr)
-
-#endif /* GL_EXT_abgr */
-
-/* ------------------------------ GL_EXT_bgra ------------------------------ */
-
-#ifndef GL_EXT_bgra
-#define GL_EXT_bgra 1
-
-#define GL_BGR_EXT 0x80E0
-#define GL_BGRA_EXT 0x80E1
-
-#define GLEW_EXT_bgra GLEW_GET_VAR(__GLEW_EXT_bgra)
-
-#endif /* GL_EXT_bgra */
-
-/* ------------------------ GL_EXT_bindable_uniform ------------------------ */
-
-#ifndef GL_EXT_bindable_uniform
-#define GL_EXT_bindable_uniform 1
-
-#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
-#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
-#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
-#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
-#define GL_UNIFORM_BUFFER_EXT 0x8DEE
-#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
-
-typedef GLint (GLAPIENTRY * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
-typedef GLintptr (GLAPIENTRY * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
-typedef void (GLAPIENTRY * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
-
-#define glGetUniformBufferSizeEXT GLEW_GET_FUN(__glewGetUniformBufferSizeEXT)
-#define glGetUniformOffsetEXT GLEW_GET_FUN(__glewGetUniformOffsetEXT)
-#define glUniformBufferEXT GLEW_GET_FUN(__glewUniformBufferEXT)
-
-#define GLEW_EXT_bindable_uniform GLEW_GET_VAR(__GLEW_EXT_bindable_uniform)
-
-#endif /* GL_EXT_bindable_uniform */
-
-/* --------------------------- GL_EXT_blend_color -------------------------- */
-
-#ifndef GL_EXT_blend_color
-#define GL_EXT_blend_color 1
-
-#define GL_CONSTANT_COLOR_EXT 0x8001
-#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
-#define GL_CONSTANT_ALPHA_EXT 0x8003
-#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
-#define GL_BLEND_COLOR_EXT 0x8005
-
-typedef void (GLAPIENTRY * PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
-
-#define glBlendColorEXT GLEW_GET_FUN(__glewBlendColorEXT)
-
-#define GLEW_EXT_blend_color GLEW_GET_VAR(__GLEW_EXT_blend_color)
-
-#endif /* GL_EXT_blend_color */
-
-/* --------------------- GL_EXT_blend_equation_separate -------------------- */
-
-#ifndef GL_EXT_blend_equation_separate
-#define GL_EXT_blend_equation_separate 1
-
-#define GL_BLEND_EQUATION_RGB_EXT 0x8009
-#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
-
-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
-
-#define glBlendEquationSeparateEXT GLEW_GET_FUN(__glewBlendEquationSeparateEXT)
-
-#define GLEW_EXT_blend_equation_separate GLEW_GET_VAR(__GLEW_EXT_blend_equation_separate)
-
-#endif /* GL_EXT_blend_equation_separate */
-
-/* ----------------------- GL_EXT_blend_func_separate ---------------------- */
-
-#ifndef GL_EXT_blend_func_separate
-#define GL_EXT_blend_func_separate 1
-
-#define GL_BLEND_DST_RGB_EXT 0x80C8
-#define GL_BLEND_SRC_RGB_EXT 0x80C9
-#define GL_BLEND_DST_ALPHA_EXT 0x80CA
-#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
-
-typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
-
-#define glBlendFuncSeparateEXT GLEW_GET_FUN(__glewBlendFuncSeparateEXT)
-
-#define GLEW_EXT_blend_func_separate GLEW_GET_VAR(__GLEW_EXT_blend_func_separate)
-
-#endif /* GL_EXT_blend_func_separate */
-
-/* ------------------------- GL_EXT_blend_logic_op ------------------------- */
-
-#ifndef GL_EXT_blend_logic_op
-#define GL_EXT_blend_logic_op 1
-
-#define GLEW_EXT_blend_logic_op GLEW_GET_VAR(__GLEW_EXT_blend_logic_op)
-
-#endif /* GL_EXT_blend_logic_op */
-
-/* -------------------------- GL_EXT_blend_minmax -------------------------- */
-
-#ifndef GL_EXT_blend_minmax
-#define GL_EXT_blend_minmax 1
-
-#define GL_FUNC_ADD_EXT 0x8006
-#define GL_MIN_EXT 0x8007
-#define GL_MAX_EXT 0x8008
-#define GL_BLEND_EQUATION_EXT 0x8009
-
-typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
-
-#define glBlendEquationEXT GLEW_GET_FUN(__glewBlendEquationEXT)
-
-#define GLEW_EXT_blend_minmax GLEW_GET_VAR(__GLEW_EXT_blend_minmax)
-
-#endif /* GL_EXT_blend_minmax */
-
-/* ------------------------- GL_EXT_blend_subtract ------------------------- */
-
-#ifndef GL_EXT_blend_subtract
-#define GL_EXT_blend_subtract 1
-
-#define GL_FUNC_SUBTRACT_EXT 0x800A
-#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
-
-#define GLEW_EXT_blend_subtract GLEW_GET_VAR(__GLEW_EXT_blend_subtract)
-
-#endif /* GL_EXT_blend_subtract */
-
-/* ------------------------ GL_EXT_clip_volume_hint ------------------------ */
-
-#ifndef GL_EXT_clip_volume_hint
-#define GL_EXT_clip_volume_hint 1
-
-#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
-
-#define GLEW_EXT_clip_volume_hint GLEW_GET_VAR(__GLEW_EXT_clip_volume_hint)
-
-#endif /* GL_EXT_clip_volume_hint */
-
-/* ------------------------------ GL_EXT_cmyka ----------------------------- */
-
-#ifndef GL_EXT_cmyka
-#define GL_EXT_cmyka 1
-
-#define GL_CMYK_EXT 0x800C
-#define GL_CMYKA_EXT 0x800D
-#define GL_PACK_CMYK_HINT_EXT 0x800E
-#define GL_UNPACK_CMYK_HINT_EXT 0x800F
-
-#define GLEW_EXT_cmyka GLEW_GET_VAR(__GLEW_EXT_cmyka)
-
-#endif /* GL_EXT_cmyka */
-
-/* ------------------------- GL_EXT_color_subtable ------------------------- */
-
-#ifndef GL_EXT_color_subtable
-#define GL_EXT_color_subtable 1
-
-typedef void (GLAPIENTRY * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data);
-typedef void (GLAPIENTRY * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
-
-#define glColorSubTableEXT GLEW_GET_FUN(__glewColorSubTableEXT)
-#define glCopyColorSubTableEXT GLEW_GET_FUN(__glewCopyColorSubTableEXT)
-
-#define GLEW_EXT_color_subtable GLEW_GET_VAR(__GLEW_EXT_color_subtable)
-
-#endif /* GL_EXT_color_subtable */
-
-/* ---------------------- GL_EXT_compiled_vertex_array --------------------- */
-
-#ifndef GL_EXT_compiled_vertex_array
-#define GL_EXT_compiled_vertex_array 1
-
-typedef void (GLAPIENTRY * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
-typedef void (GLAPIENTRY * PFNGLUNLOCKARRAYSEXTPROC) (void);
-
-#define glLockArraysEXT GLEW_GET_FUN(__glewLockArraysEXT)
-#define glUnlockArraysEXT GLEW_GET_FUN(__glewUnlockArraysEXT)
-
-#define GLEW_EXT_compiled_vertex_array GLEW_GET_VAR(__GLEW_EXT_compiled_vertex_array)
-
-#endif /* GL_EXT_compiled_vertex_array */
-
-/* --------------------------- GL_EXT_convolution -------------------------- */
-
-#ifndef GL_EXT_convolution
-#define GL_EXT_convolution 1
-
-#define GL_CONVOLUTION_1D_EXT 0x8010
-#define GL_CONVOLUTION_2D_EXT 0x8011
-#define GL_SEPARABLE_2D_EXT 0x8012
-#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
-#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
-#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
-#define GL_REDUCE_EXT 0x8016
-#define GL_CONVOLUTION_FORMAT_EXT 0x8017
-#define GL_CONVOLUTION_WIDTH_EXT 0x8018
-#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
-#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
-#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
-#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
-#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
-#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
-#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
-#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
-#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
-#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
-#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
-
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (GLAPIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void* image);
-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
-typedef void (GLAPIENTRY * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column);
-
-#define glConvolutionFilter1DEXT GLEW_GET_FUN(__glewConvolutionFilter1DEXT)
-#define glConvolutionFilter2DEXT GLEW_GET_FUN(__glewConvolutionFilter2DEXT)
-#define glConvolutionParameterfEXT GLEW_GET_FUN(__glewConvolutionParameterfEXT)
-#define glConvolutionParameterfvEXT GLEW_GET_FUN(__glewConvolutionParameterfvEXT)
-#define glConvolutionParameteriEXT GLEW_GET_FUN(__glewConvolutionParameteriEXT)
-#define glConvolutionParameterivEXT GLEW_GET_FUN(__glewConvolutionParameterivEXT)
-#define glCopyConvolutionFilter1DEXT GLEW_GET_FUN(__glewCopyConvolutionFilter1DEXT)
-#define glCopyConvolutionFilter2DEXT GLEW_GET_FUN(__glewCopyConvolutionFilter2DEXT)
-#define glGetConvolutionFilterEXT GLEW_GET_FUN(__glewGetConvolutionFilterEXT)
-#define glGetConvolutionParameterfvEXT GLEW_GET_FUN(__glewGetConvolutionParameterfvEXT)
-#define glGetConvolutionParameterivEXT GLEW_GET_FUN(__glewGetConvolutionParameterivEXT)
-#define glGetSeparableFilterEXT GLEW_GET_FUN(__glewGetSeparableFilterEXT)
-#define glSeparableFilter2DEXT GLEW_GET_FUN(__glewSeparableFilter2DEXT)
-
-#define GLEW_EXT_convolution GLEW_GET_VAR(__GLEW_EXT_convolution)
-
-#endif /* GL_EXT_convolution */
-
-/* ------------------------ GL_EXT_coordinate_frame ------------------------ */
-
-#ifndef GL_EXT_coordinate_frame
-#define GL_EXT_coordinate_frame 1
-
-#define GL_TANGENT_ARRAY_EXT 0x8439
-#define GL_BINORMAL_ARRAY_EXT 0x843A
-#define GL_CURRENT_TANGENT_EXT 0x843B
-#define GL_CURRENT_BINORMAL_EXT 0x843C
-#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
-#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
-#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
-#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
-#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
-#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
-#define GL_MAP1_TANGENT_EXT 0x8444
-#define GL_MAP2_TANGENT_EXT 0x8445
-#define GL_MAP1_BINORMAL_EXT 0x8446
-#define GL_MAP2_BINORMAL_EXT 0x8447
-
-typedef void (GLAPIENTRY * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, void* pointer);
-typedef void (GLAPIENTRY * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, void* pointer);
-
-#define glBinormalPointerEXT GLEW_GET_FUN(__glewBinormalPointerEXT)
-#define glTangentPointerEXT GLEW_GET_FUN(__glewTangentPointerEXT)
-
-#define GLEW_EXT_coordinate_frame GLEW_GET_VAR(__GLEW_EXT_coordinate_frame)
-
-#endif /* GL_EXT_coordinate_frame */
-
-/* -------------------------- GL_EXT_copy_texture -------------------------- */
-
-#ifndef GL_EXT_copy_texture
-#define GL_EXT_copy_texture 1
-
-typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
-typedef void (GLAPIENTRY * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-
-#define glCopyTexImage1DEXT GLEW_GET_FUN(__glewCopyTexImage1DEXT)
-#define glCopyTexImage2DEXT GLEW_GET_FUN(__glewCopyTexImage2DEXT)
-#define glCopyTexSubImage1DEXT GLEW_GET_FUN(__glewCopyTexSubImage1DEXT)
-#define glCopyTexSubImage2DEXT GLEW_GET_FUN(__glewCopyTexSubImage2DEXT)
-#define glCopyTexSubImage3DEXT GLEW_GET_FUN(__glewCopyTexSubImage3DEXT)
-
-#define GLEW_EXT_copy_texture GLEW_GET_VAR(__GLEW_EXT_copy_texture)
-
-#endif /* GL_EXT_copy_texture */
-
-/* --------------------------- GL_EXT_cull_vertex -------------------------- */
-
-#ifndef GL_EXT_cull_vertex
-#define GL_EXT_cull_vertex 1
-
-typedef void (GLAPIENTRY * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat* params);
-
-#define glCullParameterdvEXT GLEW_GET_FUN(__glewCullParameterdvEXT)
-#define glCullParameterfvEXT GLEW_GET_FUN(__glewCullParameterfvEXT)
-
-#define GLEW_EXT_cull_vertex GLEW_GET_VAR(__GLEW_EXT_cull_vertex)
-
-#endif /* GL_EXT_cull_vertex */
-
-/* ------------------------ GL_EXT_depth_bounds_test ----------------------- */
-
-#ifndef GL_EXT_depth_bounds_test
-#define GL_EXT_depth_bounds_test 1
-
-#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
-#define GL_DEPTH_BOUNDS_EXT 0x8891
-
-typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
-
-#define glDepthBoundsEXT GLEW_GET_FUN(__glewDepthBoundsEXT)
-
-#define GLEW_EXT_depth_bounds_test GLEW_GET_VAR(__GLEW_EXT_depth_bounds_test)
-
-#endif /* GL_EXT_depth_bounds_test */
-
-/* -------------------------- GL_EXT_draw_buffers2 ------------------------- */
-
-#ifndef GL_EXT_draw_buffers2
-#define GL_EXT_draw_buffers2 1
-
-typedef void (GLAPIENTRY * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
-typedef void (GLAPIENTRY * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
-typedef void (GLAPIENTRY * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
-typedef void (GLAPIENTRY * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
-typedef void (GLAPIENTRY * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
-typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
-
-#define glColorMaskIndexedEXT GLEW_GET_FUN(__glewColorMaskIndexedEXT)
-#define glDisableIndexedEXT GLEW_GET_FUN(__glewDisableIndexedEXT)
-#define glEnableIndexedEXT GLEW_GET_FUN(__glewEnableIndexedEXT)
-#define glGetBooleanIndexedvEXT GLEW_GET_FUN(__glewGetBooleanIndexedvEXT)
-#define glGetIntegerIndexedvEXT GLEW_GET_FUN(__glewGetIntegerIndexedvEXT)
-#define glIsEnabledIndexedEXT GLEW_GET_FUN(__glewIsEnabledIndexedEXT)
-
-#define GLEW_EXT_draw_buffers2 GLEW_GET_VAR(__GLEW_EXT_draw_buffers2)
-
-#endif /* GL_EXT_draw_buffers2 */
-
-/* ------------------------- GL_EXT_draw_instanced ------------------------- */
-
-#ifndef GL_EXT_draw_instanced
-#define GL_EXT_draw_instanced 1
-
-typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
-typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
-
-#define glDrawArraysInstancedEXT GLEW_GET_FUN(__glewDrawArraysInstancedEXT)
-#define glDrawElementsInstancedEXT GLEW_GET_FUN(__glewDrawElementsInstancedEXT)
-
-#define GLEW_EXT_draw_instanced GLEW_GET_VAR(__GLEW_EXT_draw_instanced)
-
-#endif /* GL_EXT_draw_instanced */
-
-/* ----------------------- GL_EXT_draw_range_elements ---------------------- */
-
-#ifndef GL_EXT_draw_range_elements
-#define GL_EXT_draw_range_elements 1
-
-#define GL_MAX_ELEMENTS_VERTICES 0x80E8
-#define GL_MAX_ELEMENTS_INDICES 0x80E9
-
-typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
-
-#define glDrawRangeElementsEXT GLEW_GET_FUN(__glewDrawRangeElementsEXT)
-
-#define GLEW_EXT_draw_range_elements GLEW_GET_VAR(__GLEW_EXT_draw_range_elements)
-
-#endif /* GL_EXT_draw_range_elements */
-
-/* ---------------------------- GL_EXT_fog_coord --------------------------- */
-
-#ifndef GL_EXT_fog_coord
-#define GL_EXT_fog_coord 1
-
-#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
-#define GL_FOG_COORDINATE_EXT 0x8451
-#define GL_FRAGMENT_DEPTH_EXT 0x8452
-#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
-#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
-#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
-#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
-#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
-
-typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
-
-#define glFogCoordPointerEXT GLEW_GET_FUN(__glewFogCoordPointerEXT)
-#define glFogCoorddEXT GLEW_GET_FUN(__glewFogCoorddEXT)
-#define glFogCoorddvEXT GLEW_GET_FUN(__glewFogCoorddvEXT)
-#define glFogCoordfEXT GLEW_GET_FUN(__glewFogCoordfEXT)
-#define glFogCoordfvEXT GLEW_GET_FUN(__glewFogCoordfvEXT)
-
-#define GLEW_EXT_fog_coord GLEW_GET_VAR(__GLEW_EXT_fog_coord)
-
-#endif /* GL_EXT_fog_coord */
-
-/* ------------------------ GL_EXT_fragment_lighting ----------------------- */
-
-#ifndef GL_EXT_fragment_lighting
-#define GL_EXT_fragment_lighting 1
-
-#define GL_FRAGMENT_LIGHTING_EXT 0x8400
-#define GL_FRAGMENT_COLOR_MATERIAL_EXT 0x8401
-#define GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT 0x8402
-#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT 0x8403
-#define GL_MAX_FRAGMENT_LIGHTS_EXT 0x8404
-#define GL_MAX_ACTIVE_LIGHTS_EXT 0x8405
-#define GL_CURRENT_RASTER_NORMAL_EXT 0x8406
-#define GL_LIGHT_ENV_MODE_EXT 0x8407
-#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT 0x8408
-#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT 0x8409
-#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT 0x840A
-#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT 0x840B
-#define GL_FRAGMENT_LIGHT0_EXT 0x840C
-#define GL_FRAGMENT_LIGHT7_EXT 0x8413
-
-typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALEXTPROC) (GLenum face, GLenum mode);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFEXTPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVEXTPROC) (GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIEXTPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVEXTPROC) (GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFEXTPROC) (GLenum light, GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIEXTPROC) (GLenum light, GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFEXTPROC) (GLenum face, GLenum pname, const GLfloat param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIEXTPROC) (GLenum face, GLenum pname, const GLint param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVEXTPROC) (GLenum light, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVEXTPROC) (GLenum light, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVEXTPROC) (GLenum face, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVEXTPROC) (GLenum face, GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLLIGHTENVIEXTPROC) (GLenum pname, GLint param);
-
-#define glFragmentColorMaterialEXT GLEW_GET_FUN(__glewFragmentColorMaterialEXT)
-#define glFragmentLightModelfEXT GLEW_GET_FUN(__glewFragmentLightModelfEXT)
-#define glFragmentLightModelfvEXT GLEW_GET_FUN(__glewFragmentLightModelfvEXT)
-#define glFragmentLightModeliEXT GLEW_GET_FUN(__glewFragmentLightModeliEXT)
-#define glFragmentLightModelivEXT GLEW_GET_FUN(__glewFragmentLightModelivEXT)
-#define glFragmentLightfEXT GLEW_GET_FUN(__glewFragmentLightfEXT)
-#define glFragmentLightfvEXT GLEW_GET_FUN(__glewFragmentLightfvEXT)
-#define glFragmentLightiEXT GLEW_GET_FUN(__glewFragmentLightiEXT)
-#define glFragmentLightivEXT GLEW_GET_FUN(__glewFragmentLightivEXT)
-#define glFragmentMaterialfEXT GLEW_GET_FUN(__glewFragmentMaterialfEXT)
-#define glFragmentMaterialfvEXT GLEW_GET_FUN(__glewFragmentMaterialfvEXT)
-#define glFragmentMaterialiEXT GLEW_GET_FUN(__glewFragmentMaterialiEXT)
-#define glFragmentMaterialivEXT GLEW_GET_FUN(__glewFragmentMaterialivEXT)
-#define glGetFragmentLightfvEXT GLEW_GET_FUN(__glewGetFragmentLightfvEXT)
-#define glGetFragmentLightivEXT GLEW_GET_FUN(__glewGetFragmentLightivEXT)
-#define glGetFragmentMaterialfvEXT GLEW_GET_FUN(__glewGetFragmentMaterialfvEXT)
-#define glGetFragmentMaterialivEXT GLEW_GET_FUN(__glewGetFragmentMaterialivEXT)
-#define glLightEnviEXT GLEW_GET_FUN(__glewLightEnviEXT)
-
-#define GLEW_EXT_fragment_lighting GLEW_GET_VAR(__GLEW_EXT_fragment_lighting)
-
-#endif /* GL_EXT_fragment_lighting */
-
-/* ------------------------ GL_EXT_framebuffer_blit ------------------------ */
-
-#ifndef GL_EXT_framebuffer_blit
-#define GL_EXT_framebuffer_blit 1
-
-#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
-#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
-#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
-#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
-
-typedef void (GLAPIENTRY * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
-
-#define glBlitFramebufferEXT GLEW_GET_FUN(__glewBlitFramebufferEXT)
-
-#define GLEW_EXT_framebuffer_blit GLEW_GET_VAR(__GLEW_EXT_framebuffer_blit)
-
-#endif /* GL_EXT_framebuffer_blit */
-
-/* --------------------- GL_EXT_framebuffer_multisample -------------------- */
-
-#ifndef GL_EXT_framebuffer_multisample
-#define GL_EXT_framebuffer_multisample 1
-
-#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
-#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
-#define GL_MAX_SAMPLES_EXT 0x8D57
-
-typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
-
-#define glRenderbufferStorageMultisampleEXT GLEW_GET_FUN(__glewRenderbufferStorageMultisampleEXT)
-
-#define GLEW_EXT_framebuffer_multisample GLEW_GET_VAR(__GLEW_EXT_framebuffer_multisample)
-
-#endif /* GL_EXT_framebuffer_multisample */
-
-/* ----------------------- GL_EXT_framebuffer_object ----------------------- */
-
-#ifndef GL_EXT_framebuffer_object
-#define GL_EXT_framebuffer_object 1
-
-#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
-#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
-#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
-#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
-#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
-#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
-#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
-#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
-#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
-#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
-#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
-#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
-#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
-#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
-#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
-#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
-#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
-#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
-#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
-#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
-#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
-#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
-#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
-#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
-#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
-#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
-#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
-#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
-#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
-#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
-#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
-#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
-#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
-#define GL_FRAMEBUFFER_EXT 0x8D40
-#define GL_RENDERBUFFER_EXT 0x8D41
-#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
-#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
-#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
-#define GL_STENCIL_INDEX1_EXT 0x8D46
-#define GL_STENCIL_INDEX4_EXT 0x8D47
-#define GL_STENCIL_INDEX8_EXT 0x8D48
-#define GL_STENCIL_INDEX16_EXT 0x8D49
-#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
-#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
-#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
-#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
-#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
-#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
-
-typedef void (GLAPIENTRY * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
-typedef void (GLAPIENTRY * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
-typedef GLenum (GLAPIENTRY * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint* framebuffers);
-typedef void (GLAPIENTRY * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint* renderbuffers);
-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
-typedef void (GLAPIENTRY * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint* framebuffers);
-typedef void (GLAPIENTRY * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint* renderbuffers);
-typedef void (GLAPIENTRY * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
-typedef GLboolean (GLAPIENTRY * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
-typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
-
-#define glBindFramebufferEXT GLEW_GET_FUN(__glewBindFramebufferEXT)
-#define glBindRenderbufferEXT GLEW_GET_FUN(__glewBindRenderbufferEXT)
-#define glCheckFramebufferStatusEXT GLEW_GET_FUN(__glewCheckFramebufferStatusEXT)
-#define glDeleteFramebuffersEXT GLEW_GET_FUN(__glewDeleteFramebuffersEXT)
-#define glDeleteRenderbuffersEXT GLEW_GET_FUN(__glewDeleteRenderbuffersEXT)
-#define glFramebufferRenderbufferEXT GLEW_GET_FUN(__glewFramebufferRenderbufferEXT)
-#define glFramebufferTexture1DEXT GLEW_GET_FUN(__glewFramebufferTexture1DEXT)
-#define glFramebufferTexture2DEXT GLEW_GET_FUN(__glewFramebufferTexture2DEXT)
-#define glFramebufferTexture3DEXT GLEW_GET_FUN(__glewFramebufferTexture3DEXT)
-#define glGenFramebuffersEXT GLEW_GET_FUN(__glewGenFramebuffersEXT)
-#define glGenRenderbuffersEXT GLEW_GET_FUN(__glewGenRenderbuffersEXT)
-#define glGenerateMipmapEXT GLEW_GET_FUN(__glewGenerateMipmapEXT)
-#define glGetFramebufferAttachmentParameterivEXT GLEW_GET_FUN(__glewGetFramebufferAttachmentParameterivEXT)
-#define glGetRenderbufferParameterivEXT GLEW_GET_FUN(__glewGetRenderbufferParameterivEXT)
-#define glIsFramebufferEXT GLEW_GET_FUN(__glewIsFramebufferEXT)
-#define glIsRenderbufferEXT GLEW_GET_FUN(__glewIsRenderbufferEXT)
-#define glRenderbufferStorageEXT GLEW_GET_FUN(__glewRenderbufferStorageEXT)
-
-#define GLEW_EXT_framebuffer_object GLEW_GET_VAR(__GLEW_EXT_framebuffer_object)
-
-#endif /* GL_EXT_framebuffer_object */
-
-/* ------------------------ GL_EXT_framebuffer_sRGB ------------------------ */
-
-#ifndef GL_EXT_framebuffer_sRGB
-#define GL_EXT_framebuffer_sRGB 1
-
-#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
-#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
-
-#define GLEW_EXT_framebuffer_sRGB GLEW_GET_VAR(__GLEW_EXT_framebuffer_sRGB)
-
-#endif /* GL_EXT_framebuffer_sRGB */
-
-/* ------------------------ GL_EXT_geometry_shader4 ------------------------ */
-
-#ifndef GL_EXT_geometry_shader4
-#define GL_EXT_geometry_shader4 1
-
-#define GL_LINES_ADJACENCY_EXT 0xA
-#define GL_LINE_STRIP_ADJACENCY_EXT 0xB
-#define GL_TRIANGLES_ADJACENCY_EXT 0xC
-#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0xD
-#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
-#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
-#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
-#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
-#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
-#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
-#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
-#define GL_GEOMETRY_SHADER_EXT 0x8DD9
-#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
-#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
-#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
-#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
-#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
-#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
-#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
-#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
-
-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
-typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
-
-#define glFramebufferTextureEXT GLEW_GET_FUN(__glewFramebufferTextureEXT)
-#define glFramebufferTextureFaceEXT GLEW_GET_FUN(__glewFramebufferTextureFaceEXT)
-#define glFramebufferTextureLayerEXT GLEW_GET_FUN(__glewFramebufferTextureLayerEXT)
-#define glProgramParameteriEXT GLEW_GET_FUN(__glewProgramParameteriEXT)
-
-#define GLEW_EXT_geometry_shader4 GLEW_GET_VAR(__GLEW_EXT_geometry_shader4)
-
-#endif /* GL_EXT_geometry_shader4 */
-
-/* --------------------- GL_EXT_gpu_program_parameters --------------------- */
-
-#ifndef GL_EXT_gpu_program_parameters
-#define GL_EXT_gpu_program_parameters 1
-
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat* params);
-
-#define glProgramEnvParameters4fvEXT GLEW_GET_FUN(__glewProgramEnvParameters4fvEXT)
-#define glProgramLocalParameters4fvEXT GLEW_GET_FUN(__glewProgramLocalParameters4fvEXT)
-
-#define GLEW_EXT_gpu_program_parameters GLEW_GET_VAR(__GLEW_EXT_gpu_program_parameters)
-
-#endif /* GL_EXT_gpu_program_parameters */
-
-/* --------------------------- GL_EXT_gpu_shader4 -------------------------- */
-
-#ifndef GL_EXT_gpu_shader4
-#define GL_EXT_gpu_shader4 1
-
-#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
-#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
-#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
-#define GL_SAMPLER_BUFFER_EXT 0x8DC2
-#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
-#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
-#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
-#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
-#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
-#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
-#define GL_INT_SAMPLER_1D_EXT 0x8DC9
-#define GL_INT_SAMPLER_2D_EXT 0x8DCA
-#define GL_INT_SAMPLER_3D_EXT 0x8DCB
-#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
-#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
-#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
-#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
-#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
-#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
-#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
-#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
-#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
-#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
-#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
-#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
-#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
-
-typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
-typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
-typedef void (GLAPIENTRY * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
-typedef void (GLAPIENTRY * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
-typedef void (GLAPIENTRY * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
-typedef void (GLAPIENTRY * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
-typedef void (GLAPIENTRY * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-
-#define glBindFragDataLocationEXT GLEW_GET_FUN(__glewBindFragDataLocationEXT)
-#define glGetFragDataLocationEXT GLEW_GET_FUN(__glewGetFragDataLocationEXT)
-#define glGetUniformuivEXT GLEW_GET_FUN(__glewGetUniformuivEXT)
-#define glGetVertexAttribIivEXT GLEW_GET_FUN(__glewGetVertexAttribIivEXT)
-#define glGetVertexAttribIuivEXT GLEW_GET_FUN(__glewGetVertexAttribIuivEXT)
-#define glUniform1uiEXT GLEW_GET_FUN(__glewUniform1uiEXT)
-#define glUniform1uivEXT GLEW_GET_FUN(__glewUniform1uivEXT)
-#define glUniform2uiEXT GLEW_GET_FUN(__glewUniform2uiEXT)
-#define glUniform2uivEXT GLEW_GET_FUN(__glewUniform2uivEXT)
-#define glUniform3uiEXT GLEW_GET_FUN(__glewUniform3uiEXT)
-#define glUniform3uivEXT GLEW_GET_FUN(__glewUniform3uivEXT)
-#define glUniform4uiEXT GLEW_GET_FUN(__glewUniform4uiEXT)
-#define glUniform4uivEXT GLEW_GET_FUN(__glewUniform4uivEXT)
-#define glVertexAttribI1iEXT GLEW_GET_FUN(__glewVertexAttribI1iEXT)
-#define glVertexAttribI1ivEXT GLEW_GET_FUN(__glewVertexAttribI1ivEXT)
-#define glVertexAttribI1uiEXT GLEW_GET_FUN(__glewVertexAttribI1uiEXT)
-#define glVertexAttribI1uivEXT GLEW_GET_FUN(__glewVertexAttribI1uivEXT)
-#define glVertexAttribI2iEXT GLEW_GET_FUN(__glewVertexAttribI2iEXT)
-#define glVertexAttribI2ivEXT GLEW_GET_FUN(__glewVertexAttribI2ivEXT)
-#define glVertexAttribI2uiEXT GLEW_GET_FUN(__glewVertexAttribI2uiEXT)
-#define glVertexAttribI2uivEXT GLEW_GET_FUN(__glewVertexAttribI2uivEXT)
-#define glVertexAttribI3iEXT GLEW_GET_FUN(__glewVertexAttribI3iEXT)
-#define glVertexAttribI3ivEXT GLEW_GET_FUN(__glewVertexAttribI3ivEXT)
-#define glVertexAttribI3uiEXT GLEW_GET_FUN(__glewVertexAttribI3uiEXT)
-#define glVertexAttribI3uivEXT GLEW_GET_FUN(__glewVertexAttribI3uivEXT)
-#define glVertexAttribI4bvEXT GLEW_GET_FUN(__glewVertexAttribI4bvEXT)
-#define glVertexAttribI4iEXT GLEW_GET_FUN(__glewVertexAttribI4iEXT)
-#define glVertexAttribI4ivEXT GLEW_GET_FUN(__glewVertexAttribI4ivEXT)
-#define glVertexAttribI4svEXT GLEW_GET_FUN(__glewVertexAttribI4svEXT)
-#define glVertexAttribI4ubvEXT GLEW_GET_FUN(__glewVertexAttribI4ubvEXT)
-#define glVertexAttribI4uiEXT GLEW_GET_FUN(__glewVertexAttribI4uiEXT)
-#define glVertexAttribI4uivEXT GLEW_GET_FUN(__glewVertexAttribI4uivEXT)
-#define glVertexAttribI4usvEXT GLEW_GET_FUN(__glewVertexAttribI4usvEXT)
-#define glVertexAttribIPointerEXT GLEW_GET_FUN(__glewVertexAttribIPointerEXT)
-
-#define GLEW_EXT_gpu_shader4 GLEW_GET_VAR(__GLEW_EXT_gpu_shader4)
-
-#endif /* GL_EXT_gpu_shader4 */
-
-/* ---------------------------- GL_EXT_histogram --------------------------- */
-
-#ifndef GL_EXT_histogram
-#define GL_EXT_histogram 1
-
-#define GL_HISTOGRAM_EXT 0x8024
-#define GL_PROXY_HISTOGRAM_EXT 0x8025
-#define GL_HISTOGRAM_WIDTH_EXT 0x8026
-#define GL_HISTOGRAM_FORMAT_EXT 0x8027
-#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
-#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
-#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
-#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
-#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
-#define GL_HISTOGRAM_SINK_EXT 0x802D
-#define GL_MINMAX_EXT 0x802E
-#define GL_MINMAX_FORMAT_EXT 0x802F
-#define GL_MINMAX_SINK_EXT 0x8030
-
-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
-typedef void (GLAPIENTRY * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
-typedef void (GLAPIENTRY * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLRESETMINMAXEXTPROC) (GLenum target);
-
-#define glGetHistogramEXT GLEW_GET_FUN(__glewGetHistogramEXT)
-#define glGetHistogramParameterfvEXT GLEW_GET_FUN(__glewGetHistogramParameterfvEXT)
-#define glGetHistogramParameterivEXT GLEW_GET_FUN(__glewGetHistogramParameterivEXT)
-#define glGetMinmaxEXT GLEW_GET_FUN(__glewGetMinmaxEXT)
-#define glGetMinmaxParameterfvEXT GLEW_GET_FUN(__glewGetMinmaxParameterfvEXT)
-#define glGetMinmaxParameterivEXT GLEW_GET_FUN(__glewGetMinmaxParameterivEXT)
-#define glHistogramEXT GLEW_GET_FUN(__glewHistogramEXT)
-#define glMinmaxEXT GLEW_GET_FUN(__glewMinmaxEXT)
-#define glResetHistogramEXT GLEW_GET_FUN(__glewResetHistogramEXT)
-#define glResetMinmaxEXT GLEW_GET_FUN(__glewResetMinmaxEXT)
-
-#define GLEW_EXT_histogram GLEW_GET_VAR(__GLEW_EXT_histogram)
-
-#endif /* GL_EXT_histogram */
-
-/* ----------------------- GL_EXT_index_array_formats ---------------------- */
-
-#ifndef GL_EXT_index_array_formats
-#define GL_EXT_index_array_formats 1
-
-#define GLEW_EXT_index_array_formats GLEW_GET_VAR(__GLEW_EXT_index_array_formats)
-
-#endif /* GL_EXT_index_array_formats */
-
-/* --------------------------- GL_EXT_index_func --------------------------- */
-
-#ifndef GL_EXT_index_func
-#define GL_EXT_index_func 1
-
-typedef void (GLAPIENTRY * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLfloat ref);
-
-#define glIndexFuncEXT GLEW_GET_FUN(__glewIndexFuncEXT)
-
-#define GLEW_EXT_index_func GLEW_GET_VAR(__GLEW_EXT_index_func)
-
-#endif /* GL_EXT_index_func */
-
-/* ------------------------- GL_EXT_index_material ------------------------- */
-
-#ifndef GL_EXT_index_material
-#define GL_EXT_index_material 1
-
-typedef void (GLAPIENTRY * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
-
-#define glIndexMaterialEXT GLEW_GET_FUN(__glewIndexMaterialEXT)
-
-#define GLEW_EXT_index_material GLEW_GET_VAR(__GLEW_EXT_index_material)
-
-#endif /* GL_EXT_index_material */
-
-/* -------------------------- GL_EXT_index_texture ------------------------- */
-
-#ifndef GL_EXT_index_texture
-#define GL_EXT_index_texture 1
-
-#define GLEW_EXT_index_texture GLEW_GET_VAR(__GLEW_EXT_index_texture)
-
-#endif /* GL_EXT_index_texture */
-
-/* -------------------------- GL_EXT_light_texture ------------------------- */
-
-#ifndef GL_EXT_light_texture
-#define GL_EXT_light_texture 1
-
-#define GL_FRAGMENT_MATERIAL_EXT 0x8349
-#define GL_FRAGMENT_NORMAL_EXT 0x834A
-#define GL_FRAGMENT_COLOR_EXT 0x834C
-#define GL_ATTENUATION_EXT 0x834D
-#define GL_SHADOW_ATTENUATION_EXT 0x834E
-#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
-#define GL_TEXTURE_LIGHT_EXT 0x8350
-#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
-#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
-#define GL_FRAGMENT_DEPTH_EXT 0x8452
-
-typedef void (GLAPIENTRY * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
-typedef void (GLAPIENTRY * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
-typedef void (GLAPIENTRY * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
-
-#define glApplyTextureEXT GLEW_GET_FUN(__glewApplyTextureEXT)
-#define glTextureLightEXT GLEW_GET_FUN(__glewTextureLightEXT)
-#define glTextureMaterialEXT GLEW_GET_FUN(__glewTextureMaterialEXT)
-
-#define GLEW_EXT_light_texture GLEW_GET_VAR(__GLEW_EXT_light_texture)
-
-#endif /* GL_EXT_light_texture */
-
-/* ------------------------- GL_EXT_misc_attribute ------------------------- */
-
-#ifndef GL_EXT_misc_attribute
-#define GL_EXT_misc_attribute 1
-
-#define GLEW_EXT_misc_attribute GLEW_GET_VAR(__GLEW_EXT_misc_attribute)
-
-#endif /* GL_EXT_misc_attribute */
-
-/* ------------------------ GL_EXT_multi_draw_arrays ----------------------- */
-
-#ifndef GL_EXT_multi_draw_arrays
-#define GL_EXT_multi_draw_arrays 1
-
-typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint* first, GLsizei *count, GLsizei primcount);
-typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, GLsizei* count, GLenum type, const GLvoid **indices, GLsizei primcount);
-
-#define glMultiDrawArraysEXT GLEW_GET_FUN(__glewMultiDrawArraysEXT)
-#define glMultiDrawElementsEXT GLEW_GET_FUN(__glewMultiDrawElementsEXT)
-
-#define GLEW_EXT_multi_draw_arrays GLEW_GET_VAR(__GLEW_EXT_multi_draw_arrays)
-
-#endif /* GL_EXT_multi_draw_arrays */
-
-/* --------------------------- GL_EXT_multisample -------------------------- */
-
-#ifndef GL_EXT_multisample
-#define GL_EXT_multisample 1
-
-#define GL_MULTISAMPLE_EXT 0x809D
-#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
-#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
-#define GL_SAMPLE_MASK_EXT 0x80A0
-#define GL_1PASS_EXT 0x80A1
-#define GL_2PASS_0_EXT 0x80A2
-#define GL_2PASS_1_EXT 0x80A3
-#define GL_4PASS_0_EXT 0x80A4
-#define GL_4PASS_1_EXT 0x80A5
-#define GL_4PASS_2_EXT 0x80A6
-#define GL_4PASS_3_EXT 0x80A7
-#define GL_SAMPLE_BUFFERS_EXT 0x80A8
-#define GL_SAMPLES_EXT 0x80A9
-#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
-#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
-#define GL_SAMPLE_PATTERN_EXT 0x80AC
-#define GL_MULTISAMPLE_BIT_EXT 0x20000000
-
-typedef void (GLAPIENTRY * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
-typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
-
-#define glSampleMaskEXT GLEW_GET_FUN(__glewSampleMaskEXT)
-#define glSamplePatternEXT GLEW_GET_FUN(__glewSamplePatternEXT)
-
-#define GLEW_EXT_multisample GLEW_GET_VAR(__GLEW_EXT_multisample)
-
-#endif /* GL_EXT_multisample */
-
-/* ---------------------- GL_EXT_packed_depth_stencil ---------------------- */
-
-#ifndef GL_EXT_packed_depth_stencil
-#define GL_EXT_packed_depth_stencil 1
-
-#define GL_DEPTH_STENCIL_EXT 0x84F9
-#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
-#define GL_DEPTH24_STENCIL8_EXT 0x88F0
-#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
-
-#define GLEW_EXT_packed_depth_stencil GLEW_GET_VAR(__GLEW_EXT_packed_depth_stencil)
-
-#endif /* GL_EXT_packed_depth_stencil */
-
-/* -------------------------- GL_EXT_packed_float -------------------------- */
-
-#ifndef GL_EXT_packed_float
-#define GL_EXT_packed_float 1
-
-#define GL_R11F_G11F_B10F_EXT 0x8C3A
-#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
-#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
-
-#define GLEW_EXT_packed_float GLEW_GET_VAR(__GLEW_EXT_packed_float)
-
-#endif /* GL_EXT_packed_float */
-
-/* -------------------------- GL_EXT_packed_pixels ------------------------- */
-
-#ifndef GL_EXT_packed_pixels
-#define GL_EXT_packed_pixels 1
-
-#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
-#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
-#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
-#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
-#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
-
-#define GLEW_EXT_packed_pixels GLEW_GET_VAR(__GLEW_EXT_packed_pixels)
-
-#endif /* GL_EXT_packed_pixels */
-
-/* ------------------------ GL_EXT_paletted_texture ------------------------ */
-
-#ifndef GL_EXT_paletted_texture
-#define GL_EXT_paletted_texture 1
-
-#define GL_TEXTURE_1D 0x0DE0
-#define GL_TEXTURE_2D 0x0DE1
-#define GL_PROXY_TEXTURE_1D 0x8063
-#define GL_PROXY_TEXTURE_2D 0x8064
-#define GL_TEXTURE_3D_EXT 0x806F
-#define GL_PROXY_TEXTURE_3D_EXT 0x8070
-#define GL_COLOR_TABLE_FORMAT_EXT 0x80D8
-#define GL_COLOR_TABLE_WIDTH_EXT 0x80D9
-#define GL_COLOR_TABLE_RED_SIZE_EXT 0x80DA
-#define GL_COLOR_TABLE_GREEN_SIZE_EXT 0x80DB
-#define GL_COLOR_TABLE_BLUE_SIZE_EXT 0x80DC
-#define GL_COLOR_TABLE_ALPHA_SIZE_EXT 0x80DD
-#define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT 0x80DE
-#define GL_COLOR_TABLE_INTENSITY_SIZE_EXT 0x80DF
-#define GL_COLOR_INDEX1_EXT 0x80E2
-#define GL_COLOR_INDEX2_EXT 0x80E3
-#define GL_COLOR_INDEX4_EXT 0x80E4
-#define GL_COLOR_INDEX8_EXT 0x80E5
-#define GL_COLOR_INDEX12_EXT 0x80E6
-#define GL_COLOR_INDEX16_EXT 0x80E7
-#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
-#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
-#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
-
-typedef void (GLAPIENTRY * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* data);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void* data);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint* params);
-
-#define glColorTableEXT GLEW_GET_FUN(__glewColorTableEXT)
-#define glGetColorTableEXT GLEW_GET_FUN(__glewGetColorTableEXT)
-#define glGetColorTableParameterfvEXT GLEW_GET_FUN(__glewGetColorTableParameterfvEXT)
-#define glGetColorTableParameterivEXT GLEW_GET_FUN(__glewGetColorTableParameterivEXT)
-
-#define GLEW_EXT_paletted_texture GLEW_GET_VAR(__GLEW_EXT_paletted_texture)
-
-#endif /* GL_EXT_paletted_texture */
-
-/* ----------------------- GL_EXT_pixel_buffer_object ---------------------- */
-
-#ifndef GL_EXT_pixel_buffer_object
-#define GL_EXT_pixel_buffer_object 1
-
-#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
-#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
-#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
-#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
-
-#define GLEW_EXT_pixel_buffer_object GLEW_GET_VAR(__GLEW_EXT_pixel_buffer_object)
-
-#endif /* GL_EXT_pixel_buffer_object */
-
-/* ------------------------- GL_EXT_pixel_transform ------------------------ */
-
-#ifndef GL_EXT_pixel_transform
-#define GL_EXT_pixel_transform 1
-
-#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
-#define GL_PIXEL_MAG_FILTER_EXT 0x8331
-#define GL_PIXEL_MIN_FILTER_EXT 0x8332
-#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
-#define GL_CUBIC_EXT 0x8334
-#define GL_AVERAGE_EXT 0x8335
-#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
-#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
-#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
-
-typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, const GLfloat param);
-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, const GLint param);
-typedef void (GLAPIENTRY * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint* params);
-
-#define glGetPixelTransformParameterfvEXT GLEW_GET_FUN(__glewGetPixelTransformParameterfvEXT)
-#define glGetPixelTransformParameterivEXT GLEW_GET_FUN(__glewGetPixelTransformParameterivEXT)
-#define glPixelTransformParameterfEXT GLEW_GET_FUN(__glewPixelTransformParameterfEXT)
-#define glPixelTransformParameterfvEXT GLEW_GET_FUN(__glewPixelTransformParameterfvEXT)
-#define glPixelTransformParameteriEXT GLEW_GET_FUN(__glewPixelTransformParameteriEXT)
-#define glPixelTransformParameterivEXT GLEW_GET_FUN(__glewPixelTransformParameterivEXT)
-
-#define GLEW_EXT_pixel_transform GLEW_GET_VAR(__GLEW_EXT_pixel_transform)
-
-#endif /* GL_EXT_pixel_transform */
-
-/* ------------------- GL_EXT_pixel_transform_color_table ------------------ */
-
-#ifndef GL_EXT_pixel_transform_color_table
-#define GL_EXT_pixel_transform_color_table 1
-
-#define GLEW_EXT_pixel_transform_color_table GLEW_GET_VAR(__GLEW_EXT_pixel_transform_color_table)
-
-#endif /* GL_EXT_pixel_transform_color_table */
-
-/* ------------------------ GL_EXT_point_parameters ------------------------ */
-
-#ifndef GL_EXT_point_parameters
-#define GL_EXT_point_parameters 1
-
-#define GL_POINT_SIZE_MIN_EXT 0x8126
-#define GL_POINT_SIZE_MAX_EXT 0x8127
-#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
-#define GL_DISTANCE_ATTENUATION_EXT 0x8129
-
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, GLfloat* params);
-
-#define glPointParameterfEXT GLEW_GET_FUN(__glewPointParameterfEXT)
-#define glPointParameterfvEXT GLEW_GET_FUN(__glewPointParameterfvEXT)
-
-#define GLEW_EXT_point_parameters GLEW_GET_VAR(__GLEW_EXT_point_parameters)
-
-#endif /* GL_EXT_point_parameters */
-
-/* ------------------------- GL_EXT_polygon_offset ------------------------- */
-
-#ifndef GL_EXT_polygon_offset
-#define GL_EXT_polygon_offset 1
-
-#define GL_POLYGON_OFFSET_EXT 0x8037
-#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
-#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
-
-typedef void (GLAPIENTRY * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
-
-#define glPolygonOffsetEXT GLEW_GET_FUN(__glewPolygonOffsetEXT)
-
-#define GLEW_EXT_polygon_offset GLEW_GET_VAR(__GLEW_EXT_polygon_offset)
-
-#endif /* GL_EXT_polygon_offset */
-
-/* ------------------------- GL_EXT_rescale_normal ------------------------- */
-
-#ifndef GL_EXT_rescale_normal
-#define GL_EXT_rescale_normal 1
-
-#define GLEW_EXT_rescale_normal GLEW_GET_VAR(__GLEW_EXT_rescale_normal)
-
-#endif /* GL_EXT_rescale_normal */
-
-/* -------------------------- GL_EXT_scene_marker -------------------------- */
-
-#ifndef GL_EXT_scene_marker
-#define GL_EXT_scene_marker 1
-
-typedef void (GLAPIENTRY * PFNGLBEGINSCENEEXTPROC) (void);
-typedef void (GLAPIENTRY * PFNGLENDSCENEEXTPROC) (void);
-
-#define glBeginSceneEXT GLEW_GET_FUN(__glewBeginSceneEXT)
-#define glEndSceneEXT GLEW_GET_FUN(__glewEndSceneEXT)
-
-#define GLEW_EXT_scene_marker GLEW_GET_VAR(__GLEW_EXT_scene_marker)
-
-#endif /* GL_EXT_scene_marker */
-
-/* ------------------------- GL_EXT_secondary_color ------------------------ */
-
-#ifndef GL_EXT_secondary_color
-#define GL_EXT_secondary_color 1
-
-#define GL_COLOR_SUM_EXT 0x8458
-#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
-#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
-#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
-#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
-#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
-#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
-
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLvoid *pointer);
-
-#define glSecondaryColor3bEXT GLEW_GET_FUN(__glewSecondaryColor3bEXT)
-#define glSecondaryColor3bvEXT GLEW_GET_FUN(__glewSecondaryColor3bvEXT)
-#define glSecondaryColor3dEXT GLEW_GET_FUN(__glewSecondaryColor3dEXT)
-#define glSecondaryColor3dvEXT GLEW_GET_FUN(__glewSecondaryColor3dvEXT)
-#define glSecondaryColor3fEXT GLEW_GET_FUN(__glewSecondaryColor3fEXT)
-#define glSecondaryColor3fvEXT GLEW_GET_FUN(__glewSecondaryColor3fvEXT)
-#define glSecondaryColor3iEXT GLEW_GET_FUN(__glewSecondaryColor3iEXT)
-#define glSecondaryColor3ivEXT GLEW_GET_FUN(__glewSecondaryColor3ivEXT)
-#define glSecondaryColor3sEXT GLEW_GET_FUN(__glewSecondaryColor3sEXT)
-#define glSecondaryColor3svEXT GLEW_GET_FUN(__glewSecondaryColor3svEXT)
-#define glSecondaryColor3ubEXT GLEW_GET_FUN(__glewSecondaryColor3ubEXT)
-#define glSecondaryColor3ubvEXT GLEW_GET_FUN(__glewSecondaryColor3ubvEXT)
-#define glSecondaryColor3uiEXT GLEW_GET_FUN(__glewSecondaryColor3uiEXT)
-#define glSecondaryColor3uivEXT GLEW_GET_FUN(__glewSecondaryColor3uivEXT)
-#define glSecondaryColor3usEXT GLEW_GET_FUN(__glewSecondaryColor3usEXT)
-#define glSecondaryColor3usvEXT GLEW_GET_FUN(__glewSecondaryColor3usvEXT)
-#define glSecondaryColorPointerEXT GLEW_GET_FUN(__glewSecondaryColorPointerEXT)
-
-#define GLEW_EXT_secondary_color GLEW_GET_VAR(__GLEW_EXT_secondary_color)
-
-#endif /* GL_EXT_secondary_color */
-
-/* --------------------- GL_EXT_separate_specular_color -------------------- */
-
-#ifndef GL_EXT_separate_specular_color
-#define GL_EXT_separate_specular_color 1
-
-#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
-#define GL_SINGLE_COLOR_EXT 0x81F9
-#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
-
-#define GLEW_EXT_separate_specular_color GLEW_GET_VAR(__GLEW_EXT_separate_specular_color)
-
-#endif /* GL_EXT_separate_specular_color */
-
-/* -------------------------- GL_EXT_shadow_funcs -------------------------- */
-
-#ifndef GL_EXT_shadow_funcs
-#define GL_EXT_shadow_funcs 1
-
-#define GLEW_EXT_shadow_funcs GLEW_GET_VAR(__GLEW_EXT_shadow_funcs)
-
-#endif /* GL_EXT_shadow_funcs */
-
-/* --------------------- GL_EXT_shared_texture_palette --------------------- */
-
-#ifndef GL_EXT_shared_texture_palette
-#define GL_EXT_shared_texture_palette 1
-
-#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
-
-#define GLEW_EXT_shared_texture_palette GLEW_GET_VAR(__GLEW_EXT_shared_texture_palette)
-
-#endif /* GL_EXT_shared_texture_palette */
-
-/* ------------------------ GL_EXT_stencil_clear_tag ----------------------- */
-
-#ifndef GL_EXT_stencil_clear_tag
-#define GL_EXT_stencil_clear_tag 1
-
-#define GL_STENCIL_TAG_BITS_EXT 0x88F2
-#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
-
-#define GLEW_EXT_stencil_clear_tag GLEW_GET_VAR(__GLEW_EXT_stencil_clear_tag)
-
-#endif /* GL_EXT_stencil_clear_tag */
-
-/* ------------------------ GL_EXT_stencil_two_side ------------------------ */
-
-#ifndef GL_EXT_stencil_two_side
-#define GL_EXT_stencil_two_side 1
-
-#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
-#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
-
-typedef void (GLAPIENTRY * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
-
-#define glActiveStencilFaceEXT GLEW_GET_FUN(__glewActiveStencilFaceEXT)
-
-#define GLEW_EXT_stencil_two_side GLEW_GET_VAR(__GLEW_EXT_stencil_two_side)
-
-#endif /* GL_EXT_stencil_two_side */
-
-/* -------------------------- GL_EXT_stencil_wrap -------------------------- */
-
-#ifndef GL_EXT_stencil_wrap
-#define GL_EXT_stencil_wrap 1
-
-#define GL_INCR_WRAP_EXT 0x8507
-#define GL_DECR_WRAP_EXT 0x8508
-
-#define GLEW_EXT_stencil_wrap GLEW_GET_VAR(__GLEW_EXT_stencil_wrap)
-
-#endif /* GL_EXT_stencil_wrap */
-
-/* --------------------------- GL_EXT_subtexture --------------------------- */
-
-#ifndef GL_EXT_subtexture
-#define GL_EXT_subtexture 1
-
-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
-
-#define glTexSubImage1DEXT GLEW_GET_FUN(__glewTexSubImage1DEXT)
-#define glTexSubImage2DEXT GLEW_GET_FUN(__glewTexSubImage2DEXT)
-#define glTexSubImage3DEXT GLEW_GET_FUN(__glewTexSubImage3DEXT)
-
-#define GLEW_EXT_subtexture GLEW_GET_VAR(__GLEW_EXT_subtexture)
-
-#endif /* GL_EXT_subtexture */
-
-/* ----------------------------- GL_EXT_texture ---------------------------- */
-
-#ifndef GL_EXT_texture
-#define GL_EXT_texture 1
-
-#define GL_ALPHA4_EXT 0x803B
-#define GL_ALPHA8_EXT 0x803C
-#define GL_ALPHA12_EXT 0x803D
-#define GL_ALPHA16_EXT 0x803E
-#define GL_LUMINANCE4_EXT 0x803F
-#define GL_LUMINANCE8_EXT 0x8040
-#define GL_LUMINANCE12_EXT 0x8041
-#define GL_LUMINANCE16_EXT 0x8042
-#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
-#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
-#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
-#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
-#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
-#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
-#define GL_INTENSITY_EXT 0x8049
-#define GL_INTENSITY4_EXT 0x804A
-#define GL_INTENSITY8_EXT 0x804B
-#define GL_INTENSITY12_EXT 0x804C
-#define GL_INTENSITY16_EXT 0x804D
-#define GL_RGB2_EXT 0x804E
-#define GL_RGB4_EXT 0x804F
-#define GL_RGB5_EXT 0x8050
-#define GL_RGB8_EXT 0x8051
-#define GL_RGB10_EXT 0x8052
-#define GL_RGB12_EXT 0x8053
-#define GL_RGB16_EXT 0x8054
-#define GL_RGBA2_EXT 0x8055
-#define GL_RGBA4_EXT 0x8056
-#define GL_RGB5_A1_EXT 0x8057
-#define GL_RGBA8_EXT 0x8058
-#define GL_RGB10_A2_EXT 0x8059
-#define GL_RGBA12_EXT 0x805A
-#define GL_RGBA16_EXT 0x805B
-#define GL_TEXTURE_RED_SIZE_EXT 0x805C
-#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
-#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
-#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
-#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
-#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
-#define GL_REPLACE_EXT 0x8062
-#define GL_PROXY_TEXTURE_1D_EXT 0x8063
-#define GL_PROXY_TEXTURE_2D_EXT 0x8064
-
-#define GLEW_EXT_texture GLEW_GET_VAR(__GLEW_EXT_texture)
-
-#endif /* GL_EXT_texture */
-
-/* ---------------------------- GL_EXT_texture3D --------------------------- */
-
-#ifndef GL_EXT_texture3D
-#define GL_EXT_texture3D 1
-
-#define GL_PACK_SKIP_IMAGES_EXT 0x806B
-#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
-#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
-#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
-#define GL_TEXTURE_3D_EXT 0x806F
-#define GL_PROXY_TEXTURE_3D_EXT 0x8070
-#define GL_TEXTURE_DEPTH_EXT 0x8071
-#define GL_TEXTURE_WRAP_R_EXT 0x8072
-#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
-
-typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
-
-#define glTexImage3DEXT GLEW_GET_FUN(__glewTexImage3DEXT)
-
-#define GLEW_EXT_texture3D GLEW_GET_VAR(__GLEW_EXT_texture3D)
-
-#endif /* GL_EXT_texture3D */
-
-/* -------------------------- GL_EXT_texture_array ------------------------- */
-
-#ifndef GL_EXT_texture_array
-#define GL_EXT_texture_array 1
-
-#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
-#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
-#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
-#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
-#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
-#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
-#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
-#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
-
-#define GLEW_EXT_texture_array GLEW_GET_VAR(__GLEW_EXT_texture_array)
-
-#endif /* GL_EXT_texture_array */
-
-/* ---------------------- GL_EXT_texture_buffer_object --------------------- */
-
-#ifndef GL_EXT_texture_buffer_object
-#define GL_EXT_texture_buffer_object 1
-
-#define GL_TEXTURE_BUFFER_EXT 0x8C2A
-#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
-#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
-#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
-#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
-
-typedef void (GLAPIENTRY * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
-
-#define glTexBufferEXT GLEW_GET_FUN(__glewTexBufferEXT)
-
-#define GLEW_EXT_texture_buffer_object GLEW_GET_VAR(__GLEW_EXT_texture_buffer_object)
-
-#endif /* GL_EXT_texture_buffer_object */
-
-/* -------------------- GL_EXT_texture_compression_dxt1 -------------------- */
-
-#ifndef GL_EXT_texture_compression_dxt1
-#define GL_EXT_texture_compression_dxt1 1
-
-#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
-#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
-
-#define GLEW_EXT_texture_compression_dxt1 GLEW_GET_VAR(__GLEW_EXT_texture_compression_dxt1)
-
-#endif /* GL_EXT_texture_compression_dxt1 */
-
-/* -------------------- GL_EXT_texture_compression_latc -------------------- */
-
-#ifndef GL_EXT_texture_compression_latc
-#define GL_EXT_texture_compression_latc 1
-
-#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
-#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
-#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
-#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
-
-#define GLEW_EXT_texture_compression_latc GLEW_GET_VAR(__GLEW_EXT_texture_compression_latc)
-
-#endif /* GL_EXT_texture_compression_latc */
-
-/* -------------------- GL_EXT_texture_compression_rgtc -------------------- */
-
-#ifndef GL_EXT_texture_compression_rgtc
-#define GL_EXT_texture_compression_rgtc 1
-
-#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
-#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
-#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
-#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
-
-#define GLEW_EXT_texture_compression_rgtc GLEW_GET_VAR(__GLEW_EXT_texture_compression_rgtc)
-
-#endif /* GL_EXT_texture_compression_rgtc */
-
-/* -------------------- GL_EXT_texture_compression_s3tc -------------------- */
-
-#ifndef GL_EXT_texture_compression_s3tc
-#define GL_EXT_texture_compression_s3tc 1
-
-#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
-#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
-#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
-#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
-
-#define GLEW_EXT_texture_compression_s3tc GLEW_GET_VAR(__GLEW_EXT_texture_compression_s3tc)
-
-#endif /* GL_EXT_texture_compression_s3tc */
-
-/* ------------------------ GL_EXT_texture_cube_map ------------------------ */
-
-#ifndef GL_EXT_texture_cube_map
-#define GL_EXT_texture_cube_map 1
-
-#define GL_NORMAL_MAP_EXT 0x8511
-#define GL_REFLECTION_MAP_EXT 0x8512
-#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
-#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
-#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
-#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
-#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
-#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
-
-#define GLEW_EXT_texture_cube_map GLEW_GET_VAR(__GLEW_EXT_texture_cube_map)
-
-#endif /* GL_EXT_texture_cube_map */
-
-/* ----------------------- GL_EXT_texture_edge_clamp ----------------------- */
-
-#ifndef GL_EXT_texture_edge_clamp
-#define GL_EXT_texture_edge_clamp 1
-
-#define GL_CLAMP_TO_EDGE_EXT 0x812F
-
-#define GLEW_EXT_texture_edge_clamp GLEW_GET_VAR(__GLEW_EXT_texture_edge_clamp)
-
-#endif /* GL_EXT_texture_edge_clamp */
-
-/* --------------------------- GL_EXT_texture_env -------------------------- */
-
-#ifndef GL_EXT_texture_env
-#define GL_EXT_texture_env 1
-
-#define GL_TEXTURE_ENV0_EXT 0
-#define GL_ENV_BLEND_EXT 0
-#define GL_TEXTURE_ENV_SHIFT_EXT 0
-#define GL_ENV_REPLACE_EXT 0
-#define GL_ENV_ADD_EXT 0
-#define GL_ENV_SUBTRACT_EXT 0
-#define GL_TEXTURE_ENV_MODE_ALPHA_EXT 0
-#define GL_ENV_REVERSE_SUBTRACT_EXT 0
-#define GL_ENV_REVERSE_BLEND_EXT 0
-#define GL_ENV_COPY_EXT 0
-#define GL_ENV_MODULATE_EXT 0
-
-#define GLEW_EXT_texture_env GLEW_GET_VAR(__GLEW_EXT_texture_env)
-
-#endif /* GL_EXT_texture_env */
-
-/* ------------------------- GL_EXT_texture_env_add ------------------------ */
-
-#ifndef GL_EXT_texture_env_add
-#define GL_EXT_texture_env_add 1
-
-#define GLEW_EXT_texture_env_add GLEW_GET_VAR(__GLEW_EXT_texture_env_add)
-
-#endif /* GL_EXT_texture_env_add */
-
-/* ----------------------- GL_EXT_texture_env_combine ---------------------- */
-
-#ifndef GL_EXT_texture_env_combine
-#define GL_EXT_texture_env_combine 1
-
-#define GL_COMBINE_EXT 0x8570
-#define GL_COMBINE_RGB_EXT 0x8571
-#define GL_COMBINE_ALPHA_EXT 0x8572
-#define GL_RGB_SCALE_EXT 0x8573
-#define GL_ADD_SIGNED_EXT 0x8574
-#define GL_INTERPOLATE_EXT 0x8575
-#define GL_CONSTANT_EXT 0x8576
-#define GL_PRIMARY_COLOR_EXT 0x8577
-#define GL_PREVIOUS_EXT 0x8578
-#define GL_SOURCE0_RGB_EXT 0x8580
-#define GL_SOURCE1_RGB_EXT 0x8581
-#define GL_SOURCE2_RGB_EXT 0x8582
-#define GL_SOURCE0_ALPHA_EXT 0x8588
-#define GL_SOURCE1_ALPHA_EXT 0x8589
-#define GL_SOURCE2_ALPHA_EXT 0x858A
-#define GL_OPERAND0_RGB_EXT 0x8590
-#define GL_OPERAND1_RGB_EXT 0x8591
-#define GL_OPERAND2_RGB_EXT 0x8592
-#define GL_OPERAND0_ALPHA_EXT 0x8598
-#define GL_OPERAND1_ALPHA_EXT 0x8599
-#define GL_OPERAND2_ALPHA_EXT 0x859A
-
-#define GLEW_EXT_texture_env_combine GLEW_GET_VAR(__GLEW_EXT_texture_env_combine)
-
-#endif /* GL_EXT_texture_env_combine */
-
-/* ------------------------ GL_EXT_texture_env_dot3 ------------------------ */
-
-#ifndef GL_EXT_texture_env_dot3
-#define GL_EXT_texture_env_dot3 1
-
-#define GL_DOT3_RGB_EXT 0x8740
-#define GL_DOT3_RGBA_EXT 0x8741
-
-#define GLEW_EXT_texture_env_dot3 GLEW_GET_VAR(__GLEW_EXT_texture_env_dot3)
-
-#endif /* GL_EXT_texture_env_dot3 */
-
-/* ------------------- GL_EXT_texture_filter_anisotropic ------------------- */
-
-#ifndef GL_EXT_texture_filter_anisotropic
-#define GL_EXT_texture_filter_anisotropic 1
-
-#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
-#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
-
-#define GLEW_EXT_texture_filter_anisotropic GLEW_GET_VAR(__GLEW_EXT_texture_filter_anisotropic)
-
-#endif /* GL_EXT_texture_filter_anisotropic */
-
-/* ------------------------- GL_EXT_texture_integer ------------------------ */
-
-#ifndef GL_EXT_texture_integer
-#define GL_EXT_texture_integer 1
-
-#define GL_RGBA32UI_EXT 0x8D70
-#define GL_RGB32UI_EXT 0x8D71
-#define GL_ALPHA32UI_EXT 0x8D72
-#define GL_INTENSITY32UI_EXT 0x8D73
-#define GL_LUMINANCE32UI_EXT 0x8D74
-#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
-#define GL_RGBA16UI_EXT 0x8D76
-#define GL_RGB16UI_EXT 0x8D77
-#define GL_ALPHA16UI_EXT 0x8D78
-#define GL_INTENSITY16UI_EXT 0x8D79
-#define GL_LUMINANCE16UI_EXT 0x8D7A
-#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
-#define GL_RGBA8UI_EXT 0x8D7C
-#define GL_RGB8UI_EXT 0x8D7D
-#define GL_ALPHA8UI_EXT 0x8D7E
-#define GL_INTENSITY8UI_EXT 0x8D7F
-#define GL_LUMINANCE8UI_EXT 0x8D80
-#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
-#define GL_RGBA32I_EXT 0x8D82
-#define GL_RGB32I_EXT 0x8D83
-#define GL_ALPHA32I_EXT 0x8D84
-#define GL_INTENSITY32I_EXT 0x8D85
-#define GL_LUMINANCE32I_EXT 0x8D86
-#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
-#define GL_RGBA16I_EXT 0x8D88
-#define GL_RGB16I_EXT 0x8D89
-#define GL_ALPHA16I_EXT 0x8D8A
-#define GL_INTENSITY16I_EXT 0x8D8B
-#define GL_LUMINANCE16I_EXT 0x8D8C
-#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
-#define GL_RGBA8I_EXT 0x8D8E
-#define GL_RGB8I_EXT 0x8D8F
-#define GL_ALPHA8I_EXT 0x8D90
-#define GL_INTENSITY8I_EXT 0x8D91
-#define GL_LUMINANCE8I_EXT 0x8D92
-#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
-#define GL_RED_INTEGER_EXT 0x8D94
-#define GL_GREEN_INTEGER_EXT 0x8D95
-#define GL_BLUE_INTEGER_EXT 0x8D96
-#define GL_ALPHA_INTEGER_EXT 0x8D97
-#define GL_RGB_INTEGER_EXT 0x8D98
-#define GL_RGBA_INTEGER_EXT 0x8D99
-#define GL_BGR_INTEGER_EXT 0x8D9A
-#define GL_BGRA_INTEGER_EXT 0x8D9B
-#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
-#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
-#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
-
-typedef void (GLAPIENTRY * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
-typedef void (GLAPIENTRY * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
-typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
-typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
-
-#define glClearColorIiEXT GLEW_GET_FUN(__glewClearColorIiEXT)
-#define glClearColorIuiEXT GLEW_GET_FUN(__glewClearColorIuiEXT)
-#define glGetTexParameterIivEXT GLEW_GET_FUN(__glewGetTexParameterIivEXT)
-#define glGetTexParameterIuivEXT GLEW_GET_FUN(__glewGetTexParameterIuivEXT)
-#define glTexParameterIivEXT GLEW_GET_FUN(__glewTexParameterIivEXT)
-#define glTexParameterIuivEXT GLEW_GET_FUN(__glewTexParameterIuivEXT)
-
-#define GLEW_EXT_texture_integer GLEW_GET_VAR(__GLEW_EXT_texture_integer)
-
-#endif /* GL_EXT_texture_integer */
-
-/* ------------------------ GL_EXT_texture_lod_bias ------------------------ */
-
-#ifndef GL_EXT_texture_lod_bias
-#define GL_EXT_texture_lod_bias 1
-
-#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
-#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
-#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
-
-#define GLEW_EXT_texture_lod_bias GLEW_GET_VAR(__GLEW_EXT_texture_lod_bias)
-
-#endif /* GL_EXT_texture_lod_bias */
-
-/* ---------------------- GL_EXT_texture_mirror_clamp ---------------------- */
-
-#ifndef GL_EXT_texture_mirror_clamp
-#define GL_EXT_texture_mirror_clamp 1
-
-#define GL_MIRROR_CLAMP_EXT 0x8742
-#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
-#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
-
-#define GLEW_EXT_texture_mirror_clamp GLEW_GET_VAR(__GLEW_EXT_texture_mirror_clamp)
-
-#endif /* GL_EXT_texture_mirror_clamp */
-
-/* ------------------------- GL_EXT_texture_object ------------------------- */
-
-#ifndef GL_EXT_texture_object
-#define GL_EXT_texture_object 1
-
-#define GL_TEXTURE_PRIORITY_EXT 0x8066
-#define GL_TEXTURE_RESIDENT_EXT 0x8067
-#define GL_TEXTURE_1D_BINDING_EXT 0x8068
-#define GL_TEXTURE_2D_BINDING_EXT 0x8069
-#define GL_TEXTURE_3D_BINDING_EXT 0x806A
-
-typedef GLboolean (GLAPIENTRY * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint* textures, GLboolean* residences);
-typedef void (GLAPIENTRY * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
-typedef void (GLAPIENTRY * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint* textures);
-typedef void (GLAPIENTRY * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint* textures);
-typedef GLboolean (GLAPIENTRY * PFNGLISTEXTUREEXTPROC) (GLuint texture);
-typedef void (GLAPIENTRY * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint* textures, const GLclampf* priorities);
-
-#define glAreTexturesResidentEXT GLEW_GET_FUN(__glewAreTexturesResidentEXT)
-#define glBindTextureEXT GLEW_GET_FUN(__glewBindTextureEXT)
-#define glDeleteTexturesEXT GLEW_GET_FUN(__glewDeleteTexturesEXT)
-#define glGenTexturesEXT GLEW_GET_FUN(__glewGenTexturesEXT)
-#define glIsTextureEXT GLEW_GET_FUN(__glewIsTextureEXT)
-#define glPrioritizeTexturesEXT GLEW_GET_FUN(__glewPrioritizeTexturesEXT)
-
-#define GLEW_EXT_texture_object GLEW_GET_VAR(__GLEW_EXT_texture_object)
-
-#endif /* GL_EXT_texture_object */
-
-/* --------------------- GL_EXT_texture_perturb_normal --------------------- */
-
-#ifndef GL_EXT_texture_perturb_normal
-#define GL_EXT_texture_perturb_normal 1
-
-#define GL_PERTURB_EXT 0x85AE
-#define GL_TEXTURE_NORMAL_EXT 0x85AF
-
-typedef void (GLAPIENTRY * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
-
-#define glTextureNormalEXT GLEW_GET_FUN(__glewTextureNormalEXT)
-
-#define GLEW_EXT_texture_perturb_normal GLEW_GET_VAR(__GLEW_EXT_texture_perturb_normal)
-
-#endif /* GL_EXT_texture_perturb_normal */
-
-/* ------------------------ GL_EXT_texture_rectangle ----------------------- */
-
-#ifndef GL_EXT_texture_rectangle
-#define GL_EXT_texture_rectangle 1
-
-#define GL_TEXTURE_RECTANGLE_EXT 0x84F5
-#define GL_TEXTURE_BINDING_RECTANGLE_EXT 0x84F6
-#define GL_PROXY_TEXTURE_RECTANGLE_EXT 0x84F7
-#define GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT 0x84F8
-
-#define GLEW_EXT_texture_rectangle GLEW_GET_VAR(__GLEW_EXT_texture_rectangle)
-
-#endif /* GL_EXT_texture_rectangle */
-
-/* -------------------------- GL_EXT_texture_sRGB -------------------------- */
-
-#ifndef GL_EXT_texture_sRGB
-#define GL_EXT_texture_sRGB 1
-
-#define GL_SRGB_EXT 0x8C40
-#define GL_SRGB8_EXT 0x8C41
-#define GL_SRGB_ALPHA_EXT 0x8C42
-#define GL_SRGB8_ALPHA8_EXT 0x8C43
-#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
-#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
-#define GL_SLUMINANCE_EXT 0x8C46
-#define GL_SLUMINANCE8_EXT 0x8C47
-#define GL_COMPRESSED_SRGB_EXT 0x8C48
-#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
-#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
-#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
-#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
-#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
-#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
-#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
-
-#define GLEW_EXT_texture_sRGB GLEW_GET_VAR(__GLEW_EXT_texture_sRGB)
-
-#endif /* GL_EXT_texture_sRGB */
-
-/* --------------------- GL_EXT_texture_shared_exponent -------------------- */
-
-#ifndef GL_EXT_texture_shared_exponent
-#define GL_EXT_texture_shared_exponent 1
-
-#define GL_RGB9_E5_EXT 0x8C3D
-#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
-#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
-
-#define GLEW_EXT_texture_shared_exponent GLEW_GET_VAR(__GLEW_EXT_texture_shared_exponent)
-
-#endif /* GL_EXT_texture_shared_exponent */
-
-/* --------------------------- GL_EXT_timer_query -------------------------- */
-
-#ifndef GL_EXT_timer_query
-#define GL_EXT_timer_query 1
-
-#define GL_TIME_ELAPSED_EXT 0x88BF
-
-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
-typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);
-
-#define glGetQueryObjecti64vEXT GLEW_GET_FUN(__glewGetQueryObjecti64vEXT)
-#define glGetQueryObjectui64vEXT GLEW_GET_FUN(__glewGetQueryObjectui64vEXT)
-
-#define GLEW_EXT_timer_query GLEW_GET_VAR(__GLEW_EXT_timer_query)
-
-#endif /* GL_EXT_timer_query */
-
-/* -------------------------- GL_EXT_vertex_array -------------------------- */
-
-#ifndef GL_EXT_vertex_array
-#define GL_EXT_vertex_array 1
-
-#define GL_DOUBLE_EXT 0x140A
-#define GL_VERTEX_ARRAY_EXT 0x8074
-#define GL_NORMAL_ARRAY_EXT 0x8075
-#define GL_COLOR_ARRAY_EXT 0x8076
-#define GL_INDEX_ARRAY_EXT 0x8077
-#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
-#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
-#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
-#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
-#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
-#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
-#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
-#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
-#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
-#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
-#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
-#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
-#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
-#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
-#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
-#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
-#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
-#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
-#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
-#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
-#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
-#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
-#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
-#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
-#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
-#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
-#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
-#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
-
-typedef void (GLAPIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i);
-typedef void (GLAPIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
-typedef void (GLAPIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
-typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean* pointer);
-typedef void (GLAPIENTRY * PFNGLGETPOINTERVEXTPROC) (GLenum pname, void** params);
-typedef void (GLAPIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void* pointer);
-typedef void (GLAPIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void* pointer);
-typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
-typedef void (GLAPIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
-
-#define glArrayElementEXT GLEW_GET_FUN(__glewArrayElementEXT)
-#define glColorPointerEXT GLEW_GET_FUN(__glewColorPointerEXT)
-#define glDrawArraysEXT GLEW_GET_FUN(__glewDrawArraysEXT)
-#define glEdgeFlagPointerEXT GLEW_GET_FUN(__glewEdgeFlagPointerEXT)
-#define glGetPointervEXT GLEW_GET_FUN(__glewGetPointervEXT)
-#define glIndexPointerEXT GLEW_GET_FUN(__glewIndexPointerEXT)
-#define glNormalPointerEXT GLEW_GET_FUN(__glewNormalPointerEXT)
-#define glTexCoordPointerEXT GLEW_GET_FUN(__glewTexCoordPointerEXT)
-#define glVertexPointerEXT GLEW_GET_FUN(__glewVertexPointerEXT)
-
-#define GLEW_EXT_vertex_array GLEW_GET_VAR(__GLEW_EXT_vertex_array)
-
-#endif /* GL_EXT_vertex_array */
-
-/* -------------------------- GL_EXT_vertex_shader ------------------------- */
-
-#ifndef GL_EXT_vertex_shader
-#define GL_EXT_vertex_shader 1
-
-#define GL_VERTEX_SHADER_EXT 0x8780
-#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
-#define GL_OP_INDEX_EXT 0x8782
-#define GL_OP_NEGATE_EXT 0x8783
-#define GL_OP_DOT3_EXT 0x8784
-#define GL_OP_DOT4_EXT 0x8785
-#define GL_OP_MUL_EXT 0x8786
-#define GL_OP_ADD_EXT 0x8787
-#define GL_OP_MADD_EXT 0x8788
-#define GL_OP_FRAC_EXT 0x8789
-#define GL_OP_MAX_EXT 0x878A
-#define GL_OP_MIN_EXT 0x878B
-#define GL_OP_SET_GE_EXT 0x878C
-#define GL_OP_SET_LT_EXT 0x878D
-#define GL_OP_CLAMP_EXT 0x878E
-#define GL_OP_FLOOR_EXT 0x878F
-#define GL_OP_ROUND_EXT 0x8790
-#define GL_OP_EXP_BASE_2_EXT 0x8791
-#define GL_OP_LOG_BASE_2_EXT 0x8792
-#define GL_OP_POWER_EXT 0x8793
-#define GL_OP_RECIP_EXT 0x8794
-#define GL_OP_RECIP_SQRT_EXT 0x8795
-#define GL_OP_SUB_EXT 0x8796
-#define GL_OP_CROSS_PRODUCT_EXT 0x8797
-#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
-#define GL_OP_MOV_EXT 0x8799
-#define GL_OUTPUT_VERTEX_EXT 0x879A
-#define GL_OUTPUT_COLOR0_EXT 0x879B
-#define GL_OUTPUT_COLOR1_EXT 0x879C
-#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
-#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
-#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
-#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
-#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
-#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
-#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
-#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
-#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
-#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
-#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
-#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
-#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
-#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
-#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
-#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
-#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
-#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
-#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
-#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
-#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
-#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
-#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
-#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
-#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
-#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
-#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
-#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
-#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
-#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
-#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
-#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
-#define GL_OUTPUT_FOG_EXT 0x87BD
-#define GL_SCALAR_EXT 0x87BE
-#define GL_VECTOR_EXT 0x87BF
-#define GL_MATRIX_EXT 0x87C0
-#define GL_VARIANT_EXT 0x87C1
-#define GL_INVARIANT_EXT 0x87C2
-#define GL_LOCAL_CONSTANT_EXT 0x87C3
-#define GL_LOCAL_EXT 0x87C4
-#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
-#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
-#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
-#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
-#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CC
-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CD
-#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
-#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
-#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
-#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
-#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
-#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
-#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
-#define GL_X_EXT 0x87D5
-#define GL_Y_EXT 0x87D6
-#define GL_Z_EXT 0x87D7
-#define GL_W_EXT 0x87D8
-#define GL_NEGATIVE_X_EXT 0x87D9
-#define GL_NEGATIVE_Y_EXT 0x87DA
-#define GL_NEGATIVE_Z_EXT 0x87DB
-#define GL_NEGATIVE_W_EXT 0x87DC
-#define GL_ZERO_EXT 0x87DD
-#define GL_ONE_EXT 0x87DE
-#define GL_NEGATIVE_ONE_EXT 0x87DF
-#define GL_NORMALIZED_RANGE_EXT 0x87E0
-#define GL_FULL_RANGE_EXT 0x87E1
-#define GL_CURRENT_VERTEX_EXT 0x87E2
-#define GL_MVP_MATRIX_EXT 0x87E3
-#define GL_VARIANT_VALUE_EXT 0x87E4
-#define GL_VARIANT_DATATYPE_EXT 0x87E5
-#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
-#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
-#define GL_VARIANT_ARRAY_EXT 0x87E8
-#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
-#define GL_INVARIANT_VALUE_EXT 0x87EA
-#define GL_INVARIANT_DATATYPE_EXT 0x87EB
-#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
-#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
-
-typedef void (GLAPIENTRY * PFNGLBEGINVERTEXSHADEREXTPROC) (void);
-typedef GLuint (GLAPIENTRY * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
-typedef GLuint (GLAPIENTRY * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
-typedef GLuint (GLAPIENTRY * PFNGLBINDPARAMETEREXTPROC) (GLenum value);
-typedef GLuint (GLAPIENTRY * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
-typedef GLuint (GLAPIENTRY * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
-typedef void (GLAPIENTRY * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLENDVERTEXSHADEREXTPROC) (void);
-typedef void (GLAPIENTRY * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
-typedef GLuint (GLAPIENTRY * PFNGLGENSYMBOLSEXTPROC) (GLenum dataType, GLenum storageType, GLenum range, GLuint components);
-typedef GLuint (GLAPIENTRY * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
-typedef void (GLAPIENTRY * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
-typedef void (GLAPIENTRY * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
-typedef void (GLAPIENTRY * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
-typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
-typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
-typedef void (GLAPIENTRY * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
-typedef void (GLAPIENTRY * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
-typedef void (GLAPIENTRY * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
-typedef void (GLAPIENTRY * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
-typedef void (GLAPIENTRY * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid **data);
-typedef void (GLAPIENTRY * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
-typedef GLboolean (GLAPIENTRY * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
-typedef void (GLAPIENTRY * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, GLvoid *addr);
-typedef void (GLAPIENTRY * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, GLvoid *addr);
-typedef void (GLAPIENTRY * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
-typedef void (GLAPIENTRY * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
-typedef void (GLAPIENTRY * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
-typedef void (GLAPIENTRY * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
-typedef void (GLAPIENTRY * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, GLvoid *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTBVEXTPROC) (GLuint id, GLbyte *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTDVEXTPROC) (GLuint id, GLdouble *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTFVEXTPROC) (GLuint id, GLfloat *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTIVEXTPROC) (GLuint id, GLint *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTSVEXTPROC) (GLuint id, GLshort *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTUBVEXTPROC) (GLuint id, GLubyte *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTUIVEXTPROC) (GLuint id, GLuint *addr);
-typedef void (GLAPIENTRY * PFNGLVARIANTUSVEXTPROC) (GLuint id, GLushort *addr);
-typedef void (GLAPIENTRY * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
-
-#define glBeginVertexShaderEXT GLEW_GET_FUN(__glewBeginVertexShaderEXT)
-#define glBindLightParameterEXT GLEW_GET_FUN(__glewBindLightParameterEXT)
-#define glBindMaterialParameterEXT GLEW_GET_FUN(__glewBindMaterialParameterEXT)
-#define glBindParameterEXT GLEW_GET_FUN(__glewBindParameterEXT)
-#define glBindTexGenParameterEXT GLEW_GET_FUN(__glewBindTexGenParameterEXT)
-#define glBindTextureUnitParameterEXT GLEW_GET_FUN(__glewBindTextureUnitParameterEXT)
-#define glBindVertexShaderEXT GLEW_GET_FUN(__glewBindVertexShaderEXT)
-#define glDeleteVertexShaderEXT GLEW_GET_FUN(__glewDeleteVertexShaderEXT)
-#define glDisableVariantClientStateEXT GLEW_GET_FUN(__glewDisableVariantClientStateEXT)
-#define glEnableVariantClientStateEXT GLEW_GET_FUN(__glewEnableVariantClientStateEXT)
-#define glEndVertexShaderEXT GLEW_GET_FUN(__glewEndVertexShaderEXT)
-#define glExtractComponentEXT GLEW_GET_FUN(__glewExtractComponentEXT)
-#define glGenSymbolsEXT GLEW_GET_FUN(__glewGenSymbolsEXT)
-#define glGenVertexShadersEXT GLEW_GET_FUN(__glewGenVertexShadersEXT)
-#define glGetInvariantBooleanvEXT GLEW_GET_FUN(__glewGetInvariantBooleanvEXT)
-#define glGetInvariantFloatvEXT GLEW_GET_FUN(__glewGetInvariantFloatvEXT)
-#define glGetInvariantIntegervEXT GLEW_GET_FUN(__glewGetInvariantIntegervEXT)
-#define glGetLocalConstantBooleanvEXT GLEW_GET_FUN(__glewGetLocalConstantBooleanvEXT)
-#define glGetLocalConstantFloatvEXT GLEW_GET_FUN(__glewGetLocalConstantFloatvEXT)
-#define glGetLocalConstantIntegervEXT GLEW_GET_FUN(__glewGetLocalConstantIntegervEXT)
-#define glGetVariantBooleanvEXT GLEW_GET_FUN(__glewGetVariantBooleanvEXT)
-#define glGetVariantFloatvEXT GLEW_GET_FUN(__glewGetVariantFloatvEXT)
-#define glGetVariantIntegervEXT GLEW_GET_FUN(__glewGetVariantIntegervEXT)
-#define glGetVariantPointervEXT GLEW_GET_FUN(__glewGetVariantPointervEXT)
-#define glInsertComponentEXT GLEW_GET_FUN(__glewInsertComponentEXT)
-#define glIsVariantEnabledEXT GLEW_GET_FUN(__glewIsVariantEnabledEXT)
-#define glSetInvariantEXT GLEW_GET_FUN(__glewSetInvariantEXT)
-#define glSetLocalConstantEXT GLEW_GET_FUN(__glewSetLocalConstantEXT)
-#define glShaderOp1EXT GLEW_GET_FUN(__glewShaderOp1EXT)
-#define glShaderOp2EXT GLEW_GET_FUN(__glewShaderOp2EXT)
-#define glShaderOp3EXT GLEW_GET_FUN(__glewShaderOp3EXT)
-#define glSwizzleEXT GLEW_GET_FUN(__glewSwizzleEXT)
-#define glVariantPointerEXT GLEW_GET_FUN(__glewVariantPointerEXT)
-#define glVariantbvEXT GLEW_GET_FUN(__glewVariantbvEXT)
-#define glVariantdvEXT GLEW_GET_FUN(__glewVariantdvEXT)
-#define glVariantfvEXT GLEW_GET_FUN(__glewVariantfvEXT)
-#define glVariantivEXT GLEW_GET_FUN(__glewVariantivEXT)
-#define glVariantsvEXT GLEW_GET_FUN(__glewVariantsvEXT)
-#define glVariantubvEXT GLEW_GET_FUN(__glewVariantubvEXT)
-#define glVariantuivEXT GLEW_GET_FUN(__glewVariantuivEXT)
-#define glVariantusvEXT GLEW_GET_FUN(__glewVariantusvEXT)
-#define glWriteMaskEXT GLEW_GET_FUN(__glewWriteMaskEXT)
-
-#define GLEW_EXT_vertex_shader GLEW_GET_VAR(__GLEW_EXT_vertex_shader)
-
-#endif /* GL_EXT_vertex_shader */
-
-/* ------------------------ GL_EXT_vertex_weighting ------------------------ */
-
-#ifndef GL_EXT_vertex_weighting
-#define GL_EXT_vertex_weighting 1
-
-#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
-#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
-#define GL_MODELVIEW0_EXT 0x1700
-#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
-#define GL_MODELVIEW1_MATRIX_EXT 0x8506
-#define GL_VERTEX_WEIGHTING_EXT 0x8509
-#define GL_MODELVIEW1_EXT 0x850A
-#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
-#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
-#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
-#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
-#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
-#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
-
-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, void* pointer);
-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTFVEXTPROC) (GLfloat* weight);
-
-#define glVertexWeightPointerEXT GLEW_GET_FUN(__glewVertexWeightPointerEXT)
-#define glVertexWeightfEXT GLEW_GET_FUN(__glewVertexWeightfEXT)
-#define glVertexWeightfvEXT GLEW_GET_FUN(__glewVertexWeightfvEXT)
-
-#define GLEW_EXT_vertex_weighting GLEW_GET_VAR(__GLEW_EXT_vertex_weighting)
-
-#endif /* GL_EXT_vertex_weighting */
-
-/* ---------------------- GL_GREMEDY_frame_terminator ---------------------- */
-
-#ifndef GL_GREMEDY_frame_terminator
-#define GL_GREMEDY_frame_terminator 1
-
-typedef void (GLAPIENTRY * PFNGLFRAMETERMINATORGREMEDYPROC) (void);
-
-#define glFrameTerminatorGREMEDY GLEW_GET_FUN(__glewFrameTerminatorGREMEDY)
-
-#define GLEW_GREMEDY_frame_terminator GLEW_GET_VAR(__GLEW_GREMEDY_frame_terminator)
-
-#endif /* GL_GREMEDY_frame_terminator */
-
-/* ------------------------ GL_GREMEDY_string_marker ----------------------- */
-
-#ifndef GL_GREMEDY_string_marker
-#define GL_GREMEDY_string_marker 1
-
-typedef void (GLAPIENTRY * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void* string);
-
-#define glStringMarkerGREMEDY GLEW_GET_FUN(__glewStringMarkerGREMEDY)
-
-#define GLEW_GREMEDY_string_marker GLEW_GET_VAR(__GLEW_GREMEDY_string_marker)
-
-#endif /* GL_GREMEDY_string_marker */
-
-/* --------------------- GL_HP_convolution_border_modes -------------------- */
-
-#ifndef GL_HP_convolution_border_modes
-#define GL_HP_convolution_border_modes 1
-
-#define GLEW_HP_convolution_border_modes GLEW_GET_VAR(__GLEW_HP_convolution_border_modes)
-
-#endif /* GL_HP_convolution_border_modes */
-
-/* ------------------------- GL_HP_image_transform ------------------------- */
-
-#ifndef GL_HP_image_transform
-#define GL_HP_image_transform 1
-
-typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, const GLfloat param);
-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, const GLint param);
-typedef void (GLAPIENTRY * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint* params);
-
-#define glGetImageTransformParameterfvHP GLEW_GET_FUN(__glewGetImageTransformParameterfvHP)
-#define glGetImageTransformParameterivHP GLEW_GET_FUN(__glewGetImageTransformParameterivHP)
-#define glImageTransformParameterfHP GLEW_GET_FUN(__glewImageTransformParameterfHP)
-#define glImageTransformParameterfvHP GLEW_GET_FUN(__glewImageTransformParameterfvHP)
-#define glImageTransformParameteriHP GLEW_GET_FUN(__glewImageTransformParameteriHP)
-#define glImageTransformParameterivHP GLEW_GET_FUN(__glewImageTransformParameterivHP)
-
-#define GLEW_HP_image_transform GLEW_GET_VAR(__GLEW_HP_image_transform)
-
-#endif /* GL_HP_image_transform */
-
-/* -------------------------- GL_HP_occlusion_test ------------------------- */
-
-#ifndef GL_HP_occlusion_test
-#define GL_HP_occlusion_test 1
-
-#define GL_OCCLUSION_TEST_HP 0x8165
-#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
-
-#define GLEW_HP_occlusion_test GLEW_GET_VAR(__GLEW_HP_occlusion_test)
-
-#endif /* GL_HP_occlusion_test */
-
-/* ------------------------- GL_HP_texture_lighting ------------------------ */
-
-#ifndef GL_HP_texture_lighting
-#define GL_HP_texture_lighting 1
-
-#define GLEW_HP_texture_lighting GLEW_GET_VAR(__GLEW_HP_texture_lighting)
-
-#endif /* GL_HP_texture_lighting */
-
-/* --------------------------- GL_IBM_cull_vertex -------------------------- */
-
-#ifndef GL_IBM_cull_vertex
-#define GL_IBM_cull_vertex 1
-
-#define GL_CULL_VERTEX_IBM 103050
-
-#define GLEW_IBM_cull_vertex GLEW_GET_VAR(__GLEW_IBM_cull_vertex)
-
-#endif /* GL_IBM_cull_vertex */
-
-/* ---------------------- GL_IBM_multimode_draw_arrays --------------------- */
-
-#ifndef GL_IBM_multimode_draw_arrays
-#define GL_IBM_multimode_draw_arrays 1
-
-typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum* mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
-typedef void (GLAPIENTRY * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum* mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);
-
-#define glMultiModeDrawArraysIBM GLEW_GET_FUN(__glewMultiModeDrawArraysIBM)
-#define glMultiModeDrawElementsIBM GLEW_GET_FUN(__glewMultiModeDrawElementsIBM)
-
-#define GLEW_IBM_multimode_draw_arrays GLEW_GET_VAR(__GLEW_IBM_multimode_draw_arrays)
-
-#endif /* GL_IBM_multimode_draw_arrays */
-
-/* ------------------------- GL_IBM_rasterpos_clip ------------------------- */
-
-#ifndef GL_IBM_rasterpos_clip
-#define GL_IBM_rasterpos_clip 1
-
-#define GL_RASTER_POSITION_UNCLIPPED_IBM 103010
-
-#define GLEW_IBM_rasterpos_clip GLEW_GET_VAR(__GLEW_IBM_rasterpos_clip)
-
-#endif /* GL_IBM_rasterpos_clip */
-
-/* --------------------------- GL_IBM_static_data -------------------------- */
-
-#ifndef GL_IBM_static_data
-#define GL_IBM_static_data 1
-
-#define GL_ALL_STATIC_DATA_IBM 103060
-#define GL_STATIC_VERTEX_ARRAY_IBM 103061
-
-#define GLEW_IBM_static_data GLEW_GET_VAR(__GLEW_IBM_static_data)
-
-#endif /* GL_IBM_static_data */
-
-/* --------------------- GL_IBM_texture_mirrored_repeat -------------------- */
-
-#ifndef GL_IBM_texture_mirrored_repeat
-#define GL_IBM_texture_mirrored_repeat 1
-
-#define GL_MIRRORED_REPEAT_IBM 0x8370
-
-#define GLEW_IBM_texture_mirrored_repeat GLEW_GET_VAR(__GLEW_IBM_texture_mirrored_repeat)
-
-#endif /* GL_IBM_texture_mirrored_repeat */
-
-/* ----------------------- GL_IBM_vertex_array_lists ----------------------- */
-
-#ifndef GL_IBM_vertex_array_lists
-#define GL_IBM_vertex_array_lists 1
-
-#define GL_VERTEX_ARRAY_LIST_IBM 103070
-#define GL_NORMAL_ARRAY_LIST_IBM 103071
-#define GL_COLOR_ARRAY_LIST_IBM 103072
-#define GL_INDEX_ARRAY_LIST_IBM 103073
-#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
-#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
-#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
-#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
-#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
-#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
-#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
-#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
-#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
-#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
-#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
-#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
-
-typedef void (GLAPIENTRY * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
-typedef void (GLAPIENTRY * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean ** pointer, GLint ptrstride);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
-typedef void (GLAPIENTRY * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
-typedef void (GLAPIENTRY * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
-typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
-typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid ** pointer, GLint ptrstride);
-
-#define glColorPointerListIBM GLEW_GET_FUN(__glewColorPointerListIBM)
-#define glEdgeFlagPointerListIBM GLEW_GET_FUN(__glewEdgeFlagPointerListIBM)
-#define glFogCoordPointerListIBM GLEW_GET_FUN(__glewFogCoordPointerListIBM)
-#define glIndexPointerListIBM GLEW_GET_FUN(__glewIndexPointerListIBM)
-#define glNormalPointerListIBM GLEW_GET_FUN(__glewNormalPointerListIBM)
-#define glSecondaryColorPointerListIBM GLEW_GET_FUN(__glewSecondaryColorPointerListIBM)
-#define glTexCoordPointerListIBM GLEW_GET_FUN(__glewTexCoordPointerListIBM)
-#define glVertexPointerListIBM GLEW_GET_FUN(__glewVertexPointerListIBM)
-
-#define GLEW_IBM_vertex_array_lists GLEW_GET_VAR(__GLEW_IBM_vertex_array_lists)
-
-#endif /* GL_IBM_vertex_array_lists */
-
-/* -------------------------- GL_INGR_color_clamp -------------------------- */
-
-#ifndef GL_INGR_color_clamp
-#define GL_INGR_color_clamp 1
-
-#define GL_RED_MIN_CLAMP_INGR 0x8560
-#define GL_GREEN_MIN_CLAMP_INGR 0x8561
-#define GL_BLUE_MIN_CLAMP_INGR 0x8562
-#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
-#define GL_RED_MAX_CLAMP_INGR 0x8564
-#define GL_GREEN_MAX_CLAMP_INGR 0x8565
-#define GL_BLUE_MAX_CLAMP_INGR 0x8566
-#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
-
-#define GLEW_INGR_color_clamp GLEW_GET_VAR(__GLEW_INGR_color_clamp)
-
-#endif /* GL_INGR_color_clamp */
-
-/* ------------------------- GL_INGR_interlace_read ------------------------ */
-
-#ifndef GL_INGR_interlace_read
-#define GL_INGR_interlace_read 1
-
-#define GL_INTERLACE_READ_INGR 0x8568
-
-#define GLEW_INGR_interlace_read GLEW_GET_VAR(__GLEW_INGR_interlace_read)
-
-#endif /* GL_INGR_interlace_read */
-
-/* ------------------------ GL_INTEL_parallel_arrays ----------------------- */
-
-#ifndef GL_INTEL_parallel_arrays
-#define GL_INTEL_parallel_arrays 1
-
-#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
-#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
-#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
-#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
-#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
-
-typedef void (GLAPIENTRY * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
-typedef void (GLAPIENTRY * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void** pointer);
-typedef void (GLAPIENTRY * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
-typedef void (GLAPIENTRY * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void** pointer);
-
-#define glColorPointervINTEL GLEW_GET_FUN(__glewColorPointervINTEL)
-#define glNormalPointervINTEL GLEW_GET_FUN(__glewNormalPointervINTEL)
-#define glTexCoordPointervINTEL GLEW_GET_FUN(__glewTexCoordPointervINTEL)
-#define glVertexPointervINTEL GLEW_GET_FUN(__glewVertexPointervINTEL)
-
-#define GLEW_INTEL_parallel_arrays GLEW_GET_VAR(__GLEW_INTEL_parallel_arrays)
-
-#endif /* GL_INTEL_parallel_arrays */
-
-/* ------------------------ GL_INTEL_texture_scissor ----------------------- */
-
-#ifndef GL_INTEL_texture_scissor
-#define GL_INTEL_texture_scissor 1
-
-typedef void (GLAPIENTRY * PFNGLTEXSCISSORFUNCINTELPROC) (GLenum target, GLenum lfunc, GLenum hfunc);
-typedef void (GLAPIENTRY * PFNGLTEXSCISSORINTELPROC) (GLenum target, GLclampf tlow, GLclampf thigh);
-
-#define glTexScissorFuncINTEL GLEW_GET_FUN(__glewTexScissorFuncINTEL)
-#define glTexScissorINTEL GLEW_GET_FUN(__glewTexScissorINTEL)
-
-#define GLEW_INTEL_texture_scissor GLEW_GET_VAR(__GLEW_INTEL_texture_scissor)
-
-#endif /* GL_INTEL_texture_scissor */
-
-/* -------------------------- GL_KTX_buffer_region ------------------------- */
-
-#ifndef GL_KTX_buffer_region
-#define GL_KTX_buffer_region 1
-
-#define GL_KTX_FRONT_REGION 0x0
-#define GL_KTX_BACK_REGION 0x1
-#define GL_KTX_Z_REGION 0x2
-#define GL_KTX_STENCIL_REGION 0x3
-
-typedef GLuint (GLAPIENTRY * PFNGLBUFFERREGIONENABLEDEXTPROC) (void);
-typedef void (GLAPIENTRY * PFNGLDELETEBUFFERREGIONEXTPROC) (GLenum region);
-typedef void (GLAPIENTRY * PFNGLDRAWBUFFERREGIONEXTPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest);
-typedef GLuint (GLAPIENTRY * PFNGLNEWBUFFERREGIONEXTPROC) (GLenum region);
-typedef void (GLAPIENTRY * PFNGLREADBUFFERREGIONEXTPROC) (GLuint region, GLint x, GLint y, GLsizei width, GLsizei height);
-
-#define glBufferRegionEnabledEXT GLEW_GET_FUN(__glewBufferRegionEnabledEXT)
-#define glDeleteBufferRegionEXT GLEW_GET_FUN(__glewDeleteBufferRegionEXT)
-#define glDrawBufferRegionEXT GLEW_GET_FUN(__glewDrawBufferRegionEXT)
-#define glNewBufferRegionEXT GLEW_GET_FUN(__glewNewBufferRegionEXT)
-#define glReadBufferRegionEXT GLEW_GET_FUN(__glewReadBufferRegionEXT)
-
-#define GLEW_KTX_buffer_region GLEW_GET_VAR(__GLEW_KTX_buffer_region)
-
-#endif /* GL_KTX_buffer_region */
-
-/* ------------------------- GL_MESAX_texture_stack ------------------------ */
-
-#ifndef GL_MESAX_texture_stack
-#define GL_MESAX_texture_stack 1
-
-#define GL_TEXTURE_1D_STACK_MESAX 0x8759
-#define GL_TEXTURE_2D_STACK_MESAX 0x875A
-#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
-#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
-#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
-#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
-
-#define GLEW_MESAX_texture_stack GLEW_GET_VAR(__GLEW_MESAX_texture_stack)
-
-#endif /* GL_MESAX_texture_stack */
-
-/* -------------------------- GL_MESA_pack_invert -------------------------- */
-
-#ifndef GL_MESA_pack_invert
-#define GL_MESA_pack_invert 1
-
-#define GL_PACK_INVERT_MESA 0x8758
-
-#define GLEW_MESA_pack_invert GLEW_GET_VAR(__GLEW_MESA_pack_invert)
-
-#endif /* GL_MESA_pack_invert */
-
-/* ------------------------- GL_MESA_resize_buffers ------------------------ */
-
-#ifndef GL_MESA_resize_buffers
-#define GL_MESA_resize_buffers 1
-
-typedef void (GLAPIENTRY * PFNGLRESIZEBUFFERSMESAPROC) (void);
-
-#define glResizeBuffersMESA GLEW_GET_FUN(__glewResizeBuffersMESA)
-
-#define GLEW_MESA_resize_buffers GLEW_GET_VAR(__GLEW_MESA_resize_buffers)
-
-#endif /* GL_MESA_resize_buffers */
-
-/* --------------------------- GL_MESA_window_pos -------------------------- */
-
-#ifndef GL_MESA_window_pos
-#define GL_MESA_window_pos 1
-
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVMESAPROC) (const GLint* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVMESAPROC) (const GLint* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4IVMESAPROC) (const GLint* p);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (GLAPIENTRY * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort* p);
-
-#define glWindowPos2dMESA GLEW_GET_FUN(__glewWindowPos2dMESA)
-#define glWindowPos2dvMESA GLEW_GET_FUN(__glewWindowPos2dvMESA)
-#define glWindowPos2fMESA GLEW_GET_FUN(__glewWindowPos2fMESA)
-#define glWindowPos2fvMESA GLEW_GET_FUN(__glewWindowPos2fvMESA)
-#define glWindowPos2iMESA GLEW_GET_FUN(__glewWindowPos2iMESA)
-#define glWindowPos2ivMESA GLEW_GET_FUN(__glewWindowPos2ivMESA)
-#define glWindowPos2sMESA GLEW_GET_FUN(__glewWindowPos2sMESA)
-#define glWindowPos2svMESA GLEW_GET_FUN(__glewWindowPos2svMESA)
-#define glWindowPos3dMESA GLEW_GET_FUN(__glewWindowPos3dMESA)
-#define glWindowPos3dvMESA GLEW_GET_FUN(__glewWindowPos3dvMESA)
-#define glWindowPos3fMESA GLEW_GET_FUN(__glewWindowPos3fMESA)
-#define glWindowPos3fvMESA GLEW_GET_FUN(__glewWindowPos3fvMESA)
-#define glWindowPos3iMESA GLEW_GET_FUN(__glewWindowPos3iMESA)
-#define glWindowPos3ivMESA GLEW_GET_FUN(__glewWindowPos3ivMESA)
-#define glWindowPos3sMESA GLEW_GET_FUN(__glewWindowPos3sMESA)
-#define glWindowPos3svMESA GLEW_GET_FUN(__glewWindowPos3svMESA)
-#define glWindowPos4dMESA GLEW_GET_FUN(__glewWindowPos4dMESA)
-#define glWindowPos4dvMESA GLEW_GET_FUN(__glewWindowPos4dvMESA)
-#define glWindowPos4fMESA GLEW_GET_FUN(__glewWindowPos4fMESA)
-#define glWindowPos4fvMESA GLEW_GET_FUN(__glewWindowPos4fvMESA)
-#define glWindowPos4iMESA GLEW_GET_FUN(__glewWindowPos4iMESA)
-#define glWindowPos4ivMESA GLEW_GET_FUN(__glewWindowPos4ivMESA)
-#define glWindowPos4sMESA GLEW_GET_FUN(__glewWindowPos4sMESA)
-#define glWindowPos4svMESA GLEW_GET_FUN(__glewWindowPos4svMESA)
-
-#define GLEW_MESA_window_pos GLEW_GET_VAR(__GLEW_MESA_window_pos)
-
-#endif /* GL_MESA_window_pos */
-
-/* ------------------------- GL_MESA_ycbcr_texture ------------------------- */
-
-#ifndef GL_MESA_ycbcr_texture
-#define GL_MESA_ycbcr_texture 1
-
-#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
-#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
-#define GL_YCBCR_MESA 0x8757
-
-#define GLEW_MESA_ycbcr_texture GLEW_GET_VAR(__GLEW_MESA_ycbcr_texture)
-
-#endif /* GL_MESA_ycbcr_texture */
-
-/* --------------------------- GL_NV_blend_square -------------------------- */
-
-#ifndef GL_NV_blend_square
-#define GL_NV_blend_square 1
-
-#define GLEW_NV_blend_square GLEW_GET_VAR(__GLEW_NV_blend_square)
-
-#endif /* GL_NV_blend_square */
-
-/* ----------------------- GL_NV_copy_depth_to_color ----------------------- */
-
-#ifndef GL_NV_copy_depth_to_color
-#define GL_NV_copy_depth_to_color 1
-
-#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
-#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
-
-#define GLEW_NV_copy_depth_to_color GLEW_GET_VAR(__GLEW_NV_copy_depth_to_color)
-
-#endif /* GL_NV_copy_depth_to_color */
-
-/* ------------------------ GL_NV_depth_buffer_float ----------------------- */
-
-#ifndef GL_NV_depth_buffer_float
-#define GL_NV_depth_buffer_float 1
-
-#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
-#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
-#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
-#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
-
-typedef void (GLAPIENTRY * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
-typedef void (GLAPIENTRY * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
-typedef void (GLAPIENTRY * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
-
-#define glClearDepthdNV GLEW_GET_FUN(__glewClearDepthdNV)
-#define glDepthBoundsdNV GLEW_GET_FUN(__glewDepthBoundsdNV)
-#define glDepthRangedNV GLEW_GET_FUN(__glewDepthRangedNV)
-
-#define GLEW_NV_depth_buffer_float GLEW_GET_VAR(__GLEW_NV_depth_buffer_float)
-
-#endif /* GL_NV_depth_buffer_float */
-
-/* --------------------------- GL_NV_depth_clamp --------------------------- */
-
-#ifndef GL_NV_depth_clamp
-#define GL_NV_depth_clamp 1
-
-#define GL_DEPTH_CLAMP_NV 0x864F
-
-#define GLEW_NV_depth_clamp GLEW_GET_VAR(__GLEW_NV_depth_clamp)
-
-#endif /* GL_NV_depth_clamp */
-
-/* ---------------------- GL_NV_depth_range_unclamped ---------------------- */
-
-#ifndef GL_NV_depth_range_unclamped
-#define GL_NV_depth_range_unclamped 1
-
-#define GL_SAMPLE_COUNT_BITS_NV 0x8864
-#define GL_CURRENT_SAMPLE_COUNT_QUERY_NV 0x8865
-#define GL_QUERY_RESULT_NV 0x8866
-#define GL_QUERY_RESULT_AVAILABLE_NV 0x8867
-#define GL_SAMPLE_COUNT_NV 0x8914
-
-#define GLEW_NV_depth_range_unclamped GLEW_GET_VAR(__GLEW_NV_depth_range_unclamped)
-
-#endif /* GL_NV_depth_range_unclamped */
-
-/* ---------------------------- GL_NV_evaluators --------------------------- */
-
-#ifndef GL_NV_evaluators
-#define GL_NV_evaluators 1
-
-#define GL_EVAL_2D_NV 0x86C0
-#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
-#define GL_MAP_TESSELLATION_NV 0x86C2
-#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
-#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
-#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
-#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
-#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
-#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
-#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
-#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
-#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
-#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
-#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
-#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
-#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
-#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
-#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
-#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
-#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
-#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
-#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
-#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
-#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
-
-typedef void (GLAPIENTRY * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
-typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points);
-typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points);
-typedef void (GLAPIENTRY * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint* params);
-
-#define glEvalMapsNV GLEW_GET_FUN(__glewEvalMapsNV)
-#define glGetMapAttribParameterfvNV GLEW_GET_FUN(__glewGetMapAttribParameterfvNV)
-#define glGetMapAttribParameterivNV GLEW_GET_FUN(__glewGetMapAttribParameterivNV)
-#define glGetMapControlPointsNV GLEW_GET_FUN(__glewGetMapControlPointsNV)
-#define glGetMapParameterfvNV GLEW_GET_FUN(__glewGetMapParameterfvNV)
-#define glGetMapParameterivNV GLEW_GET_FUN(__glewGetMapParameterivNV)
-#define glMapControlPointsNV GLEW_GET_FUN(__glewMapControlPointsNV)
-#define glMapParameterfvNV GLEW_GET_FUN(__glewMapParameterfvNV)
-#define glMapParameterivNV GLEW_GET_FUN(__glewMapParameterivNV)
-
-#define GLEW_NV_evaluators GLEW_GET_VAR(__GLEW_NV_evaluators)
-
-#endif /* GL_NV_evaluators */
-
-/* ------------------------------ GL_NV_fence ------------------------------ */
-
-#ifndef GL_NV_fence
-#define GL_NV_fence 1
-
-#define GL_ALL_COMPLETED_NV 0x84F2
-#define GL_FENCE_STATUS_NV 0x84F3
-#define GL_FENCE_CONDITION_NV 0x84F4
-
-typedef void (GLAPIENTRY * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint* fences);
-typedef void (GLAPIENTRY * PFNGLFINISHFENCENVPROC) (GLuint fence);
-typedef void (GLAPIENTRY * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint* fences);
-typedef void (GLAPIENTRY * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISFENCENVPROC) (GLuint fence);
-typedef void (GLAPIENTRY * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
-typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCENVPROC) (GLuint fence);
-
-#define glDeleteFencesNV GLEW_GET_FUN(__glewDeleteFencesNV)
-#define glFinishFenceNV GLEW_GET_FUN(__glewFinishFenceNV)
-#define glGenFencesNV GLEW_GET_FUN(__glewGenFencesNV)
-#define glGetFenceivNV GLEW_GET_FUN(__glewGetFenceivNV)
-#define glIsFenceNV GLEW_GET_FUN(__glewIsFenceNV)
-#define glSetFenceNV GLEW_GET_FUN(__glewSetFenceNV)
-#define glTestFenceNV GLEW_GET_FUN(__glewTestFenceNV)
-
-#define GLEW_NV_fence GLEW_GET_VAR(__GLEW_NV_fence)
-
-#endif /* GL_NV_fence */
-
-/* --------------------------- GL_NV_float_buffer -------------------------- */
-
-#ifndef GL_NV_float_buffer
-#define GL_NV_float_buffer 1
-
-#define GL_FLOAT_R_NV 0x8880
-#define GL_FLOAT_RG_NV 0x8881
-#define GL_FLOAT_RGB_NV 0x8882
-#define GL_FLOAT_RGBA_NV 0x8883
-#define GL_FLOAT_R16_NV 0x8884
-#define GL_FLOAT_R32_NV 0x8885
-#define GL_FLOAT_RG16_NV 0x8886
-#define GL_FLOAT_RG32_NV 0x8887
-#define GL_FLOAT_RGB16_NV 0x8888
-#define GL_FLOAT_RGB32_NV 0x8889
-#define GL_FLOAT_RGBA16_NV 0x888A
-#define GL_FLOAT_RGBA32_NV 0x888B
-#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
-#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
-#define GL_FLOAT_RGBA_MODE_NV 0x888E
-
-#define GLEW_NV_float_buffer GLEW_GET_VAR(__GLEW_NV_float_buffer)
-
-#endif /* GL_NV_float_buffer */
-
-/* --------------------------- GL_NV_fog_distance -------------------------- */
-
-#ifndef GL_NV_fog_distance
-#define GL_NV_fog_distance 1
-
-#define GL_FOG_DISTANCE_MODE_NV 0x855A
-#define GL_EYE_RADIAL_NV 0x855B
-#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
-
-#define GLEW_NV_fog_distance GLEW_GET_VAR(__GLEW_NV_fog_distance)
-
-#endif /* GL_NV_fog_distance */
-
-/* ------------------------- GL_NV_fragment_program ------------------------ */
-
-#ifndef GL_NV_fragment_program
-#define GL_NV_fragment_program 1
-
-#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
-#define GL_FRAGMENT_PROGRAM_NV 0x8870
-#define GL_MAX_TEXTURE_COORDS_NV 0x8871
-#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
-#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
-#define GL_PROGRAM_ERROR_STRING_NV 0x8874
-
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble *params);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLdouble v[]);
-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte* name, const GLfloat v[]);
-
-#define glGetProgramNamedParameterdvNV GLEW_GET_FUN(__glewGetProgramNamedParameterdvNV)
-#define glGetProgramNamedParameterfvNV GLEW_GET_FUN(__glewGetProgramNamedParameterfvNV)
-#define glProgramNamedParameter4dNV GLEW_GET_FUN(__glewProgramNamedParameter4dNV)
-#define glProgramNamedParameter4dvNV GLEW_GET_FUN(__glewProgramNamedParameter4dvNV)
-#define glProgramNamedParameter4fNV GLEW_GET_FUN(__glewProgramNamedParameter4fNV)
-#define glProgramNamedParameter4fvNV GLEW_GET_FUN(__glewProgramNamedParameter4fvNV)
-
-#define GLEW_NV_fragment_program GLEW_GET_VAR(__GLEW_NV_fragment_program)
-
-#endif /* GL_NV_fragment_program */
-
-/* ------------------------ GL_NV_fragment_program2 ------------------------ */
-
-#ifndef GL_NV_fragment_program2
-#define GL_NV_fragment_program2 1
-
-#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
-#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
-#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
-#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
-#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
-
-#define GLEW_NV_fragment_program2 GLEW_GET_VAR(__GLEW_NV_fragment_program2)
-
-#endif /* GL_NV_fragment_program2 */
-
-/* ------------------------ GL_NV_fragment_program4 ------------------------ */
-
-#ifndef GL_NV_fragment_program4
-#define GL_NV_fragment_program4 1
-
-#define GLEW_NV_fragment_program4 GLEW_GET_VAR(__GLEW_NV_fragment_program4)
-
-#endif /* GL_NV_fragment_program4 */
-
-/* --------------------- GL_NV_fragment_program_option --------------------- */
-
-#ifndef GL_NV_fragment_program_option
-#define GL_NV_fragment_program_option 1
-
-#define GLEW_NV_fragment_program_option GLEW_GET_VAR(__GLEW_NV_fragment_program_option)
-
-#endif /* GL_NV_fragment_program_option */
-
-/* ----------------- GL_NV_framebuffer_multisample_coverage ---------------- */
-
-#ifndef GL_NV_framebuffer_multisample_coverage
-#define GL_NV_framebuffer_multisample_coverage 1
-
-#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
-#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
-#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
-#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
-
-typedef void (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
-
-#define glRenderbufferStorageMultisampleCoverageNV GLEW_GET_FUN(__glewRenderbufferStorageMultisampleCoverageNV)
-
-#define GLEW_NV_framebuffer_multisample_coverage GLEW_GET_VAR(__GLEW_NV_framebuffer_multisample_coverage)
-
-#endif /* GL_NV_framebuffer_multisample_coverage */
-
-/* ------------------------ GL_NV_geometry_program4 ------------------------ */
-
-#ifndef GL_NV_geometry_program4
-#define GL_NV_geometry_program4 1
-
-#define GL_GEOMETRY_PROGRAM_NV 0x8C26
-#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
-#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
-
-typedef void (GLAPIENTRY * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
-
-#define glProgramVertexLimitNV GLEW_GET_FUN(__glewProgramVertexLimitNV)
-
-#define GLEW_NV_geometry_program4 GLEW_GET_VAR(__GLEW_NV_geometry_program4)
-
-#endif /* GL_NV_geometry_program4 */
-
-/* ------------------------- GL_NV_geometry_shader4 ------------------------ */
-
-#ifndef GL_NV_geometry_shader4
-#define GL_NV_geometry_shader4 1
-
-#define GLEW_NV_geometry_shader4 GLEW_GET_VAR(__GLEW_NV_geometry_shader4)
-
-#endif /* GL_NV_geometry_shader4 */
-
-/* --------------------------- GL_NV_gpu_program4 -------------------------- */
-
-#ifndef GL_NV_gpu_program4
-#define GL_NV_gpu_program4 1
-
-#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
-#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
-#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
-#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
-#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
-#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
-#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
-#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
-
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
-
-#define glProgramEnvParameterI4iNV GLEW_GET_FUN(__glewProgramEnvParameterI4iNV)
-#define glProgramEnvParameterI4ivNV GLEW_GET_FUN(__glewProgramEnvParameterI4ivNV)
-#define glProgramEnvParameterI4uiNV GLEW_GET_FUN(__glewProgramEnvParameterI4uiNV)
-#define glProgramEnvParameterI4uivNV GLEW_GET_FUN(__glewProgramEnvParameterI4uivNV)
-#define glProgramEnvParametersI4ivNV GLEW_GET_FUN(__glewProgramEnvParametersI4ivNV)
-#define glProgramEnvParametersI4uivNV GLEW_GET_FUN(__glewProgramEnvParametersI4uivNV)
-#define glProgramLocalParameterI4iNV GLEW_GET_FUN(__glewProgramLocalParameterI4iNV)
-#define glProgramLocalParameterI4ivNV GLEW_GET_FUN(__glewProgramLocalParameterI4ivNV)
-#define glProgramLocalParameterI4uiNV GLEW_GET_FUN(__glewProgramLocalParameterI4uiNV)
-#define glProgramLocalParameterI4uivNV GLEW_GET_FUN(__glewProgramLocalParameterI4uivNV)
-#define glProgramLocalParametersI4ivNV GLEW_GET_FUN(__glewProgramLocalParametersI4ivNV)
-#define glProgramLocalParametersI4uivNV GLEW_GET_FUN(__glewProgramLocalParametersI4uivNV)
-
-#define GLEW_NV_gpu_program4 GLEW_GET_VAR(__GLEW_NV_gpu_program4)
-
-#endif /* GL_NV_gpu_program4 */
-
-/* ---------------------------- GL_NV_half_float --------------------------- */
-
-#ifndef GL_NV_half_float
-#define GL_NV_half_float 1
-
-#define GL_HALF_FLOAT_NV 0x140B
-
-typedef unsigned short GLhalf;
-
-typedef void (GLAPIENTRY * PFNGLCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
-typedef void (GLAPIENTRY * PFNGLCOLOR3HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLCOLOR4HNVPROC) (GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha);
-typedef void (GLAPIENTRY * PFNGLCOLOR4HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDHNVPROC) (GLhalf fog);
-typedef void (GLAPIENTRY * PFNGLFOGCOORDHVNVPROC) (const GLhalf* fog);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalf s);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalf s, GLhalf t);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q);
-typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLNORMAL3HNVPROC) (GLhalf nx, GLhalf ny, GLhalf nz);
-typedef void (GLAPIENTRY * PFNGLNORMAL3HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalf red, GLhalf green, GLhalf blue);
-typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD1HNVPROC) (GLhalf s);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD1HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2HNVPROC) (GLhalf s, GLhalf t);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD3HNVPROC) (GLhalf s, GLhalf t, GLhalf r);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD3HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD4HNVPROC) (GLhalf s, GLhalf t, GLhalf r, GLhalf q);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD4HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEX2HNVPROC) (GLhalf x, GLhalf y);
-typedef void (GLAPIENTRY * PFNGLVERTEX2HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEX3HNVPROC) (GLhalf x, GLhalf y, GLhalf z);
-typedef void (GLAPIENTRY * PFNGLVERTEX3HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEX4HNVPROC) (GLhalf x, GLhalf y, GLhalf z, GLhalf w);
-typedef void (GLAPIENTRY * PFNGLVERTEX4HVNVPROC) (const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalf x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalf x, GLhalf y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalf* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHNVPROC) (GLhalf weight);
-typedef void (GLAPIENTRY * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalf* weight);
-
-#define glColor3hNV GLEW_GET_FUN(__glewColor3hNV)
-#define glColor3hvNV GLEW_GET_FUN(__glewColor3hvNV)
-#define glColor4hNV GLEW_GET_FUN(__glewColor4hNV)
-#define glColor4hvNV GLEW_GET_FUN(__glewColor4hvNV)
-#define glFogCoordhNV GLEW_GET_FUN(__glewFogCoordhNV)
-#define glFogCoordhvNV GLEW_GET_FUN(__glewFogCoordhvNV)
-#define glMultiTexCoord1hNV GLEW_GET_FUN(__glewMultiTexCoord1hNV)
-#define glMultiTexCoord1hvNV GLEW_GET_FUN(__glewMultiTexCoord1hvNV)
-#define glMultiTexCoord2hNV GLEW_GET_FUN(__glewMultiTexCoord2hNV)
-#define glMultiTexCoord2hvNV GLEW_GET_FUN(__glewMultiTexCoord2hvNV)
-#define glMultiTexCoord3hNV GLEW_GET_FUN(__glewMultiTexCoord3hNV)
-#define glMultiTexCoord3hvNV GLEW_GET_FUN(__glewMultiTexCoord3hvNV)
-#define glMultiTexCoord4hNV GLEW_GET_FUN(__glewMultiTexCoord4hNV)
-#define glMultiTexCoord4hvNV GLEW_GET_FUN(__glewMultiTexCoord4hvNV)
-#define glNormal3hNV GLEW_GET_FUN(__glewNormal3hNV)
-#define glNormal3hvNV GLEW_GET_FUN(__glewNormal3hvNV)
-#define glSecondaryColor3hNV GLEW_GET_FUN(__glewSecondaryColor3hNV)
-#define glSecondaryColor3hvNV GLEW_GET_FUN(__glewSecondaryColor3hvNV)
-#define glTexCoord1hNV GLEW_GET_FUN(__glewTexCoord1hNV)
-#define glTexCoord1hvNV GLEW_GET_FUN(__glewTexCoord1hvNV)
-#define glTexCoord2hNV GLEW_GET_FUN(__glewTexCoord2hNV)
-#define glTexCoord2hvNV GLEW_GET_FUN(__glewTexCoord2hvNV)
-#define glTexCoord3hNV GLEW_GET_FUN(__glewTexCoord3hNV)
-#define glTexCoord3hvNV GLEW_GET_FUN(__glewTexCoord3hvNV)
-#define glTexCoord4hNV GLEW_GET_FUN(__glewTexCoord4hNV)
-#define glTexCoord4hvNV GLEW_GET_FUN(__glewTexCoord4hvNV)
-#define glVertex2hNV GLEW_GET_FUN(__glewVertex2hNV)
-#define glVertex2hvNV GLEW_GET_FUN(__glewVertex2hvNV)
-#define glVertex3hNV GLEW_GET_FUN(__glewVertex3hNV)
-#define glVertex3hvNV GLEW_GET_FUN(__glewVertex3hvNV)
-#define glVertex4hNV GLEW_GET_FUN(__glewVertex4hNV)
-#define glVertex4hvNV GLEW_GET_FUN(__glewVertex4hvNV)
-#define glVertexAttrib1hNV GLEW_GET_FUN(__glewVertexAttrib1hNV)
-#define glVertexAttrib1hvNV GLEW_GET_FUN(__glewVertexAttrib1hvNV)
-#define glVertexAttrib2hNV GLEW_GET_FUN(__glewVertexAttrib2hNV)
-#define glVertexAttrib2hvNV GLEW_GET_FUN(__glewVertexAttrib2hvNV)
-#define glVertexAttrib3hNV GLEW_GET_FUN(__glewVertexAttrib3hNV)
-#define glVertexAttrib3hvNV GLEW_GET_FUN(__glewVertexAttrib3hvNV)
-#define glVertexAttrib4hNV GLEW_GET_FUN(__glewVertexAttrib4hNV)
-#define glVertexAttrib4hvNV GLEW_GET_FUN(__glewVertexAttrib4hvNV)
-#define glVertexAttribs1hvNV GLEW_GET_FUN(__glewVertexAttribs1hvNV)
-#define glVertexAttribs2hvNV GLEW_GET_FUN(__glewVertexAttribs2hvNV)
-#define glVertexAttribs3hvNV GLEW_GET_FUN(__glewVertexAttribs3hvNV)
-#define glVertexAttribs4hvNV GLEW_GET_FUN(__glewVertexAttribs4hvNV)
-#define glVertexWeighthNV GLEW_GET_FUN(__glewVertexWeighthNV)
-#define glVertexWeighthvNV GLEW_GET_FUN(__glewVertexWeighthvNV)
-
-#define GLEW_NV_half_float GLEW_GET_VAR(__GLEW_NV_half_float)
-
-#endif /* GL_NV_half_float */
-
-/* ------------------------ GL_NV_light_max_exponent ----------------------- */
-
-#ifndef GL_NV_light_max_exponent
-#define GL_NV_light_max_exponent 1
-
-#define GL_MAX_SHININESS_NV 0x8504
-#define GL_MAX_SPOT_EXPONENT_NV 0x8505
-
-#define GLEW_NV_light_max_exponent GLEW_GET_VAR(__GLEW_NV_light_max_exponent)
-
-#endif /* GL_NV_light_max_exponent */
-
-/* --------------------- GL_NV_multisample_filter_hint --------------------- */
-
-#ifndef GL_NV_multisample_filter_hint
-#define GL_NV_multisample_filter_hint 1
-
-#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
-
-#define GLEW_NV_multisample_filter_hint GLEW_GET_VAR(__GLEW_NV_multisample_filter_hint)
-
-#endif /* GL_NV_multisample_filter_hint */
-
-/* ------------------------- GL_NV_occlusion_query ------------------------- */
-
-#ifndef GL_NV_occlusion_query
-#define GL_NV_occlusion_query 1
-
-#define GL_PIXEL_COUNTER_BITS_NV 0x8864
-#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
-#define GL_PIXEL_COUNT_NV 0x8866
-#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
-
-typedef void (GLAPIENTRY * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLENDOCCLUSIONQUERYNVPROC) (void);
-typedef void (GLAPIENTRY * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
-
-#define glBeginOcclusionQueryNV GLEW_GET_FUN(__glewBeginOcclusionQueryNV)
-#define glDeleteOcclusionQueriesNV GLEW_GET_FUN(__glewDeleteOcclusionQueriesNV)
-#define glEndOcclusionQueryNV GLEW_GET_FUN(__glewEndOcclusionQueryNV)
-#define glGenOcclusionQueriesNV GLEW_GET_FUN(__glewGenOcclusionQueriesNV)
-#define glGetOcclusionQueryivNV GLEW_GET_FUN(__glewGetOcclusionQueryivNV)
-#define glGetOcclusionQueryuivNV GLEW_GET_FUN(__glewGetOcclusionQueryuivNV)
-#define glIsOcclusionQueryNV GLEW_GET_FUN(__glewIsOcclusionQueryNV)
-
-#define GLEW_NV_occlusion_query GLEW_GET_VAR(__GLEW_NV_occlusion_query)
-
-#endif /* GL_NV_occlusion_query */
-
-/* ----------------------- GL_NV_packed_depth_stencil ---------------------- */
-
-#ifndef GL_NV_packed_depth_stencil
-#define GL_NV_packed_depth_stencil 1
-
-#define GL_DEPTH_STENCIL_NV 0x84F9
-#define GL_UNSIGNED_INT_24_8_NV 0x84FA
-
-#define GLEW_NV_packed_depth_stencil GLEW_GET_VAR(__GLEW_NV_packed_depth_stencil)
-
-#endif /* GL_NV_packed_depth_stencil */
-
-/* --------------------- GL_NV_parameter_buffer_object --------------------- */
-
-#ifndef GL_NV_parameter_buffer_object
-#define GL_NV_parameter_buffer_object 1
-
-#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
-#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
-#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
-#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
-#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
-
-typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
-
-#define glProgramBufferParametersIivNV GLEW_GET_FUN(__glewProgramBufferParametersIivNV)
-#define glProgramBufferParametersIuivNV GLEW_GET_FUN(__glewProgramBufferParametersIuivNV)
-#define glProgramBufferParametersfvNV GLEW_GET_FUN(__glewProgramBufferParametersfvNV)
-
-#define GLEW_NV_parameter_buffer_object GLEW_GET_VAR(__GLEW_NV_parameter_buffer_object)
-
-#endif /* GL_NV_parameter_buffer_object */
-
-/* ------------------------- GL_NV_pixel_data_range ------------------------ */
-
-#ifndef GL_NV_pixel_data_range
-#define GL_NV_pixel_data_range 1
-
-#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
-#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
-#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
-#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
-#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
-#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
-
-typedef void (GLAPIENTRY * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
-typedef void (GLAPIENTRY * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, void* pointer);
-
-#define glFlushPixelDataRangeNV GLEW_GET_FUN(__glewFlushPixelDataRangeNV)
-#define glPixelDataRangeNV GLEW_GET_FUN(__glewPixelDataRangeNV)
-
-#define GLEW_NV_pixel_data_range GLEW_GET_VAR(__GLEW_NV_pixel_data_range)
-
-#endif /* GL_NV_pixel_data_range */
-
-/* --------------------------- GL_NV_point_sprite -------------------------- */
-
-#ifndef GL_NV_point_sprite
-#define GL_NV_point_sprite 1
-
-#define GL_POINT_SPRITE_NV 0x8861
-#define GL_COORD_REPLACE_NV 0x8862
-#define GL_POINT_SPRITE_R_MODE_NV 0x8863
-
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
-
-#define glPointParameteriNV GLEW_GET_FUN(__glewPointParameteriNV)
-#define glPointParameterivNV GLEW_GET_FUN(__glewPointParameterivNV)
-
-#define GLEW_NV_point_sprite GLEW_GET_VAR(__GLEW_NV_point_sprite)
-
-#endif /* GL_NV_point_sprite */
-
-/* ------------------------ GL_NV_primitive_restart ------------------------ */
-
-#ifndef GL_NV_primitive_restart
-#define GL_NV_primitive_restart 1
-
-#define GL_PRIMITIVE_RESTART_NV 0x8558
-#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
-
-typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
-typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTNVPROC) (void);
-
-#define glPrimitiveRestartIndexNV GLEW_GET_FUN(__glewPrimitiveRestartIndexNV)
-#define glPrimitiveRestartNV GLEW_GET_FUN(__glewPrimitiveRestartNV)
-
-#define GLEW_NV_primitive_restart GLEW_GET_VAR(__GLEW_NV_primitive_restart)
-
-#endif /* GL_NV_primitive_restart */
-
-/* ------------------------ GL_NV_register_combiners ----------------------- */
-
-#ifndef GL_NV_register_combiners
-#define GL_NV_register_combiners 1
-
-#define GL_REGISTER_COMBINERS_NV 0x8522
-#define GL_VARIABLE_A_NV 0x8523
-#define GL_VARIABLE_B_NV 0x8524
-#define GL_VARIABLE_C_NV 0x8525
-#define GL_VARIABLE_D_NV 0x8526
-#define GL_VARIABLE_E_NV 0x8527
-#define GL_VARIABLE_F_NV 0x8528
-#define GL_VARIABLE_G_NV 0x8529
-#define GL_CONSTANT_COLOR0_NV 0x852A
-#define GL_CONSTANT_COLOR1_NV 0x852B
-#define GL_PRIMARY_COLOR_NV 0x852C
-#define GL_SECONDARY_COLOR_NV 0x852D
-#define GL_SPARE0_NV 0x852E
-#define GL_SPARE1_NV 0x852F
-#define GL_DISCARD_NV 0x8530
-#define GL_E_TIMES_F_NV 0x8531
-#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
-#define GL_UNSIGNED_IDENTITY_NV 0x8536
-#define GL_UNSIGNED_INVERT_NV 0x8537
-#define GL_EXPAND_NORMAL_NV 0x8538
-#define GL_EXPAND_NEGATE_NV 0x8539
-#define GL_HALF_BIAS_NORMAL_NV 0x853A
-#define GL_HALF_BIAS_NEGATE_NV 0x853B
-#define GL_SIGNED_IDENTITY_NV 0x853C
-#define GL_SIGNED_NEGATE_NV 0x853D
-#define GL_SCALE_BY_TWO_NV 0x853E
-#define GL_SCALE_BY_FOUR_NV 0x853F
-#define GL_SCALE_BY_ONE_HALF_NV 0x8540
-#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
-#define GL_COMBINER_INPUT_NV 0x8542
-#define GL_COMBINER_MAPPING_NV 0x8543
-#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
-#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
-#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
-#define GL_COMBINER_MUX_SUM_NV 0x8547
-#define GL_COMBINER_SCALE_NV 0x8548
-#define GL_COMBINER_BIAS_NV 0x8549
-#define GL_COMBINER_AB_OUTPUT_NV 0x854A
-#define GL_COMBINER_CD_OUTPUT_NV 0x854B
-#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
-#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
-#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
-#define GL_COLOR_SUM_CLAMP_NV 0x854F
-#define GL_COMBINER0_NV 0x8550
-#define GL_COMBINER1_NV 0x8551
-#define GL_COMBINER2_NV 0x8552
-#define GL_COMBINER3_NV 0x8553
-#define GL_COMBINER4_NV 0x8554
-#define GL_COMBINER5_NV 0x8555
-#define GL_COMBINER6_NV 0x8556
-#define GL_COMBINER7_NV 0x8557
-
-typedef void (GLAPIENTRY * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
-typedef void (GLAPIENTRY * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
-typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint* params);
-
-#define glCombinerInputNV GLEW_GET_FUN(__glewCombinerInputNV)
-#define glCombinerOutputNV GLEW_GET_FUN(__glewCombinerOutputNV)
-#define glCombinerParameterfNV GLEW_GET_FUN(__glewCombinerParameterfNV)
-#define glCombinerParameterfvNV GLEW_GET_FUN(__glewCombinerParameterfvNV)
-#define glCombinerParameteriNV GLEW_GET_FUN(__glewCombinerParameteriNV)
-#define glCombinerParameterivNV GLEW_GET_FUN(__glewCombinerParameterivNV)
-#define glFinalCombinerInputNV GLEW_GET_FUN(__glewFinalCombinerInputNV)
-#define glGetCombinerInputParameterfvNV GLEW_GET_FUN(__glewGetCombinerInputParameterfvNV)
-#define glGetCombinerInputParameterivNV GLEW_GET_FUN(__glewGetCombinerInputParameterivNV)
-#define glGetCombinerOutputParameterfvNV GLEW_GET_FUN(__glewGetCombinerOutputParameterfvNV)
-#define glGetCombinerOutputParameterivNV GLEW_GET_FUN(__glewGetCombinerOutputParameterivNV)
-#define glGetFinalCombinerInputParameterfvNV GLEW_GET_FUN(__glewGetFinalCombinerInputParameterfvNV)
-#define glGetFinalCombinerInputParameterivNV GLEW_GET_FUN(__glewGetFinalCombinerInputParameterivNV)
-
-#define GLEW_NV_register_combiners GLEW_GET_VAR(__GLEW_NV_register_combiners)
-
-#endif /* GL_NV_register_combiners */
-
-/* ----------------------- GL_NV_register_combiners2 ----------------------- */
-
-#ifndef GL_NV_register_combiners2
-#define GL_NV_register_combiners2 1
-
-#define GL_PER_STAGE_CONSTANTS_NV 0x8535
-
-typedef void (GLAPIENTRY * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat* params);
-
-#define glCombinerStageParameterfvNV GLEW_GET_FUN(__glewCombinerStageParameterfvNV)
-#define glGetCombinerStageParameterfvNV GLEW_GET_FUN(__glewGetCombinerStageParameterfvNV)
-
-#define GLEW_NV_register_combiners2 GLEW_GET_VAR(__GLEW_NV_register_combiners2)
-
-#endif /* GL_NV_register_combiners2 */
-
-/* -------------------------- GL_NV_texgen_emboss -------------------------- */
-
-#ifndef GL_NV_texgen_emboss
-#define GL_NV_texgen_emboss 1
-
-#define GL_EMBOSS_LIGHT_NV 0x855D
-#define GL_EMBOSS_CONSTANT_NV 0x855E
-#define GL_EMBOSS_MAP_NV 0x855F
-
-#define GLEW_NV_texgen_emboss GLEW_GET_VAR(__GLEW_NV_texgen_emboss)
-
-#endif /* GL_NV_texgen_emboss */
-
-/* ------------------------ GL_NV_texgen_reflection ------------------------ */
-
-#ifndef GL_NV_texgen_reflection
-#define GL_NV_texgen_reflection 1
-
-#define GL_NORMAL_MAP_NV 0x8511
-#define GL_REFLECTION_MAP_NV 0x8512
-
-#define GLEW_NV_texgen_reflection GLEW_GET_VAR(__GLEW_NV_texgen_reflection)
-
-#endif /* GL_NV_texgen_reflection */
-
-/* --------------------- GL_NV_texture_compression_vtc --------------------- */
-
-#ifndef GL_NV_texture_compression_vtc
-#define GL_NV_texture_compression_vtc 1
-
-#define GLEW_NV_texture_compression_vtc GLEW_GET_VAR(__GLEW_NV_texture_compression_vtc)
-
-#endif /* GL_NV_texture_compression_vtc */
-
-/* ----------------------- GL_NV_texture_env_combine4 ---------------------- */
-
-#ifndef GL_NV_texture_env_combine4
-#define GL_NV_texture_env_combine4 1
-
-#define GL_COMBINE4_NV 0x8503
-#define GL_SOURCE3_RGB_NV 0x8583
-#define GL_SOURCE3_ALPHA_NV 0x858B
-#define GL_OPERAND3_RGB_NV 0x8593
-#define GL_OPERAND3_ALPHA_NV 0x859B
-
-#define GLEW_NV_texture_env_combine4 GLEW_GET_VAR(__GLEW_NV_texture_env_combine4)
-
-#endif /* GL_NV_texture_env_combine4 */
-
-/* ---------------------- GL_NV_texture_expand_normal ---------------------- */
-
-#ifndef GL_NV_texture_expand_normal
-#define GL_NV_texture_expand_normal 1
-
-#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
-
-#define GLEW_NV_texture_expand_normal GLEW_GET_VAR(__GLEW_NV_texture_expand_normal)
-
-#endif /* GL_NV_texture_expand_normal */
-
-/* ------------------------ GL_NV_texture_rectangle ------------------------ */
-
-#ifndef GL_NV_texture_rectangle
-#define GL_NV_texture_rectangle 1
-
-#define GL_TEXTURE_RECTANGLE_NV 0x84F5
-#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
-#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
-#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
-
-#define GLEW_NV_texture_rectangle GLEW_GET_VAR(__GLEW_NV_texture_rectangle)
-
-#endif /* GL_NV_texture_rectangle */
-
-/* -------------------------- GL_NV_texture_shader ------------------------- */
-
-#ifndef GL_NV_texture_shader
-#define GL_NV_texture_shader 1
-
-#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
-#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
-#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
-#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
-#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
-#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
-#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
-#define GL_SHADER_CONSISTENT_NV 0x86DD
-#define GL_TEXTURE_SHADER_NV 0x86DE
-#define GL_SHADER_OPERATION_NV 0x86DF
-#define GL_CULL_MODES_NV 0x86E0
-#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
-#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
-#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
-#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
-#define GL_CONST_EYE_NV 0x86E5
-#define GL_PASS_THROUGH_NV 0x86E6
-#define GL_CULL_FRAGMENT_NV 0x86E7
-#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
-#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
-#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
-#define GL_DOT_PRODUCT_NV 0x86EC
-#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
-#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
-#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
-#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
-#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
-#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
-#define GL_HILO_NV 0x86F4
-#define GL_DSDT_NV 0x86F5
-#define GL_DSDT_MAG_NV 0x86F6
-#define GL_DSDT_MAG_VIB_NV 0x86F7
-#define GL_HILO16_NV 0x86F8
-#define GL_SIGNED_HILO_NV 0x86F9
-#define GL_SIGNED_HILO16_NV 0x86FA
-#define GL_SIGNED_RGBA_NV 0x86FB
-#define GL_SIGNED_RGBA8_NV 0x86FC
-#define GL_SIGNED_RGB_NV 0x86FE
-#define GL_SIGNED_RGB8_NV 0x86FF
-#define GL_SIGNED_LUMINANCE_NV 0x8701
-#define GL_SIGNED_LUMINANCE8_NV 0x8702
-#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
-#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
-#define GL_SIGNED_ALPHA_NV 0x8705
-#define GL_SIGNED_ALPHA8_NV 0x8706
-#define GL_SIGNED_INTENSITY_NV 0x8707
-#define GL_SIGNED_INTENSITY8_NV 0x8708
-#define GL_DSDT8_NV 0x8709
-#define GL_DSDT8_MAG8_NV 0x870A
-#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
-#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
-#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
-#define GL_HI_SCALE_NV 0x870E
-#define GL_LO_SCALE_NV 0x870F
-#define GL_DS_SCALE_NV 0x8710
-#define GL_DT_SCALE_NV 0x8711
-#define GL_MAGNITUDE_SCALE_NV 0x8712
-#define GL_VIBRANCE_SCALE_NV 0x8713
-#define GL_HI_BIAS_NV 0x8714
-#define GL_LO_BIAS_NV 0x8715
-#define GL_DS_BIAS_NV 0x8716
-#define GL_DT_BIAS_NV 0x8717
-#define GL_MAGNITUDE_BIAS_NV 0x8718
-#define GL_VIBRANCE_BIAS_NV 0x8719
-#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
-#define GL_TEXTURE_HI_SIZE_NV 0x871B
-#define GL_TEXTURE_LO_SIZE_NV 0x871C
-#define GL_TEXTURE_DS_SIZE_NV 0x871D
-#define GL_TEXTURE_DT_SIZE_NV 0x871E
-#define GL_TEXTURE_MAG_SIZE_NV 0x871F
-
-#define GLEW_NV_texture_shader GLEW_GET_VAR(__GLEW_NV_texture_shader)
-
-#endif /* GL_NV_texture_shader */
-
-/* ------------------------- GL_NV_texture_shader2 ------------------------- */
-
-#ifndef GL_NV_texture_shader2
-#define GL_NV_texture_shader2 1
-
-#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
-#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
-#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
-#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
-#define GL_HILO_NV 0x86F4
-#define GL_DSDT_NV 0x86F5
-#define GL_DSDT_MAG_NV 0x86F6
-#define GL_DSDT_MAG_VIB_NV 0x86F7
-#define GL_HILO16_NV 0x86F8
-#define GL_SIGNED_HILO_NV 0x86F9
-#define GL_SIGNED_HILO16_NV 0x86FA
-#define GL_SIGNED_RGBA_NV 0x86FB
-#define GL_SIGNED_RGBA8_NV 0x86FC
-#define GL_SIGNED_RGB_NV 0x86FE
-#define GL_SIGNED_RGB8_NV 0x86FF
-#define GL_SIGNED_LUMINANCE_NV 0x8701
-#define GL_SIGNED_LUMINANCE8_NV 0x8702
-#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
-#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
-#define GL_SIGNED_ALPHA_NV 0x8705
-#define GL_SIGNED_ALPHA8_NV 0x8706
-#define GL_SIGNED_INTENSITY_NV 0x8707
-#define GL_SIGNED_INTENSITY8_NV 0x8708
-#define GL_DSDT8_NV 0x8709
-#define GL_DSDT8_MAG8_NV 0x870A
-#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
-#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
-#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
-
-#define GLEW_NV_texture_shader2 GLEW_GET_VAR(__GLEW_NV_texture_shader2)
-
-#endif /* GL_NV_texture_shader2 */
-
-/* ------------------------- GL_NV_texture_shader3 ------------------------- */
-
-#ifndef GL_NV_texture_shader3
-#define GL_NV_texture_shader3 1
-
-#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
-#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
-#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
-#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
-#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
-#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
-#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
-#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
-#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
-#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
-#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
-#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
-#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
-#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
-#define GL_HILO8_NV 0x885E
-#define GL_SIGNED_HILO8_NV 0x885F
-#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
-
-#define GLEW_NV_texture_shader3 GLEW_GET_VAR(__GLEW_NV_texture_shader3)
-
-#endif /* GL_NV_texture_shader3 */
-
-/* ------------------------ GL_NV_transform_feedback ----------------------- */
-
-#ifndef GL_NV_transform_feedback
-#define GL_NV_transform_feedback 1
-
-#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
-#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
-#define GL_TEXTURE_COORD_NV 0x8C79
-#define GL_CLIP_DISTANCE_NV 0x8C7A
-#define GL_VERTEX_ID_NV 0x8C7B
-#define GL_PRIMITIVE_ID_NV 0x8C7C
-#define GL_GENERIC_ATTRIB_NV 0x8C7D
-#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
-#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
-#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
-#define GL_ACTIVE_VARYINGS_NV 0x8C81
-#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
-#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
-#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
-#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
-#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
-#define GL_PRIMITIVES_GENERATED_NV 0x8C87
-#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
-#define GL_RASTERIZER_DISCARD_NV 0x8C89
-#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
-#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
-#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
-#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
-#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
-#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
-
-typedef void (GLAPIENTRY * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
-typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
-typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
-typedef void (GLAPIENTRY * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
-typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
-typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
-typedef void (GLAPIENTRY * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
-typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
-typedef GLint (GLAPIENTRY * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
-typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
-typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
-
-#define glActiveVaryingNV GLEW_GET_FUN(__glewActiveVaryingNV)
-#define glBeginTransformFeedbackNV GLEW_GET_FUN(__glewBeginTransformFeedbackNV)
-#define glBindBufferBaseNV GLEW_GET_FUN(__glewBindBufferBaseNV)
-#define glBindBufferOffsetNV GLEW_GET_FUN(__glewBindBufferOffsetNV)
-#define glBindBufferRangeNV GLEW_GET_FUN(__glewBindBufferRangeNV)
-#define glEndTransformFeedbackNV GLEW_GET_FUN(__glewEndTransformFeedbackNV)
-#define glGetActiveVaryingNV GLEW_GET_FUN(__glewGetActiveVaryingNV)
-#define glGetTransformFeedbackVaryingNV GLEW_GET_FUN(__glewGetTransformFeedbackVaryingNV)
-#define glGetVaryingLocationNV GLEW_GET_FUN(__glewGetVaryingLocationNV)
-#define glTransformFeedbackAttribsNV GLEW_GET_FUN(__glewTransformFeedbackAttribsNV)
-#define glTransformFeedbackVaryingsNV GLEW_GET_FUN(__glewTransformFeedbackVaryingsNV)
-
-#define GLEW_NV_transform_feedback GLEW_GET_VAR(__GLEW_NV_transform_feedback)
-
-#endif /* GL_NV_transform_feedback */
-
-/* ------------------------ GL_NV_vertex_array_range ----------------------- */
-
-#ifndef GL_NV_vertex_array_range
-#define GL_NV_vertex_array_range 1
-
-#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
-#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
-#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
-#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
-#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
-
-typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
-typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, void* pointer);
-
-#define glFlushVertexArrayRangeNV GLEW_GET_FUN(__glewFlushVertexArrayRangeNV)
-#define glVertexArrayRangeNV GLEW_GET_FUN(__glewVertexArrayRangeNV)
-
-#define GLEW_NV_vertex_array_range GLEW_GET_VAR(__GLEW_NV_vertex_array_range)
-
-#endif /* GL_NV_vertex_array_range */
-
-/* ----------------------- GL_NV_vertex_array_range2 ----------------------- */
-
-#ifndef GL_NV_vertex_array_range2
-#define GL_NV_vertex_array_range2 1
-
-#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
-
-#define GLEW_NV_vertex_array_range2 GLEW_GET_VAR(__GLEW_NV_vertex_array_range2)
-
-#endif /* GL_NV_vertex_array_range2 */
-
-/* -------------------------- GL_NV_vertex_program ------------------------- */
-
-#ifndef GL_NV_vertex_program
-#define GL_NV_vertex_program 1
-
-#define GL_VERTEX_PROGRAM_NV 0x8620
-#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
-#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
-#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
-#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
-#define GL_CURRENT_ATTRIB_NV 0x8626
-#define GL_PROGRAM_LENGTH_NV 0x8627
-#define GL_PROGRAM_STRING_NV 0x8628
-#define GL_MODELVIEW_PROJECTION_NV 0x8629
-#define GL_IDENTITY_NV 0x862A
-#define GL_INVERSE_NV 0x862B
-#define GL_TRANSPOSE_NV 0x862C
-#define GL_INVERSE_TRANSPOSE_NV 0x862D
-#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
-#define GL_MAX_TRACK_MATRICES_NV 0x862F
-#define GL_MATRIX0_NV 0x8630
-#define GL_MATRIX1_NV 0x8631
-#define GL_MATRIX2_NV 0x8632
-#define GL_MATRIX3_NV 0x8633
-#define GL_MATRIX4_NV 0x8634
-#define GL_MATRIX5_NV 0x8635
-#define GL_MATRIX6_NV 0x8636
-#define GL_MATRIX7_NV 0x8637
-#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
-#define GL_CURRENT_MATRIX_NV 0x8641
-#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
-#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
-#define GL_PROGRAM_PARAMETER_NV 0x8644
-#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
-#define GL_PROGRAM_TARGET_NV 0x8646
-#define GL_PROGRAM_RESIDENT_NV 0x8647
-#define GL_TRACK_MATRIX_NV 0x8648
-#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
-#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
-#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
-#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
-#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
-#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
-#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
-#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
-#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
-#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
-#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
-#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
-#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
-#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
-#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
-#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
-#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
-#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
-#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
-#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
-#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
-#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
-#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
-#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
-#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
-#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
-#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
-#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
-#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
-#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
-#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
-#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
-#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
-#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
-#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
-#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
-#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
-#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
-#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
-#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
-#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
-#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
-#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
-#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
-#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
-#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
-#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
-#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
-#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
-#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
-#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
-
-typedef GLboolean (GLAPIENTRY * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint* ids, GLboolean *residences);
-typedef void (GLAPIENTRY * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
-typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte* program);
-typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid** pointer);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint* params);
-typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMNVPROC) (GLuint id);
-typedef void (GLAPIENTRY * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte* program);
-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint num, const GLdouble* params);
-typedef void (GLAPIENTRY * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint num, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, GLuint* ids);
-typedef void (GLAPIENTRY * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei n, const GLdouble* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei n, const GLfloat* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei n, const GLshort* v);
-typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei n, const GLubyte* v);
-
-#define glAreProgramsResidentNV GLEW_GET_FUN(__glewAreProgramsResidentNV)
-#define glBindProgramNV GLEW_GET_FUN(__glewBindProgramNV)
-#define glDeleteProgramsNV GLEW_GET_FUN(__glewDeleteProgramsNV)
-#define glExecuteProgramNV GLEW_GET_FUN(__glewExecuteProgramNV)
-#define glGenProgramsNV GLEW_GET_FUN(__glewGenProgramsNV)
-#define glGetProgramParameterdvNV GLEW_GET_FUN(__glewGetProgramParameterdvNV)
-#define glGetProgramParameterfvNV GLEW_GET_FUN(__glewGetProgramParameterfvNV)
-#define glGetProgramStringNV GLEW_GET_FUN(__glewGetProgramStringNV)
-#define glGetProgramivNV GLEW_GET_FUN(__glewGetProgramivNV)
-#define glGetTrackMatrixivNV GLEW_GET_FUN(__glewGetTrackMatrixivNV)
-#define glGetVertexAttribPointervNV GLEW_GET_FUN(__glewGetVertexAttribPointervNV)
-#define glGetVertexAttribdvNV GLEW_GET_FUN(__glewGetVertexAttribdvNV)
-#define glGetVertexAttribfvNV GLEW_GET_FUN(__glewGetVertexAttribfvNV)
-#define glGetVertexAttribivNV GLEW_GET_FUN(__glewGetVertexAttribivNV)
-#define glIsProgramNV GLEW_GET_FUN(__glewIsProgramNV)
-#define glLoadProgramNV GLEW_GET_FUN(__glewLoadProgramNV)
-#define glProgramParameter4dNV GLEW_GET_FUN(__glewProgramParameter4dNV)
-#define glProgramParameter4dvNV GLEW_GET_FUN(__glewProgramParameter4dvNV)
-#define glProgramParameter4fNV GLEW_GET_FUN(__glewProgramParameter4fNV)
-#define glProgramParameter4fvNV GLEW_GET_FUN(__glewProgramParameter4fvNV)
-#define glProgramParameters4dvNV GLEW_GET_FUN(__glewProgramParameters4dvNV)
-#define glProgramParameters4fvNV GLEW_GET_FUN(__glewProgramParameters4fvNV)
-#define glRequestResidentProgramsNV GLEW_GET_FUN(__glewRequestResidentProgramsNV)
-#define glTrackMatrixNV GLEW_GET_FUN(__glewTrackMatrixNV)
-#define glVertexAttrib1dNV GLEW_GET_FUN(__glewVertexAttrib1dNV)
-#define glVertexAttrib1dvNV GLEW_GET_FUN(__glewVertexAttrib1dvNV)
-#define glVertexAttrib1fNV GLEW_GET_FUN(__glewVertexAttrib1fNV)
-#define glVertexAttrib1fvNV GLEW_GET_FUN(__glewVertexAttrib1fvNV)
-#define glVertexAttrib1sNV GLEW_GET_FUN(__glewVertexAttrib1sNV)
-#define glVertexAttrib1svNV GLEW_GET_FUN(__glewVertexAttrib1svNV)
-#define glVertexAttrib2dNV GLEW_GET_FUN(__glewVertexAttrib2dNV)
-#define glVertexAttrib2dvNV GLEW_GET_FUN(__glewVertexAttrib2dvNV)
-#define glVertexAttrib2fNV GLEW_GET_FUN(__glewVertexAttrib2fNV)
-#define glVertexAttrib2fvNV GLEW_GET_FUN(__glewVertexAttrib2fvNV)
-#define glVertexAttrib2sNV GLEW_GET_FUN(__glewVertexAttrib2sNV)
-#define glVertexAttrib2svNV GLEW_GET_FUN(__glewVertexAttrib2svNV)
-#define glVertexAttrib3dNV GLEW_GET_FUN(__glewVertexAttrib3dNV)
-#define glVertexAttrib3dvNV GLEW_GET_FUN(__glewVertexAttrib3dvNV)
-#define glVertexAttrib3fNV GLEW_GET_FUN(__glewVertexAttrib3fNV)
-#define glVertexAttrib3fvNV GLEW_GET_FUN(__glewVertexAttrib3fvNV)
-#define glVertexAttrib3sNV GLEW_GET_FUN(__glewVertexAttrib3sNV)
-#define glVertexAttrib3svNV GLEW_GET_FUN(__glewVertexAttrib3svNV)
-#define glVertexAttrib4dNV GLEW_GET_FUN(__glewVertexAttrib4dNV)
-#define glVertexAttrib4dvNV GLEW_GET_FUN(__glewVertexAttrib4dvNV)
-#define glVertexAttrib4fNV GLEW_GET_FUN(__glewVertexAttrib4fNV)
-#define glVertexAttrib4fvNV GLEW_GET_FUN(__glewVertexAttrib4fvNV)
-#define glVertexAttrib4sNV GLEW_GET_FUN(__glewVertexAttrib4sNV)
-#define glVertexAttrib4svNV GLEW_GET_FUN(__glewVertexAttrib4svNV)
-#define glVertexAttrib4ubNV GLEW_GET_FUN(__glewVertexAttrib4ubNV)
-#define glVertexAttrib4ubvNV GLEW_GET_FUN(__glewVertexAttrib4ubvNV)
-#define glVertexAttribPointerNV GLEW_GET_FUN(__glewVertexAttribPointerNV)
-#define glVertexAttribs1dvNV GLEW_GET_FUN(__glewVertexAttribs1dvNV)
-#define glVertexAttribs1fvNV GLEW_GET_FUN(__glewVertexAttribs1fvNV)
-#define glVertexAttribs1svNV GLEW_GET_FUN(__glewVertexAttribs1svNV)
-#define glVertexAttribs2dvNV GLEW_GET_FUN(__glewVertexAttribs2dvNV)
-#define glVertexAttribs2fvNV GLEW_GET_FUN(__glewVertexAttribs2fvNV)
-#define glVertexAttribs2svNV GLEW_GET_FUN(__glewVertexAttribs2svNV)
-#define glVertexAttribs3dvNV GLEW_GET_FUN(__glewVertexAttribs3dvNV)
-#define glVertexAttribs3fvNV GLEW_GET_FUN(__glewVertexAttribs3fvNV)
-#define glVertexAttribs3svNV GLEW_GET_FUN(__glewVertexAttribs3svNV)
-#define glVertexAttribs4dvNV GLEW_GET_FUN(__glewVertexAttribs4dvNV)
-#define glVertexAttribs4fvNV GLEW_GET_FUN(__glewVertexAttribs4fvNV)
-#define glVertexAttribs4svNV GLEW_GET_FUN(__glewVertexAttribs4svNV)
-#define glVertexAttribs4ubvNV GLEW_GET_FUN(__glewVertexAttribs4ubvNV)
-
-#define GLEW_NV_vertex_program GLEW_GET_VAR(__GLEW_NV_vertex_program)
-
-#endif /* GL_NV_vertex_program */
-
-/* ------------------------ GL_NV_vertex_program1_1 ------------------------ */
-
-#ifndef GL_NV_vertex_program1_1
-#define GL_NV_vertex_program1_1 1
-
-#define GLEW_NV_vertex_program1_1 GLEW_GET_VAR(__GLEW_NV_vertex_program1_1)
-
-#endif /* GL_NV_vertex_program1_1 */
-
-/* ------------------------- GL_NV_vertex_program2 ------------------------- */
-
-#ifndef GL_NV_vertex_program2
-#define GL_NV_vertex_program2 1
-
-#define GLEW_NV_vertex_program2 GLEW_GET_VAR(__GLEW_NV_vertex_program2)
-
-#endif /* GL_NV_vertex_program2 */
-
-/* ---------------------- GL_NV_vertex_program2_option --------------------- */
-
-#ifndef GL_NV_vertex_program2_option
-#define GL_NV_vertex_program2_option 1
-
-#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
-#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
-
-#define GLEW_NV_vertex_program2_option GLEW_GET_VAR(__GLEW_NV_vertex_program2_option)
-
-#endif /* GL_NV_vertex_program2_option */
-
-/* ------------------------- GL_NV_vertex_program3 ------------------------- */
-
-#ifndef GL_NV_vertex_program3
-#define GL_NV_vertex_program3 1
-
-#define MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
-
-#define GLEW_NV_vertex_program3 GLEW_GET_VAR(__GLEW_NV_vertex_program3)
-
-#endif /* GL_NV_vertex_program3 */
-
-/* ------------------------- GL_NV_vertex_program4 ------------------------- */
-
-#ifndef GL_NV_vertex_program4
-#define GL_NV_vertex_program4 1
-
-#define GLEW_NV_vertex_program4 GLEW_GET_VAR(__GLEW_NV_vertex_program4)
-
-#endif /* GL_NV_vertex_program4 */
-
-/* ------------------------ GL_OES_byte_coordinates ------------------------ */
-
-#ifndef GL_OES_byte_coordinates
-#define GL_OES_byte_coordinates 1
-
-#define GL_BYTE 0x1400
-
-#define GLEW_OES_byte_coordinates GLEW_GET_VAR(__GLEW_OES_byte_coordinates)
-
-#endif /* GL_OES_byte_coordinates */
-
-/* ------------------- GL_OES_compressed_paletted_texture ------------------ */
-
-#ifndef GL_OES_compressed_paletted_texture
-#define GL_OES_compressed_paletted_texture 1
-
-#define GL_PALETTE4_RGB8_OES 0x8B90
-#define GL_PALETTE4_RGBA8_OES 0x8B91
-#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
-#define GL_PALETTE4_RGBA4_OES 0x8B93
-#define GL_PALETTE4_RGB5_A1_OES 0x8B94
-#define GL_PALETTE8_RGB8_OES 0x8B95
-#define GL_PALETTE8_RGBA8_OES 0x8B96
-#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
-#define GL_PALETTE8_RGBA4_OES 0x8B98
-#define GL_PALETTE8_RGB5_A1_OES 0x8B99
-
-#define GLEW_OES_compressed_paletted_texture GLEW_GET_VAR(__GLEW_OES_compressed_paletted_texture)
-
-#endif /* GL_OES_compressed_paletted_texture */
-
-/* --------------------------- GL_OES_read_format -------------------------- */
-
-#ifndef GL_OES_read_format
-#define GL_OES_read_format 1
-
-#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
-#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
-
-#define GLEW_OES_read_format GLEW_GET_VAR(__GLEW_OES_read_format)
-
-#endif /* GL_OES_read_format */
-
-/* ------------------------ GL_OES_single_precision ------------------------ */
-
-#ifndef GL_OES_single_precision
-#define GL_OES_single_precision 1
-
-typedef void (GLAPIENTRY * PFNGLCLEARDEPTHFOESPROC) (GLclampd depth);
-typedef void (GLAPIENTRY * PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat* equation);
-typedef void (GLAPIENTRY * PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);
-typedef void (GLAPIENTRY * PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
-typedef void (GLAPIENTRY * PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat* equation);
-typedef void (GLAPIENTRY * PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
-
-#define glClearDepthfOES GLEW_GET_FUN(__glewClearDepthfOES)
-#define glClipPlanefOES GLEW_GET_FUN(__glewClipPlanefOES)
-#define glDepthRangefOES GLEW_GET_FUN(__glewDepthRangefOES)
-#define glFrustumfOES GLEW_GET_FUN(__glewFrustumfOES)
-#define glGetClipPlanefOES GLEW_GET_FUN(__glewGetClipPlanefOES)
-#define glOrthofOES GLEW_GET_FUN(__glewOrthofOES)
-
-#define GLEW_OES_single_precision GLEW_GET_VAR(__GLEW_OES_single_precision)
-
-#endif /* GL_OES_single_precision */
-
-/* ---------------------------- GL_OML_interlace --------------------------- */
-
-#ifndef GL_OML_interlace
-#define GL_OML_interlace 1
-
-#define GL_INTERLACE_OML 0x8980
-#define GL_INTERLACE_READ_OML 0x8981
-
-#define GLEW_OML_interlace GLEW_GET_VAR(__GLEW_OML_interlace)
-
-#endif /* GL_OML_interlace */
-
-/* ---------------------------- GL_OML_resample ---------------------------- */
-
-#ifndef GL_OML_resample
-#define GL_OML_resample 1
-
-#define GL_PACK_RESAMPLE_OML 0x8984
-#define GL_UNPACK_RESAMPLE_OML 0x8985
-#define GL_RESAMPLE_REPLICATE_OML 0x8986
-#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
-#define GL_RESAMPLE_AVERAGE_OML 0x8988
-#define GL_RESAMPLE_DECIMATE_OML 0x8989
-
-#define GLEW_OML_resample GLEW_GET_VAR(__GLEW_OML_resample)
-
-#endif /* GL_OML_resample */
-
-/* ---------------------------- GL_OML_subsample --------------------------- */
-
-#ifndef GL_OML_subsample
-#define GL_OML_subsample 1
-
-#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
-#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
-
-#define GLEW_OML_subsample GLEW_GET_VAR(__GLEW_OML_subsample)
-
-#endif /* GL_OML_subsample */
-
-/* --------------------------- GL_PGI_misc_hints --------------------------- */
-
-#ifndef GL_PGI_misc_hints
-#define GL_PGI_misc_hints 1
-
-#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 107000
-#define GL_CONSERVE_MEMORY_HINT_PGI 107005
-#define GL_RECLAIM_MEMORY_HINT_PGI 107006
-#define GL_NATIVE_GRAPHICS_HANDLE_PGI 107010
-#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 107011
-#define GL_NATIVE_GRAPHICS_END_HINT_PGI 107012
-#define GL_ALWAYS_FAST_HINT_PGI 107020
-#define GL_ALWAYS_SOFT_HINT_PGI 107021
-#define GL_ALLOW_DRAW_OBJ_HINT_PGI 107022
-#define GL_ALLOW_DRAW_WIN_HINT_PGI 107023
-#define GL_ALLOW_DRAW_FRG_HINT_PGI 107024
-#define GL_ALLOW_DRAW_MEM_HINT_PGI 107025
-#define GL_STRICT_DEPTHFUNC_HINT_PGI 107030
-#define GL_STRICT_LIGHTING_HINT_PGI 107031
-#define GL_STRICT_SCISSOR_HINT_PGI 107032
-#define GL_FULL_STIPPLE_HINT_PGI 107033
-#define GL_CLIP_NEAR_HINT_PGI 107040
-#define GL_CLIP_FAR_HINT_PGI 107041
-#define GL_WIDE_LINE_HINT_PGI 107042
-#define GL_BACK_NORMALS_HINT_PGI 107043
-
-#define GLEW_PGI_misc_hints GLEW_GET_VAR(__GLEW_PGI_misc_hints)
-
-#endif /* GL_PGI_misc_hints */
-
-/* -------------------------- GL_PGI_vertex_hints -------------------------- */
-
-#ifndef GL_PGI_vertex_hints
-#define GL_PGI_vertex_hints 1
-
-#define GL_VERTEX23_BIT_PGI 0x00000004
-#define GL_VERTEX4_BIT_PGI 0x00000008
-#define GL_COLOR3_BIT_PGI 0x00010000
-#define GL_COLOR4_BIT_PGI 0x00020000
-#define GL_EDGEFLAG_BIT_PGI 0x00040000
-#define GL_INDEX_BIT_PGI 0x00080000
-#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
-#define GL_VERTEX_DATA_HINT_PGI 107050
-#define GL_VERTEX_CONSISTENT_HINT_PGI 107051
-#define GL_MATERIAL_SIDE_HINT_PGI 107052
-#define GL_MAX_VERTEX_HINT_PGI 107053
-#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
-#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
-#define GL_MAT_EMISSION_BIT_PGI 0x00800000
-#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
-#define GL_MAT_SHININESS_BIT_PGI 0x02000000
-#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
-#define GL_NORMAL_BIT_PGI 0x08000000
-#define GL_TEXCOORD1_BIT_PGI 0x10000000
-#define GL_TEXCOORD2_BIT_PGI 0x20000000
-#define GL_TEXCOORD3_BIT_PGI 0x40000000
-#define GL_TEXCOORD4_BIT_PGI 0x80000000
-
-#define GLEW_PGI_vertex_hints GLEW_GET_VAR(__GLEW_PGI_vertex_hints)
-
-#endif /* GL_PGI_vertex_hints */
-
-/* ----------------------- GL_REND_screen_coordinates ---------------------- */
-
-#ifndef GL_REND_screen_coordinates
-#define GL_REND_screen_coordinates 1
-
-#define GL_SCREEN_COORDINATES_REND 0x8490
-#define GL_INVERTED_SCREEN_W_REND 0x8491
-
-#define GLEW_REND_screen_coordinates GLEW_GET_VAR(__GLEW_REND_screen_coordinates)
-
-#endif /* GL_REND_screen_coordinates */
-
-/* ------------------------------- GL_S3_s3tc ------------------------------ */
-
-#ifndef GL_S3_s3tc
-#define GL_S3_s3tc 1
-
-#define GL_RGB_S3TC 0x83A0
-#define GL_RGB4_S3TC 0x83A1
-#define GL_RGBA_S3TC 0x83A2
-#define GL_RGBA4_S3TC 0x83A3
-#define GL_RGBA_DXT5_S3TC 0x83A4
-#define GL_RGBA4_DXT5_S3TC 0x83A5
-
-#define GLEW_S3_s3tc GLEW_GET_VAR(__GLEW_S3_s3tc)
-
-#endif /* GL_S3_s3tc */
-
-/* -------------------------- GL_SGIS_color_range -------------------------- */
-
-#ifndef GL_SGIS_color_range
-#define GL_SGIS_color_range 1
-
-#define GL_EXTENDED_RANGE_SGIS 0x85A5
-#define GL_MIN_RED_SGIS 0x85A6
-#define GL_MAX_RED_SGIS 0x85A7
-#define GL_MIN_GREEN_SGIS 0x85A8
-#define GL_MAX_GREEN_SGIS 0x85A9
-#define GL_MIN_BLUE_SGIS 0x85AA
-#define GL_MAX_BLUE_SGIS 0x85AB
-#define GL_MIN_ALPHA_SGIS 0x85AC
-#define GL_MAX_ALPHA_SGIS 0x85AD
-
-#define GLEW_SGIS_color_range GLEW_GET_VAR(__GLEW_SGIS_color_range)
-
-#endif /* GL_SGIS_color_range */
-
-/* ------------------------- GL_SGIS_detail_texture ------------------------ */
-
-#ifndef GL_SGIS_detail_texture
-#define GL_SGIS_detail_texture 1
-
-typedef void (GLAPIENTRY * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
-typedef void (GLAPIENTRY * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
-
-#define glDetailTexFuncSGIS GLEW_GET_FUN(__glewDetailTexFuncSGIS)
-#define glGetDetailTexFuncSGIS GLEW_GET_FUN(__glewGetDetailTexFuncSGIS)
-
-#define GLEW_SGIS_detail_texture GLEW_GET_VAR(__GLEW_SGIS_detail_texture)
-
-#endif /* GL_SGIS_detail_texture */
-
-/* -------------------------- GL_SGIS_fog_function ------------------------- */
-
-#ifndef GL_SGIS_fog_function
-#define GL_SGIS_fog_function 1
-
-typedef void (GLAPIENTRY * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat* points);
-typedef void (GLAPIENTRY * PFNGLGETFOGFUNCSGISPROC) (GLfloat* points);
-
-#define glFogFuncSGIS GLEW_GET_FUN(__glewFogFuncSGIS)
-#define glGetFogFuncSGIS GLEW_GET_FUN(__glewGetFogFuncSGIS)
-
-#define GLEW_SGIS_fog_function GLEW_GET_VAR(__GLEW_SGIS_fog_function)
-
-#endif /* GL_SGIS_fog_function */
-
-/* ------------------------ GL_SGIS_generate_mipmap ------------------------ */
-
-#ifndef GL_SGIS_generate_mipmap
-#define GL_SGIS_generate_mipmap 1
-
-#define GL_GENERATE_MIPMAP_SGIS 0x8191
-#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
-
-#define GLEW_SGIS_generate_mipmap GLEW_GET_VAR(__GLEW_SGIS_generate_mipmap)
-
-#endif /* GL_SGIS_generate_mipmap */
-
-/* -------------------------- GL_SGIS_multisample -------------------------- */
-
-#ifndef GL_SGIS_multisample
-#define GL_SGIS_multisample 1
-
-#define GL_MULTISAMPLE_SGIS 0x809D
-#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
-#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
-#define GL_SAMPLE_MASK_SGIS 0x80A0
-#define GL_1PASS_SGIS 0x80A1
-#define GL_2PASS_0_SGIS 0x80A2
-#define GL_2PASS_1_SGIS 0x80A3
-#define GL_4PASS_0_SGIS 0x80A4
-#define GL_4PASS_1_SGIS 0x80A5
-#define GL_4PASS_2_SGIS 0x80A6
-#define GL_4PASS_3_SGIS 0x80A7
-#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
-#define GL_SAMPLES_SGIS 0x80A9
-#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
-#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
-#define GL_SAMPLE_PATTERN_SGIS 0x80AC
-#define GL_MULTISAMPLE_BIT_EXT 0x20000000
-
-typedef void (GLAPIENTRY * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
-typedef void (GLAPIENTRY * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
-
-#define glSampleMaskSGIS GLEW_GET_FUN(__glewSampleMaskSGIS)
-#define glSamplePatternSGIS GLEW_GET_FUN(__glewSamplePatternSGIS)
-
-#define GLEW_SGIS_multisample GLEW_GET_VAR(__GLEW_SGIS_multisample)
-
-#endif /* GL_SGIS_multisample */
-
-/* ------------------------- GL_SGIS_pixel_texture ------------------------- */
-
-#ifndef GL_SGIS_pixel_texture
-#define GL_SGIS_pixel_texture 1
-
-#define GLEW_SGIS_pixel_texture GLEW_GET_VAR(__GLEW_SGIS_pixel_texture)
-
-#endif /* GL_SGIS_pixel_texture */
-
-/* ------------------------ GL_SGIS_sharpen_texture ------------------------ */
-
-#ifndef GL_SGIS_sharpen_texture
-#define GL_SGIS_sharpen_texture 1
-
-typedef void (GLAPIENTRY * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat* points);
-typedef void (GLAPIENTRY * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat* points);
-
-#define glGetSharpenTexFuncSGIS GLEW_GET_FUN(__glewGetSharpenTexFuncSGIS)
-#define glSharpenTexFuncSGIS GLEW_GET_FUN(__glewSharpenTexFuncSGIS)
-
-#define GLEW_SGIS_sharpen_texture GLEW_GET_VAR(__GLEW_SGIS_sharpen_texture)
-
-#endif /* GL_SGIS_sharpen_texture */
-
-/* --------------------------- GL_SGIS_texture4D --------------------------- */
-
-#ifndef GL_SGIS_texture4D
-#define GL_SGIS_texture4D 1
-
-typedef void (GLAPIENTRY * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLint border, GLenum format, GLenum type, const void* pixels);
-typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei extent, GLenum format, GLenum type, const void* pixels);
-
-#define glTexImage4DSGIS GLEW_GET_FUN(__glewTexImage4DSGIS)
-#define glTexSubImage4DSGIS GLEW_GET_FUN(__glewTexSubImage4DSGIS)
-
-#define GLEW_SGIS_texture4D GLEW_GET_VAR(__GLEW_SGIS_texture4D)
-
-#endif /* GL_SGIS_texture4D */
-
-/* ---------------------- GL_SGIS_texture_border_clamp --------------------- */
-
-#ifndef GL_SGIS_texture_border_clamp
-#define GL_SGIS_texture_border_clamp 1
-
-#define GL_CLAMP_TO_BORDER_SGIS 0x812D
-
-#define GLEW_SGIS_texture_border_clamp GLEW_GET_VAR(__GLEW_SGIS_texture_border_clamp)
-
-#endif /* GL_SGIS_texture_border_clamp */
-
-/* ----------------------- GL_SGIS_texture_edge_clamp ---------------------- */
-
-#ifndef GL_SGIS_texture_edge_clamp
-#define GL_SGIS_texture_edge_clamp 1
-
-#define GL_CLAMP_TO_EDGE_SGIS 0x812F
-
-#define GLEW_SGIS_texture_edge_clamp GLEW_GET_VAR(__GLEW_SGIS_texture_edge_clamp)
-
-#endif /* GL_SGIS_texture_edge_clamp */
-
-/* ------------------------ GL_SGIS_texture_filter4 ------------------------ */
-
-#ifndef GL_SGIS_texture_filter4
-#define GL_SGIS_texture_filter4 1
-
-typedef void (GLAPIENTRY * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat* weights);
-typedef void (GLAPIENTRY * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
-
-#define glGetTexFilterFuncSGIS GLEW_GET_FUN(__glewGetTexFilterFuncSGIS)
-#define glTexFilterFuncSGIS GLEW_GET_FUN(__glewTexFilterFuncSGIS)
-
-#define GLEW_SGIS_texture_filter4 GLEW_GET_VAR(__GLEW_SGIS_texture_filter4)
-
-#endif /* GL_SGIS_texture_filter4 */
-
-/* -------------------------- GL_SGIS_texture_lod -------------------------- */
-
-#ifndef GL_SGIS_texture_lod
-#define GL_SGIS_texture_lod 1
-
-#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
-#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
-#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
-#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
-
-#define GLEW_SGIS_texture_lod GLEW_GET_VAR(__GLEW_SGIS_texture_lod)
-
-#endif /* GL_SGIS_texture_lod */
-
-/* ------------------------- GL_SGIS_texture_select ------------------------ */
-
-#ifndef GL_SGIS_texture_select
-#define GL_SGIS_texture_select 1
-
-#define GLEW_SGIS_texture_select GLEW_GET_VAR(__GLEW_SGIS_texture_select)
-
-#endif /* GL_SGIS_texture_select */
-
-/* ----------------------------- GL_SGIX_async ----------------------------- */
-
-#ifndef GL_SGIX_async
-#define GL_SGIX_async 1
-
-#define GL_ASYNC_MARKER_SGIX 0x8329
-
-typedef void (GLAPIENTRY * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
-typedef void (GLAPIENTRY * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
-typedef GLint (GLAPIENTRY * PFNGLFINISHASYNCSGIXPROC) (GLuint* markerp);
-typedef GLuint (GLAPIENTRY * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
-typedef GLboolean (GLAPIENTRY * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
-typedef GLint (GLAPIENTRY * PFNGLPOLLASYNCSGIXPROC) (GLuint* markerp);
-
-#define glAsyncMarkerSGIX GLEW_GET_FUN(__glewAsyncMarkerSGIX)
-#define glDeleteAsyncMarkersSGIX GLEW_GET_FUN(__glewDeleteAsyncMarkersSGIX)
-#define glFinishAsyncSGIX GLEW_GET_FUN(__glewFinishAsyncSGIX)
-#define glGenAsyncMarkersSGIX GLEW_GET_FUN(__glewGenAsyncMarkersSGIX)
-#define glIsAsyncMarkerSGIX GLEW_GET_FUN(__glewIsAsyncMarkerSGIX)
-#define glPollAsyncSGIX GLEW_GET_FUN(__glewPollAsyncSGIX)
-
-#define GLEW_SGIX_async GLEW_GET_VAR(__GLEW_SGIX_async)
-
-#endif /* GL_SGIX_async */
-
-/* ------------------------ GL_SGIX_async_histogram ------------------------ */
-
-#ifndef GL_SGIX_async_histogram
-#define GL_SGIX_async_histogram 1
-
-#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
-#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
-
-#define GLEW_SGIX_async_histogram GLEW_GET_VAR(__GLEW_SGIX_async_histogram)
-
-#endif /* GL_SGIX_async_histogram */
-
-/* -------------------------- GL_SGIX_async_pixel -------------------------- */
-
-#ifndef GL_SGIX_async_pixel
-#define GL_SGIX_async_pixel 1
-
-#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
-#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
-#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
-#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
-#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
-#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
-
-#define GLEW_SGIX_async_pixel GLEW_GET_VAR(__GLEW_SGIX_async_pixel)
-
-#endif /* GL_SGIX_async_pixel */
-
-/* ----------------------- GL_SGIX_blend_alpha_minmax ---------------------- */
-
-#ifndef GL_SGIX_blend_alpha_minmax
-#define GL_SGIX_blend_alpha_minmax 1
-
-#define GL_ALPHA_MIN_SGIX 0x8320
-#define GL_ALPHA_MAX_SGIX 0x8321
-
-#define GLEW_SGIX_blend_alpha_minmax GLEW_GET_VAR(__GLEW_SGIX_blend_alpha_minmax)
-
-#endif /* GL_SGIX_blend_alpha_minmax */
-
-/* ---------------------------- GL_SGIX_clipmap ---------------------------- */
-
-#ifndef GL_SGIX_clipmap
-#define GL_SGIX_clipmap 1
-
-#define GLEW_SGIX_clipmap GLEW_GET_VAR(__GLEW_SGIX_clipmap)
-
-#endif /* GL_SGIX_clipmap */
-
-/* ------------------------- GL_SGIX_depth_texture ------------------------- */
-
-#ifndef GL_SGIX_depth_texture
-#define GL_SGIX_depth_texture 1
-
-#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
-#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
-#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
-
-#define GLEW_SGIX_depth_texture GLEW_GET_VAR(__GLEW_SGIX_depth_texture)
-
-#endif /* GL_SGIX_depth_texture */
-
-/* -------------------------- GL_SGIX_flush_raster ------------------------- */
-
-#ifndef GL_SGIX_flush_raster
-#define GL_SGIX_flush_raster 1
-
-typedef void (GLAPIENTRY * PFNGLFLUSHRASTERSGIXPROC) (void);
-
-#define glFlushRasterSGIX GLEW_GET_FUN(__glewFlushRasterSGIX)
-
-#define GLEW_SGIX_flush_raster GLEW_GET_VAR(__GLEW_SGIX_flush_raster)
-
-#endif /* GL_SGIX_flush_raster */
-
-/* --------------------------- GL_SGIX_fog_offset -------------------------- */
-
-#ifndef GL_SGIX_fog_offset
-#define GL_SGIX_fog_offset 1
-
-#define GL_FOG_OFFSET_SGIX 0x8198
-#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
-
-#define GLEW_SGIX_fog_offset GLEW_GET_VAR(__GLEW_SGIX_fog_offset)
-
-#endif /* GL_SGIX_fog_offset */
-
-/* -------------------------- GL_SGIX_fog_texture -------------------------- */
-
-#ifndef GL_SGIX_fog_texture
-#define GL_SGIX_fog_texture 1
-
-#define GL_TEXTURE_FOG_SGIX 0
-#define GL_FOG_PATCHY_FACTOR_SGIX 0
-#define GL_FRAGMENT_FOG_SGIX 0
-
-typedef void (GLAPIENTRY * PFNGLTEXTUREFOGSGIXPROC) (GLenum pname);
-
-#define glTextureFogSGIX GLEW_GET_FUN(__glewTextureFogSGIX)
-
-#define GLEW_SGIX_fog_texture GLEW_GET_VAR(__GLEW_SGIX_fog_texture)
-
-#endif /* GL_SGIX_fog_texture */
-
-/* ------------------- GL_SGIX_fragment_specular_lighting ------------------ */
-
-#ifndef GL_SGIX_fragment_specular_lighting
-#define GL_SGIX_fragment_specular_lighting 1
-
-typedef void (GLAPIENTRY * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, const GLfloat param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, const GLint param);
-typedef void (GLAPIENTRY * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum value, GLfloat* data);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum value, GLint* data);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat* data);
-typedef void (GLAPIENTRY * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint* data);
-
-#define glFragmentColorMaterialSGIX GLEW_GET_FUN(__glewFragmentColorMaterialSGIX)
-#define glFragmentLightModelfSGIX GLEW_GET_FUN(__glewFragmentLightModelfSGIX)
-#define glFragmentLightModelfvSGIX GLEW_GET_FUN(__glewFragmentLightModelfvSGIX)
-#define glFragmentLightModeliSGIX GLEW_GET_FUN(__glewFragmentLightModeliSGIX)
-#define glFragmentLightModelivSGIX GLEW_GET_FUN(__glewFragmentLightModelivSGIX)
-#define glFragmentLightfSGIX GLEW_GET_FUN(__glewFragmentLightfSGIX)
-#define glFragmentLightfvSGIX GLEW_GET_FUN(__glewFragmentLightfvSGIX)
-#define glFragmentLightiSGIX GLEW_GET_FUN(__glewFragmentLightiSGIX)
-#define glFragmentLightivSGIX GLEW_GET_FUN(__glewFragmentLightivSGIX)
-#define glFragmentMaterialfSGIX GLEW_GET_FUN(__glewFragmentMaterialfSGIX)
-#define glFragmentMaterialfvSGIX GLEW_GET_FUN(__glewFragmentMaterialfvSGIX)
-#define glFragmentMaterialiSGIX GLEW_GET_FUN(__glewFragmentMaterialiSGIX)
-#define glFragmentMaterialivSGIX GLEW_GET_FUN(__glewFragmentMaterialivSGIX)
-#define glGetFragmentLightfvSGIX GLEW_GET_FUN(__glewGetFragmentLightfvSGIX)
-#define glGetFragmentLightivSGIX GLEW_GET_FUN(__glewGetFragmentLightivSGIX)
-#define glGetFragmentMaterialfvSGIX GLEW_GET_FUN(__glewGetFragmentMaterialfvSGIX)
-#define glGetFragmentMaterialivSGIX GLEW_GET_FUN(__glewGetFragmentMaterialivSGIX)
-
-#define GLEW_SGIX_fragment_specular_lighting GLEW_GET_VAR(__GLEW_SGIX_fragment_specular_lighting)
-
-#endif /* GL_SGIX_fragment_specular_lighting */
-
-/* --------------------------- GL_SGIX_framezoom --------------------------- */
-
-#ifndef GL_SGIX_framezoom
-#define GL_SGIX_framezoom 1
-
-typedef void (GLAPIENTRY * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
-
-#define glFrameZoomSGIX GLEW_GET_FUN(__glewFrameZoomSGIX)
-
-#define GLEW_SGIX_framezoom GLEW_GET_VAR(__GLEW_SGIX_framezoom)
-
-#endif /* GL_SGIX_framezoom */
-
-/* --------------------------- GL_SGIX_interlace --------------------------- */
-
-#ifndef GL_SGIX_interlace
-#define GL_SGIX_interlace 1
-
-#define GL_INTERLACE_SGIX 0x8094
-
-#define GLEW_SGIX_interlace GLEW_GET_VAR(__GLEW_SGIX_interlace)
-
-#endif /* GL_SGIX_interlace */
-
-/* ------------------------- GL_SGIX_ir_instrument1 ------------------------ */
-
-#ifndef GL_SGIX_ir_instrument1
-#define GL_SGIX_ir_instrument1 1
-
-#define GLEW_SGIX_ir_instrument1 GLEW_GET_VAR(__GLEW_SGIX_ir_instrument1)
-
-#endif /* GL_SGIX_ir_instrument1 */
-
-/* ------------------------- GL_SGIX_list_priority ------------------------- */
-
-#ifndef GL_SGIX_list_priority
-#define GL_SGIX_list_priority 1
-
-#define GLEW_SGIX_list_priority GLEW_GET_VAR(__GLEW_SGIX_list_priority)
-
-#endif /* GL_SGIX_list_priority */
-
-/* ------------------------- GL_SGIX_pixel_texture ------------------------- */
-
-#ifndef GL_SGIX_pixel_texture
-#define GL_SGIX_pixel_texture 1
-
-typedef void (GLAPIENTRY * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
-
-#define glPixelTexGenSGIX GLEW_GET_FUN(__glewPixelTexGenSGIX)
-
-#define GLEW_SGIX_pixel_texture GLEW_GET_VAR(__GLEW_SGIX_pixel_texture)
-
-#endif /* GL_SGIX_pixel_texture */
-
-/* ----------------------- GL_SGIX_pixel_texture_bits ---------------------- */
-
-#ifndef GL_SGIX_pixel_texture_bits
-#define GL_SGIX_pixel_texture_bits 1
-
-#define GLEW_SGIX_pixel_texture_bits GLEW_GET_VAR(__GLEW_SGIX_pixel_texture_bits)
-
-#endif /* GL_SGIX_pixel_texture_bits */
-
-/* ------------------------ GL_SGIX_reference_plane ------------------------ */
-
-#ifndef GL_SGIX_reference_plane
-#define GL_SGIX_reference_plane 1
-
-typedef void (GLAPIENTRY * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble* equation);
-
-#define glReferencePlaneSGIX GLEW_GET_FUN(__glewReferencePlaneSGIX)
-
-#define GLEW_SGIX_reference_plane GLEW_GET_VAR(__GLEW_SGIX_reference_plane)
-
-#endif /* GL_SGIX_reference_plane */
-
-/* ---------------------------- GL_SGIX_resample --------------------------- */
-
-#ifndef GL_SGIX_resample
-#define GL_SGIX_resample 1
-
-#define GL_PACK_RESAMPLE_SGIX 0x842E
-#define GL_UNPACK_RESAMPLE_SGIX 0x842F
-#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
-#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
-#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
-
-#define GLEW_SGIX_resample GLEW_GET_VAR(__GLEW_SGIX_resample)
-
-#endif /* GL_SGIX_resample */
-
-/* ----------------------------- GL_SGIX_shadow ---------------------------- */
-
-#ifndef GL_SGIX_shadow
-#define GL_SGIX_shadow 1
-
-#define GL_TEXTURE_COMPARE_SGIX 0x819A
-#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
-#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
-#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
-
-#define GLEW_SGIX_shadow GLEW_GET_VAR(__GLEW_SGIX_shadow)
-
-#endif /* GL_SGIX_shadow */
-
-/* ------------------------- GL_SGIX_shadow_ambient ------------------------ */
-
-#ifndef GL_SGIX_shadow_ambient
-#define GL_SGIX_shadow_ambient 1
-
-#define GL_SHADOW_AMBIENT_SGIX 0x80BF
-
-#define GLEW_SGIX_shadow_ambient GLEW_GET_VAR(__GLEW_SGIX_shadow_ambient)
-
-#endif /* GL_SGIX_shadow_ambient */
-
-/* ----------------------------- GL_SGIX_sprite ---------------------------- */
-
-#ifndef GL_SGIX_sprite
-#define GL_SGIX_sprite 1
-
-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
-typedef void (GLAPIENTRY * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, GLint* params);
-
-#define glSpriteParameterfSGIX GLEW_GET_FUN(__glewSpriteParameterfSGIX)
-#define glSpriteParameterfvSGIX GLEW_GET_FUN(__glewSpriteParameterfvSGIX)
-#define glSpriteParameteriSGIX GLEW_GET_FUN(__glewSpriteParameteriSGIX)
-#define glSpriteParameterivSGIX GLEW_GET_FUN(__glewSpriteParameterivSGIX)
-
-#define GLEW_SGIX_sprite GLEW_GET_VAR(__GLEW_SGIX_sprite)
-
-#endif /* GL_SGIX_sprite */
-
-/* ----------------------- GL_SGIX_tag_sample_buffer ----------------------- */
-
-#ifndef GL_SGIX_tag_sample_buffer
-#define GL_SGIX_tag_sample_buffer 1
-
-typedef void (GLAPIENTRY * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
-
-#define glTagSampleBufferSGIX GLEW_GET_FUN(__glewTagSampleBufferSGIX)
-
-#define GLEW_SGIX_tag_sample_buffer GLEW_GET_VAR(__GLEW_SGIX_tag_sample_buffer)
-
-#endif /* GL_SGIX_tag_sample_buffer */
-
-/* ------------------------ GL_SGIX_texture_add_env ------------------------ */
-
-#ifndef GL_SGIX_texture_add_env
-#define GL_SGIX_texture_add_env 1
-
-#define GLEW_SGIX_texture_add_env GLEW_GET_VAR(__GLEW_SGIX_texture_add_env)
-
-#endif /* GL_SGIX_texture_add_env */
-
-/* -------------------- GL_SGIX_texture_coordinate_clamp ------------------- */
-
-#ifndef GL_SGIX_texture_coordinate_clamp
-#define GL_SGIX_texture_coordinate_clamp 1
-
-#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
-#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
-#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
-
-#define GLEW_SGIX_texture_coordinate_clamp GLEW_GET_VAR(__GLEW_SGIX_texture_coordinate_clamp)
-
-#endif /* GL_SGIX_texture_coordinate_clamp */
-
-/* ------------------------ GL_SGIX_texture_lod_bias ----------------------- */
-
-#ifndef GL_SGIX_texture_lod_bias
-#define GL_SGIX_texture_lod_bias 1
-
-#define GLEW_SGIX_texture_lod_bias GLEW_GET_VAR(__GLEW_SGIX_texture_lod_bias)
-
-#endif /* GL_SGIX_texture_lod_bias */
-
-/* ---------------------- GL_SGIX_texture_multi_buffer --------------------- */
-
-#ifndef GL_SGIX_texture_multi_buffer
-#define GL_SGIX_texture_multi_buffer 1
-
-#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
-
-#define GLEW_SGIX_texture_multi_buffer GLEW_GET_VAR(__GLEW_SGIX_texture_multi_buffer)
-
-#endif /* GL_SGIX_texture_multi_buffer */
-
-/* ------------------------- GL_SGIX_texture_range ------------------------- */
-
-#ifndef GL_SGIX_texture_range
-#define GL_SGIX_texture_range 1
-
-#define GL_RGB_SIGNED_SGIX 0x85E0
-#define GL_RGBA_SIGNED_SGIX 0x85E1
-#define GL_ALPHA_SIGNED_SGIX 0x85E2
-#define GL_LUMINANCE_SIGNED_SGIX 0x85E3
-#define GL_INTENSITY_SIGNED_SGIX 0x85E4
-#define GL_LUMINANCE_ALPHA_SIGNED_SGIX 0x85E5
-#define GL_RGB16_SIGNED_SGIX 0x85E6
-#define GL_RGBA16_SIGNED_SGIX 0x85E7
-#define GL_ALPHA16_SIGNED_SGIX 0x85E8
-#define GL_LUMINANCE16_SIGNED_SGIX 0x85E9
-#define GL_INTENSITY16_SIGNED_SGIX 0x85EA
-#define GL_LUMINANCE16_ALPHA16_SIGNED_SGIX 0x85EB
-#define GL_RGB_EXTENDED_RANGE_SGIX 0x85EC
-#define GL_RGBA_EXTENDED_RANGE_SGIX 0x85ED
-#define GL_ALPHA_EXTENDED_RANGE_SGIX 0x85EE
-#define GL_LUMINANCE_EXTENDED_RANGE_SGIX 0x85EF
-#define GL_INTENSITY_EXTENDED_RANGE_SGIX 0x85F0
-#define GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX 0x85F1
-#define GL_RGB16_EXTENDED_RANGE_SGIX 0x85F2
-#define GL_RGBA16_EXTENDED_RANGE_SGIX 0x85F3
-#define GL_ALPHA16_EXTENDED_RANGE_SGIX 0x85F4
-#define GL_LUMINANCE16_EXTENDED_RANGE_SGIX 0x85F5
-#define GL_INTENSITY16_EXTENDED_RANGE_SGIX 0x85F6
-#define GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX 0x85F7
-#define GL_MIN_LUMINANCE_SGIS 0x85F8
-#define GL_MAX_LUMINANCE_SGIS 0x85F9
-#define GL_MIN_INTENSITY_SGIS 0x85FA
-#define GL_MAX_INTENSITY_SGIS 0x85FB
-
-#define GLEW_SGIX_texture_range GLEW_GET_VAR(__GLEW_SGIX_texture_range)
-
-#endif /* GL_SGIX_texture_range */
-
-/* ----------------------- GL_SGIX_texture_scale_bias ---------------------- */
-
-#ifndef GL_SGIX_texture_scale_bias
-#define GL_SGIX_texture_scale_bias 1
-
-#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
-#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
-#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
-#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
-
-#define GLEW_SGIX_texture_scale_bias GLEW_GET_VAR(__GLEW_SGIX_texture_scale_bias)
-
-#endif /* GL_SGIX_texture_scale_bias */
-
-/* ------------------------- GL_SGIX_vertex_preclip ------------------------ */
-
-#ifndef GL_SGIX_vertex_preclip
-#define GL_SGIX_vertex_preclip 1
-
-#define GL_VERTEX_PRECLIP_SGIX 0x83EE
-#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
-
-#define GLEW_SGIX_vertex_preclip GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip)
-
-#endif /* GL_SGIX_vertex_preclip */
-
-/* ---------------------- GL_SGIX_vertex_preclip_hint ---------------------- */
-
-#ifndef GL_SGIX_vertex_preclip_hint
-#define GL_SGIX_vertex_preclip_hint 1
-
-#define GL_VERTEX_PRECLIP_SGIX 0x83EE
-#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
-
-#define GLEW_SGIX_vertex_preclip_hint GLEW_GET_VAR(__GLEW_SGIX_vertex_preclip_hint)
-
-#endif /* GL_SGIX_vertex_preclip_hint */
-
-/* ----------------------------- GL_SGIX_ycrcb ----------------------------- */
-
-#ifndef GL_SGIX_ycrcb
-#define GL_SGIX_ycrcb 1
-
-#define GLEW_SGIX_ycrcb GLEW_GET_VAR(__GLEW_SGIX_ycrcb)
-
-#endif /* GL_SGIX_ycrcb */
-
-/* -------------------------- GL_SGI_color_matrix -------------------------- */
-
-#ifndef GL_SGI_color_matrix
-#define GL_SGI_color_matrix 1
-
-#define GL_COLOR_MATRIX_SGI 0x80B1
-#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
-#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
-#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
-#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
-#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
-#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
-#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
-#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
-#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
-#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
-
-#define GLEW_SGI_color_matrix GLEW_GET_VAR(__GLEW_SGI_color_matrix)
-
-#endif /* GL_SGI_color_matrix */
-
-/* --------------------------- GL_SGI_color_table -------------------------- */
-
-#ifndef GL_SGI_color_table
-#define GL_SGI_color_table 1
-
-#define GL_COLOR_TABLE_SGI 0x80D0
-#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
-#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
-#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
-#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
-#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
-#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
-#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
-#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
-#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
-#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
-#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
-#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
-#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
-#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
-#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
-
-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint* params);
-typedef void (GLAPIENTRY * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table);
-typedef void (GLAPIENTRY * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat* params);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint* params);
-typedef void (GLAPIENTRY * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void* table);
-
-#define glColorTableParameterfvSGI GLEW_GET_FUN(__glewColorTableParameterfvSGI)
-#define glColorTableParameterivSGI GLEW_GET_FUN(__glewColorTableParameterivSGI)
-#define glColorTableSGI GLEW_GET_FUN(__glewColorTableSGI)
-#define glCopyColorTableSGI GLEW_GET_FUN(__glewCopyColorTableSGI)
-#define glGetColorTableParameterfvSGI GLEW_GET_FUN(__glewGetColorTableParameterfvSGI)
-#define glGetColorTableParameterivSGI GLEW_GET_FUN(__glewGetColorTableParameterivSGI)
-#define glGetColorTableSGI GLEW_GET_FUN(__glewGetColorTableSGI)
-
-#define GLEW_SGI_color_table GLEW_GET_VAR(__GLEW_SGI_color_table)
-
-#endif /* GL_SGI_color_table */
-
-/* ----------------------- GL_SGI_texture_color_table ---------------------- */
-
-#ifndef GL_SGI_texture_color_table
-#define GL_SGI_texture_color_table 1
-
-#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
-#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
-
-#define GLEW_SGI_texture_color_table GLEW_GET_VAR(__GLEW_SGI_texture_color_table)
-
-#endif /* GL_SGI_texture_color_table */
-
-/* ------------------------- GL_SUNX_constant_data ------------------------- */
-
-#ifndef GL_SUNX_constant_data
-#define GL_SUNX_constant_data 1
-
-#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
-#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
-
-typedef void (GLAPIENTRY * PFNGLFINISHTEXTURESUNXPROC) (void);
-
-#define glFinishTextureSUNX GLEW_GET_FUN(__glewFinishTextureSUNX)
-
-#define GLEW_SUNX_constant_data GLEW_GET_VAR(__GLEW_SUNX_constant_data)
-
-#endif /* GL_SUNX_constant_data */
-
-/* -------------------- GL_SUN_convolution_border_modes -------------------- */
-
-#ifndef GL_SUN_convolution_border_modes
-#define GL_SUN_convolution_border_modes 1
-
-#define GL_WRAP_BORDER_SUN 0x81D4
-
-#define GLEW_SUN_convolution_border_modes GLEW_GET_VAR(__GLEW_SUN_convolution_border_modes)
-
-#endif /* GL_SUN_convolution_border_modes */
-
-/* -------------------------- GL_SUN_global_alpha -------------------------- */
-
-#ifndef GL_SUN_global_alpha
-#define GL_SUN_global_alpha 1
-
-#define GL_GLOBAL_ALPHA_SUN 0x81D9
-#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
-
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
-typedef void (GLAPIENTRY * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
-
-#define glGlobalAlphaFactorbSUN GLEW_GET_FUN(__glewGlobalAlphaFactorbSUN)
-#define glGlobalAlphaFactordSUN GLEW_GET_FUN(__glewGlobalAlphaFactordSUN)
-#define glGlobalAlphaFactorfSUN GLEW_GET_FUN(__glewGlobalAlphaFactorfSUN)
-#define glGlobalAlphaFactoriSUN GLEW_GET_FUN(__glewGlobalAlphaFactoriSUN)
-#define glGlobalAlphaFactorsSUN GLEW_GET_FUN(__glewGlobalAlphaFactorsSUN)
-#define glGlobalAlphaFactorubSUN GLEW_GET_FUN(__glewGlobalAlphaFactorubSUN)
-#define glGlobalAlphaFactoruiSUN GLEW_GET_FUN(__glewGlobalAlphaFactoruiSUN)
-#define glGlobalAlphaFactorusSUN GLEW_GET_FUN(__glewGlobalAlphaFactorusSUN)
-
-#define GLEW_SUN_global_alpha GLEW_GET_VAR(__GLEW_SUN_global_alpha)
-
-#endif /* GL_SUN_global_alpha */
-
-/* --------------------------- GL_SUN_mesh_array --------------------------- */
-
-#ifndef GL_SUN_mesh_array
-#define GL_SUN_mesh_array 1
-
-#define GL_QUAD_MESH_SUN 0x8614
-#define GL_TRIANGLE_MESH_SUN 0x8615
-
-#define GLEW_SUN_mesh_array GLEW_GET_VAR(__GLEW_SUN_mesh_array)
-
-#endif /* GL_SUN_mesh_array */
-
-/* ------------------------ GL_SUN_read_video_pixels ----------------------- */
-
-#ifndef GL_SUN_read_video_pixels
-#define GL_SUN_read_video_pixels 1
-
-typedef void (GLAPIENTRY * PFNGLREADVIDEOPIXELSSUNPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
-
-#define glReadVideoPixelsSUN GLEW_GET_FUN(__glewReadVideoPixelsSUN)
-
-#define GLEW_SUN_read_video_pixels GLEW_GET_VAR(__GLEW_SUN_read_video_pixels)
-
-#endif /* GL_SUN_read_video_pixels */
-
-/* --------------------------- GL_SUN_slice_accum -------------------------- */
-
-#ifndef GL_SUN_slice_accum
-#define GL_SUN_slice_accum 1
-
-#define GL_SLICE_ACCUM_SUN 0x85CC
-
-#define GLEW_SUN_slice_accum GLEW_GET_VAR(__GLEW_SUN_slice_accum)
-
-#endif /* GL_SUN_slice_accum */
-
-/* -------------------------- GL_SUN_triangle_list ------------------------- */
-
-#ifndef GL_SUN_triangle_list
-#define GL_SUN_triangle_list 1
-
-#define GL_RESTART_SUN 0x01
-#define GL_REPLACE_MIDDLE_SUN 0x02
-#define GL_REPLACE_OLDEST_SUN 0x03
-#define GL_TRIANGLE_LIST_SUN 0x81D7
-#define GL_REPLACEMENT_CODE_SUN 0x81D8
-#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
-#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
-#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
-#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
-#define GL_R1UI_V3F_SUN 0x85C4
-#define GL_R1UI_C4UB_V3F_SUN 0x85C5
-#define GL_R1UI_C3F_V3F_SUN 0x85C6
-#define GL_R1UI_N3F_V3F_SUN 0x85C7
-#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
-#define GL_R1UI_T2F_V3F_SUN 0x85C9
-#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
-#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
-
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void* pointer);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte* code);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint* code);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort* code);
-
-#define glReplacementCodePointerSUN GLEW_GET_FUN(__glewReplacementCodePointerSUN)
-#define glReplacementCodeubSUN GLEW_GET_FUN(__glewReplacementCodeubSUN)
-#define glReplacementCodeubvSUN GLEW_GET_FUN(__glewReplacementCodeubvSUN)
-#define glReplacementCodeuiSUN GLEW_GET_FUN(__glewReplacementCodeuiSUN)
-#define glReplacementCodeuivSUN GLEW_GET_FUN(__glewReplacementCodeuivSUN)
-#define glReplacementCodeusSUN GLEW_GET_FUN(__glewReplacementCodeusSUN)
-#define glReplacementCodeusvSUN GLEW_GET_FUN(__glewReplacementCodeusvSUN)
-
-#define GLEW_SUN_triangle_list GLEW_GET_VAR(__GLEW_SUN_triangle_list)
-
-#endif /* GL_SUN_triangle_list */
-
-/* ----------------------------- GL_SUN_vertex ----------------------------- */
-
-#ifndef GL_SUN_vertex
-#define GL_SUN_vertex 1
-
-typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* c, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte* c, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte* c, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint* rc, const GLubyte *c, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *tc, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint* rc, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat* tc, const GLubyte *c, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (GLAPIENTRY * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat* tc, const GLfloat *v);
-
-#define glColor3fVertex3fSUN GLEW_GET_FUN(__glewColor3fVertex3fSUN)
-#define glColor3fVertex3fvSUN GLEW_GET_FUN(__glewColor3fVertex3fvSUN)
-#define glColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewColor4fNormal3fVertex3fSUN)
-#define glColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewColor4fNormal3fVertex3fvSUN)
-#define glColor4ubVertex2fSUN GLEW_GET_FUN(__glewColor4ubVertex2fSUN)
-#define glColor4ubVertex2fvSUN GLEW_GET_FUN(__glewColor4ubVertex2fvSUN)
-#define glColor4ubVertex3fSUN GLEW_GET_FUN(__glewColor4ubVertex3fSUN)
-#define glColor4ubVertex3fvSUN GLEW_GET_FUN(__glewColor4ubVertex3fvSUN)
-#define glNormal3fVertex3fSUN GLEW_GET_FUN(__glewNormal3fVertex3fSUN)
-#define glNormal3fVertex3fvSUN GLEW_GET_FUN(__glewNormal3fVertex3fvSUN)
-#define glReplacementCodeuiColor3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fSUN)
-#define glReplacementCodeuiColor3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor3fVertex3fvSUN)
-#define glReplacementCodeuiColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fSUN)
-#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4fNormal3fVertex3fvSUN)
-#define glReplacementCodeuiColor4ubVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fSUN)
-#define glReplacementCodeuiColor4ubVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiColor4ubVertex3fvSUN)
-#define glReplacementCodeuiNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fSUN)
-#define glReplacementCodeuiNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiNormal3fVertex3fvSUN)
-#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
-#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
-#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
-#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
-#define glReplacementCodeuiTexCoord2fVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fSUN)
-#define glReplacementCodeuiTexCoord2fVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiTexCoord2fVertex3fvSUN)
-#define glReplacementCodeuiVertex3fSUN GLEW_GET_FUN(__glewReplacementCodeuiVertex3fSUN)
-#define glReplacementCodeuiVertex3fvSUN GLEW_GET_FUN(__glewReplacementCodeuiVertex3fvSUN)
-#define glTexCoord2fColor3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fSUN)
-#define glTexCoord2fColor3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor3fVertex3fvSUN)
-#define glTexCoord2fColor4fNormal3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fSUN)
-#define glTexCoord2fColor4fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor4fNormal3fVertex3fvSUN)
-#define glTexCoord2fColor4ubVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fSUN)
-#define glTexCoord2fColor4ubVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fColor4ubVertex3fvSUN)
-#define glTexCoord2fNormal3fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fSUN)
-#define glTexCoord2fNormal3fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fNormal3fVertex3fvSUN)
-#define glTexCoord2fVertex3fSUN GLEW_GET_FUN(__glewTexCoord2fVertex3fSUN)
-#define glTexCoord2fVertex3fvSUN GLEW_GET_FUN(__glewTexCoord2fVertex3fvSUN)
-#define glTexCoord4fColor4fNormal3fVertex4fSUN GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fSUN)
-#define glTexCoord4fColor4fNormal3fVertex4fvSUN GLEW_GET_FUN(__glewTexCoord4fColor4fNormal3fVertex4fvSUN)
-#define glTexCoord4fVertex4fSUN GLEW_GET_FUN(__glewTexCoord4fVertex4fSUN)
-#define glTexCoord4fVertex4fvSUN GLEW_GET_FUN(__glewTexCoord4fVertex4fvSUN)
-
-#define GLEW_SUN_vertex GLEW_GET_VAR(__GLEW_SUN_vertex)
-
-#endif /* GL_SUN_vertex */
-
-/* -------------------------- GL_WIN_phong_shading ------------------------- */
-
-#ifndef GL_WIN_phong_shading
-#define GL_WIN_phong_shading 1
-
-#define GL_PHONG_WIN 0x80EA
-#define GL_PHONG_HINT_WIN 0x80EB
-
-#define GLEW_WIN_phong_shading GLEW_GET_VAR(__GLEW_WIN_phong_shading)
-
-#endif /* GL_WIN_phong_shading */
-
-/* -------------------------- GL_WIN_specular_fog -------------------------- */
-
-#ifndef GL_WIN_specular_fog
-#define GL_WIN_specular_fog 1
-
-#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
-
-#define GLEW_WIN_specular_fog GLEW_GET_VAR(__GLEW_WIN_specular_fog)
-
-#endif /* GL_WIN_specular_fog */
-
-/* ---------------------------- GL_WIN_swap_hint --------------------------- */
-
-#ifndef GL_WIN_swap_hint
-#define GL_WIN_swap_hint 1
-
-typedef void (GLAPIENTRY * PFNGLADDSWAPHINTRECTWINPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
-
-#define glAddSwapHintRectWIN GLEW_GET_FUN(__glewAddSwapHintRectWIN)
-
-#define GLEW_WIN_swap_hint GLEW_GET_VAR(__GLEW_WIN_swap_hint)
-
-#endif /* GL_WIN_swap_hint */
-
-/* ------------------------------------------------------------------------- */
-
-#if defined(GLEW_MX) && defined(_WIN32)
-#define GLEW_FUN_EXPORT
-#else
-#define GLEW_FUN_EXPORT GLEWAPI
-#endif /* GLEW_MX */
-
-#if defined(GLEW_MX)
-#define GLEW_VAR_EXPORT
-#else
-#define GLEW_VAR_EXPORT GLEWAPI
-#endif /* GLEW_MX */
-
-#if defined(GLEW_MX) && defined(_WIN32)
-struct GLEWContextStruct
-{
-#endif /* GLEW_MX */
-
-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DPROC __glewCopyTexSubImage3D;
-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSPROC __glewDrawRangeElements;
-GLEW_FUN_EXPORT PFNGLTEXIMAGE3DPROC __glewTexImage3D;
-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE3DPROC __glewTexSubImage3D;
-
-GLEW_FUN_EXPORT PFNGLACTIVETEXTUREPROC __glewActiveTexture;
-GLEW_FUN_EXPORT PFNGLCLIENTACTIVETEXTUREPROC __glewClientActiveTexture;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DPROC __glewCompressedTexImage1D;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DPROC __glewCompressedTexImage2D;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DPROC __glewCompressedTexImage3D;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glewCompressedTexSubImage1D;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glewCompressedTexSubImage2D;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glewCompressedTexSubImage3D;
-GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEPROC __glewGetCompressedTexImage;
-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXDPROC __glewLoadTransposeMatrixd;
-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXFPROC __glewLoadTransposeMatrixf;
-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXDPROC __glewMultTransposeMatrixd;
-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXFPROC __glewMultTransposeMatrixf;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DPROC __glewMultiTexCoord1d;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DVPROC __glewMultiTexCoord1dv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FPROC __glewMultiTexCoord1f;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FVPROC __glewMultiTexCoord1fv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IPROC __glewMultiTexCoord1i;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IVPROC __glewMultiTexCoord1iv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SPROC __glewMultiTexCoord1s;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SVPROC __glewMultiTexCoord1sv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DPROC __glewMultiTexCoord2d;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DVPROC __glewMultiTexCoord2dv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FPROC __glewMultiTexCoord2f;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FVPROC __glewMultiTexCoord2fv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IPROC __glewMultiTexCoord2i;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IVPROC __glewMultiTexCoord2iv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SPROC __glewMultiTexCoord2s;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SVPROC __glewMultiTexCoord2sv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DPROC __glewMultiTexCoord3d;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DVPROC __glewMultiTexCoord3dv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FPROC __glewMultiTexCoord3f;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FVPROC __glewMultiTexCoord3fv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IPROC __glewMultiTexCoord3i;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IVPROC __glewMultiTexCoord3iv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SPROC __glewMultiTexCoord3s;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SVPROC __glewMultiTexCoord3sv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DPROC __glewMultiTexCoord4d;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DVPROC __glewMultiTexCoord4dv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FPROC __glewMultiTexCoord4f;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FVPROC __glewMultiTexCoord4fv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IPROC __glewMultiTexCoord4i;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IVPROC __glewMultiTexCoord4iv;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SPROC __glewMultiTexCoord4s;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SVPROC __glewMultiTexCoord4sv;
-GLEW_FUN_EXPORT PFNGLSAMPLECOVERAGEPROC __glewSampleCoverage;
-
-GLEW_FUN_EXPORT PFNGLBLENDCOLORPROC __glewBlendColor;
-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONPROC __glewBlendEquation;
-GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEPROC __glewBlendFuncSeparate;
-GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTERPROC __glewFogCoordPointer;
-GLEW_FUN_EXPORT PFNGLFOGCOORDDPROC __glewFogCoordd;
-GLEW_FUN_EXPORT PFNGLFOGCOORDDVPROC __glewFogCoorddv;
-GLEW_FUN_EXPORT PFNGLFOGCOORDFPROC __glewFogCoordf;
-GLEW_FUN_EXPORT PFNGLFOGCOORDFVPROC __glewFogCoordfv;
-GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSPROC __glewMultiDrawArrays;
-GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSPROC __glewMultiDrawElements;
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFPROC __glewPointParameterf;
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVPROC __glewPointParameterfv;
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIPROC __glewPointParameteri;
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIVPROC __glewPointParameteriv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BPROC __glewSecondaryColor3b;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BVPROC __glewSecondaryColor3bv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DPROC __glewSecondaryColor3d;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DVPROC __glewSecondaryColor3dv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FPROC __glewSecondaryColor3f;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FVPROC __glewSecondaryColor3fv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IPROC __glewSecondaryColor3i;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IVPROC __glewSecondaryColor3iv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SPROC __glewSecondaryColor3s;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SVPROC __glewSecondaryColor3sv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBPROC __glewSecondaryColor3ub;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBVPROC __glewSecondaryColor3ubv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIPROC __glewSecondaryColor3ui;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIVPROC __glewSecondaryColor3uiv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USPROC __glewSecondaryColor3us;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USVPROC __glewSecondaryColor3usv;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTERPROC __glewSecondaryColorPointer;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DPROC __glewWindowPos2d;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVPROC __glewWindowPos2dv;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FPROC __glewWindowPos2f;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVPROC __glewWindowPos2fv;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IPROC __glewWindowPos2i;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVPROC __glewWindowPos2iv;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SPROC __glewWindowPos2s;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVPROC __glewWindowPos2sv;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DPROC __glewWindowPos3d;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVPROC __glewWindowPos3dv;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FPROC __glewWindowPos3f;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVPROC __glewWindowPos3fv;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IPROC __glewWindowPos3i;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVPROC __glewWindowPos3iv;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SPROC __glewWindowPos3s;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVPROC __glewWindowPos3sv;
-
-GLEW_FUN_EXPORT PFNGLBEGINQUERYPROC __glewBeginQuery;
-GLEW_FUN_EXPORT PFNGLBINDBUFFERPROC __glewBindBuffer;
-GLEW_FUN_EXPORT PFNGLBUFFERDATAPROC __glewBufferData;
-GLEW_FUN_EXPORT PFNGLBUFFERSUBDATAPROC __glewBufferSubData;
-GLEW_FUN_EXPORT PFNGLDELETEBUFFERSPROC __glewDeleteBuffers;
-GLEW_FUN_EXPORT PFNGLDELETEQUERIESPROC __glewDeleteQueries;
-GLEW_FUN_EXPORT PFNGLENDQUERYPROC __glewEndQuery;
-GLEW_FUN_EXPORT PFNGLGENBUFFERSPROC __glewGenBuffers;
-GLEW_FUN_EXPORT PFNGLGENQUERIESPROC __glewGenQueries;
-GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERIVPROC __glewGetBufferParameteriv;
-GLEW_FUN_EXPORT PFNGLGETBUFFERPOINTERVPROC __glewGetBufferPointerv;
-GLEW_FUN_EXPORT PFNGLGETBUFFERSUBDATAPROC __glewGetBufferSubData;
-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTIVPROC __glewGetQueryObjectiv;
-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUIVPROC __glewGetQueryObjectuiv;
-GLEW_FUN_EXPORT PFNGLGETQUERYIVPROC __glewGetQueryiv;
-GLEW_FUN_EXPORT PFNGLISBUFFERPROC __glewIsBuffer;
-GLEW_FUN_EXPORT PFNGLISQUERYPROC __glewIsQuery;
-GLEW_FUN_EXPORT PFNGLMAPBUFFERPROC __glewMapBuffer;
-GLEW_FUN_EXPORT PFNGLUNMAPBUFFERPROC __glewUnmapBuffer;
-
-GLEW_FUN_EXPORT PFNGLATTACHSHADERPROC __glewAttachShader;
-GLEW_FUN_EXPORT PFNGLBINDATTRIBLOCATIONPROC __glewBindAttribLocation;
-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEPROC __glewBlendEquationSeparate;
-GLEW_FUN_EXPORT PFNGLCOMPILESHADERPROC __glewCompileShader;
-GLEW_FUN_EXPORT PFNGLCREATEPROGRAMPROC __glewCreateProgram;
-GLEW_FUN_EXPORT PFNGLCREATESHADERPROC __glewCreateShader;
-GLEW_FUN_EXPORT PFNGLDELETEPROGRAMPROC __glewDeleteProgram;
-GLEW_FUN_EXPORT PFNGLDELETESHADERPROC __glewDeleteShader;
-GLEW_FUN_EXPORT PFNGLDETACHSHADERPROC __glewDetachShader;
-GLEW_FUN_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYPROC __glewDisableVertexAttribArray;
-GLEW_FUN_EXPORT PFNGLDRAWBUFFERSPROC __glewDrawBuffers;
-GLEW_FUN_EXPORT PFNGLENABLEVERTEXATTRIBARRAYPROC __glewEnableVertexAttribArray;
-GLEW_FUN_EXPORT PFNGLGETACTIVEATTRIBPROC __glewGetActiveAttrib;
-GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMPROC __glewGetActiveUniform;
-GLEW_FUN_EXPORT PFNGLGETATTACHEDSHADERSPROC __glewGetAttachedShaders;
-GLEW_FUN_EXPORT PFNGLGETATTRIBLOCATIONPROC __glewGetAttribLocation;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMINFOLOGPROC __glewGetProgramInfoLog;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMIVPROC __glewGetProgramiv;
-GLEW_FUN_EXPORT PFNGLGETSHADERINFOLOGPROC __glewGetShaderInfoLog;
-GLEW_FUN_EXPORT PFNGLGETSHADERSOURCEPROC __glewGetShaderSource;
-GLEW_FUN_EXPORT PFNGLGETSHADERIVPROC __glewGetShaderiv;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMLOCATIONPROC __glewGetUniformLocation;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMFVPROC __glewGetUniformfv;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMIVPROC __glewGetUniformiv;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVPROC __glewGetVertexAttribPointerv;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVPROC __glewGetVertexAttribdv;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVPROC __glewGetVertexAttribfv;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVPROC __glewGetVertexAttribiv;
-GLEW_FUN_EXPORT PFNGLISPROGRAMPROC __glewIsProgram;
-GLEW_FUN_EXPORT PFNGLISSHADERPROC __glewIsShader;
-GLEW_FUN_EXPORT PFNGLLINKPROGRAMPROC __glewLinkProgram;
-GLEW_FUN_EXPORT PFNGLSHADERSOURCEPROC __glewShaderSource;
-GLEW_FUN_EXPORT PFNGLSTENCILFUNCSEPARATEPROC __glewStencilFuncSeparate;
-GLEW_FUN_EXPORT PFNGLSTENCILMASKSEPARATEPROC __glewStencilMaskSeparate;
-GLEW_FUN_EXPORT PFNGLSTENCILOPSEPARATEPROC __glewStencilOpSeparate;
-GLEW_FUN_EXPORT PFNGLUNIFORM1FPROC __glewUniform1f;
-GLEW_FUN_EXPORT PFNGLUNIFORM1FVPROC __glewUniform1fv;
-GLEW_FUN_EXPORT PFNGLUNIFORM1IPROC __glewUniform1i;
-GLEW_FUN_EXPORT PFNGLUNIFORM1IVPROC __glewUniform1iv;
-GLEW_FUN_EXPORT PFNGLUNIFORM2FPROC __glewUniform2f;
-GLEW_FUN_EXPORT PFNGLUNIFORM2FVPROC __glewUniform2fv;
-GLEW_FUN_EXPORT PFNGLUNIFORM2IPROC __glewUniform2i;
-GLEW_FUN_EXPORT PFNGLUNIFORM2IVPROC __glewUniform2iv;
-GLEW_FUN_EXPORT PFNGLUNIFORM3FPROC __glewUniform3f;
-GLEW_FUN_EXPORT PFNGLUNIFORM3FVPROC __glewUniform3fv;
-GLEW_FUN_EXPORT PFNGLUNIFORM3IPROC __glewUniform3i;
-GLEW_FUN_EXPORT PFNGLUNIFORM3IVPROC __glewUniform3iv;
-GLEW_FUN_EXPORT PFNGLUNIFORM4FPROC __glewUniform4f;
-GLEW_FUN_EXPORT PFNGLUNIFORM4FVPROC __glewUniform4fv;
-GLEW_FUN_EXPORT PFNGLUNIFORM4IPROC __glewUniform4i;
-GLEW_FUN_EXPORT PFNGLUNIFORM4IVPROC __glewUniform4iv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2FVPROC __glewUniformMatrix2fv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3FVPROC __glewUniformMatrix3fv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4FVPROC __glewUniformMatrix4fv;
-GLEW_FUN_EXPORT PFNGLUSEPROGRAMPROC __glewUseProgram;
-GLEW_FUN_EXPORT PFNGLVALIDATEPROGRAMPROC __glewValidateProgram;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DPROC __glewVertexAttrib1d;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVPROC __glewVertexAttrib1dv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FPROC __glewVertexAttrib1f;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVPROC __glewVertexAttrib1fv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SPROC __glewVertexAttrib1s;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVPROC __glewVertexAttrib1sv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DPROC __glewVertexAttrib2d;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVPROC __glewVertexAttrib2dv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FPROC __glewVertexAttrib2f;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVPROC __glewVertexAttrib2fv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SPROC __glewVertexAttrib2s;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVPROC __glewVertexAttrib2sv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DPROC __glewVertexAttrib3d;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVPROC __glewVertexAttrib3dv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FPROC __glewVertexAttrib3f;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVPROC __glewVertexAttrib3fv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SPROC __glewVertexAttrib3s;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVPROC __glewVertexAttrib3sv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NBVPROC __glewVertexAttrib4Nbv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NIVPROC __glewVertexAttrib4Niv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NSVPROC __glewVertexAttrib4Nsv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBPROC __glewVertexAttrib4Nub;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBVPROC __glewVertexAttrib4Nubv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUIVPROC __glewVertexAttrib4Nuiv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUSVPROC __glewVertexAttrib4Nusv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4BVPROC __glewVertexAttrib4bv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DPROC __glewVertexAttrib4d;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVPROC __glewVertexAttrib4dv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FPROC __glewVertexAttrib4f;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVPROC __glewVertexAttrib4fv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4IVPROC __glewVertexAttrib4iv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SPROC __glewVertexAttrib4s;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVPROC __glewVertexAttrib4sv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVPROC __glewVertexAttrib4ubv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UIVPROC __glewVertexAttrib4uiv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4USVPROC __glewVertexAttrib4usv;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERPROC __glewVertexAttribPointer;
-
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X3FVPROC __glewUniformMatrix2x3fv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2X4FVPROC __glewUniformMatrix2x4fv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X2FVPROC __glewUniformMatrix3x2fv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3X4FVPROC __glewUniformMatrix3x4fv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X2FVPROC __glewUniformMatrix4x2fv;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4X3FVPROC __glewUniformMatrix4x3fv;
-
-GLEW_FUN_EXPORT PFNGLTBUFFERMASK3DFXPROC __glewTbufferMask3DFX;
-
-GLEW_FUN_EXPORT PFNGLDRAWELEMENTARRAYAPPLEPROC __glewDrawElementArrayAPPLE;
-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glewDrawRangeElementArrayAPPLE;
-GLEW_FUN_EXPORT PFNGLELEMENTPOINTERAPPLEPROC __glewElementPointerAPPLE;
-GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glewMultiDrawElementArrayAPPLE;
-GLEW_FUN_EXPORT PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glewMultiDrawRangeElementArrayAPPLE;
-
-GLEW_FUN_EXPORT PFNGLDELETEFENCESAPPLEPROC __glewDeleteFencesAPPLE;
-GLEW_FUN_EXPORT PFNGLFINISHFENCEAPPLEPROC __glewFinishFenceAPPLE;
-GLEW_FUN_EXPORT PFNGLFINISHOBJECTAPPLEPROC __glewFinishObjectAPPLE;
-GLEW_FUN_EXPORT PFNGLGENFENCESAPPLEPROC __glewGenFencesAPPLE;
-GLEW_FUN_EXPORT PFNGLISFENCEAPPLEPROC __glewIsFenceAPPLE;
-GLEW_FUN_EXPORT PFNGLSETFENCEAPPLEPROC __glewSetFenceAPPLE;
-GLEW_FUN_EXPORT PFNGLTESTFENCEAPPLEPROC __glewTestFenceAPPLE;
-GLEW_FUN_EXPORT PFNGLTESTOBJECTAPPLEPROC __glewTestObjectAPPLE;
-
-GLEW_FUN_EXPORT PFNGLBUFFERPARAMETERIAPPLEPROC __glewBufferParameteriAPPLE;
-GLEW_FUN_EXPORT PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glewFlushMappedBufferRangeAPPLE;
-
-GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glewGetTexParameterPointervAPPLE;
-GLEW_FUN_EXPORT PFNGLTEXTURERANGEAPPLEPROC __glewTextureRangeAPPLE;
-
-GLEW_FUN_EXPORT PFNGLBINDVERTEXARRAYAPPLEPROC __glewBindVertexArrayAPPLE;
-GLEW_FUN_EXPORT PFNGLDELETEVERTEXARRAYSAPPLEPROC __glewDeleteVertexArraysAPPLE;
-GLEW_FUN_EXPORT PFNGLGENVERTEXARRAYSAPPLEPROC __glewGenVertexArraysAPPLE;
-GLEW_FUN_EXPORT PFNGLISVERTEXARRAYAPPLEPROC __glewIsVertexArrayAPPLE;
-
-GLEW_FUN_EXPORT PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glewFlushVertexArrayRangeAPPLE;
-GLEW_FUN_EXPORT PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glewVertexArrayParameteriAPPLE;
-GLEW_FUN_EXPORT PFNGLVERTEXARRAYRANGEAPPLEPROC __glewVertexArrayRangeAPPLE;
-
-GLEW_FUN_EXPORT PFNGLCLAMPCOLORARBPROC __glewClampColorARB;
-
-GLEW_FUN_EXPORT PFNGLDRAWBUFFERSARBPROC __glewDrawBuffersARB;
-
-GLEW_FUN_EXPORT PFNGLCOLORSUBTABLEPROC __glewColorSubTable;
-GLEW_FUN_EXPORT PFNGLCOLORTABLEPROC __glewColorTable;
-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERFVPROC __glewColorTableParameterfv;
-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERIVPROC __glewColorTableParameteriv;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER1DPROC __glewConvolutionFilter1D;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER2DPROC __glewConvolutionFilter2D;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFPROC __glewConvolutionParameterf;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFVPROC __glewConvolutionParameterfv;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIPROC __glewConvolutionParameteri;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIVPROC __glewConvolutionParameteriv;
-GLEW_FUN_EXPORT PFNGLCOPYCOLORSUBTABLEPROC __glewCopyColorSubTable;
-GLEW_FUN_EXPORT PFNGLCOPYCOLORTABLEPROC __glewCopyColorTable;
-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DPROC __glewCopyConvolutionFilter1D;
-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DPROC __glewCopyConvolutionFilter2D;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPROC __glewGetColorTable;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVPROC __glewGetColorTableParameterfv;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVPROC __glewGetColorTableParameteriv;
-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONFILTERPROC __glewGetConvolutionFilter;
-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVPROC __glewGetConvolutionParameterfv;
-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVPROC __glewGetConvolutionParameteriv;
-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPROC __glewGetHistogram;
-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERFVPROC __glewGetHistogramParameterfv;
-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERIVPROC __glewGetHistogramParameteriv;
-GLEW_FUN_EXPORT PFNGLGETMINMAXPROC __glewGetMinmax;
-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERFVPROC __glewGetMinmaxParameterfv;
-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERIVPROC __glewGetMinmaxParameteriv;
-GLEW_FUN_EXPORT PFNGLGETSEPARABLEFILTERPROC __glewGetSeparableFilter;
-GLEW_FUN_EXPORT PFNGLHISTOGRAMPROC __glewHistogram;
-GLEW_FUN_EXPORT PFNGLMINMAXPROC __glewMinmax;
-GLEW_FUN_EXPORT PFNGLRESETHISTOGRAMPROC __glewResetHistogram;
-GLEW_FUN_EXPORT PFNGLRESETMINMAXPROC __glewResetMinmax;
-GLEW_FUN_EXPORT PFNGLSEPARABLEFILTER2DPROC __glewSeparableFilter2D;
-
-GLEW_FUN_EXPORT PFNGLCURRENTPALETTEMATRIXARBPROC __glewCurrentPaletteMatrixARB;
-GLEW_FUN_EXPORT PFNGLMATRIXINDEXPOINTERARBPROC __glewMatrixIndexPointerARB;
-GLEW_FUN_EXPORT PFNGLMATRIXINDEXUBVARBPROC __glewMatrixIndexubvARB;
-GLEW_FUN_EXPORT PFNGLMATRIXINDEXUIVARBPROC __glewMatrixIndexuivARB;
-GLEW_FUN_EXPORT PFNGLMATRIXINDEXUSVARBPROC __glewMatrixIndexusvARB;
-
-GLEW_FUN_EXPORT PFNGLSAMPLECOVERAGEARBPROC __glewSampleCoverageARB;
-
-GLEW_FUN_EXPORT PFNGLACTIVETEXTUREARBPROC __glewActiveTextureARB;
-GLEW_FUN_EXPORT PFNGLCLIENTACTIVETEXTUREARBPROC __glewClientActiveTextureARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DARBPROC __glewMultiTexCoord1dARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1DVARBPROC __glewMultiTexCoord1dvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FARBPROC __glewMultiTexCoord1fARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1FVARBPROC __glewMultiTexCoord1fvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IARBPROC __glewMultiTexCoord1iARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1IVARBPROC __glewMultiTexCoord1ivARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SARBPROC __glewMultiTexCoord1sARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1SVARBPROC __glewMultiTexCoord1svARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DARBPROC __glewMultiTexCoord2dARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2DVARBPROC __glewMultiTexCoord2dvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FARBPROC __glewMultiTexCoord2fARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2FVARBPROC __glewMultiTexCoord2fvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IARBPROC __glewMultiTexCoord2iARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2IVARBPROC __glewMultiTexCoord2ivARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SARBPROC __glewMultiTexCoord2sARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2SVARBPROC __glewMultiTexCoord2svARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DARBPROC __glewMultiTexCoord3dARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3DVARBPROC __glewMultiTexCoord3dvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FARBPROC __glewMultiTexCoord3fARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3FVARBPROC __glewMultiTexCoord3fvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IARBPROC __glewMultiTexCoord3iARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3IVARBPROC __glewMultiTexCoord3ivARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SARBPROC __glewMultiTexCoord3sARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3SVARBPROC __glewMultiTexCoord3svARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DARBPROC __glewMultiTexCoord4dARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4DVARBPROC __glewMultiTexCoord4dvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FARBPROC __glewMultiTexCoord4fARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4FVARBPROC __glewMultiTexCoord4fvARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IARBPROC __glewMultiTexCoord4iARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4IVARBPROC __glewMultiTexCoord4ivARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SARBPROC __glewMultiTexCoord4sARB;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4SVARBPROC __glewMultiTexCoord4svARB;
-
-GLEW_FUN_EXPORT PFNGLBEGINQUERYARBPROC __glewBeginQueryARB;
-GLEW_FUN_EXPORT PFNGLDELETEQUERIESARBPROC __glewDeleteQueriesARB;
-GLEW_FUN_EXPORT PFNGLENDQUERYARBPROC __glewEndQueryARB;
-GLEW_FUN_EXPORT PFNGLGENQUERIESARBPROC __glewGenQueriesARB;
-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTIVARBPROC __glewGetQueryObjectivARB;
-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUIVARBPROC __glewGetQueryObjectuivARB;
-GLEW_FUN_EXPORT PFNGLGETQUERYIVARBPROC __glewGetQueryivARB;
-GLEW_FUN_EXPORT PFNGLISQUERYARBPROC __glewIsQueryARB;
-
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFARBPROC __glewPointParameterfARB;
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVARBPROC __glewPointParameterfvARB;
-
-GLEW_FUN_EXPORT PFNGLATTACHOBJECTARBPROC __glewAttachObjectARB;
-GLEW_FUN_EXPORT PFNGLCOMPILESHADERARBPROC __glewCompileShaderARB;
-GLEW_FUN_EXPORT PFNGLCREATEPROGRAMOBJECTARBPROC __glewCreateProgramObjectARB;
-GLEW_FUN_EXPORT PFNGLCREATESHADEROBJECTARBPROC __glewCreateShaderObjectARB;
-GLEW_FUN_EXPORT PFNGLDELETEOBJECTARBPROC __glewDeleteObjectARB;
-GLEW_FUN_EXPORT PFNGLDETACHOBJECTARBPROC __glewDetachObjectARB;
-GLEW_FUN_EXPORT PFNGLGETACTIVEUNIFORMARBPROC __glewGetActiveUniformARB;
-GLEW_FUN_EXPORT PFNGLGETATTACHEDOBJECTSARBPROC __glewGetAttachedObjectsARB;
-GLEW_FUN_EXPORT PFNGLGETHANDLEARBPROC __glewGetHandleARB;
-GLEW_FUN_EXPORT PFNGLGETINFOLOGARBPROC __glewGetInfoLogARB;
-GLEW_FUN_EXPORT PFNGLGETOBJECTPARAMETERFVARBPROC __glewGetObjectParameterfvARB;
-GLEW_FUN_EXPORT PFNGLGETOBJECTPARAMETERIVARBPROC __glewGetObjectParameterivARB;
-GLEW_FUN_EXPORT PFNGLGETSHADERSOURCEARBPROC __glewGetShaderSourceARB;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMLOCATIONARBPROC __glewGetUniformLocationARB;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMFVARBPROC __glewGetUniformfvARB;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMIVARBPROC __glewGetUniformivARB;
-GLEW_FUN_EXPORT PFNGLLINKPROGRAMARBPROC __glewLinkProgramARB;
-GLEW_FUN_EXPORT PFNGLSHADERSOURCEARBPROC __glewShaderSourceARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM1FARBPROC __glewUniform1fARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM1FVARBPROC __glewUniform1fvARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM1IARBPROC __glewUniform1iARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM1IVARBPROC __glewUniform1ivARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM2FARBPROC __glewUniform2fARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM2FVARBPROC __glewUniform2fvARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM2IARBPROC __glewUniform2iARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM2IVARBPROC __glewUniform2ivARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM3FARBPROC __glewUniform3fARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM3FVARBPROC __glewUniform3fvARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM3IARBPROC __glewUniform3iARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM3IVARBPROC __glewUniform3ivARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM4FARBPROC __glewUniform4fARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM4FVARBPROC __glewUniform4fvARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM4IARBPROC __glewUniform4iARB;
-GLEW_FUN_EXPORT PFNGLUNIFORM4IVARBPROC __glewUniform4ivARB;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX2FVARBPROC __glewUniformMatrix2fvARB;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX3FVARBPROC __glewUniformMatrix3fvARB;
-GLEW_FUN_EXPORT PFNGLUNIFORMMATRIX4FVARBPROC __glewUniformMatrix4fvARB;
-GLEW_FUN_EXPORT PFNGLUSEPROGRAMOBJECTARBPROC __glewUseProgramObjectARB;
-GLEW_FUN_EXPORT PFNGLVALIDATEPROGRAMARBPROC __glewValidateProgramARB;
-
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glewCompressedTexImage1DARB;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glewCompressedTexImage2DARB;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glewCompressedTexImage3DARB;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glewCompressedTexSubImage1DARB;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glewCompressedTexSubImage2DARB;
-GLEW_FUN_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glewCompressedTexSubImage3DARB;
-GLEW_FUN_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glewGetCompressedTexImageARB;
-
-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXDARBPROC __glewLoadTransposeMatrixdARB;
-GLEW_FUN_EXPORT PFNGLLOADTRANSPOSEMATRIXFARBPROC __glewLoadTransposeMatrixfARB;
-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXDARBPROC __glewMultTransposeMatrixdARB;
-GLEW_FUN_EXPORT PFNGLMULTTRANSPOSEMATRIXFARBPROC __glewMultTransposeMatrixfARB;
-
-GLEW_FUN_EXPORT PFNGLVERTEXBLENDARBPROC __glewVertexBlendARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTPOINTERARBPROC __glewWeightPointerARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTBVARBPROC __glewWeightbvARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTDVARBPROC __glewWeightdvARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTFVARBPROC __glewWeightfvARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTIVARBPROC __glewWeightivARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTSVARBPROC __glewWeightsvARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTUBVARBPROC __glewWeightubvARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTUIVARBPROC __glewWeightuivARB;
-GLEW_FUN_EXPORT PFNGLWEIGHTUSVARBPROC __glewWeightusvARB;
-
-GLEW_FUN_EXPORT PFNGLBINDBUFFERARBPROC __glewBindBufferARB;
-GLEW_FUN_EXPORT PFNGLBUFFERDATAARBPROC __glewBufferDataARB;
-GLEW_FUN_EXPORT PFNGLBUFFERSUBDATAARBPROC __glewBufferSubDataARB;
-GLEW_FUN_EXPORT PFNGLDELETEBUFFERSARBPROC __glewDeleteBuffersARB;
-GLEW_FUN_EXPORT PFNGLGENBUFFERSARBPROC __glewGenBuffersARB;
-GLEW_FUN_EXPORT PFNGLGETBUFFERPARAMETERIVARBPROC __glewGetBufferParameterivARB;
-GLEW_FUN_EXPORT PFNGLGETBUFFERPOINTERVARBPROC __glewGetBufferPointervARB;
-GLEW_FUN_EXPORT PFNGLGETBUFFERSUBDATAARBPROC __glewGetBufferSubDataARB;
-GLEW_FUN_EXPORT PFNGLISBUFFERARBPROC __glewIsBufferARB;
-GLEW_FUN_EXPORT PFNGLMAPBUFFERARBPROC __glewMapBufferARB;
-GLEW_FUN_EXPORT PFNGLUNMAPBUFFERARBPROC __glewUnmapBufferARB;
-
-GLEW_FUN_EXPORT PFNGLBINDPROGRAMARBPROC __glewBindProgramARB;
-GLEW_FUN_EXPORT PFNGLDELETEPROGRAMSARBPROC __glewDeleteProgramsARB;
-GLEW_FUN_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glewDisableVertexAttribArrayARB;
-GLEW_FUN_EXPORT PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glewEnableVertexAttribArrayARB;
-GLEW_FUN_EXPORT PFNGLGENPROGRAMSARBPROC __glewGenProgramsARB;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glewGetProgramEnvParameterdvARB;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glewGetProgramEnvParameterfvARB;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glewGetProgramLocalParameterdvARB;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glewGetProgramLocalParameterfvARB;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMSTRINGARBPROC __glewGetProgramStringARB;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMIVARBPROC __glewGetProgramivARB;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glewGetVertexAttribPointervARB;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVARBPROC __glewGetVertexAttribdvARB;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVARBPROC __glewGetVertexAttribfvARB;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVARBPROC __glewGetVertexAttribivARB;
-GLEW_FUN_EXPORT PFNGLISPROGRAMARBPROC __glewIsProgramARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4DARBPROC __glewProgramEnvParameter4dARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4DVARBPROC __glewProgramEnvParameter4dvARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4FARBPROC __glewProgramEnvParameter4fARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETER4FVARBPROC __glewProgramEnvParameter4fvARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glewProgramLocalParameter4dARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glewProgramLocalParameter4dvARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glewProgramLocalParameter4fARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glewProgramLocalParameter4fvARB;
-GLEW_FUN_EXPORT PFNGLPROGRAMSTRINGARBPROC __glewProgramStringARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DARBPROC __glewVertexAttrib1dARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVARBPROC __glewVertexAttrib1dvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FARBPROC __glewVertexAttrib1fARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVARBPROC __glewVertexAttrib1fvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SARBPROC __glewVertexAttrib1sARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVARBPROC __glewVertexAttrib1svARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DARBPROC __glewVertexAttrib2dARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVARBPROC __glewVertexAttrib2dvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FARBPROC __glewVertexAttrib2fARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVARBPROC __glewVertexAttrib2fvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SARBPROC __glewVertexAttrib2sARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVARBPROC __glewVertexAttrib2svARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DARBPROC __glewVertexAttrib3dARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVARBPROC __glewVertexAttrib3dvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FARBPROC __glewVertexAttrib3fARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVARBPROC __glewVertexAttrib3fvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SARBPROC __glewVertexAttrib3sARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVARBPROC __glewVertexAttrib3svARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NBVARBPROC __glewVertexAttrib4NbvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NIVARBPROC __glewVertexAttrib4NivARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NSVARBPROC __glewVertexAttrib4NsvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBARBPROC __glewVertexAttrib4NubARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUBVARBPROC __glewVertexAttrib4NubvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUIVARBPROC __glewVertexAttrib4NuivARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4NUSVARBPROC __glewVertexAttrib4NusvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4BVARBPROC __glewVertexAttrib4bvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DARBPROC __glewVertexAttrib4dARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVARBPROC __glewVertexAttrib4dvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FARBPROC __glewVertexAttrib4fARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVARBPROC __glewVertexAttrib4fvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4IVARBPROC __glewVertexAttrib4ivARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SARBPROC __glewVertexAttrib4sARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVARBPROC __glewVertexAttrib4svARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVARBPROC __glewVertexAttrib4ubvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UIVARBPROC __glewVertexAttrib4uivARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4USVARBPROC __glewVertexAttrib4usvARB;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERARBPROC __glewVertexAttribPointerARB;
-
-GLEW_FUN_EXPORT PFNGLBINDATTRIBLOCATIONARBPROC __glewBindAttribLocationARB;
-GLEW_FUN_EXPORT PFNGLGETACTIVEATTRIBARBPROC __glewGetActiveAttribARB;
-GLEW_FUN_EXPORT PFNGLGETATTRIBLOCATIONARBPROC __glewGetAttribLocationARB;
-
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DARBPROC __glewWindowPos2dARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVARBPROC __glewWindowPos2dvARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FARBPROC __glewWindowPos2fARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVARBPROC __glewWindowPos2fvARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IARBPROC __glewWindowPos2iARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVARBPROC __glewWindowPos2ivARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SARBPROC __glewWindowPos2sARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVARBPROC __glewWindowPos2svARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DARBPROC __glewWindowPos3dARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVARBPROC __glewWindowPos3dvARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FARBPROC __glewWindowPos3fARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVARBPROC __glewWindowPos3fvARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IARBPROC __glewWindowPos3iARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVARBPROC __glewWindowPos3ivARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SARBPROC __glewWindowPos3sARB;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVARBPROC __glewWindowPos3svARB;
-
-GLEW_FUN_EXPORT PFNGLDRAWBUFFERSATIPROC __glewDrawBuffersATI;
-
-GLEW_FUN_EXPORT PFNGLDRAWELEMENTARRAYATIPROC __glewDrawElementArrayATI;
-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTARRAYATIPROC __glewDrawRangeElementArrayATI;
-GLEW_FUN_EXPORT PFNGLELEMENTPOINTERATIPROC __glewElementPointerATI;
-
-GLEW_FUN_EXPORT PFNGLGETTEXBUMPPARAMETERFVATIPROC __glewGetTexBumpParameterfvATI;
-GLEW_FUN_EXPORT PFNGLGETTEXBUMPPARAMETERIVATIPROC __glewGetTexBumpParameterivATI;
-GLEW_FUN_EXPORT PFNGLTEXBUMPPARAMETERFVATIPROC __glewTexBumpParameterfvATI;
-GLEW_FUN_EXPORT PFNGLTEXBUMPPARAMETERIVATIPROC __glewTexBumpParameterivATI;
-
-GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP1ATIPROC __glewAlphaFragmentOp1ATI;
-GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP2ATIPROC __glewAlphaFragmentOp2ATI;
-GLEW_FUN_EXPORT PFNGLALPHAFRAGMENTOP3ATIPROC __glewAlphaFragmentOp3ATI;
-GLEW_FUN_EXPORT PFNGLBEGINFRAGMENTSHADERATIPROC __glewBeginFragmentShaderATI;
-GLEW_FUN_EXPORT PFNGLBINDFRAGMENTSHADERATIPROC __glewBindFragmentShaderATI;
-GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP1ATIPROC __glewColorFragmentOp1ATI;
-GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP2ATIPROC __glewColorFragmentOp2ATI;
-GLEW_FUN_EXPORT PFNGLCOLORFRAGMENTOP3ATIPROC __glewColorFragmentOp3ATI;
-GLEW_FUN_EXPORT PFNGLDELETEFRAGMENTSHADERATIPROC __glewDeleteFragmentShaderATI;
-GLEW_FUN_EXPORT PFNGLENDFRAGMENTSHADERATIPROC __glewEndFragmentShaderATI;
-GLEW_FUN_EXPORT PFNGLGENFRAGMENTSHADERSATIPROC __glewGenFragmentShadersATI;
-GLEW_FUN_EXPORT PFNGLPASSTEXCOORDATIPROC __glewPassTexCoordATI;
-GLEW_FUN_EXPORT PFNGLSAMPLEMAPATIPROC __glewSampleMapATI;
-GLEW_FUN_EXPORT PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glewSetFragmentShaderConstantATI;
-
-GLEW_FUN_EXPORT PFNGLMAPOBJECTBUFFERATIPROC __glewMapObjectBufferATI;
-GLEW_FUN_EXPORT PFNGLUNMAPOBJECTBUFFERATIPROC __glewUnmapObjectBufferATI;
-
-GLEW_FUN_EXPORT PFNGLPNTRIANGLESFATIPROC __glPNTrianglewesfATI;
-GLEW_FUN_EXPORT PFNGLPNTRIANGLESIATIPROC __glPNTrianglewesiATI;
-
-GLEW_FUN_EXPORT PFNGLSTENCILFUNCSEPARATEATIPROC __glewStencilFuncSeparateATI;
-GLEW_FUN_EXPORT PFNGLSTENCILOPSEPARATEATIPROC __glewStencilOpSeparateATI;
-
-GLEW_FUN_EXPORT PFNGLARRAYOBJECTATIPROC __glewArrayObjectATI;
-GLEW_FUN_EXPORT PFNGLFREEOBJECTBUFFERATIPROC __glewFreeObjectBufferATI;
-GLEW_FUN_EXPORT PFNGLGETARRAYOBJECTFVATIPROC __glewGetArrayObjectfvATI;
-GLEW_FUN_EXPORT PFNGLGETARRAYOBJECTIVATIPROC __glewGetArrayObjectivATI;
-GLEW_FUN_EXPORT PFNGLGETOBJECTBUFFERFVATIPROC __glewGetObjectBufferfvATI;
-GLEW_FUN_EXPORT PFNGLGETOBJECTBUFFERIVATIPROC __glewGetObjectBufferivATI;
-GLEW_FUN_EXPORT PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glewGetVariantArrayObjectfvATI;
-GLEW_FUN_EXPORT PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glewGetVariantArrayObjectivATI;
-GLEW_FUN_EXPORT PFNGLISOBJECTBUFFERATIPROC __glewIsObjectBufferATI;
-GLEW_FUN_EXPORT PFNGLNEWOBJECTBUFFERATIPROC __glewNewObjectBufferATI;
-GLEW_FUN_EXPORT PFNGLUPDATEOBJECTBUFFERATIPROC __glewUpdateObjectBufferATI;
-GLEW_FUN_EXPORT PFNGLVARIANTARRAYOBJECTATIPROC __glewVariantArrayObjectATI;
-
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glewGetVertexAttribArrayObjectfvATI;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glewGetVertexAttribArrayObjectivATI;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glewVertexAttribArrayObjectATI;
-
-GLEW_FUN_EXPORT PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glewClientActiveVertexStreamATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3BATIPROC __glewNormalStream3bATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3BVATIPROC __glewNormalStream3bvATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3DATIPROC __glewNormalStream3dATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3DVATIPROC __glewNormalStream3dvATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3FATIPROC __glewNormalStream3fATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3FVATIPROC __glewNormalStream3fvATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3IATIPROC __glewNormalStream3iATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3IVATIPROC __glewNormalStream3ivATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3SATIPROC __glewNormalStream3sATI;
-GLEW_FUN_EXPORT PFNGLNORMALSTREAM3SVATIPROC __glewNormalStream3svATI;
-GLEW_FUN_EXPORT PFNGLVERTEXBLENDENVFATIPROC __glewVertexBlendEnvfATI;
-GLEW_FUN_EXPORT PFNGLVERTEXBLENDENVIATIPROC __glewVertexBlendEnviATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2DATIPROC __glewVertexStream2dATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2DVATIPROC __glewVertexStream2dvATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2FATIPROC __glewVertexStream2fATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2FVATIPROC __glewVertexStream2fvATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2IATIPROC __glewVertexStream2iATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2IVATIPROC __glewVertexStream2ivATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2SATIPROC __glewVertexStream2sATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM2SVATIPROC __glewVertexStream2svATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3DATIPROC __glewVertexStream3dATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3DVATIPROC __glewVertexStream3dvATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3FATIPROC __glewVertexStream3fATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3FVATIPROC __glewVertexStream3fvATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3IATIPROC __glewVertexStream3iATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3IVATIPROC __glewVertexStream3ivATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3SATIPROC __glewVertexStream3sATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM3SVATIPROC __glewVertexStream3svATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4DATIPROC __glewVertexStream4dATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4DVATIPROC __glewVertexStream4dvATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4FATIPROC __glewVertexStream4fATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4FVATIPROC __glewVertexStream4fvATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4IATIPROC __glewVertexStream4iATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4IVATIPROC __glewVertexStream4ivATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4SATIPROC __glewVertexStream4sATI;
-GLEW_FUN_EXPORT PFNGLVERTEXSTREAM4SVATIPROC __glewVertexStream4svATI;
-
-GLEW_FUN_EXPORT PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glewGetUniformBufferSizeEXT;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMOFFSETEXTPROC __glewGetUniformOffsetEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORMBUFFEREXTPROC __glewUniformBufferEXT;
-
-GLEW_FUN_EXPORT PFNGLBLENDCOLOREXTPROC __glewBlendColorEXT;
-
-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONSEPARATEEXTPROC __glewBlendEquationSeparateEXT;
-
-GLEW_FUN_EXPORT PFNGLBLENDFUNCSEPARATEEXTPROC __glewBlendFuncSeparateEXT;
-
-GLEW_FUN_EXPORT PFNGLBLENDEQUATIONEXTPROC __glewBlendEquationEXT;
-
-GLEW_FUN_EXPORT PFNGLCOLORSUBTABLEEXTPROC __glewColorSubTableEXT;
-GLEW_FUN_EXPORT PFNGLCOPYCOLORSUBTABLEEXTPROC __glewCopyColorSubTableEXT;
-
-GLEW_FUN_EXPORT PFNGLLOCKARRAYSEXTPROC __glewLockArraysEXT;
-GLEW_FUN_EXPORT PFNGLUNLOCKARRAYSEXTPROC __glewUnlockArraysEXT;
-
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER1DEXTPROC __glewConvolutionFilter1DEXT;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONFILTER2DEXTPROC __glewConvolutionFilter2DEXT;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFEXTPROC __glewConvolutionParameterfEXT;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glewConvolutionParameterfvEXT;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIEXTPROC __glewConvolutionParameteriEXT;
-GLEW_FUN_EXPORT PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glewConvolutionParameterivEXT;
-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glewCopyConvolutionFilter1DEXT;
-GLEW_FUN_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glewCopyConvolutionFilter2DEXT;
-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONFILTEREXTPROC __glewGetConvolutionFilterEXT;
-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glewGetConvolutionParameterfvEXT;
-GLEW_FUN_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glewGetConvolutionParameterivEXT;
-GLEW_FUN_EXPORT PFNGLGETSEPARABLEFILTEREXTPROC __glewGetSeparableFilterEXT;
-GLEW_FUN_EXPORT PFNGLSEPARABLEFILTER2DEXTPROC __glewSeparableFilter2DEXT;
-
-GLEW_FUN_EXPORT PFNGLBINORMALPOINTEREXTPROC __glewBinormalPointerEXT;
-GLEW_FUN_EXPORT PFNGLTANGENTPOINTEREXTPROC __glewTangentPointerEXT;
-
-GLEW_FUN_EXPORT PFNGLCOPYTEXIMAGE1DEXTPROC __glewCopyTexImage1DEXT;
-GLEW_FUN_EXPORT PFNGLCOPYTEXIMAGE2DEXTPROC __glewCopyTexImage2DEXT;
-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glewCopyTexSubImage1DEXT;
-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glewCopyTexSubImage2DEXT;
-GLEW_FUN_EXPORT PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glewCopyTexSubImage3DEXT;
-
-GLEW_FUN_EXPORT PFNGLCULLPARAMETERDVEXTPROC __glewCullParameterdvEXT;
-GLEW_FUN_EXPORT PFNGLCULLPARAMETERFVEXTPROC __glewCullParameterfvEXT;
-
-GLEW_FUN_EXPORT PFNGLDEPTHBOUNDSEXTPROC __glewDepthBoundsEXT;
-
-GLEW_FUN_EXPORT PFNGLCOLORMASKINDEXEDEXTPROC __glewColorMaskIndexedEXT;
-GLEW_FUN_EXPORT PFNGLDISABLEINDEXEDEXTPROC __glewDisableIndexedEXT;
-GLEW_FUN_EXPORT PFNGLENABLEINDEXEDEXTPROC __glewEnableIndexedEXT;
-GLEW_FUN_EXPORT PFNGLGETBOOLEANINDEXEDVEXTPROC __glewGetBooleanIndexedvEXT;
-GLEW_FUN_EXPORT PFNGLGETINTEGERINDEXEDVEXTPROC __glewGetIntegerIndexedvEXT;
-GLEW_FUN_EXPORT PFNGLISENABLEDINDEXEDEXTPROC __glewIsEnabledIndexedEXT;
-
-GLEW_FUN_EXPORT PFNGLDRAWARRAYSINSTANCEDEXTPROC __glewDrawArraysInstancedEXT;
-GLEW_FUN_EXPORT PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glewDrawElementsInstancedEXT;
-
-GLEW_FUN_EXPORT PFNGLDRAWRANGEELEMENTSEXTPROC __glewDrawRangeElementsEXT;
-
-GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTEREXTPROC __glewFogCoordPointerEXT;
-GLEW_FUN_EXPORT PFNGLFOGCOORDDEXTPROC __glewFogCoorddEXT;
-GLEW_FUN_EXPORT PFNGLFOGCOORDDVEXTPROC __glewFogCoorddvEXT;
-GLEW_FUN_EXPORT PFNGLFOGCOORDFEXTPROC __glewFogCoordfEXT;
-GLEW_FUN_EXPORT PFNGLFOGCOORDFVEXTPROC __glewFogCoordfvEXT;
-
-GLEW_FUN_EXPORT PFNGLFRAGMENTCOLORMATERIALEXTPROC __glewFragmentColorMaterialEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFEXTPROC __glewFragmentLightModelfEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFVEXTPROC __glewFragmentLightModelfvEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIEXTPROC __glewFragmentLightModeliEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIVEXTPROC __glewFragmentLightModelivEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFEXTPROC __glewFragmentLightfEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFVEXTPROC __glewFragmentLightfvEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIEXTPROC __glewFragmentLightiEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIVEXTPROC __glewFragmentLightivEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFEXTPROC __glewFragmentMaterialfEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFVEXTPROC __glewFragmentMaterialfvEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIEXTPROC __glewFragmentMaterialiEXT;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIVEXTPROC __glewFragmentMaterialivEXT;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTFVEXTPROC __glewGetFragmentLightfvEXT;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTIVEXTPROC __glewGetFragmentLightivEXT;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALFVEXTPROC __glewGetFragmentMaterialfvEXT;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALIVEXTPROC __glewGetFragmentMaterialivEXT;
-GLEW_FUN_EXPORT PFNGLLIGHTENVIEXTPROC __glewLightEnviEXT;
-
-GLEW_FUN_EXPORT PFNGLBLITFRAMEBUFFEREXTPROC __glewBlitFramebufferEXT;
-
-GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewRenderbufferStorageMultisampleEXT;
-
-GLEW_FUN_EXPORT PFNGLBINDFRAMEBUFFEREXTPROC __glewBindFramebufferEXT;
-GLEW_FUN_EXPORT PFNGLBINDRENDERBUFFEREXTPROC __glewBindRenderbufferEXT;
-GLEW_FUN_EXPORT PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glewCheckFramebufferStatusEXT;
-GLEW_FUN_EXPORT PFNGLDELETEFRAMEBUFFERSEXTPROC __glewDeleteFramebuffersEXT;
-GLEW_FUN_EXPORT PFNGLDELETERENDERBUFFERSEXTPROC __glewDeleteRenderbuffersEXT;
-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glewFramebufferRenderbufferEXT;
-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glewFramebufferTexture1DEXT;
-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glewFramebufferTexture2DEXT;
-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glewFramebufferTexture3DEXT;
-GLEW_FUN_EXPORT PFNGLGENFRAMEBUFFERSEXTPROC __glewGenFramebuffersEXT;
-GLEW_FUN_EXPORT PFNGLGENRENDERBUFFERSEXTPROC __glewGenRenderbuffersEXT;
-GLEW_FUN_EXPORT PFNGLGENERATEMIPMAPEXTPROC __glewGenerateMipmapEXT;
-GLEW_FUN_EXPORT PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetFramebufferAttachmentParameterivEXT;
-GLEW_FUN_EXPORT PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glewGetRenderbufferParameterivEXT;
-GLEW_FUN_EXPORT PFNGLISFRAMEBUFFEREXTPROC __glewIsFramebufferEXT;
-GLEW_FUN_EXPORT PFNGLISRENDERBUFFEREXTPROC __glewIsRenderbufferEXT;
-GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEEXTPROC __glewRenderbufferStorageEXT;
-
-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREEXTPROC __glewFramebufferTextureEXT;
-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glewFramebufferTextureFaceEXT;
-GLEW_FUN_EXPORT PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glewFramebufferTextureLayerEXT;
-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERIEXTPROC __glewProgramParameteriEXT;
-
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glewProgramEnvParameters4fvEXT;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glewProgramLocalParameters4fvEXT;
-
-GLEW_FUN_EXPORT PFNGLBINDFRAGDATALOCATIONEXTPROC __glewBindFragDataLocationEXT;
-GLEW_FUN_EXPORT PFNGLGETFRAGDATALOCATIONEXTPROC __glewGetFragDataLocationEXT;
-GLEW_FUN_EXPORT PFNGLGETUNIFORMUIVEXTPROC __glewGetUniformuivEXT;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIIVEXTPROC __glewGetVertexAttribIivEXT;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIUIVEXTPROC __glewGetVertexAttribIuivEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM1UIEXTPROC __glewUniform1uiEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM1UIVEXTPROC __glewUniform1uivEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM2UIEXTPROC __glewUniform2uiEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM2UIVEXTPROC __glewUniform2uivEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM3UIEXTPROC __glewUniform3uiEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM3UIVEXTPROC __glewUniform3uivEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM4UIEXTPROC __glewUniform4uiEXT;
-GLEW_FUN_EXPORT PFNGLUNIFORM4UIVEXTPROC __glewUniform4uivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IEXTPROC __glewVertexAttribI1iEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1IVEXTPROC __glewVertexAttribI1ivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIEXTPROC __glewVertexAttribI1uiEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI1UIVEXTPROC __glewVertexAttribI1uivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IEXTPROC __glewVertexAttribI2iEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2IVEXTPROC __glewVertexAttribI2ivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIEXTPROC __glewVertexAttribI2uiEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI2UIVEXTPROC __glewVertexAttribI2uivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IEXTPROC __glewVertexAttribI3iEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3IVEXTPROC __glewVertexAttribI3ivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIEXTPROC __glewVertexAttribI3uiEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI3UIVEXTPROC __glewVertexAttribI3uivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4BVEXTPROC __glewVertexAttribI4bvEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IEXTPROC __glewVertexAttribI4iEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4IVEXTPROC __glewVertexAttribI4ivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4SVEXTPROC __glewVertexAttribI4svEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UBVEXTPROC __glewVertexAttribI4ubvEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIEXTPROC __glewVertexAttribI4uiEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4UIVEXTPROC __glewVertexAttribI4uivEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBI4USVEXTPROC __glewVertexAttribI4usvEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTEREXTPROC __glewVertexAttribIPointerEXT;
-
-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMEXTPROC __glewGetHistogramEXT;
-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glewGetHistogramParameterfvEXT;
-GLEW_FUN_EXPORT PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glewGetHistogramParameterivEXT;
-GLEW_FUN_EXPORT PFNGLGETMINMAXEXTPROC __glewGetMinmaxEXT;
-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERFVEXTPROC __glewGetMinmaxParameterfvEXT;
-GLEW_FUN_EXPORT PFNGLGETMINMAXPARAMETERIVEXTPROC __glewGetMinmaxParameterivEXT;
-GLEW_FUN_EXPORT PFNGLHISTOGRAMEXTPROC __glewHistogramEXT;
-GLEW_FUN_EXPORT PFNGLMINMAXEXTPROC __glewMinmaxEXT;
-GLEW_FUN_EXPORT PFNGLRESETHISTOGRAMEXTPROC __glewResetHistogramEXT;
-GLEW_FUN_EXPORT PFNGLRESETMINMAXEXTPROC __glewResetMinmaxEXT;
-
-GLEW_FUN_EXPORT PFNGLINDEXFUNCEXTPROC __glewIndexFuncEXT;
-
-GLEW_FUN_EXPORT PFNGLINDEXMATERIALEXTPROC __glewIndexMaterialEXT;
-
-GLEW_FUN_EXPORT PFNGLAPPLYTEXTUREEXTPROC __glewApplyTextureEXT;
-GLEW_FUN_EXPORT PFNGLTEXTURELIGHTEXTPROC __glewTextureLightEXT;
-GLEW_FUN_EXPORT PFNGLTEXTUREMATERIALEXTPROC __glewTextureMaterialEXT;
-
-GLEW_FUN_EXPORT PFNGLMULTIDRAWARRAYSEXTPROC __glewMultiDrawArraysEXT;
-GLEW_FUN_EXPORT PFNGLMULTIDRAWELEMENTSEXTPROC __glewMultiDrawElementsEXT;
-
-GLEW_FUN_EXPORT PFNGLSAMPLEMASKEXTPROC __glewSampleMaskEXT;
-GLEW_FUN_EXPORT PFNGLSAMPLEPATTERNEXTPROC __glewSamplePatternEXT;
-
-GLEW_FUN_EXPORT PFNGLCOLORTABLEEXTPROC __glewColorTableEXT;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEEXTPROC __glewGetColorTableEXT;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glewGetColorTableParameterfvEXT;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glewGetColorTableParameterivEXT;
-
-GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glewGetPixelTransformParameterfvEXT;
-GLEW_FUN_EXPORT PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glewGetPixelTransformParameterivEXT;
-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glewPixelTransformParameterfEXT;
-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glewPixelTransformParameterfvEXT;
-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glewPixelTransformParameteriEXT;
-GLEW_FUN_EXPORT PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glewPixelTransformParameterivEXT;
-
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFEXTPROC __glewPointParameterfEXT;
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERFVEXTPROC __glewPointParameterfvEXT;
-
-GLEW_FUN_EXPORT PFNGLPOLYGONOFFSETEXTPROC __glewPolygonOffsetEXT;
-
-GLEW_FUN_EXPORT PFNGLBEGINSCENEEXTPROC __glewBeginSceneEXT;
-GLEW_FUN_EXPORT PFNGLENDSCENEEXTPROC __glewEndSceneEXT;
-
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BEXTPROC __glewSecondaryColor3bEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3BVEXTPROC __glewSecondaryColor3bvEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DEXTPROC __glewSecondaryColor3dEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3DVEXTPROC __glewSecondaryColor3dvEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FEXTPROC __glewSecondaryColor3fEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3FVEXTPROC __glewSecondaryColor3fvEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IEXTPROC __glewSecondaryColor3iEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3IVEXTPROC __glewSecondaryColor3ivEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SEXTPROC __glewSecondaryColor3sEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3SVEXTPROC __glewSecondaryColor3svEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBEXTPROC __glewSecondaryColor3ubEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UBVEXTPROC __glewSecondaryColor3ubvEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIEXTPROC __glewSecondaryColor3uiEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3UIVEXTPROC __glewSecondaryColor3uivEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USEXTPROC __glewSecondaryColor3usEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3USVEXTPROC __glewSecondaryColor3usvEXT;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTEREXTPROC __glewSecondaryColorPointerEXT;
-
-GLEW_FUN_EXPORT PFNGLACTIVESTENCILFACEEXTPROC __glewActiveStencilFaceEXT;
-
-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE1DEXTPROC __glewTexSubImage1DEXT;
-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE2DEXTPROC __glewTexSubImage2DEXT;
-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE3DEXTPROC __glewTexSubImage3DEXT;
-
-GLEW_FUN_EXPORT PFNGLTEXIMAGE3DEXTPROC __glewTexImage3DEXT;
-
-GLEW_FUN_EXPORT PFNGLTEXBUFFEREXTPROC __glewTexBufferEXT;
-
-GLEW_FUN_EXPORT PFNGLCLEARCOLORIIEXTPROC __glewClearColorIiEXT;
-GLEW_FUN_EXPORT PFNGLCLEARCOLORIUIEXTPROC __glewClearColorIuiEXT;
-GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIIVEXTPROC __glewGetTexParameterIivEXT;
-GLEW_FUN_EXPORT PFNGLGETTEXPARAMETERIUIVEXTPROC __glewGetTexParameterIuivEXT;
-GLEW_FUN_EXPORT PFNGLTEXPARAMETERIIVEXTPROC __glewTexParameterIivEXT;
-GLEW_FUN_EXPORT PFNGLTEXPARAMETERIUIVEXTPROC __glewTexParameterIuivEXT;
-
-GLEW_FUN_EXPORT PFNGLARETEXTURESRESIDENTEXTPROC __glewAreTexturesResidentEXT;
-GLEW_FUN_EXPORT PFNGLBINDTEXTUREEXTPROC __glewBindTextureEXT;
-GLEW_FUN_EXPORT PFNGLDELETETEXTURESEXTPROC __glewDeleteTexturesEXT;
-GLEW_FUN_EXPORT PFNGLGENTEXTURESEXTPROC __glewGenTexturesEXT;
-GLEW_FUN_EXPORT PFNGLISTEXTUREEXTPROC __glewIsTextureEXT;
-GLEW_FUN_EXPORT PFNGLPRIORITIZETEXTURESEXTPROC __glewPrioritizeTexturesEXT;
-
-GLEW_FUN_EXPORT PFNGLTEXTURENORMALEXTPROC __glewTextureNormalEXT;
-
-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTI64VEXTPROC __glewGetQueryObjecti64vEXT;
-GLEW_FUN_EXPORT PFNGLGETQUERYOBJECTUI64VEXTPROC __glewGetQueryObjectui64vEXT;
-
-GLEW_FUN_EXPORT PFNGLARRAYELEMENTEXTPROC __glewArrayElementEXT;
-GLEW_FUN_EXPORT PFNGLCOLORPOINTEREXTPROC __glewColorPointerEXT;
-GLEW_FUN_EXPORT PFNGLDRAWARRAYSEXTPROC __glewDrawArraysEXT;
-GLEW_FUN_EXPORT PFNGLEDGEFLAGPOINTEREXTPROC __glewEdgeFlagPointerEXT;
-GLEW_FUN_EXPORT PFNGLGETPOINTERVEXTPROC __glewGetPointervEXT;
-GLEW_FUN_EXPORT PFNGLINDEXPOINTEREXTPROC __glewIndexPointerEXT;
-GLEW_FUN_EXPORT PFNGLNORMALPOINTEREXTPROC __glewNormalPointerEXT;
-GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTEREXTPROC __glewTexCoordPointerEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXPOINTEREXTPROC __glewVertexPointerEXT;
-
-GLEW_FUN_EXPORT PFNGLBEGINVERTEXSHADEREXTPROC __glewBeginVertexShaderEXT;
-GLEW_FUN_EXPORT PFNGLBINDLIGHTPARAMETEREXTPROC __glewBindLightParameterEXT;
-GLEW_FUN_EXPORT PFNGLBINDMATERIALPARAMETEREXTPROC __glewBindMaterialParameterEXT;
-GLEW_FUN_EXPORT PFNGLBINDPARAMETEREXTPROC __glewBindParameterEXT;
-GLEW_FUN_EXPORT PFNGLBINDTEXGENPARAMETEREXTPROC __glewBindTexGenParameterEXT;
-GLEW_FUN_EXPORT PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glewBindTextureUnitParameterEXT;
-GLEW_FUN_EXPORT PFNGLBINDVERTEXSHADEREXTPROC __glewBindVertexShaderEXT;
-GLEW_FUN_EXPORT PFNGLDELETEVERTEXSHADEREXTPROC __glewDeleteVertexShaderEXT;
-GLEW_FUN_EXPORT PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glewDisableVariantClientStateEXT;
-GLEW_FUN_EXPORT PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glewEnableVariantClientStateEXT;
-GLEW_FUN_EXPORT PFNGLENDVERTEXSHADEREXTPROC __glewEndVertexShaderEXT;
-GLEW_FUN_EXPORT PFNGLEXTRACTCOMPONENTEXTPROC __glewExtractComponentEXT;
-GLEW_FUN_EXPORT PFNGLGENSYMBOLSEXTPROC __glewGenSymbolsEXT;
-GLEW_FUN_EXPORT PFNGLGENVERTEXSHADERSEXTPROC __glewGenVertexShadersEXT;
-GLEW_FUN_EXPORT PFNGLGETINVARIANTBOOLEANVEXTPROC __glewGetInvariantBooleanvEXT;
-GLEW_FUN_EXPORT PFNGLGETINVARIANTFLOATVEXTPROC __glewGetInvariantFloatvEXT;
-GLEW_FUN_EXPORT PFNGLGETINVARIANTINTEGERVEXTPROC __glewGetInvariantIntegervEXT;
-GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glewGetLocalConstantBooleanvEXT;
-GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glewGetLocalConstantFloatvEXT;
-GLEW_FUN_EXPORT PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glewGetLocalConstantIntegervEXT;
-GLEW_FUN_EXPORT PFNGLGETVARIANTBOOLEANVEXTPROC __glewGetVariantBooleanvEXT;
-GLEW_FUN_EXPORT PFNGLGETVARIANTFLOATVEXTPROC __glewGetVariantFloatvEXT;
-GLEW_FUN_EXPORT PFNGLGETVARIANTINTEGERVEXTPROC __glewGetVariantIntegervEXT;
-GLEW_FUN_EXPORT PFNGLGETVARIANTPOINTERVEXTPROC __glewGetVariantPointervEXT;
-GLEW_FUN_EXPORT PFNGLINSERTCOMPONENTEXTPROC __glewInsertComponentEXT;
-GLEW_FUN_EXPORT PFNGLISVARIANTENABLEDEXTPROC __glewIsVariantEnabledEXT;
-GLEW_FUN_EXPORT PFNGLSETINVARIANTEXTPROC __glewSetInvariantEXT;
-GLEW_FUN_EXPORT PFNGLSETLOCALCONSTANTEXTPROC __glewSetLocalConstantEXT;
-GLEW_FUN_EXPORT PFNGLSHADEROP1EXTPROC __glewShaderOp1EXT;
-GLEW_FUN_EXPORT PFNGLSHADEROP2EXTPROC __glewShaderOp2EXT;
-GLEW_FUN_EXPORT PFNGLSHADEROP3EXTPROC __glewShaderOp3EXT;
-GLEW_FUN_EXPORT PFNGLSWIZZLEEXTPROC __glewSwizzleEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTPOINTEREXTPROC __glewVariantPointerEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTBVEXTPROC __glewVariantbvEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTDVEXTPROC __glewVariantdvEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTFVEXTPROC __glewVariantfvEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTIVEXTPROC __glewVariantivEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTSVEXTPROC __glewVariantsvEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTUBVEXTPROC __glewVariantubvEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTUIVEXTPROC __glewVariantuivEXT;
-GLEW_FUN_EXPORT PFNGLVARIANTUSVEXTPROC __glewVariantusvEXT;
-GLEW_FUN_EXPORT PFNGLWRITEMASKEXTPROC __glewWriteMaskEXT;
-
-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTPOINTEREXTPROC __glewVertexWeightPointerEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTFEXTPROC __glewVertexWeightfEXT;
-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTFVEXTPROC __glewVertexWeightfvEXT;
-
-GLEW_FUN_EXPORT PFNGLFRAMETERMINATORGREMEDYPROC __glewFrameTerminatorGREMEDY;
-
-GLEW_FUN_EXPORT PFNGLSTRINGMARKERGREMEDYPROC __glewStringMarkerGREMEDY;
-
-GLEW_FUN_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glewGetImageTransformParameterfvHP;
-GLEW_FUN_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glewGetImageTransformParameterivHP;
-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glewImageTransformParameterfHP;
-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glewImageTransformParameterfvHP;
-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glewImageTransformParameteriHP;
-GLEW_FUN_EXPORT PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glewImageTransformParameterivHP;
-
-GLEW_FUN_EXPORT PFNGLMULTIMODEDRAWARRAYSIBMPROC __glewMultiModeDrawArraysIBM;
-GLEW_FUN_EXPORT PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glewMultiModeDrawElementsIBM;
-
-GLEW_FUN_EXPORT PFNGLCOLORPOINTERLISTIBMPROC __glewColorPointerListIBM;
-GLEW_FUN_EXPORT PFNGLEDGEFLAGPOINTERLISTIBMPROC __glewEdgeFlagPointerListIBM;
-GLEW_FUN_EXPORT PFNGLFOGCOORDPOINTERLISTIBMPROC __glewFogCoordPointerListIBM;
-GLEW_FUN_EXPORT PFNGLINDEXPOINTERLISTIBMPROC __glewIndexPointerListIBM;
-GLEW_FUN_EXPORT PFNGLNORMALPOINTERLISTIBMPROC __glewNormalPointerListIBM;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glewSecondaryColorPointerListIBM;
-GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTERLISTIBMPROC __glewTexCoordPointerListIBM;
-GLEW_FUN_EXPORT PFNGLVERTEXPOINTERLISTIBMPROC __glewVertexPointerListIBM;
-
-GLEW_FUN_EXPORT PFNGLCOLORPOINTERVINTELPROC __glewColorPointervINTEL;
-GLEW_FUN_EXPORT PFNGLNORMALPOINTERVINTELPROC __glewNormalPointervINTEL;
-GLEW_FUN_EXPORT PFNGLTEXCOORDPOINTERVINTELPROC __glewTexCoordPointervINTEL;
-GLEW_FUN_EXPORT PFNGLVERTEXPOINTERVINTELPROC __glewVertexPointervINTEL;
-
-GLEW_FUN_EXPORT PFNGLTEXSCISSORFUNCINTELPROC __glewTexScissorFuncINTEL;
-GLEW_FUN_EXPORT PFNGLTEXSCISSORINTELPROC __glewTexScissorINTEL;
-
-GLEW_FUN_EXPORT PFNGLBUFFERREGIONENABLEDEXTPROC __glewBufferRegionEnabledEXT;
-GLEW_FUN_EXPORT PFNGLDELETEBUFFERREGIONEXTPROC __glewDeleteBufferRegionEXT;
-GLEW_FUN_EXPORT PFNGLDRAWBUFFERREGIONEXTPROC __glewDrawBufferRegionEXT;
-GLEW_FUN_EXPORT PFNGLNEWBUFFERREGIONEXTPROC __glewNewBufferRegionEXT;
-GLEW_FUN_EXPORT PFNGLREADBUFFERREGIONEXTPROC __glewReadBufferRegionEXT;
-
-GLEW_FUN_EXPORT PFNGLRESIZEBUFFERSMESAPROC __glewResizeBuffersMESA;
-
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DMESAPROC __glewWindowPos2dMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2DVMESAPROC __glewWindowPos2dvMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FMESAPROC __glewWindowPos2fMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2FVMESAPROC __glewWindowPos2fvMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IMESAPROC __glewWindowPos2iMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2IVMESAPROC __glewWindowPos2ivMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SMESAPROC __glewWindowPos2sMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS2SVMESAPROC __glewWindowPos2svMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DMESAPROC __glewWindowPos3dMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3DVMESAPROC __glewWindowPos3dvMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FMESAPROC __glewWindowPos3fMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3FVMESAPROC __glewWindowPos3fvMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IMESAPROC __glewWindowPos3iMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3IVMESAPROC __glewWindowPos3ivMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SMESAPROC __glewWindowPos3sMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS3SVMESAPROC __glewWindowPos3svMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4DMESAPROC __glewWindowPos4dMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4DVMESAPROC __glewWindowPos4dvMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4FMESAPROC __glewWindowPos4fMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4FVMESAPROC __glewWindowPos4fvMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4IMESAPROC __glewWindowPos4iMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4IVMESAPROC __glewWindowPos4ivMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4SMESAPROC __glewWindowPos4sMESA;
-GLEW_FUN_EXPORT PFNGLWINDOWPOS4SVMESAPROC __glewWindowPos4svMESA;
-
-GLEW_FUN_EXPORT PFNGLCLEARDEPTHDNVPROC __glewClearDepthdNV;
-GLEW_FUN_EXPORT PFNGLDEPTHBOUNDSDNVPROC __glewDepthBoundsdNV;
-GLEW_FUN_EXPORT PFNGLDEPTHRANGEDNVPROC __glewDepthRangedNV;
-
-GLEW_FUN_EXPORT PFNGLEVALMAPSNVPROC __glewEvalMapsNV;
-GLEW_FUN_EXPORT PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glewGetMapAttribParameterfvNV;
-GLEW_FUN_EXPORT PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glewGetMapAttribParameterivNV;
-GLEW_FUN_EXPORT PFNGLGETMAPCONTROLPOINTSNVPROC __glewGetMapControlPointsNV;
-GLEW_FUN_EXPORT PFNGLGETMAPPARAMETERFVNVPROC __glewGetMapParameterfvNV;
-GLEW_FUN_EXPORT PFNGLGETMAPPARAMETERIVNVPROC __glewGetMapParameterivNV;
-GLEW_FUN_EXPORT PFNGLMAPCONTROLPOINTSNVPROC __glewMapControlPointsNV;
-GLEW_FUN_EXPORT PFNGLMAPPARAMETERFVNVPROC __glewMapParameterfvNV;
-GLEW_FUN_EXPORT PFNGLMAPPARAMETERIVNVPROC __glewMapParameterivNV;
-
-GLEW_FUN_EXPORT PFNGLDELETEFENCESNVPROC __glewDeleteFencesNV;
-GLEW_FUN_EXPORT PFNGLFINISHFENCENVPROC __glewFinishFenceNV;
-GLEW_FUN_EXPORT PFNGLGENFENCESNVPROC __glewGenFencesNV;
-GLEW_FUN_EXPORT PFNGLGETFENCEIVNVPROC __glewGetFenceivNV;
-GLEW_FUN_EXPORT PFNGLISFENCENVPROC __glewIsFenceNV;
-GLEW_FUN_EXPORT PFNGLSETFENCENVPROC __glewSetFenceNV;
-GLEW_FUN_EXPORT PFNGLTESTFENCENVPROC __glewTestFenceNV;
-
-GLEW_FUN_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glewGetProgramNamedParameterdvNV;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glewGetProgramNamedParameterfvNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glewProgramNamedParameter4dNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glewProgramNamedParameter4dvNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glewProgramNamedParameter4fNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glewProgramNamedParameter4fvNV;
-
-GLEW_FUN_EXPORT PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glewRenderbufferStorageMultisampleCoverageNV;
-
-GLEW_FUN_EXPORT PFNGLPROGRAMVERTEXLIMITNVPROC __glewProgramVertexLimitNV;
-
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4INVPROC __glewProgramEnvParameterI4iNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glewProgramEnvParameterI4ivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4UINVPROC __glewProgramEnvParameterI4uiNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glewProgramEnvParameterI4uivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glewProgramEnvParametersI4ivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glewProgramEnvParametersI4uivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glewProgramLocalParameterI4iNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glewProgramLocalParameterI4ivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glewProgramLocalParameterI4uiNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glewProgramLocalParameterI4uivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glewProgramLocalParametersI4ivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glewProgramLocalParametersI4uivNV;
-
-GLEW_FUN_EXPORT PFNGLCOLOR3HNVPROC __glewColor3hNV;
-GLEW_FUN_EXPORT PFNGLCOLOR3HVNVPROC __glewColor3hvNV;
-GLEW_FUN_EXPORT PFNGLCOLOR4HNVPROC __glewColor4hNV;
-GLEW_FUN_EXPORT PFNGLCOLOR4HVNVPROC __glewColor4hvNV;
-GLEW_FUN_EXPORT PFNGLFOGCOORDHNVPROC __glewFogCoordhNV;
-GLEW_FUN_EXPORT PFNGLFOGCOORDHVNVPROC __glewFogCoordhvNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1HNVPROC __glewMultiTexCoord1hNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD1HVNVPROC __glewMultiTexCoord1hvNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2HNVPROC __glewMultiTexCoord2hNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD2HVNVPROC __glewMultiTexCoord2hvNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3HNVPROC __glewMultiTexCoord3hNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD3HVNVPROC __glewMultiTexCoord3hvNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4HNVPROC __glewMultiTexCoord4hNV;
-GLEW_FUN_EXPORT PFNGLMULTITEXCOORD4HVNVPROC __glewMultiTexCoord4hvNV;
-GLEW_FUN_EXPORT PFNGLNORMAL3HNVPROC __glewNormal3hNV;
-GLEW_FUN_EXPORT PFNGLNORMAL3HVNVPROC __glewNormal3hvNV;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3HNVPROC __glewSecondaryColor3hNV;
-GLEW_FUN_EXPORT PFNGLSECONDARYCOLOR3HVNVPROC __glewSecondaryColor3hvNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD1HNVPROC __glewTexCoord1hNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD1HVNVPROC __glewTexCoord1hvNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2HNVPROC __glewTexCoord2hNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2HVNVPROC __glewTexCoord2hvNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD3HNVPROC __glewTexCoord3hNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD3HVNVPROC __glewTexCoord3hvNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD4HNVPROC __glewTexCoord4hNV;
-GLEW_FUN_EXPORT PFNGLTEXCOORD4HVNVPROC __glewTexCoord4hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEX2HNVPROC __glewVertex2hNV;
-GLEW_FUN_EXPORT PFNGLVERTEX2HVNVPROC __glewVertex2hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEX3HNVPROC __glewVertex3hNV;
-GLEW_FUN_EXPORT PFNGLVERTEX3HVNVPROC __glewVertex3hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEX4HNVPROC __glewVertex4hNV;
-GLEW_FUN_EXPORT PFNGLVERTEX4HVNVPROC __glewVertex4hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1HNVPROC __glewVertexAttrib1hNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1HVNVPROC __glewVertexAttrib1hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2HNVPROC __glewVertexAttrib2hNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2HVNVPROC __glewVertexAttrib2hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3HNVPROC __glewVertexAttrib3hNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3HVNVPROC __glewVertexAttrib3hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4HNVPROC __glewVertexAttrib4hNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4HVNVPROC __glewVertexAttrib4hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1HVNVPROC __glewVertexAttribs1hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2HVNVPROC __glewVertexAttribs2hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3HVNVPROC __glewVertexAttribs3hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4HVNVPROC __glewVertexAttribs4hvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTHNVPROC __glewVertexWeighthNV;
-GLEW_FUN_EXPORT PFNGLVERTEXWEIGHTHVNVPROC __glewVertexWeighthvNV;
-
-GLEW_FUN_EXPORT PFNGLBEGINOCCLUSIONQUERYNVPROC __glewBeginOcclusionQueryNV;
-GLEW_FUN_EXPORT PFNGLDELETEOCCLUSIONQUERIESNVPROC __glewDeleteOcclusionQueriesNV;
-GLEW_FUN_EXPORT PFNGLENDOCCLUSIONQUERYNVPROC __glewEndOcclusionQueryNV;
-GLEW_FUN_EXPORT PFNGLGENOCCLUSIONQUERIESNVPROC __glewGenOcclusionQueriesNV;
-GLEW_FUN_EXPORT PFNGLGETOCCLUSIONQUERYIVNVPROC __glewGetOcclusionQueryivNV;
-GLEW_FUN_EXPORT PFNGLGETOCCLUSIONQUERYUIVNVPROC __glewGetOcclusionQueryuivNV;
-GLEW_FUN_EXPORT PFNGLISOCCLUSIONQUERYNVPROC __glewIsOcclusionQueryNV;
-
-GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glewProgramBufferParametersIivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glewProgramBufferParametersIuivNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glewProgramBufferParametersfvNV;
-
-GLEW_FUN_EXPORT PFNGLFLUSHPIXELDATARANGENVPROC __glewFlushPixelDataRangeNV;
-GLEW_FUN_EXPORT PFNGLPIXELDATARANGENVPROC __glewPixelDataRangeNV;
-
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERINVPROC __glewPointParameteriNV;
-GLEW_FUN_EXPORT PFNGLPOINTPARAMETERIVNVPROC __glewPointParameterivNV;
-
-GLEW_FUN_EXPORT PFNGLPRIMITIVERESTARTINDEXNVPROC __glewPrimitiveRestartIndexNV;
-GLEW_FUN_EXPORT PFNGLPRIMITIVERESTARTNVPROC __glewPrimitiveRestartNV;
-
-GLEW_FUN_EXPORT PFNGLCOMBINERINPUTNVPROC __glewCombinerInputNV;
-GLEW_FUN_EXPORT PFNGLCOMBINEROUTPUTNVPROC __glewCombinerOutputNV;
-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERFNVPROC __glewCombinerParameterfNV;
-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERFVNVPROC __glewCombinerParameterfvNV;
-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERINVPROC __glewCombinerParameteriNV;
-GLEW_FUN_EXPORT PFNGLCOMBINERPARAMETERIVNVPROC __glewCombinerParameterivNV;
-GLEW_FUN_EXPORT PFNGLFINALCOMBINERINPUTNVPROC __glewFinalCombinerInputNV;
-GLEW_FUN_EXPORT PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glewGetCombinerInputParameterfvNV;
-GLEW_FUN_EXPORT PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glewGetCombinerInputParameterivNV;
-GLEW_FUN_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glewGetCombinerOutputParameterfvNV;
-GLEW_FUN_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glewGetCombinerOutputParameterivNV;
-GLEW_FUN_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glewGetFinalCombinerInputParameterfvNV;
-GLEW_FUN_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glewGetFinalCombinerInputParameterivNV;
-
-GLEW_FUN_EXPORT PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glewCombinerStageParameterfvNV;
-GLEW_FUN_EXPORT PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glewGetCombinerStageParameterfvNV;
-
-GLEW_FUN_EXPORT PFNGLACTIVEVARYINGNVPROC __glewActiveVaryingNV;
-GLEW_FUN_EXPORT PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glewBeginTransformFeedbackNV;
-GLEW_FUN_EXPORT PFNGLBINDBUFFERBASENVPROC __glewBindBufferBaseNV;
-GLEW_FUN_EXPORT PFNGLBINDBUFFEROFFSETNVPROC __glewBindBufferOffsetNV;
-GLEW_FUN_EXPORT PFNGLBINDBUFFERRANGENVPROC __glewBindBufferRangeNV;
-GLEW_FUN_EXPORT PFNGLENDTRANSFORMFEEDBACKNVPROC __glewEndTransformFeedbackNV;
-GLEW_FUN_EXPORT PFNGLGETACTIVEVARYINGNVPROC __glewGetActiveVaryingNV;
-GLEW_FUN_EXPORT PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glewGetTransformFeedbackVaryingNV;
-GLEW_FUN_EXPORT PFNGLGETVARYINGLOCATIONNVPROC __glewGetVaryingLocationNV;
-GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glewTransformFeedbackAttribsNV;
-GLEW_FUN_EXPORT PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glewTransformFeedbackVaryingsNV;
-
-GLEW_FUN_EXPORT PFNGLFLUSHVERTEXARRAYRANGENVPROC __glewFlushVertexArrayRangeNV;
-GLEW_FUN_EXPORT PFNGLVERTEXARRAYRANGENVPROC __glewVertexArrayRangeNV;
-
-GLEW_FUN_EXPORT PFNGLAREPROGRAMSRESIDENTNVPROC __glewAreProgramsResidentNV;
-GLEW_FUN_EXPORT PFNGLBINDPROGRAMNVPROC __glewBindProgramNV;
-GLEW_FUN_EXPORT PFNGLDELETEPROGRAMSNVPROC __glewDeleteProgramsNV;
-GLEW_FUN_EXPORT PFNGLEXECUTEPROGRAMNVPROC __glewExecuteProgramNV;
-GLEW_FUN_EXPORT PFNGLGENPROGRAMSNVPROC __glewGenProgramsNV;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMPARAMETERDVNVPROC __glewGetProgramParameterdvNV;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMPARAMETERFVNVPROC __glewGetProgramParameterfvNV;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMSTRINGNVPROC __glewGetProgramStringNV;
-GLEW_FUN_EXPORT PFNGLGETPROGRAMIVNVPROC __glewGetProgramivNV;
-GLEW_FUN_EXPORT PFNGLGETTRACKMATRIXIVNVPROC __glewGetTrackMatrixivNV;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glewGetVertexAttribPointervNV;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBDVNVPROC __glewGetVertexAttribdvNV;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBFVNVPROC __glewGetVertexAttribfvNV;
-GLEW_FUN_EXPORT PFNGLGETVERTEXATTRIBIVNVPROC __glewGetVertexAttribivNV;
-GLEW_FUN_EXPORT PFNGLISPROGRAMNVPROC __glewIsProgramNV;
-GLEW_FUN_EXPORT PFNGLLOADPROGRAMNVPROC __glewLoadProgramNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4DNVPROC __glewProgramParameter4dNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4DVNVPROC __glewProgramParameter4dvNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4FNVPROC __glewProgramParameter4fNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETER4FVNVPROC __glewProgramParameter4fvNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERS4DVNVPROC __glewProgramParameters4dvNV;
-GLEW_FUN_EXPORT PFNGLPROGRAMPARAMETERS4FVNVPROC __glewProgramParameters4fvNV;
-GLEW_FUN_EXPORT PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glewRequestResidentProgramsNV;
-GLEW_FUN_EXPORT PFNGLTRACKMATRIXNVPROC __glewTrackMatrixNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DNVPROC __glewVertexAttrib1dNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1DVNVPROC __glewVertexAttrib1dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FNVPROC __glewVertexAttrib1fNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1FVNVPROC __glewVertexAttrib1fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SNVPROC __glewVertexAttrib1sNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB1SVNVPROC __glewVertexAttrib1svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DNVPROC __glewVertexAttrib2dNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2DVNVPROC __glewVertexAttrib2dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FNVPROC __glewVertexAttrib2fNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2FVNVPROC __glewVertexAttrib2fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SNVPROC __glewVertexAttrib2sNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB2SVNVPROC __glewVertexAttrib2svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DNVPROC __glewVertexAttrib3dNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3DVNVPROC __glewVertexAttrib3dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FNVPROC __glewVertexAttrib3fNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3FVNVPROC __glewVertexAttrib3fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SNVPROC __glewVertexAttrib3sNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB3SVNVPROC __glewVertexAttrib3svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DNVPROC __glewVertexAttrib4dNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4DVNVPROC __glewVertexAttrib4dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FNVPROC __glewVertexAttrib4fNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4FVNVPROC __glewVertexAttrib4fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SNVPROC __glewVertexAttrib4sNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4SVNVPROC __glewVertexAttrib4svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBNVPROC __glewVertexAttrib4ubNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIB4UBVNVPROC __glewVertexAttrib4ubvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBPOINTERNVPROC __glewVertexAttribPointerNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1DVNVPROC __glewVertexAttribs1dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1FVNVPROC __glewVertexAttribs1fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS1SVNVPROC __glewVertexAttribs1svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2DVNVPROC __glewVertexAttribs2dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2FVNVPROC __glewVertexAttribs2fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS2SVNVPROC __glewVertexAttribs2svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3DVNVPROC __glewVertexAttribs3dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3FVNVPROC __glewVertexAttribs3fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS3SVNVPROC __glewVertexAttribs3svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4DVNVPROC __glewVertexAttribs4dvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4FVNVPROC __glewVertexAttribs4fvNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4SVNVPROC __glewVertexAttribs4svNV;
-GLEW_FUN_EXPORT PFNGLVERTEXATTRIBS4UBVNVPROC __glewVertexAttribs4ubvNV;
-
-GLEW_FUN_EXPORT PFNGLCLEARDEPTHFOESPROC __glewClearDepthfOES;
-GLEW_FUN_EXPORT PFNGLCLIPPLANEFOESPROC __glewClipPlanefOES;
-GLEW_FUN_EXPORT PFNGLDEPTHRANGEFOESPROC __glewDepthRangefOES;
-GLEW_FUN_EXPORT PFNGLFRUSTUMFOESPROC __glewFrustumfOES;
-GLEW_FUN_EXPORT PFNGLGETCLIPPLANEFOESPROC __glewGetClipPlanefOES;
-GLEW_FUN_EXPORT PFNGLORTHOFOESPROC __glewOrthofOES;
-
-GLEW_FUN_EXPORT PFNGLDETAILTEXFUNCSGISPROC __glewDetailTexFuncSGIS;
-GLEW_FUN_EXPORT PFNGLGETDETAILTEXFUNCSGISPROC __glewGetDetailTexFuncSGIS;
-
-GLEW_FUN_EXPORT PFNGLFOGFUNCSGISPROC __glewFogFuncSGIS;
-GLEW_FUN_EXPORT PFNGLGETFOGFUNCSGISPROC __glewGetFogFuncSGIS;
-
-GLEW_FUN_EXPORT PFNGLSAMPLEMASKSGISPROC __glewSampleMaskSGIS;
-GLEW_FUN_EXPORT PFNGLSAMPLEPATTERNSGISPROC __glewSamplePatternSGIS;
-
-GLEW_FUN_EXPORT PFNGLGETSHARPENTEXFUNCSGISPROC __glewGetSharpenTexFuncSGIS;
-GLEW_FUN_EXPORT PFNGLSHARPENTEXFUNCSGISPROC __glewSharpenTexFuncSGIS;
-
-GLEW_FUN_EXPORT PFNGLTEXIMAGE4DSGISPROC __glewTexImage4DSGIS;
-GLEW_FUN_EXPORT PFNGLTEXSUBIMAGE4DSGISPROC __glewTexSubImage4DSGIS;
-
-GLEW_FUN_EXPORT PFNGLGETTEXFILTERFUNCSGISPROC __glewGetTexFilterFuncSGIS;
-GLEW_FUN_EXPORT PFNGLTEXFILTERFUNCSGISPROC __glewTexFilterFuncSGIS;
-
-GLEW_FUN_EXPORT PFNGLASYNCMARKERSGIXPROC __glewAsyncMarkerSGIX;
-GLEW_FUN_EXPORT PFNGLDELETEASYNCMARKERSSGIXPROC __glewDeleteAsyncMarkersSGIX;
-GLEW_FUN_EXPORT PFNGLFINISHASYNCSGIXPROC __glewFinishAsyncSGIX;
-GLEW_FUN_EXPORT PFNGLGENASYNCMARKERSSGIXPROC __glewGenAsyncMarkersSGIX;
-GLEW_FUN_EXPORT PFNGLISASYNCMARKERSGIXPROC __glewIsAsyncMarkerSGIX;
-GLEW_FUN_EXPORT PFNGLPOLLASYNCSGIXPROC __glewPollAsyncSGIX;
-
-GLEW_FUN_EXPORT PFNGLFLUSHRASTERSGIXPROC __glewFlushRasterSGIX;
-
-GLEW_FUN_EXPORT PFNGLTEXTUREFOGSGIXPROC __glewTextureFogSGIX;
-
-GLEW_FUN_EXPORT PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glewFragmentColorMaterialSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glewFragmentLightModelfSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glewFragmentLightModelfvSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELISGIXPROC __glewFragmentLightModeliSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glewFragmentLightModelivSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFSGIXPROC __glewFragmentLightfSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTFVSGIXPROC __glewFragmentLightfvSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTISGIXPROC __glewFragmentLightiSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTLIGHTIVSGIXPROC __glewFragmentLightivSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFSGIXPROC __glewFragmentMaterialfSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALFVSGIXPROC __glewFragmentMaterialfvSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALISGIXPROC __glewFragmentMaterialiSGIX;
-GLEW_FUN_EXPORT PFNGLFRAGMENTMATERIALIVSGIXPROC __glewFragmentMaterialivSGIX;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glewGetFragmentLightfvSGIX;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glewGetFragmentLightivSGIX;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glewGetFragmentMaterialfvSGIX;
-GLEW_FUN_EXPORT PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glewGetFragmentMaterialivSGIX;
-
-GLEW_FUN_EXPORT PFNGLFRAMEZOOMSGIXPROC __glewFrameZoomSGIX;
-
-GLEW_FUN_EXPORT PFNGLPIXELTEXGENSGIXPROC __glewPixelTexGenSGIX;
-
-GLEW_FUN_EXPORT PFNGLREFERENCEPLANESGIXPROC __glewReferencePlaneSGIX;
-
-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERFSGIXPROC __glewSpriteParameterfSGIX;
-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERFVSGIXPROC __glewSpriteParameterfvSGIX;
-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERISGIXPROC __glewSpriteParameteriSGIX;
-GLEW_FUN_EXPORT PFNGLSPRITEPARAMETERIVSGIXPROC __glewSpriteParameterivSGIX;
-
-GLEW_FUN_EXPORT PFNGLTAGSAMPLEBUFFERSGIXPROC __glewTagSampleBufferSGIX;
-
-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERFVSGIPROC __glewColorTableParameterfvSGI;
-GLEW_FUN_EXPORT PFNGLCOLORTABLEPARAMETERIVSGIPROC __glewColorTableParameterivSGI;
-GLEW_FUN_EXPORT PFNGLCOLORTABLESGIPROC __glewColorTableSGI;
-GLEW_FUN_EXPORT PFNGLCOPYCOLORTABLESGIPROC __glewCopyColorTableSGI;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glewGetColorTableParameterfvSGI;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glewGetColorTableParameterivSGI;
-GLEW_FUN_EXPORT PFNGLGETCOLORTABLESGIPROC __glewGetColorTableSGI;
-
-GLEW_FUN_EXPORT PFNGLFINISHTEXTURESUNXPROC __glewFinishTextureSUNX;
-
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORBSUNPROC __glewGlobalAlphaFactorbSUN;
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORDSUNPROC __glewGlobalAlphaFactordSUN;
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORFSUNPROC __glewGlobalAlphaFactorfSUN;
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORISUNPROC __glewGlobalAlphaFactoriSUN;
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORSSUNPROC __glewGlobalAlphaFactorsSUN;
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUBSUNPROC __glewGlobalAlphaFactorubSUN;
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUISUNPROC __glewGlobalAlphaFactoruiSUN;
-GLEW_FUN_EXPORT PFNGLGLOBALALPHAFACTORUSSUNPROC __glewGlobalAlphaFactorusSUN;
-
-GLEW_FUN_EXPORT PFNGLREADVIDEOPIXELSSUNPROC __glewReadVideoPixelsSUN;
-
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEPOINTERSUNPROC __glewReplacementCodePointerSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUBSUNPROC __glewReplacementCodeubSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUBVSUNPROC __glewReplacementCodeubvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUISUNPROC __glewReplacementCodeuiSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVSUNPROC __glewReplacementCodeuivSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUSSUNPROC __glewReplacementCodeusSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUSVSUNPROC __glewReplacementCodeusvSUN;
-
-GLEW_FUN_EXPORT PFNGLCOLOR3FVERTEX3FSUNPROC __glewColor3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLCOLOR3FVERTEX3FVSUNPROC __glewColor3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewColor4fNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewColor4fNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX2FSUNPROC __glewColor4ubVertex2fSUN;
-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX2FVSUNPROC __glewColor4ubVertex2fvSUN;
-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX3FSUNPROC __glewColor4ubVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLCOLOR4UBVERTEX3FVSUNPROC __glewColor4ubVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLNORMAL3FVERTEX3FSUNPROC __glewNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLNORMAL3FVERTEX3FVSUNPROC __glewNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glewReplacementCodeuiColor3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glewReplacementCodeuiColor4ubVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glewReplacementCodeuiColor4ubVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glewReplacementCodeuiVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glewReplacementCodeuiVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glewTexCoord2fColor3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glewTexCoord2fColor3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glewTexCoord2fColor4ubVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glewTexCoord2fColor4ubVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fNormal3fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fNormal3fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FVERTEX3FSUNPROC __glewTexCoord2fVertex3fSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glewTexCoord2fVertex3fvSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fvSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD4FVERTEX4FSUNPROC __glewTexCoord4fVertex4fSUN;
-GLEW_FUN_EXPORT PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glewTexCoord4fVertex4fvSUN;
-
-GLEW_FUN_EXPORT PFNGLADDSWAPHINTRECTWINPROC __glewAddSwapHintRectWIN;
-
-#if defined(GLEW_MX) && !defined(_WIN32)
-struct GLEWContextStruct
-{
-#endif /* GLEW_MX */
-
-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_1;
-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_2;
-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_3;
-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_4;
-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_1_5;
-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_2_0;
-GLEW_VAR_EXPORT GLboolean __GLEW_VERSION_2_1;
-GLEW_VAR_EXPORT GLboolean __GLEW_3DFX_multisample;
-GLEW_VAR_EXPORT GLboolean __GLEW_3DFX_tbuffer;
-GLEW_VAR_EXPORT GLboolean __GLEW_3DFX_texture_compression_FXT1;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_client_storage;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_element_array;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_fence;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_float_pixels;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_flush_buffer_range;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_pixel_buffer;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_specular_vector;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_texture_range;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_transform_hint;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_vertex_array_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_vertex_array_range;
-GLEW_VAR_EXPORT GLboolean __GLEW_APPLE_ycbcr_422;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_color_buffer_float;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_depth_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_draw_buffers;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_fragment_program;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_fragment_program_shadow;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_fragment_shader;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_half_float_pixel;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_imaging;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_matrix_palette;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_multisample;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_multitexture;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_occlusion_query;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_pixel_buffer_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_point_parameters;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_point_sprite;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shader_objects;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shading_language_100;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shadow;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_shadow_ambient;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_border_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_compression;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_cube_map;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_add;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_combine;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_crossbar;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_env_dot3;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_float;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_mirrored_repeat;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_non_power_of_two;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_texture_rectangle;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_transpose_matrix;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_blend;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_buffer_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_program;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_vertex_shader;
-GLEW_VAR_EXPORT GLboolean __GLEW_ARB_window_pos;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_point_sprites;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_texture_env_combine3;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_texture_env_route;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATIX_vertex_shader_output_point_size;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_draw_buffers;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_element_array;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_envmap_bumpmap;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_fragment_shader;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_map_object_buffer;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_pn_triangles;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_separate_stencil;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_shader_texture_lod;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_text_fragment_shader;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_compression_3dc;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_env_combine3;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_float;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_texture_mirror_once;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_vertex_array_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_vertex_attrib_array_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_ATI_vertex_streams;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_422_pixels;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_Cg_shader;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_abgr;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_bgra;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_bindable_uniform;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_color;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_equation_separate;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_func_separate;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_logic_op;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_minmax;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_blend_subtract;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_clip_volume_hint;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_cmyka;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_color_subtable;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_compiled_vertex_array;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_convolution;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_coordinate_frame;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_copy_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_cull_vertex;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_depth_bounds_test;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_draw_buffers2;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_draw_instanced;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_draw_range_elements;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_fog_coord;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_fragment_lighting;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_blit;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_multisample;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_framebuffer_sRGB;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_geometry_shader4;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_gpu_program_parameters;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_gpu_shader4;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_histogram;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_array_formats;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_func;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_material;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_index_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_light_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_misc_attribute;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_multi_draw_arrays;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_multisample;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_packed_depth_stencil;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_packed_float;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_packed_pixels;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_paletted_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_pixel_buffer_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_pixel_transform;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_pixel_transform_color_table;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_point_parameters;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_polygon_offset;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_rescale_normal;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_scene_marker;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_secondary_color;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_separate_specular_color;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_shadow_funcs;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_shared_texture_palette;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_stencil_clear_tag;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_stencil_two_side;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_stencil_wrap;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_subtexture;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture3D;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_array;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_buffer_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_dxt1;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_latc;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_rgtc;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_compression_s3tc;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_cube_map;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_edge_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env_add;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env_combine;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_env_dot3;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_filter_anisotropic;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_integer;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_lod_bias;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_mirror_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_perturb_normal;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_rectangle;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_sRGB;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_texture_shared_exponent;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_timer_query;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_vertex_array;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_vertex_shader;
-GLEW_VAR_EXPORT GLboolean __GLEW_EXT_vertex_weighting;
-GLEW_VAR_EXPORT GLboolean __GLEW_GREMEDY_frame_terminator;
-GLEW_VAR_EXPORT GLboolean __GLEW_GREMEDY_string_marker;
-GLEW_VAR_EXPORT GLboolean __GLEW_HP_convolution_border_modes;
-GLEW_VAR_EXPORT GLboolean __GLEW_HP_image_transform;
-GLEW_VAR_EXPORT GLboolean __GLEW_HP_occlusion_test;
-GLEW_VAR_EXPORT GLboolean __GLEW_HP_texture_lighting;
-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_cull_vertex;
-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_multimode_draw_arrays;
-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_rasterpos_clip;
-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_static_data;
-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_texture_mirrored_repeat;
-GLEW_VAR_EXPORT GLboolean __GLEW_IBM_vertex_array_lists;
-GLEW_VAR_EXPORT GLboolean __GLEW_INGR_color_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_INGR_interlace_read;
-GLEW_VAR_EXPORT GLboolean __GLEW_INTEL_parallel_arrays;
-GLEW_VAR_EXPORT GLboolean __GLEW_INTEL_texture_scissor;
-GLEW_VAR_EXPORT GLboolean __GLEW_KTX_buffer_region;
-GLEW_VAR_EXPORT GLboolean __GLEW_MESAX_texture_stack;
-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_pack_invert;
-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_resize_buffers;
-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_window_pos;
-GLEW_VAR_EXPORT GLboolean __GLEW_MESA_ycbcr_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_blend_square;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_copy_depth_to_color;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_depth_buffer_float;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_depth_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_depth_range_unclamped;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_evaluators;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fence;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_float_buffer;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fog_distance;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program2;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program4;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_fragment_program_option;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_framebuffer_multisample_coverage;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_geometry_program4;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_geometry_shader4;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_gpu_program4;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_half_float;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_light_max_exponent;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_multisample_filter_hint;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_occlusion_query;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_packed_depth_stencil;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_parameter_buffer_object;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_pixel_data_range;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_point_sprite;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_primitive_restart;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_register_combiners;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_register_combiners2;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texgen_emboss;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texgen_reflection;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_compression_vtc;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_env_combine4;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_expand_normal;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_rectangle;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_shader;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_shader2;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_texture_shader3;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_transform_feedback;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_array_range;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_array_range2;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program1_1;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program2;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program2_option;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program3;
-GLEW_VAR_EXPORT GLboolean __GLEW_NV_vertex_program4;
-GLEW_VAR_EXPORT GLboolean __GLEW_OES_byte_coordinates;
-GLEW_VAR_EXPORT GLboolean __GLEW_OES_compressed_paletted_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_OES_read_format;
-GLEW_VAR_EXPORT GLboolean __GLEW_OES_single_precision;
-GLEW_VAR_EXPORT GLboolean __GLEW_OML_interlace;
-GLEW_VAR_EXPORT GLboolean __GLEW_OML_resample;
-GLEW_VAR_EXPORT GLboolean __GLEW_OML_subsample;
-GLEW_VAR_EXPORT GLboolean __GLEW_PGI_misc_hints;
-GLEW_VAR_EXPORT GLboolean __GLEW_PGI_vertex_hints;
-GLEW_VAR_EXPORT GLboolean __GLEW_REND_screen_coordinates;
-GLEW_VAR_EXPORT GLboolean __GLEW_S3_s3tc;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_color_range;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_detail_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_fog_function;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_generate_mipmap;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_multisample;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_pixel_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_sharpen_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture4D;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_border_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_edge_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_filter4;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_lod;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIS_texture_select;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_async;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_async_histogram;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_async_pixel;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_blend_alpha_minmax;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_clipmap;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_depth_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_flush_raster;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_fog_offset;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_fog_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_fragment_specular_lighting;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_framezoom;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_interlace;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_ir_instrument1;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_list_priority;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_pixel_texture;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_pixel_texture_bits;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_reference_plane;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_resample;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_shadow;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_shadow_ambient;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_sprite;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_tag_sample_buffer;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_add_env;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_coordinate_clamp;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_lod_bias;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_multi_buffer;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_range;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_texture_scale_bias;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_vertex_preclip;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_vertex_preclip_hint;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGIX_ycrcb;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGI_color_matrix;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGI_color_table;
-GLEW_VAR_EXPORT GLboolean __GLEW_SGI_texture_color_table;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUNX_constant_data;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_convolution_border_modes;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_global_alpha;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_mesh_array;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_read_video_pixels;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_slice_accum;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_triangle_list;
-GLEW_VAR_EXPORT GLboolean __GLEW_SUN_vertex;
-GLEW_VAR_EXPORT GLboolean __GLEW_WIN_phong_shading;
-GLEW_VAR_EXPORT GLboolean __GLEW_WIN_specular_fog;
-GLEW_VAR_EXPORT GLboolean __GLEW_WIN_swap_hint;
-
-#ifdef GLEW_MX
-}; /* GLEWContextStruct */
-#endif /* GLEW_MX */
-
-/* ------------------------------------------------------------------------- */
-
-/* error codes */
-#define GLEW_OK 0
-#define GLEW_NO_ERROR 0
-#define GLEW_ERROR_NO_GL_VERSION 1  /* missing GL version */
-#define GLEW_ERROR_GL_VERSION_10_ONLY 2  /* GL 1.1 and up are not supported */
-#define GLEW_ERROR_GLX_VERSION_11_ONLY 3  /* GLX 1.2 and up are not supported */
-
-/* string codes */
-#define GLEW_VERSION 1
-#define GLEW_VERSION_MAJOR 2
-#define GLEW_VERSION_MINOR 3
-#define GLEW_VERSION_MICRO 4
-
-/* API */
-#ifdef GLEW_MX
-
-typedef struct GLEWContextStruct GLEWContext;
-GLEWAPI GLenum glewContextInit (GLEWContext* ctx);
-GLEWAPI GLboolean glewContextIsSupported (GLEWContext* ctx, const char* name);
-
-#define glewInit() glewContextInit(glewGetContext())
-#define glewIsSupported(x) glewContextIsSupported(glewGetContext(), x)
-#define glewIsExtensionSupported(x) glewIsSupported(x)
-
-#define GLEW_GET_VAR(x) (*(const GLboolean*)&(glewGetContext()->x))
-#ifdef _WIN32
-#  define GLEW_GET_FUN(x) glewGetContext()->x
-#else
-#  define GLEW_GET_FUN(x) x
-#endif
-
-#else /* GLEW_MX */
-
-GLEWAPI GLenum glewInit ();
-GLEWAPI GLboolean glewIsSupported (const char* name);
-#define glewIsExtensionSupported(x) glewIsSupported(x)
-
-#define GLEW_GET_VAR(x) (*(const GLboolean*)&x)
-#define GLEW_GET_FUN(x) x
-
-#endif /* GLEW_MX */
-
-GLEWAPI GLboolean glewExperimental;
-GLEWAPI GLboolean glewGetExtension (const char* name);
-GLEWAPI const GLubyte* glewGetErrorString (GLenum error);
-GLEWAPI const GLubyte* glewGetString (GLenum name);
-
-#ifdef __cplusplus
-}
-#endif
-
-#ifdef GLEW_APIENTRY_DEFINED
-#undef GLEW_APIENTRY_DEFINED
-#undef APIENTRY
-#undef GLAPIENTRY
-#endif
-
-#ifdef GLEW_CALLBACK_DEFINED
-#undef GLEW_CALLBACK_DEFINED
-#undef CALLBACK
-#endif
-
-#ifdef GLEW_WINGDIAPI_DEFINED
-#undef GLEW_WINGDIAPI_DEFINED
-#undef WINGDIAPI
-#endif
-
-#undef GLAPI
-/* #undef GLEWAPI */
-
-#endif /* __glew_h__ */
diff --git a/nvcommon/GLEW/include/GL/glxew.h b/nvcommon/GLEW/include/GL/glxew.h
deleted file mode 100644
index 6f00e3f..0000000
--- a/nvcommon/GLEW/include/GL/glxew.h
+++ /dev/null
@@ -1,1264 +0,0 @@
-/*
-** The OpenGL Extension Wrangler Library
-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
-** Copyright (C) 2002, Lev Povalahev
-** All rights reserved.
-** 
-** Redistribution and use in source and binary forms, with or without 
-** modification, are permitted provided that the following conditions are met:
-** 
-** * Redistributions of source code must retain the above copyright notice, 
-**   this list of conditions and the following disclaimer.
-** * Redistributions in binary form must reproduce the above copyright notice, 
-**   this list of conditions and the following disclaimer in the documentation 
-**   and/or other materials provided with the distribution.
-** * The name of the author may be used to endorse or promote products 
-**   derived from this software without specific prior written permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-** THE POSSIBILITY OF SUCH DAMAGE.
-*/
-
-/*
- * Mesa 3-D graphics library
- * Version:  7.0
- *
- * Copyright (C) 1999-2007  Brian Paul   All Rights Reserved.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included
- * in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
- * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
- * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-/*
-** Copyright (c) 2007 The Khronos Group Inc.
-** 
-** Permission is hereby granted, free of charge, to any person obtaining a
-** copy of this software and/or associated documentation files (the
-** "Materials"), to deal in the Materials without restriction, including
-** without limitation the rights to use, copy, modify, merge, publish,
-** distribute, sublicense, and/or sell copies of the Materials, and to
-** permit persons to whom the Materials are furnished to do so, subject to
-** the following conditions:
-** 
-** The above copyright notice and this permission notice shall be included
-** in all copies or substantial portions of the Materials.
-** 
-** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
-*/
-
-#ifndef __glxew_h__
-#define __glxew_h__
-#define __GLXEW_H__
-
-#ifdef __glxext_h_
-#error glxext.h included before glxew.h
-#endif
-#ifdef GLX_H
-#error glx.h included before glxew.h
-#endif
-
-#define __glxext_h_
-#define __GLX_glx_h__
-#define GLX_H
-
-#include <X11/Xlib.h>
-#include <X11/Xutil.h>
-#include <X11/Xmd.h>
-#include <GL/glew.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* ---------------------------- GLX_VERSION_1_0 --------------------------- */
-
-#ifndef GLX_VERSION_1_0
-#define GLX_VERSION_1_0 1
-
-#define GLX_USE_GL 1
-#define GLX_BUFFER_SIZE 2
-#define GLX_LEVEL 3
-#define GLX_RGBA 4
-#define GLX_DOUBLEBUFFER 5
-#define GLX_STEREO 6
-#define GLX_AUX_BUFFERS 7
-#define GLX_RED_SIZE 8
-#define GLX_GREEN_SIZE 9
-#define GLX_BLUE_SIZE 10
-#define GLX_ALPHA_SIZE 11
-#define GLX_DEPTH_SIZE 12
-#define GLX_STENCIL_SIZE 13
-#define GLX_ACCUM_RED_SIZE 14
-#define GLX_ACCUM_GREEN_SIZE 15
-#define GLX_ACCUM_BLUE_SIZE 16
-#define GLX_ACCUM_ALPHA_SIZE 17
-#define GLX_BAD_SCREEN 1
-#define GLX_BAD_ATTRIBUTE 2
-#define GLX_NO_EXTENSION 3
-#define GLX_BAD_VISUAL 4
-#define GLX_BAD_CONTEXT 5
-#define GLX_BAD_VALUE 6
-#define GLX_BAD_ENUM 7
-
-typedef XID GLXDrawable;
-typedef XID GLXPixmap;
-#ifdef __sun
-typedef struct __glXContextRec *GLXContext;
-#else
-typedef struct __GLXcontextRec *GLXContext;
-#endif
-
-extern Bool glXQueryExtension (Display *dpy, int *errorBase, int *eventBase);
-extern Bool glXQueryVersion (Display *dpy, int *major, int *minor);
-extern int glXGetConfig (Display *dpy, XVisualInfo *vis, int attrib, int *value);
-extern XVisualInfo* glXChooseVisual (Display *dpy, int screen, int *attribList);
-extern GLXPixmap glXCreateGLXPixmap (Display *dpy, XVisualInfo *vis, Pixmap pixmap);
-extern void glXDestroyGLXPixmap (Display *dpy, GLXPixmap pix);
-extern GLXContext glXCreateContext (Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct);
-extern void glXDestroyContext (Display *dpy, GLXContext ctx);
-extern Bool glXIsDirect (Display *dpy, GLXContext ctx);
-extern void glXCopyContext (Display *dpy, GLXContext src, GLXContext dst, GLulong mask);
-extern Bool glXMakeCurrent (Display *dpy, GLXDrawable drawable, GLXContext ctx);
-extern GLXContext glXGetCurrentContext (void);
-extern GLXDrawable glXGetCurrentDrawable (void);
-extern void glXWaitGL (void);
-extern void glXWaitX (void);
-extern void glXSwapBuffers (Display *dpy, GLXDrawable drawable);
-extern void glXUseXFont (Font font, int first, int count, int listBase);
-
-#define GLXEW_VERSION_1_0 GLXEW_GET_VAR(__GLXEW_VERSION_1_0)
-
-#endif /* GLX_VERSION_1_0 */
-
-/* ---------------------------- GLX_VERSION_1_1 --------------------------- */
-
-#ifndef GLX_VERSION_1_1
-#define GLX_VERSION_1_1
-
-#define GLX_VENDOR 0x1
-#define GLX_VERSION 0x2
-#define GLX_EXTENSIONS 0x3
-
-extern const char* glXQueryExtensionsString (Display *dpy, int screen);
-extern const char* glXGetClientString (Display *dpy, int name);
-extern const char* glXQueryServerString (Display *dpy, int screen, int name);
-
-#define GLXEW_VERSION_1_1 GLXEW_GET_VAR(__GLXEW_VERSION_1_1)
-
-#endif /* GLX_VERSION_1_1 */
-
-/* ---------------------------- GLX_VERSION_1_2 ---------------------------- */
-
-#ifndef GLX_VERSION_1_2
-#define GLX_VERSION_1_2 1
-
-typedef Display* ( * PFNGLXGETCURRENTDISPLAYPROC) (void);
-
-#define glXGetCurrentDisplay GLXEW_GET_FUN(__glewXGetCurrentDisplay)
-
-#define GLXEW_VERSION_1_2 GLXEW_GET_VAR(__GLXEW_VERSION_1_2)
-
-#endif /* GLX_VERSION_1_2 */
-
-/* ---------------------------- GLX_VERSION_1_3 ---------------------------- */
-
-#ifndef GLX_VERSION_1_3
-#define GLX_VERSION_1_3 1
-
-#define GLX_RGBA_BIT 0x00000001
-#define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
-#define GLX_WINDOW_BIT 0x00000001
-#define GLX_COLOR_INDEX_BIT 0x00000002
-#define GLX_PIXMAP_BIT 0x00000002
-#define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
-#define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
-#define GLX_PBUFFER_BIT 0x00000004
-#define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
-#define GLX_AUX_BUFFERS_BIT 0x00000010
-#define GLX_CONFIG_CAVEAT 0x20
-#define GLX_DEPTH_BUFFER_BIT 0x00000020
-#define GLX_X_VISUAL_TYPE 0x22
-#define GLX_TRANSPARENT_TYPE 0x23
-#define GLX_TRANSPARENT_INDEX_VALUE 0x24
-#define GLX_TRANSPARENT_RED_VALUE 0x25
-#define GLX_TRANSPARENT_GREEN_VALUE 0x26
-#define GLX_TRANSPARENT_BLUE_VALUE 0x27
-#define GLX_TRANSPARENT_ALPHA_VALUE 0x28
-#define GLX_STENCIL_BUFFER_BIT 0x00000040
-#define GLX_ACCUM_BUFFER_BIT 0x00000080
-#define GLX_NONE 0x8000
-#define GLX_SLOW_CONFIG 0x8001
-#define GLX_TRUE_COLOR 0x8002
-#define GLX_DIRECT_COLOR 0x8003
-#define GLX_PSEUDO_COLOR 0x8004
-#define GLX_STATIC_COLOR 0x8005
-#define GLX_GRAY_SCALE 0x8006
-#define GLX_STATIC_GRAY 0x8007
-#define GLX_TRANSPARENT_RGB 0x8008
-#define GLX_TRANSPARENT_INDEX 0x8009
-#define GLX_VISUAL_ID 0x800B
-#define GLX_SCREEN 0x800C
-#define GLX_NON_CONFORMANT_CONFIG 0x800D
-#define GLX_DRAWABLE_TYPE 0x8010
-#define GLX_RENDER_TYPE 0x8011
-#define GLX_X_RENDERABLE 0x8012
-#define GLX_FBCONFIG_ID 0x8013
-#define GLX_RGBA_TYPE 0x8014
-#define GLX_COLOR_INDEX_TYPE 0x8015
-#define GLX_MAX_PBUFFER_WIDTH 0x8016
-#define GLX_MAX_PBUFFER_HEIGHT 0x8017
-#define GLX_MAX_PBUFFER_PIXELS 0x8018
-#define GLX_PRESERVED_CONTENTS 0x801B
-#define GLX_LARGEST_PBUFFER 0x801C
-#define GLX_WIDTH 0x801D
-#define GLX_HEIGHT 0x801E
-#define GLX_EVENT_MASK 0x801F
-#define GLX_DAMAGED 0x8020
-#define GLX_SAVED 0x8021
-#define GLX_WINDOW 0x8022
-#define GLX_PBUFFER 0x8023
-#define GLX_PBUFFER_HEIGHT 0x8040
-#define GLX_PBUFFER_WIDTH 0x8041
-#define GLX_PBUFFER_CLOBBER_MASK 0x08000000
-#define GLX_DONT_CARE 0xFFFFFFFF
-
-typedef XID GLXFBConfigID;
-typedef XID GLXWindow;
-typedef XID GLXPbuffer;
-typedef struct __GLXFBConfigRec *GLXFBConfig;
-
-typedef struct {
-  int event_type; 
-  int draw_type; 
-  unsigned long serial; 
-  Bool send_event; 
-  Display *display; 
-  GLXDrawable drawable; 
-  unsigned int buffer_mask; 
-  unsigned int aux_buffer; 
-  int x, y; 
-  int width, height; 
-  int count; 
-} GLXPbufferClobberEvent;
-typedef union __GLXEvent {
-  GLXPbufferClobberEvent glxpbufferclobber; 
-  long pad[24]; 
-} GLXEvent;
-
-typedef GLXFBConfig* ( * PFNGLXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
-typedef GLXContext ( * PFNGLXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
-typedef GLXPbuffer ( * PFNGLXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
-typedef GLXPixmap ( * PFNGLXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
-typedef GLXWindow ( * PFNGLXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
-typedef void ( * PFNGLXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
-typedef void ( * PFNGLXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
-typedef void ( * PFNGLXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
-typedef GLXDrawable ( * PFNGLXGETCURRENTREADDRAWABLEPROC) (void);
-typedef int ( * PFNGLXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
-typedef GLXFBConfig* ( * PFNGLXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
-typedef void ( * PFNGLXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
-typedef XVisualInfo* ( * PFNGLXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
-typedef Bool ( * PFNGLXMAKECONTEXTCURRENTPROC) (Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
-typedef int ( * PFNGLXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
-typedef void ( * PFNGLXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
-typedef void ( * PFNGLXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
-
-#define glXChooseFBConfig GLXEW_GET_FUN(__glewXChooseFBConfig)
-#define glXCreateNewContext GLXEW_GET_FUN(__glewXCreateNewContext)
-#define glXCreatePbuffer GLXEW_GET_FUN(__glewXCreatePbuffer)
-#define glXCreatePixmap GLXEW_GET_FUN(__glewXCreatePixmap)
-#define glXCreateWindow GLXEW_GET_FUN(__glewXCreateWindow)
-#define glXDestroyPbuffer GLXEW_GET_FUN(__glewXDestroyPbuffer)
-#define glXDestroyPixmap GLXEW_GET_FUN(__glewXDestroyPixmap)
-#define glXDestroyWindow GLXEW_GET_FUN(__glewXDestroyWindow)
-#define glXGetCurrentReadDrawable GLXEW_GET_FUN(__glewXGetCurrentReadDrawable)
-#define glXGetFBConfigAttrib GLXEW_GET_FUN(__glewXGetFBConfigAttrib)
-#define glXGetFBConfigs GLXEW_GET_FUN(__glewXGetFBConfigs)
-#define glXGetSelectedEvent GLXEW_GET_FUN(__glewXGetSelectedEvent)
-#define glXGetVisualFromFBConfig GLXEW_GET_FUN(__glewXGetVisualFromFBConfig)
-#define glXMakeContextCurrent GLXEW_GET_FUN(__glewXMakeContextCurrent)
-#define glXQueryContext GLXEW_GET_FUN(__glewXQueryContext)
-#define glXQueryDrawable GLXEW_GET_FUN(__glewXQueryDrawable)
-#define glXSelectEvent GLXEW_GET_FUN(__glewXSelectEvent)
-
-#define GLXEW_VERSION_1_3 GLXEW_GET_VAR(__GLXEW_VERSION_1_3)
-
-#endif /* GLX_VERSION_1_3 */
-
-/* ---------------------------- GLX_VERSION_1_4 ---------------------------- */
-
-#ifndef GLX_VERSION_1_4
-#define GLX_VERSION_1_4 1
-
-#define GLX_SAMPLE_BUFFERS 100000
-#define GLX_SAMPLES 100001
-
-extern void ( * glXGetProcAddress (const GLubyte *procName)) (void);
-
-#define GLXEW_VERSION_1_4 GLXEW_GET_VAR(__GLXEW_VERSION_1_4)
-
-#endif /* GLX_VERSION_1_4 */
-
-/* -------------------------- GLX_3DFX_multisample ------------------------- */
-
-#ifndef GLX_3DFX_multisample
-#define GLX_3DFX_multisample 1
-
-#define GLX_SAMPLE_BUFFERS_3DFX 0x8050
-#define GLX_SAMPLES_3DFX 0x8051
-
-#define GLXEW_3DFX_multisample GLXEW_GET_VAR(__GLXEW_3DFX_multisample)
-
-#endif /* GLX_3DFX_multisample */
-
-/* ------------------------- GLX_ARB_fbconfig_float ------------------------ */
-
-#ifndef GLX_ARB_fbconfig_float
-#define GLX_ARB_fbconfig_float 1
-
-#define GLX_RGBA_FLOAT_BIT 0x00000004
-#define GLX_RGBA_FLOAT_TYPE 0x20B9
-
-#define GLXEW_ARB_fbconfig_float GLXEW_GET_VAR(__GLXEW_ARB_fbconfig_float)
-
-#endif /* GLX_ARB_fbconfig_float */
-
-/* ------------------------ GLX_ARB_get_proc_address ----------------------- */
-
-#ifndef GLX_ARB_get_proc_address
-#define GLX_ARB_get_proc_address 1
-
-extern void ( * glXGetProcAddressARB (const GLubyte *procName)) (void);
-
-#define GLXEW_ARB_get_proc_address GLXEW_GET_VAR(__GLXEW_ARB_get_proc_address)
-
-#endif /* GLX_ARB_get_proc_address */
-
-/* -------------------------- GLX_ARB_multisample -------------------------- */
-
-#ifndef GLX_ARB_multisample
-#define GLX_ARB_multisample 1
-
-#define GLX_SAMPLE_BUFFERS_ARB 100000
-#define GLX_SAMPLES_ARB 100001
-
-#define GLXEW_ARB_multisample GLXEW_GET_VAR(__GLXEW_ARB_multisample)
-
-#endif /* GLX_ARB_multisample */
-
-/* ----------------------- GLX_ATI_pixel_format_float ---------------------- */
-
-#ifndef GLX_ATI_pixel_format_float
-#define GLX_ATI_pixel_format_float 1
-
-#define GLX_RGBA_FLOAT_ATI_BIT 0x00000100
-
-#define GLXEW_ATI_pixel_format_float GLXEW_GET_VAR(__GLXEW_ATI_pixel_format_float)
-
-#endif /* GLX_ATI_pixel_format_float */
-
-/* ------------------------- GLX_ATI_render_texture ------------------------ */
-
-#ifndef GLX_ATI_render_texture
-#define GLX_ATI_render_texture 1
-
-#define GLX_BIND_TO_TEXTURE_RGB_ATI 0x9800
-#define GLX_BIND_TO_TEXTURE_RGBA_ATI 0x9801
-#define GLX_TEXTURE_FORMAT_ATI 0x9802
-#define GLX_TEXTURE_TARGET_ATI 0x9803
-#define GLX_MIPMAP_TEXTURE_ATI 0x9804
-#define GLX_TEXTURE_RGB_ATI 0x9805
-#define GLX_TEXTURE_RGBA_ATI 0x9806
-#define GLX_NO_TEXTURE_ATI 0x9807
-#define GLX_TEXTURE_CUBE_MAP_ATI 0x9808
-#define GLX_TEXTURE_1D_ATI 0x9809
-#define GLX_TEXTURE_2D_ATI 0x980A
-#define GLX_MIPMAP_LEVEL_ATI 0x980B
-#define GLX_CUBE_MAP_FACE_ATI 0x980C
-#define GLX_TEXTURE_CUBE_MAP_POSITIVE_X_ATI 0x980D
-#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_X_ATI 0x980E
-#define GLX_TEXTURE_CUBE_MAP_POSITIVE_Y_ATI 0x980F
-#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_Y_ATI 0x9810
-#define GLX_TEXTURE_CUBE_MAP_POSITIVE_Z_ATI 0x9811
-#define GLX_TEXTURE_CUBE_MAP_NEGATIVE_Z_ATI 0x9812
-#define GLX_FRONT_LEFT_ATI 0x9813
-#define GLX_FRONT_RIGHT_ATI 0x9814
-#define GLX_BACK_LEFT_ATI 0x9815
-#define GLX_BACK_RIGHT_ATI 0x9816
-#define GLX_AUX0_ATI 0x9817
-#define GLX_AUX1_ATI 0x9818
-#define GLX_AUX2_ATI 0x9819
-#define GLX_AUX3_ATI 0x981A
-#define GLX_AUX4_ATI 0x981B
-#define GLX_AUX5_ATI 0x981C
-#define GLX_AUX6_ATI 0x981D
-#define GLX_AUX7_ATI 0x981E
-#define GLX_AUX8_ATI 0x981F
-#define GLX_AUX9_ATI 0x9820
-#define GLX_BIND_TO_TEXTURE_LUMINANCE_ATI 0x9821
-#define GLX_BIND_TO_TEXTURE_INTENSITY_ATI 0x9822
-
-typedef void ( * PFNGLXBINDTEXIMAGEATIPROC) (Display *dpy, GLXPbuffer pbuf, int buffer);
-typedef void ( * PFNGLXDRAWABLEATTRIBATIPROC) (Display *dpy, GLXDrawable draw, const int *attrib_list);
-typedef void ( * PFNGLXRELEASETEXIMAGEATIPROC) (Display *dpy, GLXPbuffer pbuf, int buffer);
-
-#define glXBindTexImageATI GLXEW_GET_FUN(__glewXBindTexImageATI)
-#define glXDrawableAttribATI GLXEW_GET_FUN(__glewXDrawableAttribATI)
-#define glXReleaseTexImageATI GLXEW_GET_FUN(__glewXReleaseTexImageATI)
-
-#define GLXEW_ATI_render_texture GLXEW_GET_VAR(__GLXEW_ATI_render_texture)
-
-#endif /* GLX_ATI_render_texture */
-
-/* --------------------- GLX_EXT_fbconfig_packed_float --------------------- */
-
-#ifndef GLX_EXT_fbconfig_packed_float
-#define GLX_EXT_fbconfig_packed_float 1
-
-#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT 0x00000008
-#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT 0x20B1
-
-#define GLXEW_EXT_fbconfig_packed_float GLXEW_GET_VAR(__GLXEW_EXT_fbconfig_packed_float)
-
-#endif /* GLX_EXT_fbconfig_packed_float */
-
-/* ------------------------ GLX_EXT_framebuffer_sRGB ----------------------- */
-
-#ifndef GLX_EXT_framebuffer_sRGB
-#define GLX_EXT_framebuffer_sRGB 1
-
-#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20B2
-
-#define GLXEW_EXT_framebuffer_sRGB GLXEW_GET_VAR(__GLXEW_EXT_framebuffer_sRGB)
-
-#endif /* GLX_EXT_framebuffer_sRGB */
-
-/* ------------------------- GLX_EXT_import_context ------------------------ */
-
-#ifndef GLX_EXT_import_context
-#define GLX_EXT_import_context 1
-
-#define GLX_SHARE_CONTEXT_EXT 0x800A
-#define GLX_VISUAL_ID_EXT 0x800B
-#define GLX_SCREEN_EXT 0x800C
-
-typedef XID GLXContextID;
-
-typedef void ( * PFNGLXFREECONTEXTEXTPROC) (Display* dpy, GLXContext context);
-typedef GLXContextID ( * PFNGLXGETCONTEXTIDEXTPROC) (const GLXContext context);
-typedef GLXContext ( * PFNGLXIMPORTCONTEXTEXTPROC) (Display* dpy, GLXContextID contextID);
-typedef int ( * PFNGLXQUERYCONTEXTINFOEXTPROC) (Display* dpy, GLXContext context, int attribute,int *value);
-
-#define glXFreeContextEXT GLXEW_GET_FUN(__glewXFreeContextEXT)
-#define glXGetContextIDEXT GLXEW_GET_FUN(__glewXGetContextIDEXT)
-#define glXImportContextEXT GLXEW_GET_FUN(__glewXImportContextEXT)
-#define glXQueryContextInfoEXT GLXEW_GET_FUN(__glewXQueryContextInfoEXT)
-
-#define GLXEW_EXT_import_context GLXEW_GET_VAR(__GLXEW_EXT_import_context)
-
-#endif /* GLX_EXT_import_context */
-
-/* -------------------------- GLX_EXT_scene_marker ------------------------- */
-
-#ifndef GLX_EXT_scene_marker
-#define GLX_EXT_scene_marker 1
-
-#define GLXEW_EXT_scene_marker GLXEW_GET_VAR(__GLXEW_EXT_scene_marker)
-
-#endif /* GLX_EXT_scene_marker */
-
-/* ---------------------- GLX_EXT_texture_from_pixmap ---------------------- */
-
-#ifndef GLX_EXT_texture_from_pixmap
-#define GLX_EXT_texture_from_pixmap 1
-
-#define GLX_TEXTURE_1D_BIT_EXT 0x00000001
-#define GLX_TEXTURE_2D_BIT_EXT 0x00000002
-#define GLX_TEXTURE_RECTANGLE_BIT_EXT 0x00000004
-#define GLX_BIND_TO_TEXTURE_RGB_EXT 0x20D0
-#define GLX_BIND_TO_TEXTURE_RGBA_EXT 0x20D1
-#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT 0x20D2
-#define GLX_BIND_TO_TEXTURE_TARGETS_EXT 0x20D3
-#define GLX_Y_INVERTED_EXT 0x20D4
-#define GLX_TEXTURE_FORMAT_EXT 0x20D5
-#define GLX_TEXTURE_TARGET_EXT 0x20D6
-#define GLX_MIPMAP_TEXTURE_EXT 0x20D7
-#define GLX_TEXTURE_FORMAT_NONE_EXT 0x20D8
-#define GLX_TEXTURE_FORMAT_RGB_EXT 0x20D9
-#define GLX_TEXTURE_FORMAT_RGBA_EXT 0x20DA
-#define GLX_TEXTURE_1D_EXT 0x20DB
-#define GLX_TEXTURE_2D_EXT 0x20DC
-#define GLX_TEXTURE_RECTANGLE_EXT 0x20DD
-#define GLX_FRONT_LEFT_EXT 0x20DE
-#define GLX_FRONT_RIGHT_EXT 0x20DF
-#define GLX_BACK_LEFT_EXT 0x20E0
-#define GLX_BACK_RIGHT_EXT 0x20E1
-#define GLX_AUX0_EXT 0x20E2
-#define GLX_AUX1_EXT 0x20E3
-#define GLX_AUX2_EXT 0x20E4
-#define GLX_AUX3_EXT 0x20E5
-#define GLX_AUX4_EXT 0x20E6
-#define GLX_AUX5_EXT 0x20E7
-#define GLX_AUX6_EXT 0x20E8
-#define GLX_AUX7_EXT 0x20E9
-#define GLX_AUX8_EXT 0x20EA
-#define GLX_AUX9_EXT 0x20EB
-
-typedef void ( * PFNGLXBINDTEXIMAGEEXTPROC) (Display* display, GLXDrawable drawable, int buffer, const int *attrib_list);
-typedef void ( * PFNGLXRELEASETEXIMAGEEXTPROC) (Display* display, GLXDrawable drawable, int buffer);
-
-#define glXBindTexImageEXT GLXEW_GET_FUN(__glewXBindTexImageEXT)
-#define glXReleaseTexImageEXT GLXEW_GET_FUN(__glewXReleaseTexImageEXT)
-
-#define GLXEW_EXT_texture_from_pixmap GLXEW_GET_VAR(__GLXEW_EXT_texture_from_pixmap)
-
-#endif /* GLX_EXT_texture_from_pixmap */
-
-/* -------------------------- GLX_EXT_visual_info -------------------------- */
-
-#ifndef GLX_EXT_visual_info
-#define GLX_EXT_visual_info 1
-
-#define GLX_X_VISUAL_TYPE_EXT 0x22
-#define GLX_TRANSPARENT_TYPE_EXT 0x23
-#define GLX_TRANSPARENT_INDEX_VALUE_EXT 0x24
-#define GLX_TRANSPARENT_RED_VALUE_EXT 0x25
-#define GLX_TRANSPARENT_GREEN_VALUE_EXT 0x26
-#define GLX_TRANSPARENT_BLUE_VALUE_EXT 0x27
-#define GLX_TRANSPARENT_ALPHA_VALUE_EXT 0x28
-#define GLX_NONE_EXT 0x8000
-#define GLX_TRUE_COLOR_EXT 0x8002
-#define GLX_DIRECT_COLOR_EXT 0x8003
-#define GLX_PSEUDO_COLOR_EXT 0x8004
-#define GLX_STATIC_COLOR_EXT 0x8005
-#define GLX_GRAY_SCALE_EXT 0x8006
-#define GLX_STATIC_GRAY_EXT 0x8007
-#define GLX_TRANSPARENT_RGB_EXT 0x8008
-#define GLX_TRANSPARENT_INDEX_EXT 0x8009
-
-#define GLXEW_EXT_visual_info GLXEW_GET_VAR(__GLXEW_EXT_visual_info)
-
-#endif /* GLX_EXT_visual_info */
-
-/* ------------------------- GLX_EXT_visual_rating ------------------------- */
-
-#ifndef GLX_EXT_visual_rating
-#define GLX_EXT_visual_rating 1
-
-#define GLX_VISUAL_CAVEAT_EXT 0x20
-#define GLX_SLOW_VISUAL_EXT 0x8001
-#define GLX_NON_CONFORMANT_VISUAL_EXT 0x800D
-
-#define GLXEW_EXT_visual_rating GLXEW_GET_VAR(__GLXEW_EXT_visual_rating)
-
-#endif /* GLX_EXT_visual_rating */
-
-/* -------------------------- GLX_MESA_agp_offset -------------------------- */
-
-#ifndef GLX_MESA_agp_offset
-#define GLX_MESA_agp_offset 1
-
-typedef unsigned int ( * PFNGLXGETAGPOFFSETMESAPROC) (const void* pointer);
-
-#define glXGetAGPOffsetMESA GLXEW_GET_FUN(__glewXGetAGPOffsetMESA)
-
-#define GLXEW_MESA_agp_offset GLXEW_GET_VAR(__GLXEW_MESA_agp_offset)
-
-#endif /* GLX_MESA_agp_offset */
-
-/* ------------------------ GLX_MESA_copy_sub_buffer ----------------------- */
-
-#ifndef GLX_MESA_copy_sub_buffer
-#define GLX_MESA_copy_sub_buffer 1
-
-typedef void ( * PFNGLXCOPYSUBBUFFERMESAPROC) (Display* dpy, GLXDrawable drawable, int x, int y, int width, int height);
-
-#define glXCopySubBufferMESA GLXEW_GET_FUN(__glewXCopySubBufferMESA)
-
-#define GLXEW_MESA_copy_sub_buffer GLXEW_GET_VAR(__GLXEW_MESA_copy_sub_buffer)
-
-#endif /* GLX_MESA_copy_sub_buffer */
-
-/* ------------------------ GLX_MESA_pixmap_colormap ----------------------- */
-
-#ifndef GLX_MESA_pixmap_colormap
-#define GLX_MESA_pixmap_colormap 1
-
-typedef GLXPixmap ( * PFNGLXCREATEGLXPIXMAPMESAPROC) (Display* dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
-
-#define glXCreateGLXPixmapMESA GLXEW_GET_FUN(__glewXCreateGLXPixmapMESA)
-
-#define GLXEW_MESA_pixmap_colormap GLXEW_GET_VAR(__GLXEW_MESA_pixmap_colormap)
-
-#endif /* GLX_MESA_pixmap_colormap */
-
-/* ------------------------ GLX_MESA_release_buffers ----------------------- */
-
-#ifndef GLX_MESA_release_buffers
-#define GLX_MESA_release_buffers 1
-
-typedef Bool ( * PFNGLXRELEASEBUFFERSMESAPROC) (Display* dpy, GLXDrawable d);
-
-#define glXReleaseBuffersMESA GLXEW_GET_FUN(__glewXReleaseBuffersMESA)
-
-#define GLXEW_MESA_release_buffers GLXEW_GET_VAR(__GLXEW_MESA_release_buffers)
-
-#endif /* GLX_MESA_release_buffers */
-
-/* ------------------------- GLX_MESA_set_3dfx_mode ------------------------ */
-
-#ifndef GLX_MESA_set_3dfx_mode
-#define GLX_MESA_set_3dfx_mode 1
-
-#define GLX_3DFX_WINDOW_MODE_MESA 0x1
-#define GLX_3DFX_FULLSCREEN_MODE_MESA 0x2
-
-typedef GLboolean ( * PFNGLXSET3DFXMODEMESAPROC) (GLint mode);
-
-#define glXSet3DfxModeMESA GLXEW_GET_FUN(__glewXSet3DfxModeMESA)
-
-#define GLXEW_MESA_set_3dfx_mode GLXEW_GET_VAR(__GLXEW_MESA_set_3dfx_mode)
-
-#endif /* GLX_MESA_set_3dfx_mode */
-
-/* -------------------------- GLX_NV_float_buffer -------------------------- */
-
-#ifndef GLX_NV_float_buffer
-#define GLX_NV_float_buffer 1
-
-#define GLX_FLOAT_COMPONENTS_NV 0x20B0
-
-#define GLXEW_NV_float_buffer GLXEW_GET_VAR(__GLXEW_NV_float_buffer)
-
-#endif /* GLX_NV_float_buffer */
-
-/* ----------------------- GLX_NV_vertex_array_range ----------------------- */
-
-#ifndef GLX_NV_vertex_array_range
-#define GLX_NV_vertex_array_range 1
-
-typedef void * ( * PFNGLXALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
-typedef void ( * PFNGLXFREEMEMORYNVPROC) (void *pointer);
-
-#define glXAllocateMemoryNV GLXEW_GET_FUN(__glewXAllocateMemoryNV)
-#define glXFreeMemoryNV GLXEW_GET_FUN(__glewXFreeMemoryNV)
-
-#define GLXEW_NV_vertex_array_range GLXEW_GET_VAR(__GLXEW_NV_vertex_array_range)
-
-#endif /* GLX_NV_vertex_array_range */
-
-/* -------------------------- GLX_OML_swap_method -------------------------- */
-
-#ifndef GLX_OML_swap_method
-#define GLX_OML_swap_method 1
-
-#define GLX_SWAP_METHOD_OML 0x8060
-#define GLX_SWAP_EXCHANGE_OML 0x8061
-#define GLX_SWAP_COPY_OML 0x8062
-#define GLX_SWAP_UNDEFINED_OML 0x8063
-
-#define GLXEW_OML_swap_method GLXEW_GET_VAR(__GLXEW_OML_swap_method)
-
-#endif /* GLX_OML_swap_method */
-
-/* -------------------------- GLX_OML_sync_control ------------------------- */
-
-#ifndef GLX_OML_sync_control
-#define GLX_OML_sync_control 1
-
-typedef Bool ( * PFNGLXGETMSCRATEOMLPROC) (Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator);
-typedef Bool ( * PFNGLXGETSYNCVALUESOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc);
-typedef int64_t ( * PFNGLXSWAPBUFFERSMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
-typedef Bool ( * PFNGLXWAITFORMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc);
-typedef Bool ( * PFNGLXWAITFORSBCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc);
-
-#define glXGetMscRateOML GLXEW_GET_FUN(__glewXGetMscRateOML)
-#define glXGetSyncValuesOML GLXEW_GET_FUN(__glewXGetSyncValuesOML)
-#define glXSwapBuffersMscOML GLXEW_GET_FUN(__glewXSwapBuffersMscOML)
-#define glXWaitForMscOML GLXEW_GET_FUN(__glewXWaitForMscOML)
-#define glXWaitForSbcOML GLXEW_GET_FUN(__glewXWaitForSbcOML)
-
-#define GLXEW_OML_sync_control GLXEW_GET_VAR(__GLXEW_OML_sync_control)
-
-#endif /* GLX_OML_sync_control */
-
-/* ------------------------ GLX_SGIS_blended_overlay ----------------------- */
-
-#ifndef GLX_SGIS_blended_overlay
-#define GLX_SGIS_blended_overlay 1
-
-#define GLX_BLENDED_RGBA_SGIS 0x8025
-
-#define GLXEW_SGIS_blended_overlay GLXEW_GET_VAR(__GLXEW_SGIS_blended_overlay)
-
-#endif /* GLX_SGIS_blended_overlay */
-
-/* -------------------------- GLX_SGIS_color_range ------------------------- */
-
-#ifndef GLX_SGIS_color_range
-#define GLX_SGIS_color_range 1
-
-#define GLX_MIN_RED_SGIS 0
-#define GLX_MAX_GREEN_SGIS 0
-#define GLX_MIN_BLUE_SGIS 0
-#define GLX_MAX_ALPHA_SGIS 0
-#define GLX_MIN_GREEN_SGIS 0
-#define GLX_MIN_ALPHA_SGIS 0
-#define GLX_MAX_RED_SGIS 0
-#define GLX_EXTENDED_RANGE_SGIS 0
-#define GLX_MAX_BLUE_SGIS 0
-
-#define GLXEW_SGIS_color_range GLXEW_GET_VAR(__GLXEW_SGIS_color_range)
-
-#endif /* GLX_SGIS_color_range */
-
-/* -------------------------- GLX_SGIS_multisample ------------------------- */
-
-#ifndef GLX_SGIS_multisample
-#define GLX_SGIS_multisample 1
-
-#define GLX_SAMPLE_BUFFERS_SGIS 100000
-#define GLX_SAMPLES_SGIS 100001
-
-#define GLXEW_SGIS_multisample GLXEW_GET_VAR(__GLXEW_SGIS_multisample)
-
-#endif /* GLX_SGIS_multisample */
-
-/* ---------------------- GLX_SGIS_shared_multisample ---------------------- */
-
-#ifndef GLX_SGIS_shared_multisample
-#define GLX_SGIS_shared_multisample 1
-
-#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS 0x8026
-#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS 0x8027
-
-#define GLXEW_SGIS_shared_multisample GLXEW_GET_VAR(__GLXEW_SGIS_shared_multisample)
-
-#endif /* GLX_SGIS_shared_multisample */
-
-/* --------------------------- GLX_SGIX_fbconfig --------------------------- */
-
-#ifndef GLX_SGIX_fbconfig
-#define GLX_SGIX_fbconfig 1
-
-#define GLX_WINDOW_BIT_SGIX 0x00000001
-#define GLX_RGBA_BIT_SGIX 0x00000001
-#define GLX_PIXMAP_BIT_SGIX 0x00000002
-#define GLX_COLOR_INDEX_BIT_SGIX 0x00000002
-#define GLX_SCREEN_EXT 0x800C
-#define GLX_DRAWABLE_TYPE_SGIX 0x8010
-#define GLX_RENDER_TYPE_SGIX 0x8011
-#define GLX_X_RENDERABLE_SGIX 0x8012
-#define GLX_FBCONFIG_ID_SGIX 0x8013
-#define GLX_RGBA_TYPE_SGIX 0x8014
-#define GLX_COLOR_INDEX_TYPE_SGIX 0x8015
-
-typedef XID GLXFBConfigIDSGIX;
-typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
-
-typedef GLXFBConfigSGIX* ( * PFNGLXCHOOSEFBCONFIGSGIXPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
-typedef GLXContext ( * PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) (Display* dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
-typedef GLXPixmap ( * PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) (Display* dpy, GLXFBConfig config, Pixmap pixmap);
-typedef int ( * PFNGLXGETFBCONFIGATTRIBSGIXPROC) (Display* dpy, GLXFBConfigSGIX config, int attribute, int *value);
-typedef GLXFBConfigSGIX ( * PFNGLXGETFBCONFIGFROMVISUALSGIXPROC) (Display* dpy, XVisualInfo *vis);
-typedef XVisualInfo* ( * PFNGLXGETVISUALFROMFBCONFIGSGIXPROC) (Display *dpy, GLXFBConfig config);
-
-#define glXChooseFBConfigSGIX GLXEW_GET_FUN(__glewXChooseFBConfigSGIX)
-#define glXCreateContextWithConfigSGIX GLXEW_GET_FUN(__glewXCreateContextWithConfigSGIX)
-#define glXCreateGLXPixmapWithConfigSGIX GLXEW_GET_FUN(__glewXCreateGLXPixmapWithConfigSGIX)
-#define glXGetFBConfigAttribSGIX GLXEW_GET_FUN(__glewXGetFBConfigAttribSGIX)
-#define glXGetFBConfigFromVisualSGIX GLXEW_GET_FUN(__glewXGetFBConfigFromVisualSGIX)
-#define glXGetVisualFromFBConfigSGIX GLXEW_GET_FUN(__glewXGetVisualFromFBConfigSGIX)
-
-#define GLXEW_SGIX_fbconfig GLXEW_GET_VAR(__GLXEW_SGIX_fbconfig)
-
-#endif /* GLX_SGIX_fbconfig */
-
-/* --------------------------- GLX_SGIX_hyperpipe -------------------------- */
-
-#ifndef GLX_SGIX_hyperpipe
-#define GLX_SGIX_hyperpipe 1
-
-#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX 0x00000001
-#define GLX_PIPE_RECT_SGIX 0x00000001
-#define GLX_PIPE_RECT_LIMITS_SGIX 0x00000002
-#define GLX_HYPERPIPE_RENDER_PIPE_SGIX 0x00000002
-#define GLX_HYPERPIPE_STEREO_SGIX 0x00000003
-#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX 0x00000004
-#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
-#define GLX_BAD_HYPERPIPE_CONFIG_SGIX 91
-#define GLX_BAD_HYPERPIPE_SGIX 92
-#define GLX_HYPERPIPE_ID_SGIX 0x8030
-
-typedef struct {
-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
-  int  networkId; 
-} GLXHyperpipeNetworkSGIX;
-typedef struct {
-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
-  int XOrigin; 
-  int YOrigin; 
-  int maxHeight; 
-  int maxWidth; 
-} GLXPipeRectLimits;
-typedef struct {
-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
-  int channel; 
-  unsigned int participationType; 
-  int timeSlice; 
-} GLXHyperpipeConfigSGIX;
-typedef struct {
-  char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]; 
-  int srcXOrigin; 
-  int srcYOrigin; 
-  int srcWidth; 
-  int srcHeight; 
-  int destXOrigin; 
-  int destYOrigin; 
-  int destWidth; 
-  int destHeight; 
-} GLXPipeRect;
-
-typedef int ( * PFNGLXBINDHYPERPIPESGIXPROC) (Display *dpy, int hpId);
-typedef int ( * PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId);
-typedef int ( * PFNGLXHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList);
-typedef int ( * PFNGLXHYPERPIPECONFIGSGIXPROC) (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
-typedef int ( * PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
-typedef int ( * PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
-typedef GLXHyperpipeConfigSGIX * ( * PFNGLXQUERYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId, int *npipes);
-typedef GLXHyperpipeNetworkSGIX * ( * PFNGLXQUERYHYPERPIPENETWORKSGIXPROC) (Display *dpy, int *npipes);
-
-#define glXBindHyperpipeSGIX GLXEW_GET_FUN(__glewXBindHyperpipeSGIX)
-#define glXDestroyHyperpipeConfigSGIX GLXEW_GET_FUN(__glewXDestroyHyperpipeConfigSGIX)
-#define glXHyperpipeAttribSGIX GLXEW_GET_FUN(__glewXHyperpipeAttribSGIX)
-#define glXHyperpipeConfigSGIX GLXEW_GET_FUN(__glewXHyperpipeConfigSGIX)
-#define glXQueryHyperpipeAttribSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeAttribSGIX)
-#define glXQueryHyperpipeBestAttribSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeBestAttribSGIX)
-#define glXQueryHyperpipeConfigSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeConfigSGIX)
-#define glXQueryHyperpipeNetworkSGIX GLXEW_GET_FUN(__glewXQueryHyperpipeNetworkSGIX)
-
-#define GLXEW_SGIX_hyperpipe GLXEW_GET_VAR(__GLXEW_SGIX_hyperpipe)
-
-#endif /* GLX_SGIX_hyperpipe */
-
-/* ---------------------------- GLX_SGIX_pbuffer --------------------------- */
-
-#ifndef GLX_SGIX_pbuffer
-#define GLX_SGIX_pbuffer 1
-
-#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX 0x00000001
-#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX 0x00000002
-#define GLX_PBUFFER_BIT_SGIX 0x00000004
-#define GLX_BACK_LEFT_BUFFER_BIT_SGIX 0x00000004
-#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX 0x00000008
-#define GLX_AUX_BUFFERS_BIT_SGIX 0x00000010
-#define GLX_DEPTH_BUFFER_BIT_SGIX 0x00000020
-#define GLX_STENCIL_BUFFER_BIT_SGIX 0x00000040
-#define GLX_ACCUM_BUFFER_BIT_SGIX 0x00000080
-#define GLX_SAMPLE_BUFFERS_BIT_SGIX 0x00000100
-#define GLX_MAX_PBUFFER_WIDTH_SGIX 0x8016
-#define GLX_MAX_PBUFFER_HEIGHT_SGIX 0x8017
-#define GLX_MAX_PBUFFER_PIXELS_SGIX 0x8018
-#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX 0x8019
-#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX 0x801A
-#define GLX_PRESERVED_CONTENTS_SGIX 0x801B
-#define GLX_LARGEST_PBUFFER_SGIX 0x801C
-#define GLX_WIDTH_SGIX 0x801D
-#define GLX_HEIGHT_SGIX 0x801E
-#define GLX_EVENT_MASK_SGIX 0x801F
-#define GLX_DAMAGED_SGIX 0x8020
-#define GLX_SAVED_SGIX 0x8021
-#define GLX_WINDOW_SGIX 0x8022
-#define GLX_PBUFFER_SGIX 0x8023
-#define GLX_BUFFER_CLOBBER_MASK_SGIX 0x08000000
-
-typedef XID GLXPbufferSGIX;
-typedef struct { int type; unsigned long serial; Bool send_event; Display *display; GLXDrawable drawable; int event_type; int draw_type; unsigned int mask; int x, y; int width, height; int count; } GLXBufferClobberEventSGIX;
-
-typedef GLXPbuffer ( * PFNGLXCREATEGLXPBUFFERSGIXPROC) (Display* dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list);
-typedef void ( * PFNGLXDESTROYGLXPBUFFERSGIXPROC) (Display* dpy, GLXPbuffer pbuf);
-typedef void ( * PFNGLXGETSELECTEDEVENTSGIXPROC) (Display* dpy, GLXDrawable drawable, unsigned long *mask);
-typedef void ( * PFNGLXQUERYGLXPBUFFERSGIXPROC) (Display* dpy, GLXPbuffer pbuf, int attribute, unsigned int *value);
-typedef void ( * PFNGLXSELECTEVENTSGIXPROC) (Display* dpy, GLXDrawable drawable, unsigned long mask);
-
-#define glXCreateGLXPbufferSGIX GLXEW_GET_FUN(__glewXCreateGLXPbufferSGIX)
-#define glXDestroyGLXPbufferSGIX GLXEW_GET_FUN(__glewXDestroyGLXPbufferSGIX)
-#define glXGetSelectedEventSGIX GLXEW_GET_FUN(__glewXGetSelectedEventSGIX)
-#define glXQueryGLXPbufferSGIX GLXEW_GET_FUN(__glewXQueryGLXPbufferSGIX)
-#define glXSelectEventSGIX GLXEW_GET_FUN(__glewXSelectEventSGIX)
-
-#define GLXEW_SGIX_pbuffer GLXEW_GET_VAR(__GLXEW_SGIX_pbuffer)
-
-#endif /* GLX_SGIX_pbuffer */
-
-/* ------------------------- GLX_SGIX_swap_barrier ------------------------- */
-
-#ifndef GLX_SGIX_swap_barrier
-#define GLX_SGIX_swap_barrier 1
-
-typedef void ( * PFNGLXBINDSWAPBARRIERSGIXPROC) (Display *dpy, GLXDrawable drawable, int barrier);
-typedef Bool ( * PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) (Display *dpy, int screen, int *max);
-
-#define glXBindSwapBarrierSGIX GLXEW_GET_FUN(__glewXBindSwapBarrierSGIX)
-#define glXQueryMaxSwapBarriersSGIX GLXEW_GET_FUN(__glewXQueryMaxSwapBarriersSGIX)
-
-#define GLXEW_SGIX_swap_barrier GLXEW_GET_VAR(__GLXEW_SGIX_swap_barrier)
-
-#endif /* GLX_SGIX_swap_barrier */
-
-/* -------------------------- GLX_SGIX_swap_group -------------------------- */
-
-#ifndef GLX_SGIX_swap_group
-#define GLX_SGIX_swap_group 1
-
-typedef void ( * PFNGLXJOINSWAPGROUPSGIXPROC) (Display *dpy, GLXDrawable drawable, GLXDrawable member);
-
-#define glXJoinSwapGroupSGIX GLXEW_GET_FUN(__glewXJoinSwapGroupSGIX)
-
-#define GLXEW_SGIX_swap_group GLXEW_GET_VAR(__GLXEW_SGIX_swap_group)
-
-#endif /* GLX_SGIX_swap_group */
-
-/* ------------------------- GLX_SGIX_video_resize ------------------------- */
-
-#ifndef GLX_SGIX_video_resize
-#define GLX_SGIX_video_resize 1
-
-#define GLX_SYNC_FRAME_SGIX 0x00000000
-#define GLX_SYNC_SWAP_SGIX 0x00000001
-
-typedef int ( * PFNGLXBINDCHANNELTOWINDOWSGIXPROC) (Display* display, int screen, int channel, Window window);
-typedef int ( * PFNGLXCHANNELRECTSGIXPROC) (Display* display, int screen, int channel, int x, int y, int w, int h);
-typedef int ( * PFNGLXCHANNELRECTSYNCSGIXPROC) (Display* display, int screen, int channel, GLenum synctype);
-typedef int ( * PFNGLXQUERYCHANNELDELTASSGIXPROC) (Display* display, int screen, int channel, int *x, int *y, int *w, int *h);
-typedef int ( * PFNGLXQUERYCHANNELRECTSGIXPROC) (Display* display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
-
-#define glXBindChannelToWindowSGIX GLXEW_GET_FUN(__glewXBindChannelToWindowSGIX)
-#define glXChannelRectSGIX GLXEW_GET_FUN(__glewXChannelRectSGIX)
-#define glXChannelRectSyncSGIX GLXEW_GET_FUN(__glewXChannelRectSyncSGIX)
-#define glXQueryChannelDeltasSGIX GLXEW_GET_FUN(__glewXQueryChannelDeltasSGIX)
-#define glXQueryChannelRectSGIX GLXEW_GET_FUN(__glewXQueryChannelRectSGIX)
-
-#define GLXEW_SGIX_video_resize GLXEW_GET_VAR(__GLXEW_SGIX_video_resize)
-
-#endif /* GLX_SGIX_video_resize */
-
-/* ---------------------- GLX_SGIX_visual_select_group --------------------- */
-
-#ifndef GLX_SGIX_visual_select_group
-#define GLX_SGIX_visual_select_group 1
-
-#define GLX_VISUAL_SELECT_GROUP_SGIX 0x8028
-
-#define GLXEW_SGIX_visual_select_group GLXEW_GET_VAR(__GLXEW_SGIX_visual_select_group)
-
-#endif /* GLX_SGIX_visual_select_group */
-
-/* ---------------------------- GLX_SGI_cushion ---------------------------- */
-
-#ifndef GLX_SGI_cushion
-#define GLX_SGI_cushion 1
-
-typedef void ( * PFNGLXCUSHIONSGIPROC) (Display* dpy, Window window, float cushion);
-
-#define glXCushionSGI GLXEW_GET_FUN(__glewXCushionSGI)
-
-#define GLXEW_SGI_cushion GLXEW_GET_VAR(__GLXEW_SGI_cushion)
-
-#endif /* GLX_SGI_cushion */
-
-/* ----------------------- GLX_SGI_make_current_read ----------------------- */
-
-#ifndef GLX_SGI_make_current_read
-#define GLX_SGI_make_current_read 1
-
-typedef GLXDrawable ( * PFNGLXGETCURRENTREADDRAWABLESGIPROC) (void);
-typedef Bool ( * PFNGLXMAKECURRENTREADSGIPROC) (Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
-
-#define glXGetCurrentReadDrawableSGI GLXEW_GET_FUN(__glewXGetCurrentReadDrawableSGI)
-#define glXMakeCurrentReadSGI GLXEW_GET_FUN(__glewXMakeCurrentReadSGI)
-
-#define GLXEW_SGI_make_current_read GLXEW_GET_VAR(__GLXEW_SGI_make_current_read)
-
-#endif /* GLX_SGI_make_current_read */
-
-/* -------------------------- GLX_SGI_swap_control ------------------------- */
-
-#ifndef GLX_SGI_swap_control
-#define GLX_SGI_swap_control 1
-
-typedef int ( * PFNGLXSWAPINTERVALSGIPROC) (int interval);
-
-#define glXSwapIntervalSGI GLXEW_GET_FUN(__glewXSwapIntervalSGI)
-
-#define GLXEW_SGI_swap_control GLXEW_GET_VAR(__GLXEW_SGI_swap_control)
-
-#endif /* GLX_SGI_swap_control */
-
-/* --------------------------- GLX_SGI_video_sync -------------------------- */
-
-#ifndef GLX_SGI_video_sync
-#define GLX_SGI_video_sync 1
-
-typedef int ( * PFNGLXGETVIDEOSYNCSGIPROC) (uint* count);
-typedef int ( * PFNGLXWAITVIDEOSYNCSGIPROC) (int divisor, int remainder, unsigned int* count);
-
-#define glXGetVideoSyncSGI GLXEW_GET_FUN(__glewXGetVideoSyncSGI)
-#define glXWaitVideoSyncSGI GLXEW_GET_FUN(__glewXWaitVideoSyncSGI)
-
-#define GLXEW_SGI_video_sync GLXEW_GET_VAR(__GLXEW_SGI_video_sync)
-
-#endif /* GLX_SGI_video_sync */
-
-/* --------------------- GLX_SUN_get_transparent_index --------------------- */
-
-#ifndef GLX_SUN_get_transparent_index
-#define GLX_SUN_get_transparent_index 1
-
-typedef Status ( * PFNGLXGETTRANSPARENTINDEXSUNPROC) (Display* dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex);
-
-#define glXGetTransparentIndexSUN GLXEW_GET_FUN(__glewXGetTransparentIndexSUN)
-
-#define GLXEW_SUN_get_transparent_index GLXEW_GET_VAR(__GLXEW_SUN_get_transparent_index)
-
-#endif /* GLX_SUN_get_transparent_index */
-
-/* -------------------------- GLX_SUN_video_resize ------------------------- */
-
-#ifndef GLX_SUN_video_resize
-#define GLX_SUN_video_resize 1
-
-#define GLX_VIDEO_RESIZE_SUN 0x8171
-#define GL_VIDEO_RESIZE_COMPENSATION_SUN 0x85CD
-
-typedef int ( * PFNGLXGETVIDEORESIZESUNPROC) (Display* display, GLXDrawable window, float* factor);
-typedef int ( * PFNGLXVIDEORESIZESUNPROC) (Display* display, GLXDrawable window, float factor);
-
-#define glXGetVideoResizeSUN GLXEW_GET_FUN(__glewXGetVideoResizeSUN)
-#define glXVideoResizeSUN GLXEW_GET_FUN(__glewXVideoResizeSUN)
-
-#define GLXEW_SUN_video_resize GLXEW_GET_VAR(__GLXEW_SUN_video_resize)
-
-#endif /* GLX_SUN_video_resize */
-
-/* ------------------------------------------------------------------------- */
-
-#ifdef GLEW_MX
-#define GLXEW_EXPORT
-#else
-#define GLXEW_EXPORT extern
-#endif /* GLEW_MX */
-
-extern PFNGLXGETCURRENTDISPLAYPROC __glewXGetCurrentDisplay;
-
-extern PFNGLXCHOOSEFBCONFIGPROC __glewXChooseFBConfig;
-extern PFNGLXCREATENEWCONTEXTPROC __glewXCreateNewContext;
-extern PFNGLXCREATEPBUFFERPROC __glewXCreatePbuffer;
-extern PFNGLXCREATEPIXMAPPROC __glewXCreatePixmap;
-extern PFNGLXCREATEWINDOWPROC __glewXCreateWindow;
-extern PFNGLXDESTROYPBUFFERPROC __glewXDestroyPbuffer;
-extern PFNGLXDESTROYPIXMAPPROC __glewXDestroyPixmap;
-extern PFNGLXDESTROYWINDOWPROC __glewXDestroyWindow;
-extern PFNGLXGETCURRENTREADDRAWABLEPROC __glewXGetCurrentReadDrawable;
-extern PFNGLXGETFBCONFIGATTRIBPROC __glewXGetFBConfigAttrib;
-extern PFNGLXGETFBCONFIGSPROC __glewXGetFBConfigs;
-extern PFNGLXGETSELECTEDEVENTPROC __glewXGetSelectedEvent;
-extern PFNGLXGETVISUALFROMFBCONFIGPROC __glewXGetVisualFromFBConfig;
-extern PFNGLXMAKECONTEXTCURRENTPROC __glewXMakeContextCurrent;
-extern PFNGLXQUERYCONTEXTPROC __glewXQueryContext;
-extern PFNGLXQUERYDRAWABLEPROC __glewXQueryDrawable;
-extern PFNGLXSELECTEVENTPROC __glewXSelectEvent;
-
-extern PFNGLXBINDTEXIMAGEATIPROC __glewXBindTexImageATI;
-extern PFNGLXDRAWABLEATTRIBATIPROC __glewXDrawableAttribATI;
-extern PFNGLXRELEASETEXIMAGEATIPROC __glewXReleaseTexImageATI;
-
-extern PFNGLXFREECONTEXTEXTPROC __glewXFreeContextEXT;
-extern PFNGLXGETCONTEXTIDEXTPROC __glewXGetContextIDEXT;
-extern PFNGLXIMPORTCONTEXTEXTPROC __glewXImportContextEXT;
-extern PFNGLXQUERYCONTEXTINFOEXTPROC __glewXQueryContextInfoEXT;
-
-extern PFNGLXBINDTEXIMAGEEXTPROC __glewXBindTexImageEXT;
-extern PFNGLXRELEASETEXIMAGEEXTPROC __glewXReleaseTexImageEXT;
-
-extern PFNGLXGETAGPOFFSETMESAPROC __glewXGetAGPOffsetMESA;
-
-extern PFNGLXCOPYSUBBUFFERMESAPROC __glewXCopySubBufferMESA;
-
-extern PFNGLXCREATEGLXPIXMAPMESAPROC __glewXCreateGLXPixmapMESA;
-
-extern PFNGLXRELEASEBUFFERSMESAPROC __glewXReleaseBuffersMESA;
-
-extern PFNGLXSET3DFXMODEMESAPROC __glewXSet3DfxModeMESA;
-
-extern PFNGLXALLOCATEMEMORYNVPROC __glewXAllocateMemoryNV;
-extern PFNGLXFREEMEMORYNVPROC __glewXFreeMemoryNV;
-
-extern PFNGLXGETMSCRATEOMLPROC __glewXGetMscRateOML;
-extern PFNGLXGETSYNCVALUESOMLPROC __glewXGetSyncValuesOML;
-extern PFNGLXSWAPBUFFERSMSCOMLPROC __glewXSwapBuffersMscOML;
-extern PFNGLXWAITFORMSCOMLPROC __glewXWaitForMscOML;
-extern PFNGLXWAITFORSBCOMLPROC __glewXWaitForSbcOML;
-
-extern PFNGLXCHOOSEFBCONFIGSGIXPROC __glewXChooseFBConfigSGIX;
-extern PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC __glewXCreateContextWithConfigSGIX;
-extern PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC __glewXCreateGLXPixmapWithConfigSGIX;
-extern PFNGLXGETFBCONFIGATTRIBSGIXPROC __glewXGetFBConfigAttribSGIX;
-extern PFNGLXGETFBCONFIGFROMVISUALSGIXPROC __glewXGetFBConfigFromVisualSGIX;
-extern PFNGLXGETVISUALFROMFBCONFIGSGIXPROC __glewXGetVisualFromFBConfigSGIX;
-
-extern PFNGLXBINDHYPERPIPESGIXPROC __glewXBindHyperpipeSGIX;
-extern PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC __glewXDestroyHyperpipeConfigSGIX;
-extern PFNGLXHYPERPIPEATTRIBSGIXPROC __glewXHyperpipeAttribSGIX;
-extern PFNGLXHYPERPIPECONFIGSGIXPROC __glewXHyperpipeConfigSGIX;
-extern PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC __glewXQueryHyperpipeAttribSGIX;
-extern PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC __glewXQueryHyperpipeBestAttribSGIX;
-extern PFNGLXQUERYHYPERPIPECONFIGSGIXPROC __glewXQueryHyperpipeConfigSGIX;
-extern PFNGLXQUERYHYPERPIPENETWORKSGIXPROC __glewXQueryHyperpipeNetworkSGIX;
-
-extern PFNGLXCREATEGLXPBUFFERSGIXPROC __glewXCreateGLXPbufferSGIX;
-extern PFNGLXDESTROYGLXPBUFFERSGIXPROC __glewXDestroyGLXPbufferSGIX;
-extern PFNGLXGETSELECTEDEVENTSGIXPROC __glewXGetSelectedEventSGIX;
-extern PFNGLXQUERYGLXPBUFFERSGIXPROC __glewXQueryGLXPbufferSGIX;
-extern PFNGLXSELECTEVENTSGIXPROC __glewXSelectEventSGIX;
-
-extern PFNGLXBINDSWAPBARRIERSGIXPROC __glewXBindSwapBarrierSGIX;
-extern PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC __glewXQueryMaxSwapBarriersSGIX;
-
-extern PFNGLXJOINSWAPGROUPSGIXPROC __glewXJoinSwapGroupSGIX;
-
-extern PFNGLXBINDCHANNELTOWINDOWSGIXPROC __glewXBindChannelToWindowSGIX;
-extern PFNGLXCHANNELRECTSGIXPROC __glewXChannelRectSGIX;
-extern PFNGLXCHANNELRECTSYNCSGIXPROC __glewXChannelRectSyncSGIX;
-extern PFNGLXQUERYCHANNELDELTASSGIXPROC __glewXQueryChannelDeltasSGIX;
-extern PFNGLXQUERYCHANNELRECTSGIXPROC __glewXQueryChannelRectSGIX;
-
-extern PFNGLXCUSHIONSGIPROC __glewXCushionSGI;
-
-extern PFNGLXGETCURRENTREADDRAWABLESGIPROC __glewXGetCurrentReadDrawableSGI;
-extern PFNGLXMAKECURRENTREADSGIPROC __glewXMakeCurrentReadSGI;
-
-extern PFNGLXSWAPINTERVALSGIPROC __glewXSwapIntervalSGI;
-
-extern PFNGLXGETVIDEOSYNCSGIPROC __glewXGetVideoSyncSGI;
-extern PFNGLXWAITVIDEOSYNCSGIPROC __glewXWaitVideoSyncSGI;
-
-extern PFNGLXGETTRANSPARENTINDEXSUNPROC __glewXGetTransparentIndexSUN;
-
-extern PFNGLXGETVIDEORESIZESUNPROC __glewXGetVideoResizeSUN;
-extern PFNGLXVIDEORESIZESUNPROC __glewXVideoResizeSUN;
-
-#if defined(GLEW_MX)
-struct GLXEWContextStruct
-{
-#endif /* GLEW_MX */
-
-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_0;
-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_1;
-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_2;
-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_3;
-GLXEW_EXPORT GLboolean __GLXEW_VERSION_1_4;
-GLXEW_EXPORT GLboolean __GLXEW_3DFX_multisample;
-GLXEW_EXPORT GLboolean __GLXEW_ARB_fbconfig_float;
-GLXEW_EXPORT GLboolean __GLXEW_ARB_get_proc_address;
-GLXEW_EXPORT GLboolean __GLXEW_ARB_multisample;
-GLXEW_EXPORT GLboolean __GLXEW_ATI_pixel_format_float;
-GLXEW_EXPORT GLboolean __GLXEW_ATI_render_texture;
-GLXEW_EXPORT GLboolean __GLXEW_EXT_fbconfig_packed_float;
-GLXEW_EXPORT GLboolean __GLXEW_EXT_framebuffer_sRGB;
-GLXEW_EXPORT GLboolean __GLXEW_EXT_import_context;
-GLXEW_EXPORT GLboolean __GLXEW_EXT_scene_marker;
-GLXEW_EXPORT GLboolean __GLXEW_EXT_texture_from_pixmap;
-GLXEW_EXPORT GLboolean __GLXEW_EXT_visual_info;
-GLXEW_EXPORT GLboolean __GLXEW_EXT_visual_rating;
-GLXEW_EXPORT GLboolean __GLXEW_MESA_agp_offset;
-GLXEW_EXPORT GLboolean __GLXEW_MESA_copy_sub_buffer;
-GLXEW_EXPORT GLboolean __GLXEW_MESA_pixmap_colormap;
-GLXEW_EXPORT GLboolean __GLXEW_MESA_release_buffers;
-GLXEW_EXPORT GLboolean __GLXEW_MESA_set_3dfx_mode;
-GLXEW_EXPORT GLboolean __GLXEW_NV_float_buffer;
-GLXEW_EXPORT GLboolean __GLXEW_NV_vertex_array_range;
-GLXEW_EXPORT GLboolean __GLXEW_OML_swap_method;
-GLXEW_EXPORT GLboolean __GLXEW_OML_sync_control;
-GLXEW_EXPORT GLboolean __GLXEW_SGIS_blended_overlay;
-GLXEW_EXPORT GLboolean __GLXEW_SGIS_color_range;
-GLXEW_EXPORT GLboolean __GLXEW_SGIS_multisample;
-GLXEW_EXPORT GLboolean __GLXEW_SGIS_shared_multisample;
-GLXEW_EXPORT GLboolean __GLXEW_SGIX_fbconfig;
-GLXEW_EXPORT GLboolean __GLXEW_SGIX_hyperpipe;
-GLXEW_EXPORT GLboolean __GLXEW_SGIX_pbuffer;
-GLXEW_EXPORT GLboolean __GLXEW_SGIX_swap_barrier;
-GLXEW_EXPORT GLboolean __GLXEW_SGIX_swap_group;
-GLXEW_EXPORT GLboolean __GLXEW_SGIX_video_resize;
-GLXEW_EXPORT GLboolean __GLXEW_SGIX_visual_select_group;
-GLXEW_EXPORT GLboolean __GLXEW_SGI_cushion;
-GLXEW_EXPORT GLboolean __GLXEW_SGI_make_current_read;
-GLXEW_EXPORT GLboolean __GLXEW_SGI_swap_control;
-GLXEW_EXPORT GLboolean __GLXEW_SGI_video_sync;
-GLXEW_EXPORT GLboolean __GLXEW_SUN_get_transparent_index;
-GLXEW_EXPORT GLboolean __GLXEW_SUN_video_resize;
-
-#ifdef GLEW_MX
-}; /* GLXEWContextStruct */
-#endif /* GLEW_MX */
-
-/* ------------------------------------------------------------------------ */
-
-#ifdef GLEW_MX
-
-typedef struct GLXEWContextStruct GLXEWContext;
-extern GLenum glxewContextInit (GLXEWContext* ctx);
-extern GLboolean glxewContextIsSupported (GLXEWContext* ctx, const char* name);
-
-#define glxewInit() glxewContextInit(glxewGetContext())
-#define glxewIsSupported(x) glxewContextIsSupported(glxewGetContext(), x)
-
-#define GLXEW_GET_VAR(x) (*(const GLboolean*)&(glxewGetContext()->x))
-#define GLXEW_GET_FUN(x) x
-
-#else /* GLEW_MX */
-
-#define GLXEW_GET_VAR(x) (*(const GLboolean*)&x)
-#define GLXEW_GET_FUN(x) x
-
-extern GLboolean glxewIsSupported (const char* name);
-
-#endif /* GLEW_MX */
-
-extern GLboolean glxewGetExtension (const char* name);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* __glxew_h__ */
diff --git a/nvcommon/GLEW/include/GL/wglew.h b/nvcommon/GLEW/include/GL/wglew.h
deleted file mode 100644
index b304814..0000000
--- a/nvcommon/GLEW/include/GL/wglew.h
+++ /dev/null
@@ -1,1026 +0,0 @@
-/*
-** The OpenGL Extension Wrangler Library
-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
-** Copyright (C) 2002, Lev Povalahev
-** All rights reserved.
-** 
-** Redistribution and use in source and binary forms, with or without 
-** modification, are permitted provided that the following conditions are met:
-** 
-** * Redistributions of source code must retain the above copyright notice, 
-**   this list of conditions and the following disclaimer.
-** * Redistributions in binary form must reproduce the above copyright notice, 
-**   this list of conditions and the following disclaimer in the documentation 
-**   and/or other materials provided with the distribution.
-** * The name of the author may be used to endorse or promote products 
-**   derived from this software without specific prior written permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-** THE POSSIBILITY OF SUCH DAMAGE.
-*/
-
-/*
-** Copyright (c) 2007 The Khronos Group Inc.
-** 
-** Permission is hereby granted, free of charge, to any person obtaining a
-** copy of this software and/or associated documentation files (the
-** "Materials"), to deal in the Materials without restriction, including
-** without limitation the rights to use, copy, modify, merge, publish,
-** distribute, sublicense, and/or sell copies of the Materials, and to
-** permit persons to whom the Materials are furnished to do so, subject to
-** the following conditions:
-** 
-** The above copyright notice and this permission notice shall be included
-** in all copies or substantial portions of the Materials.
-** 
-** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
-*/
-
-#ifndef __wglew_h__
-#define __wglew_h__
-#define __WGLEW_H__
-
-#ifdef __wglext_h_
-#error wglext.h included before wglew.h
-#endif
-
-#define __wglext_h_
-
-#if !defined(APIENTRY) && !defined(__CYGWIN__)
-#  ifndef WIN32_LEAN_AND_MEAN
-#    define WIN32_LEAN_AND_MEAN 1
-#  endif
-#include <windows.h>
-#endif
-
-/*
- * GLEW_STATIC needs to be set when using the static version.
- * GLEW_BUILD is set when building the DLL version.
- */
-#ifdef GLEW_STATIC
-#  define GLEWAPI extern
-#else
-#  ifdef GLEW_BUILD
-#    define GLEWAPI extern __declspec(dllexport)
-#  else
-#    define GLEWAPI extern __declspec(dllimport)
-#  endif
-#endif
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* -------------------------- WGL_3DFX_multisample ------------------------- */
-
-#ifndef WGL_3DFX_multisample
-#define WGL_3DFX_multisample 1
-
-#define WGL_SAMPLE_BUFFERS_3DFX 0x2060
-#define WGL_SAMPLES_3DFX 0x2061
-
-#define WGLEW_3DFX_multisample WGLEW_GET_VAR(__WGLEW_3DFX_multisample)
-
-#endif /* WGL_3DFX_multisample */
-
-/* ------------------------- WGL_3DL_stereo_control ------------------------ */
-
-#ifndef WGL_3DL_stereo_control
-#define WGL_3DL_stereo_control 1
-
-#define WGL_STEREO_EMITTER_ENABLE_3DL 0x2055
-#define WGL_STEREO_EMITTER_DISABLE_3DL 0x2056
-#define WGL_STEREO_POLARITY_NORMAL_3DL 0x2057
-#define WGL_STEREO_POLARITY_INVERT_3DL 0x2058
-
-typedef BOOL (WINAPI * PFNWGLSETSTEREOEMITTERSTATE3DLPROC) (HDC hDC, UINT uState);
-
-#define wglSetStereoEmitterState3DL WGLEW_GET_FUN(__wglewSetStereoEmitterState3DL)
-
-#define WGLEW_3DL_stereo_control WGLEW_GET_VAR(__WGLEW_3DL_stereo_control)
-
-#endif /* WGL_3DL_stereo_control */
-
-/* ------------------------- WGL_ARB_buffer_region ------------------------- */
-
-#ifndef WGL_ARB_buffer_region
-#define WGL_ARB_buffer_region 1
-
-#define WGL_FRONT_COLOR_BUFFER_BIT_ARB 0x00000001
-#define WGL_BACK_COLOR_BUFFER_BIT_ARB 0x00000002
-#define WGL_DEPTH_BUFFER_BIT_ARB 0x00000004
-#define WGL_STENCIL_BUFFER_BIT_ARB 0x00000008
-
-typedef HANDLE (WINAPI * PFNWGLCREATEBUFFERREGIONARBPROC) (HDC hDC, int iLayerPlane, UINT uType);
-typedef VOID (WINAPI * PFNWGLDELETEBUFFERREGIONARBPROC) (HANDLE hRegion);
-typedef BOOL (WINAPI * PFNWGLRESTOREBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
-typedef BOOL (WINAPI * PFNWGLSAVEBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height);
-
-#define wglCreateBufferRegionARB WGLEW_GET_FUN(__wglewCreateBufferRegionARB)
-#define wglDeleteBufferRegionARB WGLEW_GET_FUN(__wglewDeleteBufferRegionARB)
-#define wglRestoreBufferRegionARB WGLEW_GET_FUN(__wglewRestoreBufferRegionARB)
-#define wglSaveBufferRegionARB WGLEW_GET_FUN(__wglewSaveBufferRegionARB)
-
-#define WGLEW_ARB_buffer_region WGLEW_GET_VAR(__WGLEW_ARB_buffer_region)
-
-#endif /* WGL_ARB_buffer_region */
-
-/* ----------------------- WGL_ARB_extensions_string ----------------------- */
-
-#ifndef WGL_ARB_extensions_string
-#define WGL_ARB_extensions_string 1
-
-typedef const char* (WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC hdc);
-
-#define wglGetExtensionsStringARB WGLEW_GET_FUN(__wglewGetExtensionsStringARB)
-
-#define WGLEW_ARB_extensions_string WGLEW_GET_VAR(__WGLEW_ARB_extensions_string)
-
-#endif /* WGL_ARB_extensions_string */
-
-/* ----------------------- WGL_ARB_make_current_read ----------------------- */
-
-#ifndef WGL_ARB_make_current_read
-#define WGL_ARB_make_current_read 1
-
-#define ERROR_INVALID_PIXEL_TYPE_ARB 0x2043
-#define ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB 0x2054
-
-typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCARBPROC) (VOID);
-typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTARBPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
-
-#define wglGetCurrentReadDCARB WGLEW_GET_FUN(__wglewGetCurrentReadDCARB)
-#define wglMakeContextCurrentARB WGLEW_GET_FUN(__wglewMakeContextCurrentARB)
-
-#define WGLEW_ARB_make_current_read WGLEW_GET_VAR(__WGLEW_ARB_make_current_read)
-
-#endif /* WGL_ARB_make_current_read */
-
-/* -------------------------- WGL_ARB_multisample -------------------------- */
-
-#ifndef WGL_ARB_multisample
-#define WGL_ARB_multisample 1
-
-#define WGL_SAMPLE_BUFFERS_ARB 0x2041
-#define WGL_SAMPLES_ARB 0x2042
-
-#define WGLEW_ARB_multisample WGLEW_GET_VAR(__WGLEW_ARB_multisample)
-
-#endif /* WGL_ARB_multisample */
-
-/* ---------------------------- WGL_ARB_pbuffer ---------------------------- */
-
-#ifndef WGL_ARB_pbuffer
-#define WGL_ARB_pbuffer 1
-
-#define WGL_DRAW_TO_PBUFFER_ARB 0x202D
-#define WGL_MAX_PBUFFER_PIXELS_ARB 0x202E
-#define WGL_MAX_PBUFFER_WIDTH_ARB 0x202F
-#define WGL_MAX_PBUFFER_HEIGHT_ARB 0x2030
-#define WGL_PBUFFER_LARGEST_ARB 0x2033
-#define WGL_PBUFFER_WIDTH_ARB 0x2034
-#define WGL_PBUFFER_HEIGHT_ARB 0x2035
-#define WGL_PBUFFER_LOST_ARB 0x2036
-
-DECLARE_HANDLE(HPBUFFERARB);
-
-typedef HPBUFFERARB (WINAPI * PFNWGLCREATEPBUFFERARBPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
-typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFERARBPROC) (HPBUFFERARB hPbuffer);
-typedef HDC (WINAPI * PFNWGLGETPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer);
-typedef BOOL (WINAPI * PFNWGLQUERYPBUFFERARBPROC) (HPBUFFERARB hPbuffer, int iAttribute, int* piValue);
-typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer, HDC hDC);
-
-#define wglCreatePbufferARB WGLEW_GET_FUN(__wglewCreatePbufferARB)
-#define wglDestroyPbufferARB WGLEW_GET_FUN(__wglewDestroyPbufferARB)
-#define wglGetPbufferDCARB WGLEW_GET_FUN(__wglewGetPbufferDCARB)
-#define wglQueryPbufferARB WGLEW_GET_FUN(__wglewQueryPbufferARB)
-#define wglReleasePbufferDCARB WGLEW_GET_FUN(__wglewReleasePbufferDCARB)
-
-#define WGLEW_ARB_pbuffer WGLEW_GET_VAR(__WGLEW_ARB_pbuffer)
-
-#endif /* WGL_ARB_pbuffer */
-
-/* -------------------------- WGL_ARB_pixel_format ------------------------- */
-
-#ifndef WGL_ARB_pixel_format
-#define WGL_ARB_pixel_format 1
-
-#define WGL_NUMBER_PIXEL_FORMATS_ARB 0x2000
-#define WGL_DRAW_TO_WINDOW_ARB 0x2001
-#define WGL_DRAW_TO_BITMAP_ARB 0x2002
-#define WGL_ACCELERATION_ARB 0x2003
-#define WGL_NEED_PALETTE_ARB 0x2004
-#define WGL_NEED_SYSTEM_PALETTE_ARB 0x2005
-#define WGL_SWAP_LAYER_BUFFERS_ARB 0x2006
-#define WGL_SWAP_METHOD_ARB 0x2007
-#define WGL_NUMBER_OVERLAYS_ARB 0x2008
-#define WGL_NUMBER_UNDERLAYS_ARB 0x2009
-#define WGL_TRANSPARENT_ARB 0x200A
-#define WGL_SHARE_DEPTH_ARB 0x200C
-#define WGL_SHARE_STENCIL_ARB 0x200D
-#define WGL_SHARE_ACCUM_ARB 0x200E
-#define WGL_SUPPORT_GDI_ARB 0x200F
-#define WGL_SUPPORT_OPENGL_ARB 0x2010
-#define WGL_DOUBLE_BUFFER_ARB 0x2011
-#define WGL_STEREO_ARB 0x2012
-#define WGL_PIXEL_TYPE_ARB 0x2013
-#define WGL_COLOR_BITS_ARB 0x2014
-#define WGL_RED_BITS_ARB 0x2015
-#define WGL_RED_SHIFT_ARB 0x2016
-#define WGL_GREEN_BITS_ARB 0x2017
-#define WGL_GREEN_SHIFT_ARB 0x2018
-#define WGL_BLUE_BITS_ARB 0x2019
-#define WGL_BLUE_SHIFT_ARB 0x201A
-#define WGL_ALPHA_BITS_ARB 0x201B
-#define WGL_ALPHA_SHIFT_ARB 0x201C
-#define WGL_ACCUM_BITS_ARB 0x201D
-#define WGL_ACCUM_RED_BITS_ARB 0x201E
-#define WGL_ACCUM_GREEN_BITS_ARB 0x201F
-#define WGL_ACCUM_BLUE_BITS_ARB 0x2020
-#define WGL_ACCUM_ALPHA_BITS_ARB 0x2021
-#define WGL_DEPTH_BITS_ARB 0x2022
-#define WGL_STENCIL_BITS_ARB 0x2023
-#define WGL_AUX_BUFFERS_ARB 0x2024
-#define WGL_NO_ACCELERATION_ARB 0x2025
-#define WGL_GENERIC_ACCELERATION_ARB 0x2026
-#define WGL_FULL_ACCELERATION_ARB 0x2027
-#define WGL_SWAP_EXCHANGE_ARB 0x2028
-#define WGL_SWAP_COPY_ARB 0x2029
-#define WGL_SWAP_UNDEFINED_ARB 0x202A
-#define WGL_TYPE_RGBA_ARB 0x202B
-#define WGL_TYPE_COLORINDEX_ARB 0x202C
-#define WGL_TRANSPARENT_RED_VALUE_ARB 0x2037
-#define WGL_TRANSPARENT_GREEN_VALUE_ARB 0x2038
-#define WGL_TRANSPARENT_BLUE_VALUE_ARB 0x2039
-#define WGL_TRANSPARENT_ALPHA_VALUE_ARB 0x203A
-#define WGL_TRANSPARENT_INDEX_VALUE_ARB 0x203B
-
-typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int* piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, FLOAT *pfValues);
-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int* piAttributes, int *piValues);
-
-#define wglChoosePixelFormatARB WGLEW_GET_FUN(__wglewChoosePixelFormatARB)
-#define wglGetPixelFormatAttribfvARB WGLEW_GET_FUN(__wglewGetPixelFormatAttribfvARB)
-#define wglGetPixelFormatAttribivARB WGLEW_GET_FUN(__wglewGetPixelFormatAttribivARB)
-
-#define WGLEW_ARB_pixel_format WGLEW_GET_VAR(__WGLEW_ARB_pixel_format)
-
-#endif /* WGL_ARB_pixel_format */
-
-/* ----------------------- WGL_ARB_pixel_format_float ---------------------- */
-
-#ifndef WGL_ARB_pixel_format_float
-#define WGL_ARB_pixel_format_float 1
-
-#define WGL_TYPE_RGBA_FLOAT_ARB 0x21A0
-
-#define WGLEW_ARB_pixel_format_float WGLEW_GET_VAR(__WGLEW_ARB_pixel_format_float)
-
-#endif /* WGL_ARB_pixel_format_float */
-
-/* ------------------------- WGL_ARB_render_texture ------------------------ */
-
-#ifndef WGL_ARB_render_texture
-#define WGL_ARB_render_texture 1
-
-#define WGL_BIND_TO_TEXTURE_RGB_ARB 0x2070
-#define WGL_BIND_TO_TEXTURE_RGBA_ARB 0x2071
-#define WGL_TEXTURE_FORMAT_ARB 0x2072
-#define WGL_TEXTURE_TARGET_ARB 0x2073
-#define WGL_MIPMAP_TEXTURE_ARB 0x2074
-#define WGL_TEXTURE_RGB_ARB 0x2075
-#define WGL_TEXTURE_RGBA_ARB 0x2076
-#define WGL_NO_TEXTURE_ARB 0x2077
-#define WGL_TEXTURE_CUBE_MAP_ARB 0x2078
-#define WGL_TEXTURE_1D_ARB 0x2079
-#define WGL_TEXTURE_2D_ARB 0x207A
-#define WGL_MIPMAP_LEVEL_ARB 0x207B
-#define WGL_CUBE_MAP_FACE_ARB 0x207C
-#define WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x207D
-#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x207E
-#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x207F
-#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x2080
-#define WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x2081
-#define WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x2082
-#define WGL_FRONT_LEFT_ARB 0x2083
-#define WGL_FRONT_RIGHT_ARB 0x2084
-#define WGL_BACK_LEFT_ARB 0x2085
-#define WGL_BACK_RIGHT_ARB 0x2086
-#define WGL_AUX0_ARB 0x2087
-#define WGL_AUX1_ARB 0x2088
-#define WGL_AUX2_ARB 0x2089
-#define WGL_AUX3_ARB 0x208A
-#define WGL_AUX4_ARB 0x208B
-#define WGL_AUX5_ARB 0x208C
-#define WGL_AUX6_ARB 0x208D
-#define WGL_AUX7_ARB 0x208E
-#define WGL_AUX8_ARB 0x208F
-#define WGL_AUX9_ARB 0x2090
-
-typedef BOOL (WINAPI * PFNWGLBINDTEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
-typedef BOOL (WINAPI * PFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
-typedef BOOL (WINAPI * PFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB hPbuffer, const int* piAttribList);
-
-#define wglBindTexImageARB WGLEW_GET_FUN(__wglewBindTexImageARB)
-#define wglReleaseTexImageARB WGLEW_GET_FUN(__wglewReleaseTexImageARB)
-#define wglSetPbufferAttribARB WGLEW_GET_FUN(__wglewSetPbufferAttribARB)
-
-#define WGLEW_ARB_render_texture WGLEW_GET_VAR(__WGLEW_ARB_render_texture)
-
-#endif /* WGL_ARB_render_texture */
-
-/* ----------------------- WGL_ATI_pixel_format_float ---------------------- */
-
-#ifndef WGL_ATI_pixel_format_float
-#define WGL_ATI_pixel_format_float 1
-
-#define WGL_TYPE_RGBA_FLOAT_ATI 0x21A0
-#define GL_RGBA_FLOAT_MODE_ATI 0x8820
-#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
-
-#define WGLEW_ATI_pixel_format_float WGLEW_GET_VAR(__WGLEW_ATI_pixel_format_float)
-
-#endif /* WGL_ATI_pixel_format_float */
-
-/* -------------------- WGL_ATI_render_texture_rectangle ------------------- */
-
-#ifndef WGL_ATI_render_texture_rectangle
-#define WGL_ATI_render_texture_rectangle 1
-
-#define WGL_TEXTURE_RECTANGLE_ATI 0x21A5
-
-#define WGLEW_ATI_render_texture_rectangle WGLEW_GET_VAR(__WGLEW_ATI_render_texture_rectangle)
-
-#endif /* WGL_ATI_render_texture_rectangle */
-
-/* -------------------------- WGL_EXT_depth_float -------------------------- */
-
-#ifndef WGL_EXT_depth_float
-#define WGL_EXT_depth_float 1
-
-#define WGL_DEPTH_FLOAT_EXT 0x2040
-
-#define WGLEW_EXT_depth_float WGLEW_GET_VAR(__WGLEW_EXT_depth_float)
-
-#endif /* WGL_EXT_depth_float */
-
-/* ---------------------- WGL_EXT_display_color_table ---------------------- */
-
-#ifndef WGL_EXT_display_color_table
-#define WGL_EXT_display_color_table 1
-
-typedef GLboolean (WINAPI * PFNWGLBINDDISPLAYCOLORTABLEEXTPROC) (GLushort id);
-typedef GLboolean (WINAPI * PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) (GLushort id);
-typedef void (WINAPI * PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) (GLushort id);
-typedef GLboolean (WINAPI * PFNWGLLOADDISPLAYCOLORTABLEEXTPROC) (GLushort* table, GLuint length);
-
-#define wglBindDisplayColorTableEXT WGLEW_GET_FUN(__wglewBindDisplayColorTableEXT)
-#define wglCreateDisplayColorTableEXT WGLEW_GET_FUN(__wglewCreateDisplayColorTableEXT)
-#define wglDestroyDisplayColorTableEXT WGLEW_GET_FUN(__wglewDestroyDisplayColorTableEXT)
-#define wglLoadDisplayColorTableEXT WGLEW_GET_FUN(__wglewLoadDisplayColorTableEXT)
-
-#define WGLEW_EXT_display_color_table WGLEW_GET_VAR(__WGLEW_EXT_display_color_table)
-
-#endif /* WGL_EXT_display_color_table */
-
-/* ----------------------- WGL_EXT_extensions_string ----------------------- */
-
-#ifndef WGL_EXT_extensions_string
-#define WGL_EXT_extensions_string 1
-
-typedef const char* (WINAPI * PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);
-
-#define wglGetExtensionsStringEXT WGLEW_GET_FUN(__wglewGetExtensionsStringEXT)
-
-#define WGLEW_EXT_extensions_string WGLEW_GET_VAR(__WGLEW_EXT_extensions_string)
-
-#endif /* WGL_EXT_extensions_string */
-
-/* ------------------------ WGL_EXT_framebuffer_sRGB ----------------------- */
-
-#ifndef WGL_EXT_framebuffer_sRGB
-#define WGL_EXT_framebuffer_sRGB 1
-
-#define WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20A9
-
-#define WGLEW_EXT_framebuffer_sRGB WGLEW_GET_VAR(__WGLEW_EXT_framebuffer_sRGB)
-
-#endif /* WGL_EXT_framebuffer_sRGB */
-
-/* ----------------------- WGL_EXT_make_current_read ----------------------- */
-
-#ifndef WGL_EXT_make_current_read
-#define WGL_EXT_make_current_read 1
-
-#define ERROR_INVALID_PIXEL_TYPE_EXT 0x2043
-
-typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCEXTPROC) (VOID);
-typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTEXTPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
-
-#define wglGetCurrentReadDCEXT WGLEW_GET_FUN(__wglewGetCurrentReadDCEXT)
-#define wglMakeContextCurrentEXT WGLEW_GET_FUN(__wglewMakeContextCurrentEXT)
-
-#define WGLEW_EXT_make_current_read WGLEW_GET_VAR(__WGLEW_EXT_make_current_read)
-
-#endif /* WGL_EXT_make_current_read */
-
-/* -------------------------- WGL_EXT_multisample -------------------------- */
-
-#ifndef WGL_EXT_multisample
-#define WGL_EXT_multisample 1
-
-#define WGL_SAMPLE_BUFFERS_EXT 0x2041
-#define WGL_SAMPLES_EXT 0x2042
-
-#define WGLEW_EXT_multisample WGLEW_GET_VAR(__WGLEW_EXT_multisample)
-
-#endif /* WGL_EXT_multisample */
-
-/* ---------------------------- WGL_EXT_pbuffer ---------------------------- */
-
-#ifndef WGL_EXT_pbuffer
-#define WGL_EXT_pbuffer 1
-
-#define WGL_DRAW_TO_PBUFFER_EXT 0x202D
-#define WGL_MAX_PBUFFER_PIXELS_EXT 0x202E
-#define WGL_MAX_PBUFFER_WIDTH_EXT 0x202F
-#define WGL_MAX_PBUFFER_HEIGHT_EXT 0x2030
-#define WGL_OPTIMAL_PBUFFER_WIDTH_EXT 0x2031
-#define WGL_OPTIMAL_PBUFFER_HEIGHT_EXT 0x2032
-#define WGL_PBUFFER_LARGEST_EXT 0x2033
-#define WGL_PBUFFER_WIDTH_EXT 0x2034
-#define WGL_PBUFFER_HEIGHT_EXT 0x2035
-
-DECLARE_HANDLE(HPBUFFEREXT);
-
-typedef HPBUFFEREXT (WINAPI * PFNWGLCREATEPBUFFEREXTPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int* piAttribList);
-typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer);
-typedef HDC (WINAPI * PFNWGLGETPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer);
-typedef BOOL (WINAPI * PFNWGLQUERYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer, int iAttribute, int* piValue);
-typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer, HDC hDC);
-
-#define wglCreatePbufferEXT WGLEW_GET_FUN(__wglewCreatePbufferEXT)
-#define wglDestroyPbufferEXT WGLEW_GET_FUN(__wglewDestroyPbufferEXT)
-#define wglGetPbufferDCEXT WGLEW_GET_FUN(__wglewGetPbufferDCEXT)
-#define wglQueryPbufferEXT WGLEW_GET_FUN(__wglewQueryPbufferEXT)
-#define wglReleasePbufferDCEXT WGLEW_GET_FUN(__wglewReleasePbufferDCEXT)
-
-#define WGLEW_EXT_pbuffer WGLEW_GET_VAR(__WGLEW_EXT_pbuffer)
-
-#endif /* WGL_EXT_pbuffer */
-
-/* -------------------------- WGL_EXT_pixel_format ------------------------- */
-
-#ifndef WGL_EXT_pixel_format
-#define WGL_EXT_pixel_format 1
-
-#define WGL_NUMBER_PIXEL_FORMATS_EXT 0x2000
-#define WGL_DRAW_TO_WINDOW_EXT 0x2001
-#define WGL_DRAW_TO_BITMAP_EXT 0x2002
-#define WGL_ACCELERATION_EXT 0x2003
-#define WGL_NEED_PALETTE_EXT 0x2004
-#define WGL_NEED_SYSTEM_PALETTE_EXT 0x2005
-#define WGL_SWAP_LAYER_BUFFERS_EXT 0x2006
-#define WGL_SWAP_METHOD_EXT 0x2007
-#define WGL_NUMBER_OVERLAYS_EXT 0x2008
-#define WGL_NUMBER_UNDERLAYS_EXT 0x2009
-#define WGL_TRANSPARENT_EXT 0x200A
-#define WGL_TRANSPARENT_VALUE_EXT 0x200B
-#define WGL_SHARE_DEPTH_EXT 0x200C
-#define WGL_SHARE_STENCIL_EXT 0x200D
-#define WGL_SHARE_ACCUM_EXT 0x200E
-#define WGL_SUPPORT_GDI_EXT 0x200F
-#define WGL_SUPPORT_OPENGL_EXT 0x2010
-#define WGL_DOUBLE_BUFFER_EXT 0x2011
-#define WGL_STEREO_EXT 0x2012
-#define WGL_PIXEL_TYPE_EXT 0x2013
-#define WGL_COLOR_BITS_EXT 0x2014
-#define WGL_RED_BITS_EXT 0x2015
-#define WGL_RED_SHIFT_EXT 0x2016
-#define WGL_GREEN_BITS_EXT 0x2017
-#define WGL_GREEN_SHIFT_EXT 0x2018
-#define WGL_BLUE_BITS_EXT 0x2019
-#define WGL_BLUE_SHIFT_EXT 0x201A
-#define WGL_ALPHA_BITS_EXT 0x201B
-#define WGL_ALPHA_SHIFT_EXT 0x201C
-#define WGL_ACCUM_BITS_EXT 0x201D
-#define WGL_ACCUM_RED_BITS_EXT 0x201E
-#define WGL_ACCUM_GREEN_BITS_EXT 0x201F
-#define WGL_ACCUM_BLUE_BITS_EXT 0x2020
-#define WGL_ACCUM_ALPHA_BITS_EXT 0x2021
-#define WGL_DEPTH_BITS_EXT 0x2022
-#define WGL_STENCIL_BITS_EXT 0x2023
-#define WGL_AUX_BUFFERS_EXT 0x2024
-#define WGL_NO_ACCELERATION_EXT 0x2025
-#define WGL_GENERIC_ACCELERATION_EXT 0x2026
-#define WGL_FULL_ACCELERATION_EXT 0x2027
-#define WGL_SWAP_EXCHANGE_EXT 0x2028
-#define WGL_SWAP_COPY_EXT 0x2029
-#define WGL_SWAP_UNDEFINED_EXT 0x202A
-#define WGL_TYPE_RGBA_EXT 0x202B
-#define WGL_TYPE_COLORINDEX_EXT 0x202C
-
-typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATEXTPROC) (HDC hdc, const int* piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, FLOAT *pfValues);
-typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int* piAttributes, int *piValues);
-
-#define wglChoosePixelFormatEXT WGLEW_GET_FUN(__wglewChoosePixelFormatEXT)
-#define wglGetPixelFormatAttribfvEXT WGLEW_GET_FUN(__wglewGetPixelFormatAttribfvEXT)
-#define wglGetPixelFormatAttribivEXT WGLEW_GET_FUN(__wglewGetPixelFormatAttribivEXT)
-
-#define WGLEW_EXT_pixel_format WGLEW_GET_VAR(__WGLEW_EXT_pixel_format)
-
-#endif /* WGL_EXT_pixel_format */
-
-/* ------------------- WGL_EXT_pixel_format_packed_float ------------------- */
-
-#ifndef WGL_EXT_pixel_format_packed_float
-#define WGL_EXT_pixel_format_packed_float 1
-
-#define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT 0x20A8
-
-#define WGLEW_EXT_pixel_format_packed_float WGLEW_GET_VAR(__WGLEW_EXT_pixel_format_packed_float)
-
-#endif /* WGL_EXT_pixel_format_packed_float */
-
-/* -------------------------- WGL_EXT_swap_control ------------------------- */
-
-#ifndef WGL_EXT_swap_control
-#define WGL_EXT_swap_control 1
-
-typedef int (WINAPI * PFNWGLGETSWAPINTERVALEXTPROC) (void);
-typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC) (int interval);
-
-#define wglGetSwapIntervalEXT WGLEW_GET_FUN(__wglewGetSwapIntervalEXT)
-#define wglSwapIntervalEXT WGLEW_GET_FUN(__wglewSwapIntervalEXT)
-
-#define WGLEW_EXT_swap_control WGLEW_GET_VAR(__WGLEW_EXT_swap_control)
-
-#endif /* WGL_EXT_swap_control */
-
-/* --------------------- WGL_I3D_digital_video_control --------------------- */
-
-#ifndef WGL_I3D_digital_video_control
-#define WGL_I3D_digital_video_control 1
-
-#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D 0x2050
-#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D 0x2051
-#define WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D 0x2052
-#define WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D 0x2053
-
-typedef BOOL (WINAPI * PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int* piValue);
-typedef BOOL (WINAPI * PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int* piValue);
-
-#define wglGetDigitalVideoParametersI3D WGLEW_GET_FUN(__wglewGetDigitalVideoParametersI3D)
-#define wglSetDigitalVideoParametersI3D WGLEW_GET_FUN(__wglewSetDigitalVideoParametersI3D)
-
-#define WGLEW_I3D_digital_video_control WGLEW_GET_VAR(__WGLEW_I3D_digital_video_control)
-
-#endif /* WGL_I3D_digital_video_control */
-
-/* ----------------------------- WGL_I3D_gamma ----------------------------- */
-
-#ifndef WGL_I3D_gamma
-#define WGL_I3D_gamma 1
-
-#define WGL_GAMMA_TABLE_SIZE_I3D 0x204E
-#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D 0x204F
-
-typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, USHORT* puRed, USHORT *puGreen, USHORT *puBlue);
-typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int* piValue);
-typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, const USHORT* puRed, const USHORT *puGreen, const USHORT *puBlue);
-typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int* piValue);
-
-#define wglGetGammaTableI3D WGLEW_GET_FUN(__wglewGetGammaTableI3D)
-#define wglGetGammaTableParametersI3D WGLEW_GET_FUN(__wglewGetGammaTableParametersI3D)
-#define wglSetGammaTableI3D WGLEW_GET_FUN(__wglewSetGammaTableI3D)
-#define wglSetGammaTableParametersI3D WGLEW_GET_FUN(__wglewSetGammaTableParametersI3D)
-
-#define WGLEW_I3D_gamma WGLEW_GET_VAR(__WGLEW_I3D_gamma)
-
-#endif /* WGL_I3D_gamma */
-
-/* ---------------------------- WGL_I3D_genlock ---------------------------- */
-
-#ifndef WGL_I3D_genlock
-#define WGL_I3D_genlock 1
-
-#define WGL_GENLOCK_SOURCE_MULTIVIEW_I3D 0x2044
-#define WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D 0x2045
-#define WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D 0x2046
-#define WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D 0x2047
-#define WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D 0x2048
-#define WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D 0x2049
-#define WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D 0x204A
-#define WGL_GENLOCK_SOURCE_EDGE_RISING_I3D 0x204B
-#define WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D 0x204C
-
-typedef BOOL (WINAPI * PFNWGLDISABLEGENLOCKI3DPROC) (HDC hDC);
-typedef BOOL (WINAPI * PFNWGLENABLEGENLOCKI3DPROC) (HDC hDC);
-typedef BOOL (WINAPI * PFNWGLGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT uRate);
-typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT uDelay);
-typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT uEdge);
-typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEI3DPROC) (HDC hDC, UINT uSource);
-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT* uRate);
-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT* uDelay);
-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT* uEdge);
-typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEI3DPROC) (HDC hDC, UINT* uSource);
-typedef BOOL (WINAPI * PFNWGLISENABLEDGENLOCKI3DPROC) (HDC hDC, BOOL* pFlag);
-typedef BOOL (WINAPI * PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) (HDC hDC, UINT* uMaxLineDelay, UINT *uMaxPixelDelay);
-
-#define wglDisableGenlockI3D WGLEW_GET_FUN(__wglewDisableGenlockI3D)
-#define wglEnableGenlockI3D WGLEW_GET_FUN(__wglewEnableGenlockI3D)
-#define wglGenlockSampleRateI3D WGLEW_GET_FUN(__wglewGenlockSampleRateI3D)
-#define wglGenlockSourceDelayI3D WGLEW_GET_FUN(__wglewGenlockSourceDelayI3D)
-#define wglGenlockSourceEdgeI3D WGLEW_GET_FUN(__wglewGenlockSourceEdgeI3D)
-#define wglGenlockSourceI3D WGLEW_GET_FUN(__wglewGenlockSourceI3D)
-#define wglGetGenlockSampleRateI3D WGLEW_GET_FUN(__wglewGetGenlockSampleRateI3D)
-#define wglGetGenlockSourceDelayI3D WGLEW_GET_FUN(__wglewGetGenlockSourceDelayI3D)
-#define wglGetGenlockSourceEdgeI3D WGLEW_GET_FUN(__wglewGetGenlockSourceEdgeI3D)
-#define wglGetGenlockSourceI3D WGLEW_GET_FUN(__wglewGetGenlockSourceI3D)
-#define wglIsEnabledGenlockI3D WGLEW_GET_FUN(__wglewIsEnabledGenlockI3D)
-#define wglQueryGenlockMaxSourceDelayI3D WGLEW_GET_FUN(__wglewQueryGenlockMaxSourceDelayI3D)
-
-#define WGLEW_I3D_genlock WGLEW_GET_VAR(__WGLEW_I3D_genlock)
-
-#endif /* WGL_I3D_genlock */
-
-/* -------------------------- WGL_I3D_image_buffer ------------------------- */
-
-#ifndef WGL_I3D_image_buffer
-#define WGL_I3D_image_buffer 1
-
-#define WGL_IMAGE_BUFFER_MIN_ACCESS_I3D 0x00000001
-#define WGL_IMAGE_BUFFER_LOCK_I3D 0x00000002
-
-typedef BOOL (WINAPI * PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) (HDC hdc, HANDLE* pEvent, LPVOID *pAddress, DWORD *pSize, UINT count);
-typedef LPVOID (WINAPI * PFNWGLCREATEIMAGEBUFFERI3DPROC) (HDC hDC, DWORD dwSize, UINT uFlags);
-typedef BOOL (WINAPI * PFNWGLDESTROYIMAGEBUFFERI3DPROC) (HDC hDC, LPVOID pAddress);
-typedef BOOL (WINAPI * PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) (HDC hdc, LPVOID* pAddress, UINT count);
-
-#define wglAssociateImageBufferEventsI3D WGLEW_GET_FUN(__wglewAssociateImageBufferEventsI3D)
-#define wglCreateImageBufferI3D WGLEW_GET_FUN(__wglewCreateImageBufferI3D)
-#define wglDestroyImageBufferI3D WGLEW_GET_FUN(__wglewDestroyImageBufferI3D)
-#define wglReleaseImageBufferEventsI3D WGLEW_GET_FUN(__wglewReleaseImageBufferEventsI3D)
-
-#define WGLEW_I3D_image_buffer WGLEW_GET_VAR(__WGLEW_I3D_image_buffer)
-
-#endif /* WGL_I3D_image_buffer */
-
-/* ------------------------ WGL_I3D_swap_frame_lock ------------------------ */
-
-#ifndef WGL_I3D_swap_frame_lock
-#define WGL_I3D_swap_frame_lock 1
-
-typedef BOOL (WINAPI * PFNWGLDISABLEFRAMELOCKI3DPROC) (VOID);
-typedef BOOL (WINAPI * PFNWGLENABLEFRAMELOCKI3DPROC) (VOID);
-typedef BOOL (WINAPI * PFNWGLISENABLEDFRAMELOCKI3DPROC) (BOOL* pFlag);
-typedef BOOL (WINAPI * PFNWGLQUERYFRAMELOCKMASTERI3DPROC) (BOOL* pFlag);
-
-#define wglDisableFrameLockI3D WGLEW_GET_FUN(__wglewDisableFrameLockI3D)
-#define wglEnableFrameLockI3D WGLEW_GET_FUN(__wglewEnableFrameLockI3D)
-#define wglIsEnabledFrameLockI3D WGLEW_GET_FUN(__wglewIsEnabledFrameLockI3D)
-#define wglQueryFrameLockMasterI3D WGLEW_GET_FUN(__wglewQueryFrameLockMasterI3D)
-
-#define WGLEW_I3D_swap_frame_lock WGLEW_GET_VAR(__WGLEW_I3D_swap_frame_lock)
-
-#endif /* WGL_I3D_swap_frame_lock */
-
-/* ------------------------ WGL_I3D_swap_frame_usage ----------------------- */
-
-#ifndef WGL_I3D_swap_frame_usage
-#define WGL_I3D_swap_frame_usage 1
-
-typedef BOOL (WINAPI * PFNWGLBEGINFRAMETRACKINGI3DPROC) (void);
-typedef BOOL (WINAPI * PFNWGLENDFRAMETRACKINGI3DPROC) (void);
-typedef BOOL (WINAPI * PFNWGLGETFRAMEUSAGEI3DPROC) (float* pUsage);
-typedef BOOL (WINAPI * PFNWGLQUERYFRAMETRACKINGI3DPROC) (DWORD* pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
-
-#define wglBeginFrameTrackingI3D WGLEW_GET_FUN(__wglewBeginFrameTrackingI3D)
-#define wglEndFrameTrackingI3D WGLEW_GET_FUN(__wglewEndFrameTrackingI3D)
-#define wglGetFrameUsageI3D WGLEW_GET_FUN(__wglewGetFrameUsageI3D)
-#define wglQueryFrameTrackingI3D WGLEW_GET_FUN(__wglewQueryFrameTrackingI3D)
-
-#define WGLEW_I3D_swap_frame_usage WGLEW_GET_VAR(__WGLEW_I3D_swap_frame_usage)
-
-#endif /* WGL_I3D_swap_frame_usage */
-
-/* -------------------------- WGL_NV_float_buffer -------------------------- */
-
-#ifndef WGL_NV_float_buffer
-#define WGL_NV_float_buffer 1
-
-#define WGL_FLOAT_COMPONENTS_NV 0x20B0
-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV 0x20B1
-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV 0x20B2
-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV 0x20B3
-#define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV 0x20B4
-#define WGL_TEXTURE_FLOAT_R_NV 0x20B5
-#define WGL_TEXTURE_FLOAT_RG_NV 0x20B6
-#define WGL_TEXTURE_FLOAT_RGB_NV 0x20B7
-#define WGL_TEXTURE_FLOAT_RGBA_NV 0x20B8
-
-#define WGLEW_NV_float_buffer WGLEW_GET_VAR(__WGLEW_NV_float_buffer)
-
-#endif /* WGL_NV_float_buffer */
-
-/* -------------------------- WGL_NV_gpu_affinity -------------------------- */
-
-#ifndef WGL_NV_gpu_affinity
-#define WGL_NV_gpu_affinity 1
-
-#define WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV 0x20D0
-#define WGL_ERROR_MISSING_AFFINITY_MASK_NV 0x20D1
-
-DECLARE_HANDLE(HGPUNV);
-typedef struct _GPU_DEVICE {
-  DWORD cb; 
-  CHAR DeviceName[32]; 
-  CHAR DeviceString[128]; 
-  DWORD Flags; 
-  RECT rcVirtualScreen; 
-} GPU_DEVICE, *PGPU_DEVICE;
-
-typedef HDC (WINAPI * PFNWGLCREATEAFFINITYDCNVPROC) (const HGPUNV *phGpuList);
-typedef BOOL (WINAPI * PFNWGLDELETEDCNVPROC) (HDC hdc);
-typedef BOOL (WINAPI * PFNWGLENUMGPUDEVICESNVPROC) (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
-typedef BOOL (WINAPI * PFNWGLENUMGPUSFROMAFFINITYDCNVPROC) (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
-typedef BOOL (WINAPI * PFNWGLENUMGPUSNVPROC) (UINT iGpuIndex, HGPUNV *phGpu);
-
-#define wglCreateAffinityDCNV WGLEW_GET_FUN(__wglewCreateAffinityDCNV)
-#define wglDeleteDCNV WGLEW_GET_FUN(__wglewDeleteDCNV)
-#define wglEnumGpuDevicesNV WGLEW_GET_FUN(__wglewEnumGpuDevicesNV)
-#define wglEnumGpusFromAffinityDCNV WGLEW_GET_FUN(__wglewEnumGpusFromAffinityDCNV)
-#define wglEnumGpusNV WGLEW_GET_FUN(__wglewEnumGpusNV)
-
-#define WGLEW_NV_gpu_affinity WGLEW_GET_VAR(__WGLEW_NV_gpu_affinity)
-
-#endif /* WGL_NV_gpu_affinity */
-
-/* ---------------------- WGL_NV_render_depth_texture ---------------------- */
-
-#ifndef WGL_NV_render_depth_texture
-#define WGL_NV_render_depth_texture 1
-
-#define WGL_NO_TEXTURE_ARB 0x2077
-#define WGL_BIND_TO_TEXTURE_DEPTH_NV 0x20A3
-#define WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV 0x20A4
-#define WGL_DEPTH_TEXTURE_FORMAT_NV 0x20A5
-#define WGL_TEXTURE_DEPTH_COMPONENT_NV 0x20A6
-#define WGL_DEPTH_COMPONENT_NV 0x20A7
-
-#define WGLEW_NV_render_depth_texture WGLEW_GET_VAR(__WGLEW_NV_render_depth_texture)
-
-#endif /* WGL_NV_render_depth_texture */
-
-/* -------------------- WGL_NV_render_texture_rectangle -------------------- */
-
-#ifndef WGL_NV_render_texture_rectangle
-#define WGL_NV_render_texture_rectangle 1
-
-#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV 0x20A0
-#define WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV 0x20A1
-#define WGL_TEXTURE_RECTANGLE_NV 0x20A2
-
-#define WGLEW_NV_render_texture_rectangle WGLEW_GET_VAR(__WGLEW_NV_render_texture_rectangle)
-
-#endif /* WGL_NV_render_texture_rectangle */
-
-/* ----------------------- WGL_NV_vertex_array_range ----------------------- */
-
-#ifndef WGL_NV_vertex_array_range
-#define WGL_NV_vertex_array_range 1
-
-typedef void * (WINAPI * PFNWGLALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority);
-typedef void (WINAPI * PFNWGLFREEMEMORYNVPROC) (void *pointer);
-
-#define wglAllocateMemoryNV WGLEW_GET_FUN(__wglewAllocateMemoryNV)
-#define wglFreeMemoryNV WGLEW_GET_FUN(__wglewFreeMemoryNV)
-
-#define WGLEW_NV_vertex_array_range WGLEW_GET_VAR(__WGLEW_NV_vertex_array_range)
-
-#endif /* WGL_NV_vertex_array_range */
-
-/* -------------------------- WGL_OML_sync_control ------------------------- */
-
-#ifndef WGL_OML_sync_control
-#define WGL_OML_sync_control 1
-
-typedef BOOL (WINAPI * PFNWGLGETMSCRATEOMLPROC) (HDC hdc, INT32* numerator, INT32 *denominator);
-typedef BOOL (WINAPI * PFNWGLGETSYNCVALUESOMLPROC) (HDC hdc, INT64* ust, INT64 *msc, INT64 *sbc);
-typedef INT64 (WINAPI * PFNWGLSWAPBUFFERSMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
-typedef INT64 (WINAPI * PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) (HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
-typedef BOOL (WINAPI * PFNWGLWAITFORMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64* ust, INT64 *msc, INT64 *sbc);
-typedef BOOL (WINAPI * PFNWGLWAITFORSBCOMLPROC) (HDC hdc, INT64 target_sbc, INT64* ust, INT64 *msc, INT64 *sbc);
-
-#define wglGetMscRateOML WGLEW_GET_FUN(__wglewGetMscRateOML)
-#define wglGetSyncValuesOML WGLEW_GET_FUN(__wglewGetSyncValuesOML)
-#define wglSwapBuffersMscOML WGLEW_GET_FUN(__wglewSwapBuffersMscOML)
-#define wglSwapLayerBuffersMscOML WGLEW_GET_FUN(__wglewSwapLayerBuffersMscOML)
-#define wglWaitForMscOML WGLEW_GET_FUN(__wglewWaitForMscOML)
-#define wglWaitForSbcOML WGLEW_GET_FUN(__wglewWaitForSbcOML)
-
-#define WGLEW_OML_sync_control WGLEW_GET_VAR(__WGLEW_OML_sync_control)
-
-#endif /* WGL_OML_sync_control */
-
-/* ------------------------------------------------------------------------- */
-
-#ifdef GLEW_MX
-#define WGLEW_EXPORT
-#else
-#define WGLEW_EXPORT GLEWAPI
-#endif /* GLEW_MX */
-
-#ifdef GLEW_MX
-struct WGLEWContextStruct
-{
-#endif /* GLEW_MX */
-
-WGLEW_EXPORT PFNWGLSETSTEREOEMITTERSTATE3DLPROC __wglewSetStereoEmitterState3DL;
-
-WGLEW_EXPORT PFNWGLCREATEBUFFERREGIONARBPROC __wglewCreateBufferRegionARB;
-WGLEW_EXPORT PFNWGLDELETEBUFFERREGIONARBPROC __wglewDeleteBufferRegionARB;
-WGLEW_EXPORT PFNWGLRESTOREBUFFERREGIONARBPROC __wglewRestoreBufferRegionARB;
-WGLEW_EXPORT PFNWGLSAVEBUFFERREGIONARBPROC __wglewSaveBufferRegionARB;
-
-WGLEW_EXPORT PFNWGLGETEXTENSIONSSTRINGARBPROC __wglewGetExtensionsStringARB;
-
-WGLEW_EXPORT PFNWGLGETCURRENTREADDCARBPROC __wglewGetCurrentReadDCARB;
-WGLEW_EXPORT PFNWGLMAKECONTEXTCURRENTARBPROC __wglewMakeContextCurrentARB;
-
-WGLEW_EXPORT PFNWGLCREATEPBUFFERARBPROC __wglewCreatePbufferARB;
-WGLEW_EXPORT PFNWGLDESTROYPBUFFERARBPROC __wglewDestroyPbufferARB;
-WGLEW_EXPORT PFNWGLGETPBUFFERDCARBPROC __wglewGetPbufferDCARB;
-WGLEW_EXPORT PFNWGLQUERYPBUFFERARBPROC __wglewQueryPbufferARB;
-WGLEW_EXPORT PFNWGLRELEASEPBUFFERDCARBPROC __wglewReleasePbufferDCARB;
-
-WGLEW_EXPORT PFNWGLCHOOSEPIXELFORMATARBPROC __wglewChoosePixelFormatARB;
-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBFVARBPROC __wglewGetPixelFormatAttribfvARB;
-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBIVARBPROC __wglewGetPixelFormatAttribivARB;
-
-WGLEW_EXPORT PFNWGLBINDTEXIMAGEARBPROC __wglewBindTexImageARB;
-WGLEW_EXPORT PFNWGLRELEASETEXIMAGEARBPROC __wglewReleaseTexImageARB;
-WGLEW_EXPORT PFNWGLSETPBUFFERATTRIBARBPROC __wglewSetPbufferAttribARB;
-
-WGLEW_EXPORT PFNWGLBINDDISPLAYCOLORTABLEEXTPROC __wglewBindDisplayColorTableEXT;
-WGLEW_EXPORT PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC __wglewCreateDisplayColorTableEXT;
-WGLEW_EXPORT PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC __wglewDestroyDisplayColorTableEXT;
-WGLEW_EXPORT PFNWGLLOADDISPLAYCOLORTABLEEXTPROC __wglewLoadDisplayColorTableEXT;
-
-WGLEW_EXPORT PFNWGLGETEXTENSIONSSTRINGEXTPROC __wglewGetExtensionsStringEXT;
-
-WGLEW_EXPORT PFNWGLGETCURRENTREADDCEXTPROC __wglewGetCurrentReadDCEXT;
-WGLEW_EXPORT PFNWGLMAKECONTEXTCURRENTEXTPROC __wglewMakeContextCurrentEXT;
-
-WGLEW_EXPORT PFNWGLCREATEPBUFFEREXTPROC __wglewCreatePbufferEXT;
-WGLEW_EXPORT PFNWGLDESTROYPBUFFEREXTPROC __wglewDestroyPbufferEXT;
-WGLEW_EXPORT PFNWGLGETPBUFFERDCEXTPROC __wglewGetPbufferDCEXT;
-WGLEW_EXPORT PFNWGLQUERYPBUFFEREXTPROC __wglewQueryPbufferEXT;
-WGLEW_EXPORT PFNWGLRELEASEPBUFFERDCEXTPROC __wglewReleasePbufferDCEXT;
-
-WGLEW_EXPORT PFNWGLCHOOSEPIXELFORMATEXTPROC __wglewChoosePixelFormatEXT;
-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBFVEXTPROC __wglewGetPixelFormatAttribfvEXT;
-WGLEW_EXPORT PFNWGLGETPIXELFORMATATTRIBIVEXTPROC __wglewGetPixelFormatAttribivEXT;
-
-WGLEW_EXPORT PFNWGLGETSWAPINTERVALEXTPROC __wglewGetSwapIntervalEXT;
-WGLEW_EXPORT PFNWGLSWAPINTERVALEXTPROC __wglewSwapIntervalEXT;
-
-WGLEW_EXPORT PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC __wglewGetDigitalVideoParametersI3D;
-WGLEW_EXPORT PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC __wglewSetDigitalVideoParametersI3D;
-
-WGLEW_EXPORT PFNWGLGETGAMMATABLEI3DPROC __wglewGetGammaTableI3D;
-WGLEW_EXPORT PFNWGLGETGAMMATABLEPARAMETERSI3DPROC __wglewGetGammaTableParametersI3D;
-WGLEW_EXPORT PFNWGLSETGAMMATABLEI3DPROC __wglewSetGammaTableI3D;
-WGLEW_EXPORT PFNWGLSETGAMMATABLEPARAMETERSI3DPROC __wglewSetGammaTableParametersI3D;
-
-WGLEW_EXPORT PFNWGLDISABLEGENLOCKI3DPROC __wglewDisableGenlockI3D;
-WGLEW_EXPORT PFNWGLENABLEGENLOCKI3DPROC __wglewEnableGenlockI3D;
-WGLEW_EXPORT PFNWGLGENLOCKSAMPLERATEI3DPROC __wglewGenlockSampleRateI3D;
-WGLEW_EXPORT PFNWGLGENLOCKSOURCEDELAYI3DPROC __wglewGenlockSourceDelayI3D;
-WGLEW_EXPORT PFNWGLGENLOCKSOURCEEDGEI3DPROC __wglewGenlockSourceEdgeI3D;
-WGLEW_EXPORT PFNWGLGENLOCKSOURCEI3DPROC __wglewGenlockSourceI3D;
-WGLEW_EXPORT PFNWGLGETGENLOCKSAMPLERATEI3DPROC __wglewGetGenlockSampleRateI3D;
-WGLEW_EXPORT PFNWGLGETGENLOCKSOURCEDELAYI3DPROC __wglewGetGenlockSourceDelayI3D;
-WGLEW_EXPORT PFNWGLGETGENLOCKSOURCEEDGEI3DPROC __wglewGetGenlockSourceEdgeI3D;
-WGLEW_EXPORT PFNWGLGETGENLOCKSOURCEI3DPROC __wglewGetGenlockSourceI3D;
-WGLEW_EXPORT PFNWGLISENABLEDGENLOCKI3DPROC __wglewIsEnabledGenlockI3D;
-WGLEW_EXPORT PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC __wglewQueryGenlockMaxSourceDelayI3D;
-
-WGLEW_EXPORT PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC __wglewAssociateImageBufferEventsI3D;
-WGLEW_EXPORT PFNWGLCREATEIMAGEBUFFERI3DPROC __wglewCreateImageBufferI3D;
-WGLEW_EXPORT PFNWGLDESTROYIMAGEBUFFERI3DPROC __wglewDestroyImageBufferI3D;
-WGLEW_EXPORT PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC __wglewReleaseImageBufferEventsI3D;
-
-WGLEW_EXPORT PFNWGLDISABLEFRAMELOCKI3DPROC __wglewDisableFrameLockI3D;
-WGLEW_EXPORT PFNWGLENABLEFRAMELOCKI3DPROC __wglewEnableFrameLockI3D;
-WGLEW_EXPORT PFNWGLISENABLEDFRAMELOCKI3DPROC __wglewIsEnabledFrameLockI3D;
-WGLEW_EXPORT PFNWGLQUERYFRAMELOCKMASTERI3DPROC __wglewQueryFrameLockMasterI3D;
-
-WGLEW_EXPORT PFNWGLBEGINFRAMETRACKINGI3DPROC __wglewBeginFrameTrackingI3D;
-WGLEW_EXPORT PFNWGLENDFRAMETRACKINGI3DPROC __wglewEndFrameTrackingI3D;
-WGLEW_EXPORT PFNWGLGETFRAMEUSAGEI3DPROC __wglewGetFrameUsageI3D;
-WGLEW_EXPORT PFNWGLQUERYFRAMETRACKINGI3DPROC __wglewQueryFrameTrackingI3D;
-
-WGLEW_EXPORT PFNWGLCREATEAFFINITYDCNVPROC __wglewCreateAffinityDCNV;
-WGLEW_EXPORT PFNWGLDELETEDCNVPROC __wglewDeleteDCNV;
-WGLEW_EXPORT PFNWGLENUMGPUDEVICESNVPROC __wglewEnumGpuDevicesNV;
-WGLEW_EXPORT PFNWGLENUMGPUSFROMAFFINITYDCNVPROC __wglewEnumGpusFromAffinityDCNV;
-WGLEW_EXPORT PFNWGLENUMGPUSNVPROC __wglewEnumGpusNV;
-
-WGLEW_EXPORT PFNWGLALLOCATEMEMORYNVPROC __wglewAllocateMemoryNV;
-WGLEW_EXPORT PFNWGLFREEMEMORYNVPROC __wglewFreeMemoryNV;
-
-WGLEW_EXPORT PFNWGLGETMSCRATEOMLPROC __wglewGetMscRateOML;
-WGLEW_EXPORT PFNWGLGETSYNCVALUESOMLPROC __wglewGetSyncValuesOML;
-WGLEW_EXPORT PFNWGLSWAPBUFFERSMSCOMLPROC __wglewSwapBuffersMscOML;
-WGLEW_EXPORT PFNWGLSWAPLAYERBUFFERSMSCOMLPROC __wglewSwapLayerBuffersMscOML;
-WGLEW_EXPORT PFNWGLWAITFORMSCOMLPROC __wglewWaitForMscOML;
-WGLEW_EXPORT PFNWGLWAITFORSBCOMLPROC __wglewWaitForSbcOML;
-WGLEW_EXPORT GLboolean __WGLEW_3DFX_multisample;
-WGLEW_EXPORT GLboolean __WGLEW_3DL_stereo_control;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_buffer_region;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_extensions_string;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_make_current_read;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_multisample;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_pbuffer;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_pixel_format;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_pixel_format_float;
-WGLEW_EXPORT GLboolean __WGLEW_ARB_render_texture;
-WGLEW_EXPORT GLboolean __WGLEW_ATI_pixel_format_float;
-WGLEW_EXPORT GLboolean __WGLEW_ATI_render_texture_rectangle;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_depth_float;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_display_color_table;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_extensions_string;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_framebuffer_sRGB;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_make_current_read;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_multisample;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_pbuffer;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_pixel_format;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_pixel_format_packed_float;
-WGLEW_EXPORT GLboolean __WGLEW_EXT_swap_control;
-WGLEW_EXPORT GLboolean __WGLEW_I3D_digital_video_control;
-WGLEW_EXPORT GLboolean __WGLEW_I3D_gamma;
-WGLEW_EXPORT GLboolean __WGLEW_I3D_genlock;
-WGLEW_EXPORT GLboolean __WGLEW_I3D_image_buffer;
-WGLEW_EXPORT GLboolean __WGLEW_I3D_swap_frame_lock;
-WGLEW_EXPORT GLboolean __WGLEW_I3D_swap_frame_usage;
-WGLEW_EXPORT GLboolean __WGLEW_NV_float_buffer;
-WGLEW_EXPORT GLboolean __WGLEW_NV_gpu_affinity;
-WGLEW_EXPORT GLboolean __WGLEW_NV_render_depth_texture;
-WGLEW_EXPORT GLboolean __WGLEW_NV_render_texture_rectangle;
-WGLEW_EXPORT GLboolean __WGLEW_NV_vertex_array_range;
-WGLEW_EXPORT GLboolean __WGLEW_OML_sync_control;
-
-#ifdef GLEW_MX
-}; /* WGLEWContextStruct */
-#endif /* GLEW_MX */
-
-/* ------------------------------------------------------------------------- */
-
-#ifdef GLEW_MX
-
-typedef struct WGLEWContextStruct WGLEWContext;
-GLEWAPI GLenum wglewContextInit (WGLEWContext* ctx);
-GLEWAPI GLboolean wglewContextIsSupported (WGLEWContext* ctx, const char* name);
-
-#define wglewInit() wglewContextInit(wglewGetContext())
-#define wglewIsSupported(x) wglewContextIsSupported(wglewGetContext(), x)
-
-#define WGLEW_GET_VAR(x) (*(const GLboolean*)&(wglewGetContext()->x))
-#define WGLEW_GET_FUN(x) wglewGetContext()->x
-
-#else /* GLEW_MX */
-
-#define WGLEW_GET_VAR(x) (*(const GLboolean*)&x)
-#define WGLEW_GET_FUN(x) x
-
-GLEWAPI GLboolean wglewIsSupported (const char* name);
-
-#endif /* GLEW_MX */
-
-GLEWAPI GLboolean wglewGetExtension (const char* name);
-
-#ifdef __cplusplus
-}
-#endif
-
-#undef GLEWAPI
-
-#endif /* __wglew_h__ */
diff --git a/nvcommon/GLEW/src/glew.c b/nvcommon/GLEW/src/glew.c
deleted file mode 100644
index 63b0d95..0000000
--- a/nvcommon/GLEW/src/glew.c
+++ /dev/null
@@ -1,10828 +0,0 @@
-/*
-** The OpenGL Extension Wrangler Library
-** Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>
-** Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>
-** Copyright (C) 2002, Lev Povalahev
-** All rights reserved.
-** 
-** Redistribution and use in source and binary forms, with or without 
-** modification, are permitted provided that the following conditions are met:
-** 
-** * Redistributions of source code must retain the above copyright notice, 
-**   this list of conditions and the following disclaimer.
-** * Redistributions in binary form must reproduce the above copyright notice, 
-**   this list of conditions and the following disclaimer in the documentation 
-**   and/or other materials provided with the distribution.
-** * The name of the author may be used to endorse or promote products 
-**   derived from this software without specific prior written permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
-** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
-** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
-** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
-** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
-** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
-** THE POSSIBILITY OF SUCH DAMAGE.
-*/
-
-#include <GL/glew.h>
-#if defined(_WIN32)
-#  include <GL/wglew.h>
-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)
-#  include <GL/glxew.h>
-#endif
-
-/*
- * Define glewGetContext and related helper macros.
- */
-#ifdef GLEW_MX
-#  define glewGetContext() ctx
-#  ifdef _WIN32
-#    define GLEW_CONTEXT_ARG_DEF_INIT GLEWContext* ctx
-#    define GLEW_CONTEXT_ARG_VAR_INIT ctx
-#    define wglewGetContext() ctx
-#    define WGLEW_CONTEXT_ARG_DEF_INIT WGLEWContext* ctx
-#    define WGLEW_CONTEXT_ARG_DEF_LIST WGLEWContext* ctx
-#  else /* _WIN32 */
-#    define GLEW_CONTEXT_ARG_DEF_INIT void
-#    define GLEW_CONTEXT_ARG_VAR_INIT
-#    define glxewGetContext() ctx
-#    define GLXEW_CONTEXT_ARG_DEF_INIT void
-#    define GLXEW_CONTEXT_ARG_DEF_LIST GLXEWContext* ctx
-#  endif /* _WIN32 */
-#  define GLEW_CONTEXT_ARG_DEF_LIST GLEWContext* ctx
-#else /* GLEW_MX */
-#  define GLEW_CONTEXT_ARG_DEF_INIT void
-#  define GLEW_CONTEXT_ARG_VAR_INIT
-#  define GLEW_CONTEXT_ARG_DEF_LIST void
-#  define WGLEW_CONTEXT_ARG_DEF_INIT void
-#  define WGLEW_CONTEXT_ARG_DEF_LIST void
-#  define GLXEW_CONTEXT_ARG_DEF_INIT void
-#  define GLXEW_CONTEXT_ARG_DEF_LIST void
-#endif /* GLEW_MX */
-
-#if defined(__APPLE__)
-#include <mach-o/dyld.h>
-#include <stdlib.h>
-#include <string.h>
-
-void* NSGLGetProcAddress (const GLubyte *name)
-{
-  static const struct mach_header* image = NULL;
-  NSSymbol symbol;
-  char* symbolName;
-  if (NULL == image)
-  {
-    image = NSAddImage("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", NSADDIMAGE_OPTION_RETURN_ON_ERROR);
-  }
-  /* prepend a '_' for the Unix C symbol mangling convention */
-  symbolName = malloc(strlen((const char*)name) + 2);
-  strcpy(symbolName+1, (const char*)name);
-  symbolName[0] = '_';
-  symbol = NULL;
-  /* if (NSIsSymbolNameDefined(symbolName))
-	 symbol = NSLookupAndBindSymbol(symbolName); */
-  symbol = image ? NSLookupSymbolInImage(image, symbolName, NSLOOKUPSYMBOLINIMAGE_OPTION_BIND | NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR) : NULL;
-  free(symbolName);
-  return symbol ? NSAddressOfSymbol(symbol) : NULL;
-}
-#endif /* __APPLE__ */
-
-#if defined(__sgi) || defined (__sun)
-#include <dlfcn.h>
-#include <stdio.h>
-#include <stdlib.h>
-
-void* dlGetProcAddress (const GLubyte* name)
-{
-  static void* h = NULL;
-  static void* gpa;
-
-  if (h == NULL)
-  {
-    if ((h = dlopen(NULL, RTLD_LAZY | RTLD_LOCAL)) == NULL) return NULL;
-    gpa = dlsym(h, "glXGetProcAddress");
-  }
-
-  if (gpa != NULL)
-    return ((void*(*)(const GLubyte*))gpa)(name);
-  else
-    return dlsym(h, (const char*)name);
-}
-#endif /* __sgi || __sun */
-
-/*
- * Define glewGetProcAddress.
- */
-#if defined(_WIN32)
-#  define glewGetProcAddress(name) wglGetProcAddress((LPCSTR)name)
-#else
-#  if defined(__APPLE__)
-#    define glewGetProcAddress(name) NSGLGetProcAddress(name)
-#  else
-#    if defined(__sgi) || defined(__sun)
-#      define glewGetProcAddress(name) dlGetProcAddress(name)
-#    else /* __linux */
-#      define glewGetProcAddress(name) (*glXGetProcAddressARB)(name)
-#    endif
-#  endif
-#endif
-
-/*
- * Define GLboolean const cast.
- */
-#define CONST_CAST(x) (*(GLboolean*)&x)
-
-/*
- * GLEW, just like OpenGL or GLU, does not rely on the standard C library.
- * These functions implement the functionality required in this file.
- */
-static GLuint _glewStrLen (const GLubyte* s)
-{
-  GLuint i=0;
-  if (s == NULL) return 0;
-  while (s[i] != '\0') i++;
-  return i;
-}
-
-static GLuint _glewStrCLen (const GLubyte* s, GLubyte c)
-{
-  GLuint i=0;
-  if (s == NULL) return 0;
-  while (s[i] != '\0' && s[i] != c) i++;
-  return s[i] == c ? i : 0;
-}
-
-static GLboolean _glewStrSame (const GLubyte* a, const GLubyte* b, GLuint n)
-{
-  GLuint i=0;
-  if(a == NULL || b == NULL)
-    return (a == NULL && b == NULL && n == 0) ? GL_TRUE : GL_FALSE;
-  while (i < n && a[i] != '\0' && b[i] != '\0' && a[i] == b[i]) i++;
-  return i == n ? GL_TRUE : GL_FALSE;
-}
-
-static GLboolean _glewStrSame1 (GLubyte** a, GLuint* na, const GLubyte* b, GLuint nb)
-{
-  while (*na > 0 && (**a == ' ' || **a == '\n' || **a == '\r' || **a == '\t'))
-  {
-    (*a)++;
-    (*na)--;
-  }
-  if(*na >= nb)
-  {
-    GLuint i=0;
-    while (i < nb && (*a)+i != NULL && b+i != NULL && (*a)[i] == b[i]) i++;
-	if(i == nb)
-	{
-		*a = *a + nb;
-		*na = *na - nb;
-		return GL_TRUE;
-	}
-  }
-  return GL_FALSE;
-}
-
-static GLboolean _glewStrSame2 (GLubyte** a, GLuint* na, const GLubyte* b, GLuint nb)
-{
-  if(*na >= nb)
-  {
-    GLuint i=0;
-    while (i < nb && (*a)+i != NULL && b+i != NULL && (*a)[i] == b[i]) i++;
-	if(i == nb)
-	{
-		*a = *a + nb;
-		*na = *na - nb;
-		return GL_TRUE;
-	}
-  }
-  return GL_FALSE;
-}
-
-static GLboolean _glewStrSame3 (GLubyte** a, GLuint* na, const GLubyte* b, GLuint nb)
-{
-  if(*na >= nb)
-  {
-    GLuint i=0;
-    while (i < nb && (*a)+i != NULL && b+i != NULL && (*a)[i] == b[i]) i++;
-    if (i == nb && (*na == nb || (*a)[i] == ' ' || (*a)[i] == '\n' || (*a)[i] == '\r' || (*a)[i] == '\t'))
-    {
-      *a = *a + nb;
-      *na = *na - nb;
-      return GL_TRUE;
-    }
-  }
-  return GL_FALSE;
-}
-
-#if !defined(_WIN32) || !defined(GLEW_MX)
-
-PFNGLCOPYTEXSUBIMAGE3DPROC __glewCopyTexSubImage3D = NULL;
-PFNGLDRAWRANGEELEMENTSPROC __glewDrawRangeElements = NULL;
-PFNGLTEXIMAGE3DPROC __glewTexImage3D = NULL;
-PFNGLTEXSUBIMAGE3DPROC __glewTexSubImage3D = NULL;
-
-PFNGLACTIVETEXTUREPROC __glewActiveTexture = NULL;
-PFNGLCLIENTACTIVETEXTUREPROC __glewClientActiveTexture = NULL;
-PFNGLCOMPRESSEDTEXIMAGE1DPROC __glewCompressedTexImage1D = NULL;
-PFNGLCOMPRESSEDTEXIMAGE2DPROC __glewCompressedTexImage2D = NULL;
-PFNGLCOMPRESSEDTEXIMAGE3DPROC __glewCompressedTexImage3D = NULL;
-PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC __glewCompressedTexSubImage1D = NULL;
-PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC __glewCompressedTexSubImage2D = NULL;
-PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC __glewCompressedTexSubImage3D = NULL;
-PFNGLGETCOMPRESSEDTEXIMAGEPROC __glewGetCompressedTexImage = NULL;
-PFNGLLOADTRANSPOSEMATRIXDPROC __glewLoadTransposeMatrixd = NULL;
-PFNGLLOADTRANSPOSEMATRIXFPROC __glewLoadTransposeMatrixf = NULL;
-PFNGLMULTTRANSPOSEMATRIXDPROC __glewMultTransposeMatrixd = NULL;
-PFNGLMULTTRANSPOSEMATRIXFPROC __glewMultTransposeMatrixf = NULL;
-PFNGLMULTITEXCOORD1DPROC __glewMultiTexCoord1d = NULL;
-PFNGLMULTITEXCOORD1DVPROC __glewMultiTexCoord1dv = NULL;
-PFNGLMULTITEXCOORD1FPROC __glewMultiTexCoord1f = NULL;
-PFNGLMULTITEXCOORD1FVPROC __glewMultiTexCoord1fv = NULL;
-PFNGLMULTITEXCOORD1IPROC __glewMultiTexCoord1i = NULL;
-PFNGLMULTITEXCOORD1IVPROC __glewMultiTexCoord1iv = NULL;
-PFNGLMULTITEXCOORD1SPROC __glewMultiTexCoord1s = NULL;
-PFNGLMULTITEXCOORD1SVPROC __glewMultiTexCoord1sv = NULL;
-PFNGLMULTITEXCOORD2DPROC __glewMultiTexCoord2d = NULL;
-PFNGLMULTITEXCOORD2DVPROC __glewMultiTexCoord2dv = NULL;
-PFNGLMULTITEXCOORD2FPROC __glewMultiTexCoord2f = NULL;
-PFNGLMULTITEXCOORD2FVPROC __glewMultiTexCoord2fv = NULL;
-PFNGLMULTITEXCOORD2IPROC __glewMultiTexCoord2i = NULL;
-PFNGLMULTITEXCOORD2IVPROC __glewMultiTexCoord2iv = NULL;
-PFNGLMULTITEXCOORD2SPROC __glewMultiTexCoord2s = NULL;
-PFNGLMULTITEXCOORD2SVPROC __glewMultiTexCoord2sv = NULL;
-PFNGLMULTITEXCOORD3DPROC __glewMultiTexCoord3d = NULL;
-PFNGLMULTITEXCOORD3DVPROC __glewMultiTexCoord3dv = NULL;
-PFNGLMULTITEXCOORD3FPROC __glewMultiTexCoord3f = NULL;
-PFNGLMULTITEXCOORD3FVPROC __glewMultiTexCoord3fv = NULL;
-PFNGLMULTITEXCOORD3IPROC __glewMultiTexCoord3i = NULL;
-PFNGLMULTITEXCOORD3IVPROC __glewMultiTexCoord3iv = NULL;
-PFNGLMULTITEXCOORD3SPROC __glewMultiTexCoord3s = NULL;
-PFNGLMULTITEXCOORD3SVPROC __glewMultiTexCoord3sv = NULL;
-PFNGLMULTITEXCOORD4DPROC __glewMultiTexCoord4d = NULL;
-PFNGLMULTITEXCOORD4DVPROC __glewMultiTexCoord4dv = NULL;
-PFNGLMULTITEXCOORD4FPROC __glewMultiTexCoord4f = NULL;
-PFNGLMULTITEXCOORD4FVPROC __glewMultiTexCoord4fv = NULL;
-PFNGLMULTITEXCOORD4IPROC __glewMultiTexCoord4i = NULL;
-PFNGLMULTITEXCOORD4IVPROC __glewMultiTexCoord4iv = NULL;
-PFNGLMULTITEXCOORD4SPROC __glewMultiTexCoord4s = NULL;
-PFNGLMULTITEXCOORD4SVPROC __glewMultiTexCoord4sv = NULL;
-PFNGLSAMPLECOVERAGEPROC __glewSampleCoverage = NULL;
-
-PFNGLBLENDCOLORPROC __glewBlendColor = NULL;
-PFNGLBLENDEQUATIONPROC __glewBlendEquation = NULL;
-PFNGLBLENDFUNCSEPARATEPROC __glewBlendFuncSeparate = NULL;
-PFNGLFOGCOORDPOINTERPROC __glewFogCoordPointer = NULL;
-PFNGLFOGCOORDDPROC __glewFogCoordd = NULL;
-PFNGLFOGCOORDDVPROC __glewFogCoorddv = NULL;
-PFNGLFOGCOORDFPROC __glewFogCoordf = NULL;
-PFNGLFOGCOORDFVPROC __glewFogCoordfv = NULL;
-PFNGLMULTIDRAWARRAYSPROC __glewMultiDrawArrays = NULL;
-PFNGLMULTIDRAWELEMENTSPROC __glewMultiDrawElements = NULL;
-PFNGLPOINTPARAMETERFPROC __glewPointParameterf = NULL;
-PFNGLPOINTPARAMETERFVPROC __glewPointParameterfv = NULL;
-PFNGLPOINTPARAMETERIPROC __glewPointParameteri = NULL;
-PFNGLPOINTPARAMETERIVPROC __glewPointParameteriv = NULL;
-PFNGLSECONDARYCOLOR3BPROC __glewSecondaryColor3b = NULL;
-PFNGLSECONDARYCOLOR3BVPROC __glewSecondaryColor3bv = NULL;
-PFNGLSECONDARYCOLOR3DPROC __glewSecondaryColor3d = NULL;
-PFNGLSECONDARYCOLOR3DVPROC __glewSecondaryColor3dv = NULL;
-PFNGLSECONDARYCOLOR3FPROC __glewSecondaryColor3f = NULL;
-PFNGLSECONDARYCOLOR3FVPROC __glewSecondaryColor3fv = NULL;
-PFNGLSECONDARYCOLOR3IPROC __glewSecondaryColor3i = NULL;
-PFNGLSECONDARYCOLOR3IVPROC __glewSecondaryColor3iv = NULL;
-PFNGLSECONDARYCOLOR3SPROC __glewSecondaryColor3s = NULL;
-PFNGLSECONDARYCOLOR3SVPROC __glewSecondaryColor3sv = NULL;
-PFNGLSECONDARYCOLOR3UBPROC __glewSecondaryColor3ub = NULL;
-PFNGLSECONDARYCOLOR3UBVPROC __glewSecondaryColor3ubv = NULL;
-PFNGLSECONDARYCOLOR3UIPROC __glewSecondaryColor3ui = NULL;
-PFNGLSECONDARYCOLOR3UIVPROC __glewSecondaryColor3uiv = NULL;
-PFNGLSECONDARYCOLOR3USPROC __glewSecondaryColor3us = NULL;
-PFNGLSECONDARYCOLOR3USVPROC __glewSecondaryColor3usv = NULL;
-PFNGLSECONDARYCOLORPOINTERPROC __glewSecondaryColorPointer = NULL;
-PFNGLWINDOWPOS2DPROC __glewWindowPos2d = NULL;
-PFNGLWINDOWPOS2DVPROC __glewWindowPos2dv = NULL;
-PFNGLWINDOWPOS2FPROC __glewWindowPos2f = NULL;
-PFNGLWINDOWPOS2FVPROC __glewWindowPos2fv = NULL;
-PFNGLWINDOWPOS2IPROC __glewWindowPos2i = NULL;
-PFNGLWINDOWPOS2IVPROC __glewWindowPos2iv = NULL;
-PFNGLWINDOWPOS2SPROC __glewWindowPos2s = NULL;
-PFNGLWINDOWPOS2SVPROC __glewWindowPos2sv = NULL;
-PFNGLWINDOWPOS3DPROC __glewWindowPos3d = NULL;
-PFNGLWINDOWPOS3DVPROC __glewWindowPos3dv = NULL;
-PFNGLWINDOWPOS3FPROC __glewWindowPos3f = NULL;
-PFNGLWINDOWPOS3FVPROC __glewWindowPos3fv = NULL;
-PFNGLWINDOWPOS3IPROC __glewWindowPos3i = NULL;
-PFNGLWINDOWPOS3IVPROC __glewWindowPos3iv = NULL;
-PFNGLWINDOWPOS3SPROC __glewWindowPos3s = NULL;
-PFNGLWINDOWPOS3SVPROC __glewWindowPos3sv = NULL;
-
-PFNGLBEGINQUERYPROC __glewBeginQuery = NULL;
-PFNGLBINDBUFFERPROC __glewBindBuffer = NULL;
-PFNGLBUFFERDATAPROC __glewBufferData = NULL;
-PFNGLBUFFERSUBDATAPROC __glewBufferSubData = NULL;
-PFNGLDELETEBUFFERSPROC __glewDeleteBuffers = NULL;
-PFNGLDELETEQUERIESPROC __glewDeleteQueries = NULL;
-PFNGLENDQUERYPROC __glewEndQuery = NULL;
-PFNGLGENBUFFERSPROC __glewGenBuffers = NULL;
-PFNGLGENQUERIESPROC __glewGenQueries = NULL;
-PFNGLGETBUFFERPARAMETERIVPROC __glewGetBufferParameteriv = NULL;
-PFNGLGETBUFFERPOINTERVPROC __glewGetBufferPointerv = NULL;
-PFNGLGETBUFFERSUBDATAPROC __glewGetBufferSubData = NULL;
-PFNGLGETQUERYOBJECTIVPROC __glewGetQueryObjectiv = NULL;
-PFNGLGETQUERYOBJECTUIVPROC __glewGetQueryObjectuiv = NULL;
-PFNGLGETQUERYIVPROC __glewGetQueryiv = NULL;
-PFNGLISBUFFERPROC __glewIsBuffer = NULL;
-PFNGLISQUERYPROC __glewIsQuery = NULL;
-PFNGLMAPBUFFERPROC __glewMapBuffer = NULL;
-PFNGLUNMAPBUFFERPROC __glewUnmapBuffer = NULL;
-
-PFNGLATTACHSHADERPROC __glewAttachShader = NULL;
-PFNGLBINDATTRIBLOCATIONPROC __glewBindAttribLocation = NULL;
-PFNGLBLENDEQUATIONSEPARATEPROC __glewBlendEquationSeparate = NULL;
-PFNGLCOMPILESHADERPROC __glewCompileShader = NULL;
-PFNGLCREATEPROGRAMPROC __glewCreateProgram = NULL;
-PFNGLCREATESHADERPROC __glewCreateShader = NULL;
-PFNGLDELETEPROGRAMPROC __glewDeleteProgram = NULL;
-PFNGLDELETESHADERPROC __glewDeleteShader = NULL;
-PFNGLDETACHSHADERPROC __glewDetachShader = NULL;
-PFNGLDISABLEVERTEXATTRIBARRAYPROC __glewDisableVertexAttribArray = NULL;
-PFNGLDRAWBUFFERSPROC __glewDrawBuffers = NULL;
-PFNGLENABLEVERTEXATTRIBARRAYPROC __glewEnableVertexAttribArray = NULL;
-PFNGLGETACTIVEATTRIBPROC __glewGetActiveAttrib = NULL;
-PFNGLGETACTIVEUNIFORMPROC __glewGetActiveUniform = NULL;
-PFNGLGETATTACHEDSHADERSPROC __glewGetAttachedShaders = NULL;
-PFNGLGETATTRIBLOCATIONPROC __glewGetAttribLocation = NULL;
-PFNGLGETPROGRAMINFOLOGPROC __glewGetProgramInfoLog = NULL;
-PFNGLGETPROGRAMIVPROC __glewGetProgramiv = NULL;
-PFNGLGETSHADERINFOLOGPROC __glewGetShaderInfoLog = NULL;
-PFNGLGETSHADERSOURCEPROC __glewGetShaderSource = NULL;
-PFNGLGETSHADERIVPROC __glewGetShaderiv = NULL;
-PFNGLGETUNIFORMLOCATIONPROC __glewGetUniformLocation = NULL;
-PFNGLGETUNIFORMFVPROC __glewGetUniformfv = NULL;
-PFNGLGETUNIFORMIVPROC __glewGetUniformiv = NULL;
-PFNGLGETVERTEXATTRIBPOINTERVPROC __glewGetVertexAttribPointerv = NULL;
-PFNGLGETVERTEXATTRIBDVPROC __glewGetVertexAttribdv = NULL;
-PFNGLGETVERTEXATTRIBFVPROC __glewGetVertexAttribfv = NULL;
-PFNGLGETVERTEXATTRIBIVPROC __glewGetVertexAttribiv = NULL;
-PFNGLISPROGRAMPROC __glewIsProgram = NULL;
-PFNGLISSHADERPROC __glewIsShader = NULL;
-PFNGLLINKPROGRAMPROC __glewLinkProgram = NULL;
-PFNGLSHADERSOURCEPROC __glewShaderSource = NULL;
-PFNGLSTENCILFUNCSEPARATEPROC __glewStencilFuncSeparate = NULL;
-PFNGLSTENCILMASKSEPARATEPROC __glewStencilMaskSeparate = NULL;
-PFNGLSTENCILOPSEPARATEPROC __glewStencilOpSeparate = NULL;
-PFNGLUNIFORM1FPROC __glewUniform1f = NULL;
-PFNGLUNIFORM1FVPROC __glewUniform1fv = NULL;
-PFNGLUNIFORM1IPROC __glewUniform1i = NULL;
-PFNGLUNIFORM1IVPROC __glewUniform1iv = NULL;
-PFNGLUNIFORM2FPROC __glewUniform2f = NULL;
-PFNGLUNIFORM2FVPROC __glewUniform2fv = NULL;
-PFNGLUNIFORM2IPROC __glewUniform2i = NULL;
-PFNGLUNIFORM2IVPROC __glewUniform2iv = NULL;
-PFNGLUNIFORM3FPROC __glewUniform3f = NULL;
-PFNGLUNIFORM3FVPROC __glewUniform3fv = NULL;
-PFNGLUNIFORM3IPROC __glewUniform3i = NULL;
-PFNGLUNIFORM3IVPROC __glewUniform3iv = NULL;
-PFNGLUNIFORM4FPROC __glewUniform4f = NULL;
-PFNGLUNIFORM4FVPROC __glewUniform4fv = NULL;
-PFNGLUNIFORM4IPROC __glewUniform4i = NULL;
-PFNGLUNIFORM4IVPROC __glewUniform4iv = NULL;
-PFNGLUNIFORMMATRIX2FVPROC __glewUniformMatrix2fv = NULL;
-PFNGLUNIFORMMATRIX3FVPROC __glewUniformMatrix3fv = NULL;
-PFNGLUNIFORMMATRIX4FVPROC __glewUniformMatrix4fv = NULL;
-PFNGLUSEPROGRAMPROC __glewUseProgram = NULL;
-PFNGLVALIDATEPROGRAMPROC __glewValidateProgram = NULL;
-PFNGLVERTEXATTRIB1DPROC __glewVertexAttrib1d = NULL;
-PFNGLVERTEXATTRIB1DVPROC __glewVertexAttrib1dv = NULL;
-PFNGLVERTEXATTRIB1FPROC __glewVertexAttrib1f = NULL;
-PFNGLVERTEXATTRIB1FVPROC __glewVertexAttrib1fv = NULL;
-PFNGLVERTEXATTRIB1SPROC __glewVertexAttrib1s = NULL;
-PFNGLVERTEXATTRIB1SVPROC __glewVertexAttrib1sv = NULL;
-PFNGLVERTEXATTRIB2DPROC __glewVertexAttrib2d = NULL;
-PFNGLVERTEXATTRIB2DVPROC __glewVertexAttrib2dv = NULL;
-PFNGLVERTEXATTRIB2FPROC __glewVertexAttrib2f = NULL;
-PFNGLVERTEXATTRIB2FVPROC __glewVertexAttrib2fv = NULL;
-PFNGLVERTEXATTRIB2SPROC __glewVertexAttrib2s = NULL;
-PFNGLVERTEXATTRIB2SVPROC __glewVertexAttrib2sv = NULL;
-PFNGLVERTEXATTRIB3DPROC __glewVertexAttrib3d = NULL;
-PFNGLVERTEXATTRIB3DVPROC __glewVertexAttrib3dv = NULL;
-PFNGLVERTEXATTRIB3FPROC __glewVertexAttrib3f = NULL;
-PFNGLVERTEXATTRIB3FVPROC __glewVertexAttrib3fv = NULL;
-PFNGLVERTEXATTRIB3SPROC __glewVertexAttrib3s = NULL;
-PFNGLVERTEXATTRIB3SVPROC __glewVertexAttrib3sv = NULL;
-PFNGLVERTEXATTRIB4NBVPROC __glewVertexAttrib4Nbv = NULL;
-PFNGLVERTEXATTRIB4NIVPROC __glewVertexAttrib4Niv = NULL;
-PFNGLVERTEXATTRIB4NSVPROC __glewVertexAttrib4Nsv = NULL;
-PFNGLVERTEXATTRIB4NUBPROC __glewVertexAttrib4Nub = NULL;
-PFNGLVERTEXATTRIB4NUBVPROC __glewVertexAttrib4Nubv = NULL;
-PFNGLVERTEXATTRIB4NUIVPROC __glewVertexAttrib4Nuiv = NULL;
-PFNGLVERTEXATTRIB4NUSVPROC __glewVertexAttrib4Nusv = NULL;
-PFNGLVERTEXATTRIB4BVPROC __glewVertexAttrib4bv = NULL;
-PFNGLVERTEXATTRIB4DPROC __glewVertexAttrib4d = NULL;
-PFNGLVERTEXATTRIB4DVPROC __glewVertexAttrib4dv = NULL;
-PFNGLVERTEXATTRIB4FPROC __glewVertexAttrib4f = NULL;
-PFNGLVERTEXATTRIB4FVPROC __glewVertexAttrib4fv = NULL;
-PFNGLVERTEXATTRIB4IVPROC __glewVertexAttrib4iv = NULL;
-PFNGLVERTEXATTRIB4SPROC __glewVertexAttrib4s = NULL;
-PFNGLVERTEXATTRIB4SVPROC __glewVertexAttrib4sv = NULL;
-PFNGLVERTEXATTRIB4UBVPROC __glewVertexAttrib4ubv = NULL;
-PFNGLVERTEXATTRIB4UIVPROC __glewVertexAttrib4uiv = NULL;
-PFNGLVERTEXATTRIB4USVPROC __glewVertexAttrib4usv = NULL;
-PFNGLVERTEXATTRIBPOINTERPROC __glewVertexAttribPointer = NULL;
-
-PFNGLUNIFORMMATRIX2X3FVPROC __glewUniformMatrix2x3fv = NULL;
-PFNGLUNIFORMMATRIX2X4FVPROC __glewUniformMatrix2x4fv = NULL;
-PFNGLUNIFORMMATRIX3X2FVPROC __glewUniformMatrix3x2fv = NULL;
-PFNGLUNIFORMMATRIX3X4FVPROC __glewUniformMatrix3x4fv = NULL;
-PFNGLUNIFORMMATRIX4X2FVPROC __glewUniformMatrix4x2fv = NULL;
-PFNGLUNIFORMMATRIX4X3FVPROC __glewUniformMatrix4x3fv = NULL;
-
-PFNGLTBUFFERMASK3DFXPROC __glewTbufferMask3DFX = NULL;
-
-PFNGLDRAWELEMENTARRAYAPPLEPROC __glewDrawElementArrayAPPLE = NULL;
-PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC __glewDrawRangeElementArrayAPPLE = NULL;
-PFNGLELEMENTPOINTERAPPLEPROC __glewElementPointerAPPLE = NULL;
-PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC __glewMultiDrawElementArrayAPPLE = NULL;
-PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC __glewMultiDrawRangeElementArrayAPPLE = NULL;
-
-PFNGLDELETEFENCESAPPLEPROC __glewDeleteFencesAPPLE = NULL;
-PFNGLFINISHFENCEAPPLEPROC __glewFinishFenceAPPLE = NULL;
-PFNGLFINISHOBJECTAPPLEPROC __glewFinishObjectAPPLE = NULL;
-PFNGLGENFENCESAPPLEPROC __glewGenFencesAPPLE = NULL;
-PFNGLISFENCEAPPLEPROC __glewIsFenceAPPLE = NULL;
-PFNGLSETFENCEAPPLEPROC __glewSetFenceAPPLE = NULL;
-PFNGLTESTFENCEAPPLEPROC __glewTestFenceAPPLE = NULL;
-PFNGLTESTOBJECTAPPLEPROC __glewTestObjectAPPLE = NULL;
-
-PFNGLBUFFERPARAMETERIAPPLEPROC __glewBufferParameteriAPPLE = NULL;
-PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC __glewFlushMappedBufferRangeAPPLE = NULL;
-
-PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC __glewGetTexParameterPointervAPPLE = NULL;
-PFNGLTEXTURERANGEAPPLEPROC __glewTextureRangeAPPLE = NULL;
-
-PFNGLBINDVERTEXARRAYAPPLEPROC __glewBindVertexArrayAPPLE = NULL;
-PFNGLDELETEVERTEXARRAYSAPPLEPROC __glewDeleteVertexArraysAPPLE = NULL;
-PFNGLGENVERTEXARRAYSAPPLEPROC __glewGenVertexArraysAPPLE = NULL;
-PFNGLISVERTEXARRAYAPPLEPROC __glewIsVertexArrayAPPLE = NULL;
-
-PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC __glewFlushVertexArrayRangeAPPLE = NULL;
-PFNGLVERTEXARRAYPARAMETERIAPPLEPROC __glewVertexArrayParameteriAPPLE = NULL;
-PFNGLVERTEXARRAYRANGEAPPLEPROC __glewVertexArrayRangeAPPLE = NULL;
-
-PFNGLCLAMPCOLORARBPROC __glewClampColorARB = NULL;
-
-PFNGLDRAWBUFFERSARBPROC __glewDrawBuffersARB = NULL;
-
-PFNGLCOLORSUBTABLEPROC __glewColorSubTable = NULL;
-PFNGLCOLORTABLEPROC __glewColorTable = NULL;
-PFNGLCOLORTABLEPARAMETERFVPROC __glewColorTableParameterfv = NULL;
-PFNGLCOLORTABLEPARAMETERIVPROC __glewColorTableParameteriv = NULL;
-PFNGLCONVOLUTIONFILTER1DPROC __glewConvolutionFilter1D = NULL;
-PFNGLCONVOLUTIONFILTER2DPROC __glewConvolutionFilter2D = NULL;
-PFNGLCONVOLUTIONPARAMETERFPROC __glewConvolutionParameterf = NULL;
-PFNGLCONVOLUTIONPARAMETERFVPROC __glewConvolutionParameterfv = NULL;
-PFNGLCONVOLUTIONPARAMETERIPROC __glewConvolutionParameteri = NULL;
-PFNGLCONVOLUTIONPARAMETERIVPROC __glewConvolutionParameteriv = NULL;
-PFNGLCOPYCOLORSUBTABLEPROC __glewCopyColorSubTable = NULL;
-PFNGLCOPYCOLORTABLEPROC __glewCopyColorTable = NULL;
-PFNGLCOPYCONVOLUTIONFILTER1DPROC __glewCopyConvolutionFilter1D = NULL;
-PFNGLCOPYCONVOLUTIONFILTER2DPROC __glewCopyConvolutionFilter2D = NULL;
-PFNGLGETCOLORTABLEPROC __glewGetColorTable = NULL;
-PFNGLGETCOLORTABLEPARAMETERFVPROC __glewGetColorTableParameterfv = NULL;
-PFNGLGETCOLORTABLEPARAMETERIVPROC __glewGetColorTableParameteriv = NULL;
-PFNGLGETCONVOLUTIONFILTERPROC __glewGetConvolutionFilter = NULL;
-PFNGLGETCONVOLUTIONPARAMETERFVPROC __glewGetConvolutionParameterfv = NULL;
-PFNGLGETCONVOLUTIONPARAMETERIVPROC __glewGetConvolutionParameteriv = NULL;
-PFNGLGETHISTOGRAMPROC __glewGetHistogram = NULL;
-PFNGLGETHISTOGRAMPARAMETERFVPROC __glewGetHistogramParameterfv = NULL;
-PFNGLGETHISTOGRAMPARAMETERIVPROC __glewGetHistogramParameteriv = NULL;
-PFNGLGETMINMAXPROC __glewGetMinmax = NULL;
-PFNGLGETMINMAXPARAMETERFVPROC __glewGetMinmaxParameterfv = NULL;
-PFNGLGETMINMAXPARAMETERIVPROC __glewGetMinmaxParameteriv = NULL;
-PFNGLGETSEPARABLEFILTERPROC __glewGetSeparableFilter = NULL;
-PFNGLHISTOGRAMPROC __glewHistogram = NULL;
-PFNGLMINMAXPROC __glewMinmax = NULL;
-PFNGLRESETHISTOGRAMPROC __glewResetHistogram = NULL;
-PFNGLRESETMINMAXPROC __glewResetMinmax = NULL;
-PFNGLSEPARABLEFILTER2DPROC __glewSeparableFilter2D = NULL;
-
-PFNGLCURRENTPALETTEMATRIXARBPROC __glewCurrentPaletteMatrixARB = NULL;
-PFNGLMATRIXINDEXPOINTERARBPROC __glewMatrixIndexPointerARB = NULL;
-PFNGLMATRIXINDEXUBVARBPROC __glewMatrixIndexubvARB = NULL;
-PFNGLMATRIXINDEXUIVARBPROC __glewMatrixIndexuivARB = NULL;
-PFNGLMATRIXINDEXUSVARBPROC __glewMatrixIndexusvARB = NULL;
-
-PFNGLSAMPLECOVERAGEARBPROC __glewSampleCoverageARB = NULL;
-
-PFNGLACTIVETEXTUREARBPROC __glewActiveTextureARB = NULL;
-PFNGLCLIENTACTIVETEXTUREARBPROC __glewClientActiveTextureARB = NULL;
-PFNGLMULTITEXCOORD1DARBPROC __glewMultiTexCoord1dARB = NULL;
-PFNGLMULTITEXCOORD1DVARBPROC __glewMultiTexCoord1dvARB = NULL;
-PFNGLMULTITEXCOORD1FARBPROC __glewMultiTexCoord1fARB = NULL;
-PFNGLMULTITEXCOORD1FVARBPROC __glewMultiTexCoord1fvARB = NULL;
-PFNGLMULTITEXCOORD1IARBPROC __glewMultiTexCoord1iARB = NULL;
-PFNGLMULTITEXCOORD1IVARBPROC __glewMultiTexCoord1ivARB = NULL;
-PFNGLMULTITEXCOORD1SARBPROC __glewMultiTexCoord1sARB = NULL;
-PFNGLMULTITEXCOORD1SVARBPROC __glewMultiTexCoord1svARB = NULL;
-PFNGLMULTITEXCOORD2DARBPROC __glewMultiTexCoord2dARB = NULL;
-PFNGLMULTITEXCOORD2DVARBPROC __glewMultiTexCoord2dvARB = NULL;
-PFNGLMULTITEXCOORD2FARBPROC __glewMultiTexCoord2fARB = NULL;
-PFNGLMULTITEXCOORD2FVARBPROC __glewMultiTexCoord2fvARB = NULL;
-PFNGLMULTITEXCOORD2IARBPROC __glewMultiTexCoord2iARB = NULL;
-PFNGLMULTITEXCOORD2IVARBPROC __glewMultiTexCoord2ivARB = NULL;
-PFNGLMULTITEXCOORD2SARBPROC __glewMultiTexCoord2sARB = NULL;
-PFNGLMULTITEXCOORD2SVARBPROC __glewMultiTexCoord2svARB = NULL;
-PFNGLMULTITEXCOORD3DARBPROC __glewMultiTexCoord3dARB = NULL;
-PFNGLMULTITEXCOORD3DVARBPROC __glewMultiTexCoord3dvARB = NULL;
-PFNGLMULTITEXCOORD3FARBPROC __glewMultiTexCoord3fARB = NULL;
-PFNGLMULTITEXCOORD3FVARBPROC __glewMultiTexCoord3fvARB = NULL;
-PFNGLMULTITEXCOORD3IARBPROC __glewMultiTexCoord3iARB = NULL;
-PFNGLMULTITEXCOORD3IVARBPROC __glewMultiTexCoord3ivARB = NULL;
-PFNGLMULTITEXCOORD3SARBPROC __glewMultiTexCoord3sARB = NULL;
-PFNGLMULTITEXCOORD3SVARBPROC __glewMultiTexCoord3svARB = NULL;
-PFNGLMULTITEXCOORD4DARBPROC __glewMultiTexCoord4dARB = NULL;
-PFNGLMULTITEXCOORD4DVARBPROC __glewMultiTexCoord4dvARB = NULL;
-PFNGLMULTITEXCOORD4FARBPROC __glewMultiTexCoord4fARB = NULL;
-PFNGLMULTITEXCOORD4FVARBPROC __glewMultiTexCoord4fvARB = NULL;
-PFNGLMULTITEXCOORD4IARBPROC __glewMultiTexCoord4iARB = NULL;
-PFNGLMULTITEXCOORD4IVARBPROC __glewMultiTexCoord4ivARB = NULL;
-PFNGLMULTITEXCOORD4SARBPROC __glewMultiTexCoord4sARB = NULL;
-PFNGLMULTITEXCOORD4SVARBPROC __glewMultiTexCoord4svARB = NULL;
-
-PFNGLBEGINQUERYARBPROC __glewBeginQueryARB = NULL;
-PFNGLDELETEQUERIESARBPROC __glewDeleteQueriesARB = NULL;
-PFNGLENDQUERYARBPROC __glewEndQueryARB = NULL;
-PFNGLGENQUERIESARBPROC __glewGenQueriesARB = NULL;
-PFNGLGETQUERYOBJECTIVARBPROC __glewGetQueryObjectivARB = NULL;
-PFNGLGETQUERYOBJECTUIVARBPROC __glewGetQueryObjectuivARB = NULL;
-PFNGLGETQUERYIVARBPROC __glewGetQueryivARB = NULL;
-PFNGLISQUERYARBPROC __glewIsQueryARB = NULL;
-
-PFNGLPOINTPARAMETERFARBPROC __glewPointParameterfARB = NULL;
-PFNGLPOINTPARAMETERFVARBPROC __glewPointParameterfvARB = NULL;
-
-PFNGLATTACHOBJECTARBPROC __glewAttachObjectARB = NULL;
-PFNGLCOMPILESHADERARBPROC __glewCompileShaderARB = NULL;
-PFNGLCREATEPROGRAMOBJECTARBPROC __glewCreateProgramObjectARB = NULL;
-PFNGLCREATESHADEROBJECTARBPROC __glewCreateShaderObjectARB = NULL;
-PFNGLDELETEOBJECTARBPROC __glewDeleteObjectARB = NULL;
-PFNGLDETACHOBJECTARBPROC __glewDetachObjectARB = NULL;
-PFNGLGETACTIVEUNIFORMARBPROC __glewGetActiveUniformARB = NULL;
-PFNGLGETATTACHEDOBJECTSARBPROC __glewGetAttachedObjectsARB = NULL;
-PFNGLGETHANDLEARBPROC __glewGetHandleARB = NULL;
-PFNGLGETINFOLOGARBPROC __glewGetInfoLogARB = NULL;
-PFNGLGETOBJECTPARAMETERFVARBPROC __glewGetObjectParameterfvARB = NULL;
-PFNGLGETOBJECTPARAMETERIVARBPROC __glewGetObjectParameterivARB = NULL;
-PFNGLGETSHADERSOURCEARBPROC __glewGetShaderSourceARB = NULL;
-PFNGLGETUNIFORMLOCATIONARBPROC __glewGetUniformLocationARB = NULL;
-PFNGLGETUNIFORMFVARBPROC __glewGetUniformfvARB = NULL;
-PFNGLGETUNIFORMIVARBPROC __glewGetUniformivARB = NULL;
-PFNGLLINKPROGRAMARBPROC __glewLinkProgramARB = NULL;
-PFNGLSHADERSOURCEARBPROC __glewShaderSourceARB = NULL;
-PFNGLUNIFORM1FARBPROC __glewUniform1fARB = NULL;
-PFNGLUNIFORM1FVARBPROC __glewUniform1fvARB = NULL;
-PFNGLUNIFORM1IARBPROC __glewUniform1iARB = NULL;
-PFNGLUNIFORM1IVARBPROC __glewUniform1ivARB = NULL;
-PFNGLUNIFORM2FARBPROC __glewUniform2fARB = NULL;
-PFNGLUNIFORM2FVARBPROC __glewUniform2fvARB = NULL;
-PFNGLUNIFORM2IARBPROC __glewUniform2iARB = NULL;
-PFNGLUNIFORM2IVARBPROC __glewUniform2ivARB = NULL;
-PFNGLUNIFORM3FARBPROC __glewUniform3fARB = NULL;
-PFNGLUNIFORM3FVARBPROC __glewUniform3fvARB = NULL;
-PFNGLUNIFORM3IARBPROC __glewUniform3iARB = NULL;
-PFNGLUNIFORM3IVARBPROC __glewUniform3ivARB = NULL;
-PFNGLUNIFORM4FARBPROC __glewUniform4fARB = NULL;
-PFNGLUNIFORM4FVARBPROC __glewUniform4fvARB = NULL;
-PFNGLUNIFORM4IARBPROC __glewUniform4iARB = NULL;
-PFNGLUNIFORM4IVARBPROC __glewUniform4ivARB = NULL;
-PFNGLUNIFORMMATRIX2FVARBPROC __glewUniformMatrix2fvARB = NULL;
-PFNGLUNIFORMMATRIX3FVARBPROC __glewUniformMatrix3fvARB = NULL;
-PFNGLUNIFORMMATRIX4FVARBPROC __glewUniformMatrix4fvARB = NULL;
-PFNGLUSEPROGRAMOBJECTARBPROC __glewUseProgramObjectARB = NULL;
-PFNGLVALIDATEPROGRAMARBPROC __glewValidateProgramARB = NULL;
-
-PFNGLCOMPRESSEDTEXIMAGE1DARBPROC __glewCompressedTexImage1DARB = NULL;
-PFNGLCOMPRESSEDTEXIMAGE2DARBPROC __glewCompressedTexImage2DARB = NULL;
-PFNGLCOMPRESSEDTEXIMAGE3DARBPROC __glewCompressedTexImage3DARB = NULL;
-PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC __glewCompressedTexSubImage1DARB = NULL;
-PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC __glewCompressedTexSubImage2DARB = NULL;
-PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC __glewCompressedTexSubImage3DARB = NULL;
-PFNGLGETCOMPRESSEDTEXIMAGEARBPROC __glewGetCompressedTexImageARB = NULL;
-
-PFNGLLOADTRANSPOSEMATRIXDARBPROC __glewLoadTransposeMatrixdARB = NULL;
-PFNGLLOADTRANSPOSEMATRIXFARBPROC __glewLoadTransposeMatrixfARB = NULL;
-PFNGLMULTTRANSPOSEMATRIXDARBPROC __glewMultTransposeMatrixdARB = NULL;
-PFNGLMULTTRANSPOSEMATRIXFARBPROC __glewMultTransposeMatrixfARB = NULL;
-
-PFNGLVERTEXBLENDARBPROC __glewVertexBlendARB = NULL;
-PFNGLWEIGHTPOINTERARBPROC __glewWeightPointerARB = NULL;
-PFNGLWEIGHTBVARBPROC __glewWeightbvARB = NULL;
-PFNGLWEIGHTDVARBPROC __glewWeightdvARB = NULL;
-PFNGLWEIGHTFVARBPROC __glewWeightfvARB = NULL;
-PFNGLWEIGHTIVARBPROC __glewWeightivARB = NULL;
-PFNGLWEIGHTSVARBPROC __glewWeightsvARB = NULL;
-PFNGLWEIGHTUBVARBPROC __glewWeightubvARB = NULL;
-PFNGLWEIGHTUIVARBPROC __glewWeightuivARB = NULL;
-PFNGLWEIGHTUSVARBPROC __glewWeightusvARB = NULL;
-
-PFNGLBINDBUFFERARBPROC __glewBindBufferARB = NULL;
-PFNGLBUFFERDATAARBPROC __glewBufferDataARB = NULL;
-PFNGLBUFFERSUBDATAARBPROC __glewBufferSubDataARB = NULL;
-PFNGLDELETEBUFFERSARBPROC __glewDeleteBuffersARB = NULL;
-PFNGLGENBUFFERSARBPROC __glewGenBuffersARB = NULL;
-PFNGLGETBUFFERPARAMETERIVARBPROC __glewGetBufferParameterivARB = NULL;
-PFNGLGETBUFFERPOINTERVARBPROC __glewGetBufferPointervARB = NULL;
-PFNGLGETBUFFERSUBDATAARBPROC __glewGetBufferSubDataARB = NULL;
-PFNGLISBUFFERARBPROC __glewIsBufferARB = NULL;
-PFNGLMAPBUFFERARBPROC __glewMapBufferARB = NULL;
-PFNGLUNMAPBUFFERARBPROC __glewUnmapBufferARB = NULL;
-
-PFNGLBINDPROGRAMARBPROC __glewBindProgramARB = NULL;
-PFNGLDELETEPROGRAMSARBPROC __glewDeleteProgramsARB = NULL;
-PFNGLDISABLEVERTEXATTRIBARRAYARBPROC __glewDisableVertexAttribArrayARB = NULL;
-PFNGLENABLEVERTEXATTRIBARRAYARBPROC __glewEnableVertexAttribArrayARB = NULL;
-PFNGLGENPROGRAMSARBPROC __glewGenProgramsARB = NULL;
-PFNGLGETPROGRAMENVPARAMETERDVARBPROC __glewGetProgramEnvParameterdvARB = NULL;
-PFNGLGETPROGRAMENVPARAMETERFVARBPROC __glewGetProgramEnvParameterfvARB = NULL;
-PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC __glewGetProgramLocalParameterdvARB = NULL;
-PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC __glewGetProgramLocalParameterfvARB = NULL;
-PFNGLGETPROGRAMSTRINGARBPROC __glewGetProgramStringARB = NULL;
-PFNGLGETPROGRAMIVARBPROC __glewGetProgramivARB = NULL;
-PFNGLGETVERTEXATTRIBPOINTERVARBPROC __glewGetVertexAttribPointervARB = NULL;
-PFNGLGETVERTEXATTRIBDVARBPROC __glewGetVertexAttribdvARB = NULL;
-PFNGLGETVERTEXATTRIBFVARBPROC __glewGetVertexAttribfvARB = NULL;
-PFNGLGETVERTEXATTRIBIVARBPROC __glewGetVertexAttribivARB = NULL;
-PFNGLISPROGRAMARBPROC __glewIsProgramARB = NULL;
-PFNGLPROGRAMENVPARAMETER4DARBPROC __glewProgramEnvParameter4dARB = NULL;
-PFNGLPROGRAMENVPARAMETER4DVARBPROC __glewProgramEnvParameter4dvARB = NULL;
-PFNGLPROGRAMENVPARAMETER4FARBPROC __glewProgramEnvParameter4fARB = NULL;
-PFNGLPROGRAMENVPARAMETER4FVARBPROC __glewProgramEnvParameter4fvARB = NULL;
-PFNGLPROGRAMLOCALPARAMETER4DARBPROC __glewProgramLocalParameter4dARB = NULL;
-PFNGLPROGRAMLOCALPARAMETER4DVARBPROC __glewProgramLocalParameter4dvARB = NULL;
-PFNGLPROGRAMLOCALPARAMETER4FARBPROC __glewProgramLocalParameter4fARB = NULL;
-PFNGLPROGRAMLOCALPARAMETER4FVARBPROC __glewProgramLocalParameter4fvARB = NULL;
-PFNGLPROGRAMSTRINGARBPROC __glewProgramStringARB = NULL;
-PFNGLVERTEXATTRIB1DARBPROC __glewVertexAttrib1dARB = NULL;
-PFNGLVERTEXATTRIB1DVARBPROC __glewVertexAttrib1dvARB = NULL;
-PFNGLVERTEXATTRIB1FARBPROC __glewVertexAttrib1fARB = NULL;
-PFNGLVERTEXATTRIB1FVARBPROC __glewVertexAttrib1fvARB = NULL;
-PFNGLVERTEXATTRIB1SARBPROC __glewVertexAttrib1sARB = NULL;
-PFNGLVERTEXATTRIB1SVARBPROC __glewVertexAttrib1svARB = NULL;
-PFNGLVERTEXATTRIB2DARBPROC __glewVertexAttrib2dARB = NULL;
-PFNGLVERTEXATTRIB2DVARBPROC __glewVertexAttrib2dvARB = NULL;
-PFNGLVERTEXATTRIB2FARBPROC __glewVertexAttrib2fARB = NULL;
-PFNGLVERTEXATTRIB2FVARBPROC __glewVertexAttrib2fvARB = NULL;
-PFNGLVERTEXATTRIB2SARBPROC __glewVertexAttrib2sARB = NULL;
-PFNGLVERTEXATTRIB2SVARBPROC __glewVertexAttrib2svARB = NULL;
-PFNGLVERTEXATTRIB3DARBPROC __glewVertexAttrib3dARB = NULL;
-PFNGLVERTEXATTRIB3DVARBPROC __glewVertexAttrib3dvARB = NULL;
-PFNGLVERTEXATTRIB3FARBPROC __glewVertexAttrib3fARB = NULL;
-PFNGLVERTEXATTRIB3FVARBPROC __glewVertexAttrib3fvARB = NULL;
-PFNGLVERTEXATTRIB3SARBPROC __glewVertexAttrib3sARB = NULL;
-PFNGLVERTEXATTRIB3SVARBPROC __glewVertexAttrib3svARB = NULL;
-PFNGLVERTEXATTRIB4NBVARBPROC __glewVertexAttrib4NbvARB = NULL;
-PFNGLVERTEXATTRIB4NIVARBPROC __glewVertexAttrib4NivARB = NULL;
-PFNGLVERTEXATTRIB4NSVARBPROC __glewVertexAttrib4NsvARB = NULL;
-PFNGLVERTEXATTRIB4NUBARBPROC __glewVertexAttrib4NubARB = NULL;
-PFNGLVERTEXATTRIB4NUBVARBPROC __glewVertexAttrib4NubvARB = NULL;
-PFNGLVERTEXATTRIB4NUIVARBPROC __glewVertexAttrib4NuivARB = NULL;
-PFNGLVERTEXATTRIB4NUSVARBPROC __glewVertexAttrib4NusvARB = NULL;
-PFNGLVERTEXATTRIB4BVARBPROC __glewVertexAttrib4bvARB = NULL;
-PFNGLVERTEXATTRIB4DARBPROC __glewVertexAttrib4dARB = NULL;
-PFNGLVERTEXATTRIB4DVARBPROC __glewVertexAttrib4dvARB = NULL;
-PFNGLVERTEXATTRIB4FARBPROC __glewVertexAttrib4fARB = NULL;
-PFNGLVERTEXATTRIB4FVARBPROC __glewVertexAttrib4fvARB = NULL;
-PFNGLVERTEXATTRIB4IVARBPROC __glewVertexAttrib4ivARB = NULL;
-PFNGLVERTEXATTRIB4SARBPROC __glewVertexAttrib4sARB = NULL;
-PFNGLVERTEXATTRIB4SVARBPROC __glewVertexAttrib4svARB = NULL;
-PFNGLVERTEXATTRIB4UBVARBPROC __glewVertexAttrib4ubvARB = NULL;
-PFNGLVERTEXATTRIB4UIVARBPROC __glewVertexAttrib4uivARB = NULL;
-PFNGLVERTEXATTRIB4USVARBPROC __glewVertexAttrib4usvARB = NULL;
-PFNGLVERTEXATTRIBPOINTERARBPROC __glewVertexAttribPointerARB = NULL;
-
-PFNGLBINDATTRIBLOCATIONARBPROC __glewBindAttribLocationARB = NULL;
-PFNGLGETACTIVEATTRIBARBPROC __glewGetActiveAttribARB = NULL;
-PFNGLGETATTRIBLOCATIONARBPROC __glewGetAttribLocationARB = NULL;
-
-PFNGLWINDOWPOS2DARBPROC __glewWindowPos2dARB = NULL;
-PFNGLWINDOWPOS2DVARBPROC __glewWindowPos2dvARB = NULL;
-PFNGLWINDOWPOS2FARBPROC __glewWindowPos2fARB = NULL;
-PFNGLWINDOWPOS2FVARBPROC __glewWindowPos2fvARB = NULL;
-PFNGLWINDOWPOS2IARBPROC __glewWindowPos2iARB = NULL;
-PFNGLWINDOWPOS2IVARBPROC __glewWindowPos2ivARB = NULL;
-PFNGLWINDOWPOS2SARBPROC __glewWindowPos2sARB = NULL;
-PFNGLWINDOWPOS2SVARBPROC __glewWindowPos2svARB = NULL;
-PFNGLWINDOWPOS3DARBPROC __glewWindowPos3dARB = NULL;
-PFNGLWINDOWPOS3DVARBPROC __glewWindowPos3dvARB = NULL;
-PFNGLWINDOWPOS3FARBPROC __glewWindowPos3fARB = NULL;
-PFNGLWINDOWPOS3FVARBPROC __glewWindowPos3fvARB = NULL;
-PFNGLWINDOWPOS3IARBPROC __glewWindowPos3iARB = NULL;
-PFNGLWINDOWPOS3IVARBPROC __glewWindowPos3ivARB = NULL;
-PFNGLWINDOWPOS3SARBPROC __glewWindowPos3sARB = NULL;
-PFNGLWINDOWPOS3SVARBPROC __glewWindowPos3svARB = NULL;
-
-PFNGLDRAWBUFFERSATIPROC __glewDrawBuffersATI = NULL;
-
-PFNGLDRAWELEMENTARRAYATIPROC __glewDrawElementArrayATI = NULL;
-PFNGLDRAWRANGEELEMENTARRAYATIPROC __glewDrawRangeElementArrayATI = NULL;
-PFNGLELEMENTPOINTERATIPROC __glewElementPointerATI = NULL;
-
-PFNGLGETTEXBUMPPARAMETERFVATIPROC __glewGetTexBumpParameterfvATI = NULL;
-PFNGLGETTEXBUMPPARAMETERIVATIPROC __glewGetTexBumpParameterivATI = NULL;
-PFNGLTEXBUMPPARAMETERFVATIPROC __glewTexBumpParameterfvATI = NULL;
-PFNGLTEXBUMPPARAMETERIVATIPROC __glewTexBumpParameterivATI = NULL;
-
-PFNGLALPHAFRAGMENTOP1ATIPROC __glewAlphaFragmentOp1ATI = NULL;
-PFNGLALPHAFRAGMENTOP2ATIPROC __glewAlphaFragmentOp2ATI = NULL;
-PFNGLALPHAFRAGMENTOP3ATIPROC __glewAlphaFragmentOp3ATI = NULL;
-PFNGLBEGINFRAGMENTSHADERATIPROC __glewBeginFragmentShaderATI = NULL;
-PFNGLBINDFRAGMENTSHADERATIPROC __glewBindFragmentShaderATI = NULL;
-PFNGLCOLORFRAGMENTOP1ATIPROC __glewColorFragmentOp1ATI = NULL;
-PFNGLCOLORFRAGMENTOP2ATIPROC __glewColorFragmentOp2ATI = NULL;
-PFNGLCOLORFRAGMENTOP3ATIPROC __glewColorFragmentOp3ATI = NULL;
-PFNGLDELETEFRAGMENTSHADERATIPROC __glewDeleteFragmentShaderATI = NULL;
-PFNGLENDFRAGMENTSHADERATIPROC __glewEndFragmentShaderATI = NULL;
-PFNGLGENFRAGMENTSHADERSATIPROC __glewGenFragmentShadersATI = NULL;
-PFNGLPASSTEXCOORDATIPROC __glewPassTexCoordATI = NULL;
-PFNGLSAMPLEMAPATIPROC __glewSampleMapATI = NULL;
-PFNGLSETFRAGMENTSHADERCONSTANTATIPROC __glewSetFragmentShaderConstantATI = NULL;
-
-PFNGLMAPOBJECTBUFFERATIPROC __glewMapObjectBufferATI = NULL;
-PFNGLUNMAPOBJECTBUFFERATIPROC __glewUnmapObjectBufferATI = NULL;
-
-PFNGLPNTRIANGLESFATIPROC __glPNTrianglewesfATI = NULL;
-PFNGLPNTRIANGLESIATIPROC __glPNTrianglewesiATI = NULL;
-
-PFNGLSTENCILFUNCSEPARATEATIPROC __glewStencilFuncSeparateATI = NULL;
-PFNGLSTENCILOPSEPARATEATIPROC __glewStencilOpSeparateATI = NULL;
-
-PFNGLARRAYOBJECTATIPROC __glewArrayObjectATI = NULL;
-PFNGLFREEOBJECTBUFFERATIPROC __glewFreeObjectBufferATI = NULL;
-PFNGLGETARRAYOBJECTFVATIPROC __glewGetArrayObjectfvATI = NULL;
-PFNGLGETARRAYOBJECTIVATIPROC __glewGetArrayObjectivATI = NULL;
-PFNGLGETOBJECTBUFFERFVATIPROC __glewGetObjectBufferfvATI = NULL;
-PFNGLGETOBJECTBUFFERIVATIPROC __glewGetObjectBufferivATI = NULL;
-PFNGLGETVARIANTARRAYOBJECTFVATIPROC __glewGetVariantArrayObjectfvATI = NULL;
-PFNGLGETVARIANTARRAYOBJECTIVATIPROC __glewGetVariantArrayObjectivATI = NULL;
-PFNGLISOBJECTBUFFERATIPROC __glewIsObjectBufferATI = NULL;
-PFNGLNEWOBJECTBUFFERATIPROC __glewNewObjectBufferATI = NULL;
-PFNGLUPDATEOBJECTBUFFERATIPROC __glewUpdateObjectBufferATI = NULL;
-PFNGLVARIANTARRAYOBJECTATIPROC __glewVariantArrayObjectATI = NULL;
-
-PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC __glewGetVertexAttribArrayObjectfvATI = NULL;
-PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC __glewGetVertexAttribArrayObjectivATI = NULL;
-PFNGLVERTEXATTRIBARRAYOBJECTATIPROC __glewVertexAttribArrayObjectATI = NULL;
-
-PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC __glewClientActiveVertexStreamATI = NULL;
-PFNGLNORMALSTREAM3BATIPROC __glewNormalStream3bATI = NULL;
-PFNGLNORMALSTREAM3BVATIPROC __glewNormalStream3bvATI = NULL;
-PFNGLNORMALSTREAM3DATIPROC __glewNormalStream3dATI = NULL;
-PFNGLNORMALSTREAM3DVATIPROC __glewNormalStream3dvATI = NULL;
-PFNGLNORMALSTREAM3FATIPROC __glewNormalStream3fATI = NULL;
-PFNGLNORMALSTREAM3FVATIPROC __glewNormalStream3fvATI = NULL;
-PFNGLNORMALSTREAM3IATIPROC __glewNormalStream3iATI = NULL;
-PFNGLNORMALSTREAM3IVATIPROC __glewNormalStream3ivATI = NULL;
-PFNGLNORMALSTREAM3SATIPROC __glewNormalStream3sATI = NULL;
-PFNGLNORMALSTREAM3SVATIPROC __glewNormalStream3svATI = NULL;
-PFNGLVERTEXBLENDENVFATIPROC __glewVertexBlendEnvfATI = NULL;
-PFNGLVERTEXBLENDENVIATIPROC __glewVertexBlendEnviATI = NULL;
-PFNGLVERTEXSTREAM2DATIPROC __glewVertexStream2dATI = NULL;
-PFNGLVERTEXSTREAM2DVATIPROC __glewVertexStream2dvATI = NULL;
-PFNGLVERTEXSTREAM2FATIPROC __glewVertexStream2fATI = NULL;
-PFNGLVERTEXSTREAM2FVATIPROC __glewVertexStream2fvATI = NULL;
-PFNGLVERTEXSTREAM2IATIPROC __glewVertexStream2iATI = NULL;
-PFNGLVERTEXSTREAM2IVATIPROC __glewVertexStream2ivATI = NULL;
-PFNGLVERTEXSTREAM2SATIPROC __glewVertexStream2sATI = NULL;
-PFNGLVERTEXSTREAM2SVATIPROC __glewVertexStream2svATI = NULL;
-PFNGLVERTEXSTREAM3DATIPROC __glewVertexStream3dATI = NULL;
-PFNGLVERTEXSTREAM3DVATIPROC __glewVertexStream3dvATI = NULL;
-PFNGLVERTEXSTREAM3FATIPROC __glewVertexStream3fATI = NULL;
-PFNGLVERTEXSTREAM3FVATIPROC __glewVertexStream3fvATI = NULL;
-PFNGLVERTEXSTREAM3IATIPROC __glewVertexStream3iATI = NULL;
-PFNGLVERTEXSTREAM3IVATIPROC __glewVertexStream3ivATI = NULL;
-PFNGLVERTEXSTREAM3SATIPROC __glewVertexStream3sATI = NULL;
-PFNGLVERTEXSTREAM3SVATIPROC __glewVertexStream3svATI = NULL;
-PFNGLVERTEXSTREAM4DATIPROC __glewVertexStream4dATI = NULL;
-PFNGLVERTEXSTREAM4DVATIPROC __glewVertexStream4dvATI = NULL;
-PFNGLVERTEXSTREAM4FATIPROC __glewVertexStream4fATI = NULL;
-PFNGLVERTEXSTREAM4FVATIPROC __glewVertexStream4fvATI = NULL;
-PFNGLVERTEXSTREAM4IATIPROC __glewVertexStream4iATI = NULL;
-PFNGLVERTEXSTREAM4IVATIPROC __glewVertexStream4ivATI = NULL;
-PFNGLVERTEXSTREAM4SATIPROC __glewVertexStream4sATI = NULL;
-PFNGLVERTEXSTREAM4SVATIPROC __glewVertexStream4svATI = NULL;
-
-PFNGLGETUNIFORMBUFFERSIZEEXTPROC __glewGetUniformBufferSizeEXT = NULL;
-PFNGLGETUNIFORMOFFSETEXTPROC __glewGetUniformOffsetEXT = NULL;
-PFNGLUNIFORMBUFFEREXTPROC __glewUniformBufferEXT = NULL;
-
-PFNGLBLENDCOLOREXTPROC __glewBlendColorEXT = NULL;
-
-PFNGLBLENDEQUATIONSEPARATEEXTPROC __glewBlendEquationSeparateEXT = NULL;
-
-PFNGLBLENDFUNCSEPARATEEXTPROC __glewBlendFuncSeparateEXT = NULL;
-
-PFNGLBLENDEQUATIONEXTPROC __glewBlendEquationEXT = NULL;
-
-PFNGLCOLORSUBTABLEEXTPROC __glewColorSubTableEXT = NULL;
-PFNGLCOPYCOLORSUBTABLEEXTPROC __glewCopyColorSubTableEXT = NULL;
-
-PFNGLLOCKARRAYSEXTPROC __glewLockArraysEXT = NULL;
-PFNGLUNLOCKARRAYSEXTPROC __glewUnlockArraysEXT = NULL;
-
-PFNGLCONVOLUTIONFILTER1DEXTPROC __glewConvolutionFilter1DEXT = NULL;
-PFNGLCONVOLUTIONFILTER2DEXTPROC __glewConvolutionFilter2DEXT = NULL;
-PFNGLCONVOLUTIONPARAMETERFEXTPROC __glewConvolutionParameterfEXT = NULL;
-PFNGLCONVOLUTIONPARAMETERFVEXTPROC __glewConvolutionParameterfvEXT = NULL;
-PFNGLCONVOLUTIONPARAMETERIEXTPROC __glewConvolutionParameteriEXT = NULL;
-PFNGLCONVOLUTIONPARAMETERIVEXTPROC __glewConvolutionParameterivEXT = NULL;
-PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC __glewCopyConvolutionFilter1DEXT = NULL;
-PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC __glewCopyConvolutionFilter2DEXT = NULL;
-PFNGLGETCONVOLUTIONFILTEREXTPROC __glewGetConvolutionFilterEXT = NULL;
-PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC __glewGetConvolutionParameterfvEXT = NULL;
-PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC __glewGetConvolutionParameterivEXT = NULL;
-PFNGLGETSEPARABLEFILTEREXTPROC __glewGetSeparableFilterEXT = NULL;
-PFNGLSEPARABLEFILTER2DEXTPROC __glewSeparableFilter2DEXT = NULL;
-
-PFNGLBINORMALPOINTEREXTPROC __glewBinormalPointerEXT = NULL;
-PFNGLTANGENTPOINTEREXTPROC __glewTangentPointerEXT = NULL;
-
-PFNGLCOPYTEXIMAGE1DEXTPROC __glewCopyTexImage1DEXT = NULL;
-PFNGLCOPYTEXIMAGE2DEXTPROC __glewCopyTexImage2DEXT = NULL;
-PFNGLCOPYTEXSUBIMAGE1DEXTPROC __glewCopyTexSubImage1DEXT = NULL;
-PFNGLCOPYTEXSUBIMAGE2DEXTPROC __glewCopyTexSubImage2DEXT = NULL;
-PFNGLCOPYTEXSUBIMAGE3DEXTPROC __glewCopyTexSubImage3DEXT = NULL;
-
-PFNGLCULLPARAMETERDVEXTPROC __glewCullParameterdvEXT = NULL;
-PFNGLCULLPARAMETERFVEXTPROC __glewCullParameterfvEXT = NULL;
-
-PFNGLDEPTHBOUNDSEXTPROC __glewDepthBoundsEXT = NULL;
-
-PFNGLCOLORMASKINDEXEDEXTPROC __glewColorMaskIndexedEXT = NULL;
-PFNGLDISABLEINDEXEDEXTPROC __glewDisableIndexedEXT = NULL;
-PFNGLENABLEINDEXEDEXTPROC __glewEnableIndexedEXT = NULL;
-PFNGLGETBOOLEANINDEXEDVEXTPROC __glewGetBooleanIndexedvEXT = NULL;
-PFNGLGETINTEGERINDEXEDVEXTPROC __glewGetIntegerIndexedvEXT = NULL;
-PFNGLISENABLEDINDEXEDEXTPROC __glewIsEnabledIndexedEXT = NULL;
-
-PFNGLDRAWARRAYSINSTANCEDEXTPROC __glewDrawArraysInstancedEXT = NULL;
-PFNGLDRAWELEMENTSINSTANCEDEXTPROC __glewDrawElementsInstancedEXT = NULL;
-
-PFNGLDRAWRANGEELEMENTSEXTPROC __glewDrawRangeElementsEXT = NULL;
-
-PFNGLFOGCOORDPOINTEREXTPROC __glewFogCoordPointerEXT = NULL;
-PFNGLFOGCOORDDEXTPROC __glewFogCoorddEXT = NULL;
-PFNGLFOGCOORDDVEXTPROC __glewFogCoorddvEXT = NULL;
-PFNGLFOGCOORDFEXTPROC __glewFogCoordfEXT = NULL;
-PFNGLFOGCOORDFVEXTPROC __glewFogCoordfvEXT = NULL;
-
-PFNGLFRAGMENTCOLORMATERIALEXTPROC __glewFragmentColorMaterialEXT = NULL;
-PFNGLFRAGMENTLIGHTMODELFEXTPROC __glewFragmentLightModelfEXT = NULL;
-PFNGLFRAGMENTLIGHTMODELFVEXTPROC __glewFragmentLightModelfvEXT = NULL;
-PFNGLFRAGMENTLIGHTMODELIEXTPROC __glewFragmentLightModeliEXT = NULL;
-PFNGLFRAGMENTLIGHTMODELIVEXTPROC __glewFragmentLightModelivEXT = NULL;
-PFNGLFRAGMENTLIGHTFEXTPROC __glewFragmentLightfEXT = NULL;
-PFNGLFRAGMENTLIGHTFVEXTPROC __glewFragmentLightfvEXT = NULL;
-PFNGLFRAGMENTLIGHTIEXTPROC __glewFragmentLightiEXT = NULL;
-PFNGLFRAGMENTLIGHTIVEXTPROC __glewFragmentLightivEXT = NULL;
-PFNGLFRAGMENTMATERIALFEXTPROC __glewFragmentMaterialfEXT = NULL;
-PFNGLFRAGMENTMATERIALFVEXTPROC __glewFragmentMaterialfvEXT = NULL;
-PFNGLFRAGMENTMATERIALIEXTPROC __glewFragmentMaterialiEXT = NULL;
-PFNGLFRAGMENTMATERIALIVEXTPROC __glewFragmentMaterialivEXT = NULL;
-PFNGLGETFRAGMENTLIGHTFVEXTPROC __glewGetFragmentLightfvEXT = NULL;
-PFNGLGETFRAGMENTLIGHTIVEXTPROC __glewGetFragmentLightivEXT = NULL;
-PFNGLGETFRAGMENTMATERIALFVEXTPROC __glewGetFragmentMaterialfvEXT = NULL;
-PFNGLGETFRAGMENTMATERIALIVEXTPROC __glewGetFragmentMaterialivEXT = NULL;
-PFNGLLIGHTENVIEXTPROC __glewLightEnviEXT = NULL;
-
-PFNGLBLITFRAMEBUFFEREXTPROC __glewBlitFramebufferEXT = NULL;
-
-PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC __glewRenderbufferStorageMultisampleEXT = NULL;
-
-PFNGLBINDFRAMEBUFFEREXTPROC __glewBindFramebufferEXT = NULL;
-PFNGLBINDRENDERBUFFEREXTPROC __glewBindRenderbufferEXT = NULL;
-PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC __glewCheckFramebufferStatusEXT = NULL;
-PFNGLDELETEFRAMEBUFFERSEXTPROC __glewDeleteFramebuffersEXT = NULL;
-PFNGLDELETERENDERBUFFERSEXTPROC __glewDeleteRenderbuffersEXT = NULL;
-PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC __glewFramebufferRenderbufferEXT = NULL;
-PFNGLFRAMEBUFFERTEXTURE1DEXTPROC __glewFramebufferTexture1DEXT = NULL;
-PFNGLFRAMEBUFFERTEXTURE2DEXTPROC __glewFramebufferTexture2DEXT = NULL;
-PFNGLFRAMEBUFFERTEXTURE3DEXTPROC __glewFramebufferTexture3DEXT = NULL;
-PFNGLGENFRAMEBUFFERSEXTPROC __glewGenFramebuffersEXT = NULL;
-PFNGLGENRENDERBUFFERSEXTPROC __glewGenRenderbuffersEXT = NULL;
-PFNGLGENERATEMIPMAPEXTPROC __glewGenerateMipmapEXT = NULL;
-PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC __glewGetFramebufferAttachmentParameterivEXT = NULL;
-PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC __glewGetRenderbufferParameterivEXT = NULL;
-PFNGLISFRAMEBUFFEREXTPROC __glewIsFramebufferEXT = NULL;
-PFNGLISRENDERBUFFEREXTPROC __glewIsRenderbufferEXT = NULL;
-PFNGLRENDERBUFFERSTORAGEEXTPROC __glewRenderbufferStorageEXT = NULL;
-
-PFNGLFRAMEBUFFERTEXTUREEXTPROC __glewFramebufferTextureEXT = NULL;
-PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC __glewFramebufferTextureFaceEXT = NULL;
-PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC __glewFramebufferTextureLayerEXT = NULL;
-PFNGLPROGRAMPARAMETERIEXTPROC __glewProgramParameteriEXT = NULL;
-
-PFNGLPROGRAMENVPARAMETERS4FVEXTPROC __glewProgramEnvParameters4fvEXT = NULL;
-PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC __glewProgramLocalParameters4fvEXT = NULL;
-
-PFNGLBINDFRAGDATALOCATIONEXTPROC __glewBindFragDataLocationEXT = NULL;
-PFNGLGETFRAGDATALOCATIONEXTPROC __glewGetFragDataLocationEXT = NULL;
-PFNGLGETUNIFORMUIVEXTPROC __glewGetUniformuivEXT = NULL;
-PFNGLGETVERTEXATTRIBIIVEXTPROC __glewGetVertexAttribIivEXT = NULL;
-PFNGLGETVERTEXATTRIBIUIVEXTPROC __glewGetVertexAttribIuivEXT = NULL;
-PFNGLUNIFORM1UIEXTPROC __glewUniform1uiEXT = NULL;
-PFNGLUNIFORM1UIVEXTPROC __glewUniform1uivEXT = NULL;
-PFNGLUNIFORM2UIEXTPROC __glewUniform2uiEXT = NULL;
-PFNGLUNIFORM2UIVEXTPROC __glewUniform2uivEXT = NULL;
-PFNGLUNIFORM3UIEXTPROC __glewUniform3uiEXT = NULL;
-PFNGLUNIFORM3UIVEXTPROC __glewUniform3uivEXT = NULL;
-PFNGLUNIFORM4UIEXTPROC __glewUniform4uiEXT = NULL;
-PFNGLUNIFORM4UIVEXTPROC __glewUniform4uivEXT = NULL;
-PFNGLVERTEXATTRIBI1IEXTPROC __glewVertexAttribI1iEXT = NULL;
-PFNGLVERTEXATTRIBI1IVEXTPROC __glewVertexAttribI1ivEXT = NULL;
-PFNGLVERTEXATTRIBI1UIEXTPROC __glewVertexAttribI1uiEXT = NULL;
-PFNGLVERTEXATTRIBI1UIVEXTPROC __glewVertexAttribI1uivEXT = NULL;
-PFNGLVERTEXATTRIBI2IEXTPROC __glewVertexAttribI2iEXT = NULL;
-PFNGLVERTEXATTRIBI2IVEXTPROC __glewVertexAttribI2ivEXT = NULL;
-PFNGLVERTEXATTRIBI2UIEXTPROC __glewVertexAttribI2uiEXT = NULL;
-PFNGLVERTEXATTRIBI2UIVEXTPROC __glewVertexAttribI2uivEXT = NULL;
-PFNGLVERTEXATTRIBI3IEXTPROC __glewVertexAttribI3iEXT = NULL;
-PFNGLVERTEXATTRIBI3IVEXTPROC __glewVertexAttribI3ivEXT = NULL;
-PFNGLVERTEXATTRIBI3UIEXTPROC __glewVertexAttribI3uiEXT = NULL;
-PFNGLVERTEXATTRIBI3UIVEXTPROC __glewVertexAttribI3uivEXT = NULL;
-PFNGLVERTEXATTRIBI4BVEXTPROC __glewVertexAttribI4bvEXT = NULL;
-PFNGLVERTEXATTRIBI4IEXTPROC __glewVertexAttribI4iEXT = NULL;
-PFNGLVERTEXATTRIBI4IVEXTPROC __glewVertexAttribI4ivEXT = NULL;
-PFNGLVERTEXATTRIBI4SVEXTPROC __glewVertexAttribI4svEXT = NULL;
-PFNGLVERTEXATTRIBI4UBVEXTPROC __glewVertexAttribI4ubvEXT = NULL;
-PFNGLVERTEXATTRIBI4UIEXTPROC __glewVertexAttribI4uiEXT = NULL;
-PFNGLVERTEXATTRIBI4UIVEXTPROC __glewVertexAttribI4uivEXT = NULL;
-PFNGLVERTEXATTRIBI4USVEXTPROC __glewVertexAttribI4usvEXT = NULL;
-PFNGLVERTEXATTRIBIPOINTEREXTPROC __glewVertexAttribIPointerEXT = NULL;
-
-PFNGLGETHISTOGRAMEXTPROC __glewGetHistogramEXT = NULL;
-PFNGLGETHISTOGRAMPARAMETERFVEXTPROC __glewGetHistogramParameterfvEXT = NULL;
-PFNGLGETHISTOGRAMPARAMETERIVEXTPROC __glewGetHistogramParameterivEXT = NULL;
-PFNGLGETMINMAXEXTPROC __glewGetMinmaxEXT = NULL;
-PFNGLGETMINMAXPARAMETERFVEXTPROC __glewGetMinmaxParameterfvEXT = NULL;
-PFNGLGETMINMAXPARAMETERIVEXTPROC __glewGetMinmaxParameterivEXT = NULL;
-PFNGLHISTOGRAMEXTPROC __glewHistogramEXT = NULL;
-PFNGLMINMAXEXTPROC __glewMinmaxEXT = NULL;
-PFNGLRESETHISTOGRAMEXTPROC __glewResetHistogramEXT = NULL;
-PFNGLRESETMINMAXEXTPROC __glewResetMinmaxEXT = NULL;
-
-PFNGLINDEXFUNCEXTPROC __glewIndexFuncEXT = NULL;
-
-PFNGLINDEXMATERIALEXTPROC __glewIndexMaterialEXT = NULL;
-
-PFNGLAPPLYTEXTUREEXTPROC __glewApplyTextureEXT = NULL;
-PFNGLTEXTURELIGHTEXTPROC __glewTextureLightEXT = NULL;
-PFNGLTEXTUREMATERIALEXTPROC __glewTextureMaterialEXT = NULL;
-
-PFNGLMULTIDRAWARRAYSEXTPROC __glewMultiDrawArraysEXT = NULL;
-PFNGLMULTIDRAWELEMENTSEXTPROC __glewMultiDrawElementsEXT = NULL;
-
-PFNGLSAMPLEMASKEXTPROC __glewSampleMaskEXT = NULL;
-PFNGLSAMPLEPATTERNEXTPROC __glewSamplePatternEXT = NULL;
-
-PFNGLCOLORTABLEEXTPROC __glewColorTableEXT = NULL;
-PFNGLGETCOLORTABLEEXTPROC __glewGetColorTableEXT = NULL;
-PFNGLGETCOLORTABLEPARAMETERFVEXTPROC __glewGetColorTableParameterfvEXT = NULL;
-PFNGLGETCOLORTABLEPARAMETERIVEXTPROC __glewGetColorTableParameterivEXT = NULL;
-
-PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC __glewGetPixelTransformParameterfvEXT = NULL;
-PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC __glewGetPixelTransformParameterivEXT = NULL;
-PFNGLPIXELTRANSFORMPARAMETERFEXTPROC __glewPixelTransformParameterfEXT = NULL;
-PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC __glewPixelTransformParameterfvEXT = NULL;
-PFNGLPIXELTRANSFORMPARAMETERIEXTPROC __glewPixelTransformParameteriEXT = NULL;
-PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC __glewPixelTransformParameterivEXT = NULL;
-
-PFNGLPOINTPARAMETERFEXTPROC __glewPointParameterfEXT = NULL;
-PFNGLPOINTPARAMETERFVEXTPROC __glewPointParameterfvEXT = NULL;
-
-PFNGLPOLYGONOFFSETEXTPROC __glewPolygonOffsetEXT = NULL;
-
-PFNGLBEGINSCENEEXTPROC __glewBeginSceneEXT = NULL;
-PFNGLENDSCENEEXTPROC __glewEndSceneEXT = NULL;
-
-PFNGLSECONDARYCOLOR3BEXTPROC __glewSecondaryColor3bEXT = NULL;
-PFNGLSECONDARYCOLOR3BVEXTPROC __glewSecondaryColor3bvEXT = NULL;
-PFNGLSECONDARYCOLOR3DEXTPROC __glewSecondaryColor3dEXT = NULL;
-PFNGLSECONDARYCOLOR3DVEXTPROC __glewSecondaryColor3dvEXT = NULL;
-PFNGLSECONDARYCOLOR3FEXTPROC __glewSecondaryColor3fEXT = NULL;
-PFNGLSECONDARYCOLOR3FVEXTPROC __glewSecondaryColor3fvEXT = NULL;
-PFNGLSECONDARYCOLOR3IEXTPROC __glewSecondaryColor3iEXT = NULL;
-PFNGLSECONDARYCOLOR3IVEXTPROC __glewSecondaryColor3ivEXT = NULL;
-PFNGLSECONDARYCOLOR3SEXTPROC __glewSecondaryColor3sEXT = NULL;
-PFNGLSECONDARYCOLOR3SVEXTPROC __glewSecondaryColor3svEXT = NULL;
-PFNGLSECONDARYCOLOR3UBEXTPROC __glewSecondaryColor3ubEXT = NULL;
-PFNGLSECONDARYCOLOR3UBVEXTPROC __glewSecondaryColor3ubvEXT = NULL;
-PFNGLSECONDARYCOLOR3UIEXTPROC __glewSecondaryColor3uiEXT = NULL;
-PFNGLSECONDARYCOLOR3UIVEXTPROC __glewSecondaryColor3uivEXT = NULL;
-PFNGLSECONDARYCOLOR3USEXTPROC __glewSecondaryColor3usEXT = NULL;
-PFNGLSECONDARYCOLOR3USVEXTPROC __glewSecondaryColor3usvEXT = NULL;
-PFNGLSECONDARYCOLORPOINTEREXTPROC __glewSecondaryColorPointerEXT = NULL;
-
-PFNGLACTIVESTENCILFACEEXTPROC __glewActiveStencilFaceEXT = NULL;
-
-PFNGLTEXSUBIMAGE1DEXTPROC __glewTexSubImage1DEXT = NULL;
-PFNGLTEXSUBIMAGE2DEXTPROC __glewTexSubImage2DEXT = NULL;
-PFNGLTEXSUBIMAGE3DEXTPROC __glewTexSubImage3DEXT = NULL;
-
-PFNGLTEXIMAGE3DEXTPROC __glewTexImage3DEXT = NULL;
-
-PFNGLTEXBUFFEREXTPROC __glewTexBufferEXT = NULL;
-
-PFNGLCLEARCOLORIIEXTPROC __glewClearColorIiEXT = NULL;
-PFNGLCLEARCOLORIUIEXTPROC __glewClearColorIuiEXT = NULL;
-PFNGLGETTEXPARAMETERIIVEXTPROC __glewGetTexParameterIivEXT = NULL;
-PFNGLGETTEXPARAMETERIUIVEXTPROC __glewGetTexParameterIuivEXT = NULL;
-PFNGLTEXPARAMETERIIVEXTPROC __glewTexParameterIivEXT = NULL;
-PFNGLTEXPARAMETERIUIVEXTPROC __glewTexParameterIuivEXT = NULL;
-
-PFNGLARETEXTURESRESIDENTEXTPROC __glewAreTexturesResidentEXT = NULL;
-PFNGLBINDTEXTUREEXTPROC __glewBindTextureEXT = NULL;
-PFNGLDELETETEXTURESEXTPROC __glewDeleteTexturesEXT = NULL;
-PFNGLGENTEXTURESEXTPROC __glewGenTexturesEXT = NULL;
-PFNGLISTEXTUREEXTPROC __glewIsTextureEXT = NULL;
-PFNGLPRIORITIZETEXTURESEXTPROC __glewPrioritizeTexturesEXT = NULL;
-
-PFNGLTEXTURENORMALEXTPROC __glewTextureNormalEXT = NULL;
-
-PFNGLGETQUERYOBJECTI64VEXTPROC __glewGetQueryObjecti64vEXT = NULL;
-PFNGLGETQUERYOBJECTUI64VEXTPROC __glewGetQueryObjectui64vEXT = NULL;
-
-PFNGLARRAYELEMENTEXTPROC __glewArrayElementEXT = NULL;
-PFNGLCOLORPOINTEREXTPROC __glewColorPointerEXT = NULL;
-PFNGLDRAWARRAYSEXTPROC __glewDrawArraysEXT = NULL;
-PFNGLEDGEFLAGPOINTEREXTPROC __glewEdgeFlagPointerEXT = NULL;
-PFNGLGETPOINTERVEXTPROC __glewGetPointervEXT = NULL;
-PFNGLINDEXPOINTEREXTPROC __glewIndexPointerEXT = NULL;
-PFNGLNORMALPOINTEREXTPROC __glewNormalPointerEXT = NULL;
-PFNGLTEXCOORDPOINTEREXTPROC __glewTexCoordPointerEXT = NULL;
-PFNGLVERTEXPOINTEREXTPROC __glewVertexPointerEXT = NULL;
-
-PFNGLBEGINVERTEXSHADEREXTPROC __glewBeginVertexShaderEXT = NULL;
-PFNGLBINDLIGHTPARAMETEREXTPROC __glewBindLightParameterEXT = NULL;
-PFNGLBINDMATERIALPARAMETEREXTPROC __glewBindMaterialParameterEXT = NULL;
-PFNGLBINDPARAMETEREXTPROC __glewBindParameterEXT = NULL;
-PFNGLBINDTEXGENPARAMETEREXTPROC __glewBindTexGenParameterEXT = NULL;
-PFNGLBINDTEXTUREUNITPARAMETEREXTPROC __glewBindTextureUnitParameterEXT = NULL;
-PFNGLBINDVERTEXSHADEREXTPROC __glewBindVertexShaderEXT = NULL;
-PFNGLDELETEVERTEXSHADEREXTPROC __glewDeleteVertexShaderEXT = NULL;
-PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC __glewDisableVariantClientStateEXT = NULL;
-PFNGLENABLEVARIANTCLIENTSTATEEXTPROC __glewEnableVariantClientStateEXT = NULL;
-PFNGLENDVERTEXSHADEREXTPROC __glewEndVertexShaderEXT = NULL;
-PFNGLEXTRACTCOMPONENTEXTPROC __glewExtractComponentEXT = NULL;
-PFNGLGENSYMBOLSEXTPROC __glewGenSymbolsEXT = NULL;
-PFNGLGENVERTEXSHADERSEXTPROC __glewGenVertexShadersEXT = NULL;
-PFNGLGETINVARIANTBOOLEANVEXTPROC __glewGetInvariantBooleanvEXT = NULL;
-PFNGLGETINVARIANTFLOATVEXTPROC __glewGetInvariantFloatvEXT = NULL;
-PFNGLGETINVARIANTINTEGERVEXTPROC __glewGetInvariantIntegervEXT = NULL;
-PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC __glewGetLocalConstantBooleanvEXT = NULL;
-PFNGLGETLOCALCONSTANTFLOATVEXTPROC __glewGetLocalConstantFloatvEXT = NULL;
-PFNGLGETLOCALCONSTANTINTEGERVEXTPROC __glewGetLocalConstantIntegervEXT = NULL;
-PFNGLGETVARIANTBOOLEANVEXTPROC __glewGetVariantBooleanvEXT = NULL;
-PFNGLGETVARIANTFLOATVEXTPROC __glewGetVariantFloatvEXT = NULL;
-PFNGLGETVARIANTINTEGERVEXTPROC __glewGetVariantIntegervEXT = NULL;
-PFNGLGETVARIANTPOINTERVEXTPROC __glewGetVariantPointervEXT = NULL;
-PFNGLINSERTCOMPONENTEXTPROC __glewInsertComponentEXT = NULL;
-PFNGLISVARIANTENABLEDEXTPROC __glewIsVariantEnabledEXT = NULL;
-PFNGLSETINVARIANTEXTPROC __glewSetInvariantEXT = NULL;
-PFNGLSETLOCALCONSTANTEXTPROC __glewSetLocalConstantEXT = NULL;
-PFNGLSHADEROP1EXTPROC __glewShaderOp1EXT = NULL;
-PFNGLSHADEROP2EXTPROC __glewShaderOp2EXT = NULL;
-PFNGLSHADEROP3EXTPROC __glewShaderOp3EXT = NULL;
-PFNGLSWIZZLEEXTPROC __glewSwizzleEXT = NULL;
-PFNGLVARIANTPOINTEREXTPROC __glewVariantPointerEXT = NULL;
-PFNGLVARIANTBVEXTPROC __glewVariantbvEXT = NULL;
-PFNGLVARIANTDVEXTPROC __glewVariantdvEXT = NULL;
-PFNGLVARIANTFVEXTPROC __glewVariantfvEXT = NULL;
-PFNGLVARIANTIVEXTPROC __glewVariantivEXT = NULL;
-PFNGLVARIANTSVEXTPROC __glewVariantsvEXT = NULL;
-PFNGLVARIANTUBVEXTPROC __glewVariantubvEXT = NULL;
-PFNGLVARIANTUIVEXTPROC __glewVariantuivEXT = NULL;
-PFNGLVARIANTUSVEXTPROC __glewVariantusvEXT = NULL;
-PFNGLWRITEMASKEXTPROC __glewWriteMaskEXT = NULL;
-
-PFNGLVERTEXWEIGHTPOINTEREXTPROC __glewVertexWeightPointerEXT = NULL;
-PFNGLVERTEXWEIGHTFEXTPROC __glewVertexWeightfEXT = NULL;
-PFNGLVERTEXWEIGHTFVEXTPROC __glewVertexWeightfvEXT = NULL;
-
-PFNGLFRAMETERMINATORGREMEDYPROC __glewFrameTerminatorGREMEDY = NULL;
-
-PFNGLSTRINGMARKERGREMEDYPROC __glewStringMarkerGREMEDY = NULL;
-
-PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC __glewGetImageTransformParameterfvHP = NULL;
-PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC __glewGetImageTransformParameterivHP = NULL;
-PFNGLIMAGETRANSFORMPARAMETERFHPPROC __glewImageTransformParameterfHP = NULL;
-PFNGLIMAGETRANSFORMPARAMETERFVHPPROC __glewImageTransformParameterfvHP = NULL;
-PFNGLIMAGETRANSFORMPARAMETERIHPPROC __glewImageTransformParameteriHP = NULL;
-PFNGLIMAGETRANSFORMPARAMETERIVHPPROC __glewImageTransformParameterivHP = NULL;
-
-PFNGLMULTIMODEDRAWARRAYSIBMPROC __glewMultiModeDrawArraysIBM = NULL;
-PFNGLMULTIMODEDRAWELEMENTSIBMPROC __glewMultiModeDrawElementsIBM = NULL;
-
-PFNGLCOLORPOINTERLISTIBMPROC __glewColorPointerListIBM = NULL;
-PFNGLEDGEFLAGPOINTERLISTIBMPROC __glewEdgeFlagPointerListIBM = NULL;
-PFNGLFOGCOORDPOINTERLISTIBMPROC __glewFogCoordPointerListIBM = NULL;
-PFNGLINDEXPOINTERLISTIBMPROC __glewIndexPointerListIBM = NULL;
-PFNGLNORMALPOINTERLISTIBMPROC __glewNormalPointerListIBM = NULL;
-PFNGLSECONDARYCOLORPOINTERLISTIBMPROC __glewSecondaryColorPointerListIBM = NULL;
-PFNGLTEXCOORDPOINTERLISTIBMPROC __glewTexCoordPointerListIBM = NULL;
-PFNGLVERTEXPOINTERLISTIBMPROC __glewVertexPointerListIBM = NULL;
-
-PFNGLCOLORPOINTERVINTELPROC __glewColorPointervINTEL = NULL;
-PFNGLNORMALPOINTERVINTELPROC __glewNormalPointervINTEL = NULL;
-PFNGLTEXCOORDPOINTERVINTELPROC __glewTexCoordPointervINTEL = NULL;
-PFNGLVERTEXPOINTERVINTELPROC __glewVertexPointervINTEL = NULL;
-
-PFNGLTEXSCISSORFUNCINTELPROC __glewTexScissorFuncINTEL = NULL;
-PFNGLTEXSCISSORINTELPROC __glewTexScissorINTEL = NULL;
-
-PFNGLBUFFERREGIONENABLEDEXTPROC __glewBufferRegionEnabledEXT = NULL;
-PFNGLDELETEBUFFERREGIONEXTPROC __glewDeleteBufferRegionEXT = NULL;
-PFNGLDRAWBUFFERREGIONEXTPROC __glewDrawBufferRegionEXT = NULL;
-PFNGLNEWBUFFERREGIONEXTPROC __glewNewBufferRegionEXT = NULL;
-PFNGLREADBUFFERREGIONEXTPROC __glewReadBufferRegionEXT = NULL;
-
-PFNGLRESIZEBUFFERSMESAPROC __glewResizeBuffersMESA = NULL;
-
-PFNGLWINDOWPOS2DMESAPROC __glewWindowPos2dMESA = NULL;
-PFNGLWINDOWPOS2DVMESAPROC __glewWindowPos2dvMESA = NULL;
-PFNGLWINDOWPOS2FMESAPROC __glewWindowPos2fMESA = NULL;
-PFNGLWINDOWPOS2FVMESAPROC __glewWindowPos2fvMESA = NULL;
-PFNGLWINDOWPOS2IMESAPROC __glewWindowPos2iMESA = NULL;
-PFNGLWINDOWPOS2IVMESAPROC __glewWindowPos2ivMESA = NULL;
-PFNGLWINDOWPOS2SMESAPROC __glewWindowPos2sMESA = NULL;
-PFNGLWINDOWPOS2SVMESAPROC __glewWindowPos2svMESA = NULL;
-PFNGLWINDOWPOS3DMESAPROC __glewWindowPos3dMESA = NULL;
-PFNGLWINDOWPOS3DVMESAPROC __glewWindowPos3dvMESA = NULL;
-PFNGLWINDOWPOS3FMESAPROC __glewWindowPos3fMESA = NULL;
-PFNGLWINDOWPOS3FVMESAPROC __glewWindowPos3fvMESA = NULL;
-PFNGLWINDOWPOS3IMESAPROC __glewWindowPos3iMESA = NULL;
-PFNGLWINDOWPOS3IVMESAPROC __glewWindowPos3ivMESA = NULL;
-PFNGLWINDOWPOS3SMESAPROC __glewWindowPos3sMESA = NULL;
-PFNGLWINDOWPOS3SVMESAPROC __glewWindowPos3svMESA = NULL;
-PFNGLWINDOWPOS4DMESAPROC __glewWindowPos4dMESA = NULL;
-PFNGLWINDOWPOS4DVMESAPROC __glewWindowPos4dvMESA = NULL;
-PFNGLWINDOWPOS4FMESAPROC __glewWindowPos4fMESA = NULL;
-PFNGLWINDOWPOS4FVMESAPROC __glewWindowPos4fvMESA = NULL;
-PFNGLWINDOWPOS4IMESAPROC __glewWindowPos4iMESA = NULL;
-PFNGLWINDOWPOS4IVMESAPROC __glewWindowPos4ivMESA = NULL;
-PFNGLWINDOWPOS4SMESAPROC __glewWindowPos4sMESA = NULL;
-PFNGLWINDOWPOS4SVMESAPROC __glewWindowPos4svMESA = NULL;
-
-PFNGLCLEARDEPTHDNVPROC __glewClearDepthdNV = NULL;
-PFNGLDEPTHBOUNDSDNVPROC __glewDepthBoundsdNV = NULL;
-PFNGLDEPTHRANGEDNVPROC __glewDepthRangedNV = NULL;
-
-PFNGLEVALMAPSNVPROC __glewEvalMapsNV = NULL;
-PFNGLGETMAPATTRIBPARAMETERFVNVPROC __glewGetMapAttribParameterfvNV = NULL;
-PFNGLGETMAPATTRIBPARAMETERIVNVPROC __glewGetMapAttribParameterivNV = NULL;
-PFNGLGETMAPCONTROLPOINTSNVPROC __glewGetMapControlPointsNV = NULL;
-PFNGLGETMAPPARAMETERFVNVPROC __glewGetMapParameterfvNV = NULL;
-PFNGLGETMAPPARAMETERIVNVPROC __glewGetMapParameterivNV = NULL;
-PFNGLMAPCONTROLPOINTSNVPROC __glewMapControlPointsNV = NULL;
-PFNGLMAPPARAMETERFVNVPROC __glewMapParameterfvNV = NULL;
-PFNGLMAPPARAMETERIVNVPROC __glewMapParameterivNV = NULL;
-
-PFNGLDELETEFENCESNVPROC __glewDeleteFencesNV = NULL;
-PFNGLFINISHFENCENVPROC __glewFinishFenceNV = NULL;
-PFNGLGENFENCESNVPROC __glewGenFencesNV = NULL;
-PFNGLGETFENCEIVNVPROC __glewGetFenceivNV = NULL;
-PFNGLISFENCENVPROC __glewIsFenceNV = NULL;
-PFNGLSETFENCENVPROC __glewSetFenceNV = NULL;
-PFNGLTESTFENCENVPROC __glewTestFenceNV = NULL;
-
-PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC __glewGetProgramNamedParameterdvNV = NULL;
-PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC __glewGetProgramNamedParameterfvNV = NULL;
-PFNGLPROGRAMNAMEDPARAMETER4DNVPROC __glewProgramNamedParameter4dNV = NULL;
-PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC __glewProgramNamedParameter4dvNV = NULL;
-PFNGLPROGRAMNAMEDPARAMETER4FNVPROC __glewProgramNamedParameter4fNV = NULL;
-PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC __glewProgramNamedParameter4fvNV = NULL;
-
-PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC __glewRenderbufferStorageMultisampleCoverageNV = NULL;
-
-PFNGLPROGRAMVERTEXLIMITNVPROC __glewProgramVertexLimitNV = NULL;
-
-PFNGLPROGRAMENVPARAMETERI4INVPROC __glewProgramEnvParameterI4iNV = NULL;
-PFNGLPROGRAMENVPARAMETERI4IVNVPROC __glewProgramEnvParameterI4ivNV = NULL;
-PFNGLPROGRAMENVPARAMETERI4UINVPROC __glewProgramEnvParameterI4uiNV = NULL;
-PFNGLPROGRAMENVPARAMETERI4UIVNVPROC __glewProgramEnvParameterI4uivNV = NULL;
-PFNGLPROGRAMENVPARAMETERSI4IVNVPROC __glewProgramEnvParametersI4ivNV = NULL;
-PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC __glewProgramEnvParametersI4uivNV = NULL;
-PFNGLPROGRAMLOCALPARAMETERI4INVPROC __glewProgramLocalParameterI4iNV = NULL;
-PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC __glewProgramLocalParameterI4ivNV = NULL;
-PFNGLPROGRAMLOCALPARAMETERI4UINVPROC __glewProgramLocalParameterI4uiNV = NULL;
-PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC __glewProgramLocalParameterI4uivNV = NULL;
-PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC __glewProgramLocalParametersI4ivNV = NULL;
-PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC __glewProgramLocalParametersI4uivNV = NULL;
-
-PFNGLCOLOR3HNVPROC __glewColor3hNV = NULL;
-PFNGLCOLOR3HVNVPROC __glewColor3hvNV = NULL;
-PFNGLCOLOR4HNVPROC __glewColor4hNV = NULL;
-PFNGLCOLOR4HVNVPROC __glewColor4hvNV = NULL;
-PFNGLFOGCOORDHNVPROC __glewFogCoordhNV = NULL;
-PFNGLFOGCOORDHVNVPROC __glewFogCoordhvNV = NULL;
-PFNGLMULTITEXCOORD1HNVPROC __glewMultiTexCoord1hNV = NULL;
-PFNGLMULTITEXCOORD1HVNVPROC __glewMultiTexCoord1hvNV = NULL;
-PFNGLMULTITEXCOORD2HNVPROC __glewMultiTexCoord2hNV = NULL;
-PFNGLMULTITEXCOORD2HVNVPROC __glewMultiTexCoord2hvNV = NULL;
-PFNGLMULTITEXCOORD3HNVPROC __glewMultiTexCoord3hNV = NULL;
-PFNGLMULTITEXCOORD3HVNVPROC __glewMultiTexCoord3hvNV = NULL;
-PFNGLMULTITEXCOORD4HNVPROC __glewMultiTexCoord4hNV = NULL;
-PFNGLMULTITEXCOORD4HVNVPROC __glewMultiTexCoord4hvNV = NULL;
-PFNGLNORMAL3HNVPROC __glewNormal3hNV = NULL;
-PFNGLNORMAL3HVNVPROC __glewNormal3hvNV = NULL;
-PFNGLSECONDARYCOLOR3HNVPROC __glewSecondaryColor3hNV = NULL;
-PFNGLSECONDARYCOLOR3HVNVPROC __glewSecondaryColor3hvNV = NULL;
-PFNGLTEXCOORD1HNVPROC __glewTexCoord1hNV = NULL;
-PFNGLTEXCOORD1HVNVPROC __glewTexCoord1hvNV = NULL;
-PFNGLTEXCOORD2HNVPROC __glewTexCoord2hNV = NULL;
-PFNGLTEXCOORD2HVNVPROC __glewTexCoord2hvNV = NULL;
-PFNGLTEXCOORD3HNVPROC __glewTexCoord3hNV = NULL;
-PFNGLTEXCOORD3HVNVPROC __glewTexCoord3hvNV = NULL;
-PFNGLTEXCOORD4HNVPROC __glewTexCoord4hNV = NULL;
-PFNGLTEXCOORD4HVNVPROC __glewTexCoord4hvNV = NULL;
-PFNGLVERTEX2HNVPROC __glewVertex2hNV = NULL;
-PFNGLVERTEX2HVNVPROC __glewVertex2hvNV = NULL;
-PFNGLVERTEX3HNVPROC __glewVertex3hNV = NULL;
-PFNGLVERTEX3HVNVPROC __glewVertex3hvNV = NULL;
-PFNGLVERTEX4HNVPROC __glewVertex4hNV = NULL;
-PFNGLVERTEX4HVNVPROC __glewVertex4hvNV = NULL;
-PFNGLVERTEXATTRIB1HNVPROC __glewVertexAttrib1hNV = NULL;
-PFNGLVERTEXATTRIB1HVNVPROC __glewVertexAttrib1hvNV = NULL;
-PFNGLVERTEXATTRIB2HNVPROC __glewVertexAttrib2hNV = NULL;
-PFNGLVERTEXATTRIB2HVNVPROC __glewVertexAttrib2hvNV = NULL;
-PFNGLVERTEXATTRIB3HNVPROC __glewVertexAttrib3hNV = NULL;
-PFNGLVERTEXATTRIB3HVNVPROC __glewVertexAttrib3hvNV = NULL;
-PFNGLVERTEXATTRIB4HNVPROC __glewVertexAttrib4hNV = NULL;
-PFNGLVERTEXATTRIB4HVNVPROC __glewVertexAttrib4hvNV = NULL;
-PFNGLVERTEXATTRIBS1HVNVPROC __glewVertexAttribs1hvNV = NULL;
-PFNGLVERTEXATTRIBS2HVNVPROC __glewVertexAttribs2hvNV = NULL;
-PFNGLVERTEXATTRIBS3HVNVPROC __glewVertexAttribs3hvNV = NULL;
-PFNGLVERTEXATTRIBS4HVNVPROC __glewVertexAttribs4hvNV = NULL;
-PFNGLVERTEXWEIGHTHNVPROC __glewVertexWeighthNV = NULL;
-PFNGLVERTEXWEIGHTHVNVPROC __glewVertexWeighthvNV = NULL;
-
-PFNGLBEGINOCCLUSIONQUERYNVPROC __glewBeginOcclusionQueryNV = NULL;
-PFNGLDELETEOCCLUSIONQUERIESNVPROC __glewDeleteOcclusionQueriesNV = NULL;
-PFNGLENDOCCLUSIONQUERYNVPROC __glewEndOcclusionQueryNV = NULL;
-PFNGLGENOCCLUSIONQUERIESNVPROC __glewGenOcclusionQueriesNV = NULL;
-PFNGLGETOCCLUSIONQUERYIVNVPROC __glewGetOcclusionQueryivNV = NULL;
-PFNGLGETOCCLUSIONQUERYUIVNVPROC __glewGetOcclusionQueryuivNV = NULL;
-PFNGLISOCCLUSIONQUERYNVPROC __glewIsOcclusionQueryNV = NULL;
-
-PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC __glewProgramBufferParametersIivNV = NULL;
-PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC __glewProgramBufferParametersIuivNV = NULL;
-PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC __glewProgramBufferParametersfvNV = NULL;
-
-PFNGLFLUSHPIXELDATARANGENVPROC __glewFlushPixelDataRangeNV = NULL;
-PFNGLPIXELDATARANGENVPROC __glewPixelDataRangeNV = NULL;
-
-PFNGLPOINTPARAMETERINVPROC __glewPointParameteriNV = NULL;
-PFNGLPOINTPARAMETERIVNVPROC __glewPointParameterivNV = NULL;
-
-PFNGLPRIMITIVERESTARTINDEXNVPROC __glewPrimitiveRestartIndexNV = NULL;
-PFNGLPRIMITIVERESTARTNVPROC __glewPrimitiveRestartNV = NULL;
-
-PFNGLCOMBINERINPUTNVPROC __glewCombinerInputNV = NULL;
-PFNGLCOMBINEROUTPUTNVPROC __glewCombinerOutputNV = NULL;
-PFNGLCOMBINERPARAMETERFNVPROC __glewCombinerParameterfNV = NULL;
-PFNGLCOMBINERPARAMETERFVNVPROC __glewCombinerParameterfvNV = NULL;
-PFNGLCOMBINERPARAMETERINVPROC __glewCombinerParameteriNV = NULL;
-PFNGLCOMBINERPARAMETERIVNVPROC __glewCombinerParameterivNV = NULL;
-PFNGLFINALCOMBINERINPUTNVPROC __glewFinalCombinerInputNV = NULL;
-PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC __glewGetCombinerInputParameterfvNV = NULL;
-PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC __glewGetCombinerInputParameterivNV = NULL;
-PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC __glewGetCombinerOutputParameterfvNV = NULL;
-PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC __glewGetCombinerOutputParameterivNV = NULL;
-PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC __glewGetFinalCombinerInputParameterfvNV = NULL;
-PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC __glewGetFinalCombinerInputParameterivNV = NULL;
-
-PFNGLCOMBINERSTAGEPARAMETERFVNVPROC __glewCombinerStageParameterfvNV = NULL;
-PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC __glewGetCombinerStageParameterfvNV = NULL;
-
-PFNGLACTIVEVARYINGNVPROC __glewActiveVaryingNV = NULL;
-PFNGLBEGINTRANSFORMFEEDBACKNVPROC __glewBeginTransformFeedbackNV = NULL;
-PFNGLBINDBUFFERBASENVPROC __glewBindBufferBaseNV = NULL;
-PFNGLBINDBUFFEROFFSETNVPROC __glewBindBufferOffsetNV = NULL;
-PFNGLBINDBUFFERRANGENVPROC __glewBindBufferRangeNV = NULL;
-PFNGLENDTRANSFORMFEEDBACKNVPROC __glewEndTransformFeedbackNV = NULL;
-PFNGLGETACTIVEVARYINGNVPROC __glewGetActiveVaryingNV = NULL;
-PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC __glewGetTransformFeedbackVaryingNV = NULL;
-PFNGLGETVARYINGLOCATIONNVPROC __glewGetVaryingLocationNV = NULL;
-PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC __glewTransformFeedbackAttribsNV = NULL;
-PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC __glewTransformFeedbackVaryingsNV = NULL;
-
-PFNGLFLUSHVERTEXARRAYRANGENVPROC __glewFlushVertexArrayRangeNV = NULL;
-PFNGLVERTEXARRAYRANGENVPROC __glewVertexArrayRangeNV = NULL;
-
-PFNGLAREPROGRAMSRESIDENTNVPROC __glewAreProgramsResidentNV = NULL;
-PFNGLBINDPROGRAMNVPROC __glewBindProgramNV = NULL;
-PFNGLDELETEPROGRAMSNVPROC __glewDeleteProgramsNV = NULL;
-PFNGLEXECUTEPROGRAMNVPROC __glewExecuteProgramNV = NULL;
-PFNGLGENPROGRAMSNVPROC __glewGenProgramsNV = NULL;
-PFNGLGETPROGRAMPARAMETERDVNVPROC __glewGetProgramParameterdvNV = NULL;
-PFNGLGETPROGRAMPARAMETERFVNVPROC __glewGetProgramParameterfvNV = NULL;
-PFNGLGETPROGRAMSTRINGNVPROC __glewGetProgramStringNV = NULL;
-PFNGLGETPROGRAMIVNVPROC __glewGetProgramivNV = NULL;
-PFNGLGETTRACKMATRIXIVNVPROC __glewGetTrackMatrixivNV = NULL;
-PFNGLGETVERTEXATTRIBPOINTERVNVPROC __glewGetVertexAttribPointervNV = NULL;
-PFNGLGETVERTEXATTRIBDVNVPROC __glewGetVertexAttribdvNV = NULL;
-PFNGLGETVERTEXATTRIBFVNVPROC __glewGetVertexAttribfvNV = NULL;
-PFNGLGETVERTEXATTRIBIVNVPROC __glewGetVertexAttribivNV = NULL;
-PFNGLISPROGRAMNVPROC __glewIsProgramNV = NULL;
-PFNGLLOADPROGRAMNVPROC __glewLoadProgramNV = NULL;
-PFNGLPROGRAMPARAMETER4DNVPROC __glewProgramParameter4dNV = NULL;
-PFNGLPROGRAMPARAMETER4DVNVPROC __glewProgramParameter4dvNV = NULL;
-PFNGLPROGRAMPARAMETER4FNVPROC __glewProgramParameter4fNV = NULL;
-PFNGLPROGRAMPARAMETER4FVNVPROC __glewProgramParameter4fvNV = NULL;
-PFNGLPROGRAMPARAMETERS4DVNVPROC __glewProgramParameters4dvNV = NULL;
-PFNGLPROGRAMPARAMETERS4FVNVPROC __glewProgramParameters4fvNV = NULL;
-PFNGLREQUESTRESIDENTPROGRAMSNVPROC __glewRequestResidentProgramsNV = NULL;
-PFNGLTRACKMATRIXNVPROC __glewTrackMatrixNV = NULL;
-PFNGLVERTEXATTRIB1DNVPROC __glewVertexAttrib1dNV = NULL;
-PFNGLVERTEXATTRIB1DVNVPROC __glewVertexAttrib1dvNV = NULL;
-PFNGLVERTEXATTRIB1FNVPROC __glewVertexAttrib1fNV = NULL;
-PFNGLVERTEXATTRIB1FVNVPROC __glewVertexAttrib1fvNV = NULL;
-PFNGLVERTEXATTRIB1SNVPROC __glewVertexAttrib1sNV = NULL;
-PFNGLVERTEXATTRIB1SVNVPROC __glewVertexAttrib1svNV = NULL;
-PFNGLVERTEXATTRIB2DNVPROC __glewVertexAttrib2dNV = NULL;
-PFNGLVERTEXATTRIB2DVNVPROC __glewVertexAttrib2dvNV = NULL;
-PFNGLVERTEXATTRIB2FNVPROC __glewVertexAttrib2fNV = NULL;
-PFNGLVERTEXATTRIB2FVNVPROC __glewVertexAttrib2fvNV = NULL;
-PFNGLVERTEXATTRIB2SNVPROC __glewVertexAttrib2sNV = NULL;
-PFNGLVERTEXATTRIB2SVNVPROC __glewVertexAttrib2svNV = NULL;
-PFNGLVERTEXATTRIB3DNVPROC __glewVertexAttrib3dNV = NULL;
-PFNGLVERTEXATTRIB3DVNVPROC __glewVertexAttrib3dvNV = NULL;
-PFNGLVERTEXATTRIB3FNVPROC __glewVertexAttrib3fNV = NULL;
-PFNGLVERTEXATTRIB3FVNVPROC __glewVertexAttrib3fvNV = NULL;
-PFNGLVERTEXATTRIB3SNVPROC __glewVertexAttrib3sNV = NULL;
-PFNGLVERTEXATTRIB3SVNVPROC __glewVertexAttrib3svNV = NULL;
-PFNGLVERTEXATTRIB4DNVPROC __glewVertexAttrib4dNV = NULL;
-PFNGLVERTEXATTRIB4DVNVPROC __glewVertexAttrib4dvNV = NULL;
-PFNGLVERTEXATTRIB4FNVPROC __glewVertexAttrib4fNV = NULL;
-PFNGLVERTEXATTRIB4FVNVPROC __glewVertexAttrib4fvNV = NULL;
-PFNGLVERTEXATTRIB4SNVPROC __glewVertexAttrib4sNV = NULL;
-PFNGLVERTEXATTRIB4SVNVPROC __glewVertexAttrib4svNV = NULL;
-PFNGLVERTEXATTRIB4UBNVPROC __glewVertexAttrib4ubNV = NULL;
-PFNGLVERTEXATTRIB4UBVNVPROC __glewVertexAttrib4ubvNV = NULL;
-PFNGLVERTEXATTRIBPOINTERNVPROC __glewVertexAttribPointerNV = NULL;
-PFNGLVERTEXATTRIBS1DVNVPROC __glewVertexAttribs1dvNV = NULL;
-PFNGLVERTEXATTRIBS1FVNVPROC __glewVertexAttribs1fvNV = NULL;
-PFNGLVERTEXATTRIBS1SVNVPROC __glewVertexAttribs1svNV = NULL;
-PFNGLVERTEXATTRIBS2DVNVPROC __glewVertexAttribs2dvNV = NULL;
-PFNGLVERTEXATTRIBS2FVNVPROC __glewVertexAttribs2fvNV = NULL;
-PFNGLVERTEXATTRIBS2SVNVPROC __glewVertexAttribs2svNV = NULL;
-PFNGLVERTEXATTRIBS3DVNVPROC __glewVertexAttribs3dvNV = NULL;
-PFNGLVERTEXATTRIBS3FVNVPROC __glewVertexAttribs3fvNV = NULL;
-PFNGLVERTEXATTRIBS3SVNVPROC __glewVertexAttribs3svNV = NULL;
-PFNGLVERTEXATTRIBS4DVNVPROC __glewVertexAttribs4dvNV = NULL;
-PFNGLVERTEXATTRIBS4FVNVPROC __glewVertexAttribs4fvNV = NULL;
-PFNGLVERTEXATTRIBS4SVNVPROC __glewVertexAttribs4svNV = NULL;
-PFNGLVERTEXATTRIBS4UBVNVPROC __glewVertexAttribs4ubvNV = NULL;
-
-PFNGLCLEARDEPTHFOESPROC __glewClearDepthfOES = NULL;
-PFNGLCLIPPLANEFOESPROC __glewClipPlanefOES = NULL;
-PFNGLDEPTHRANGEFOESPROC __glewDepthRangefOES = NULL;
-PFNGLFRUSTUMFOESPROC __glewFrustumfOES = NULL;
-PFNGLGETCLIPPLANEFOESPROC __glewGetClipPlanefOES = NULL;
-PFNGLORTHOFOESPROC __glewOrthofOES = NULL;
-
-PFNGLDETAILTEXFUNCSGISPROC __glewDetailTexFuncSGIS = NULL;
-PFNGLGETDETAILTEXFUNCSGISPROC __glewGetDetailTexFuncSGIS = NULL;
-
-PFNGLFOGFUNCSGISPROC __glewFogFuncSGIS = NULL;
-PFNGLGETFOGFUNCSGISPROC __glewGetFogFuncSGIS = NULL;
-
-PFNGLSAMPLEMASKSGISPROC __glewSampleMaskSGIS = NULL;
-PFNGLSAMPLEPATTERNSGISPROC __glewSamplePatternSGIS = NULL;
-
-PFNGLGETSHARPENTEXFUNCSGISPROC __glewGetSharpenTexFuncSGIS = NULL;
-PFNGLSHARPENTEXFUNCSGISPROC __glewSharpenTexFuncSGIS = NULL;
-
-PFNGLTEXIMAGE4DSGISPROC __glewTexImage4DSGIS = NULL;
-PFNGLTEXSUBIMAGE4DSGISPROC __glewTexSubImage4DSGIS = NULL;
-
-PFNGLGETTEXFILTERFUNCSGISPROC __glewGetTexFilterFuncSGIS = NULL;
-PFNGLTEXFILTERFUNCSGISPROC __glewTexFilterFuncSGIS = NULL;
-
-PFNGLASYNCMARKERSGIXPROC __glewAsyncMarkerSGIX = NULL;
-PFNGLDELETEASYNCMARKERSSGIXPROC __glewDeleteAsyncMarkersSGIX = NULL;
-PFNGLFINISHASYNCSGIXPROC __glewFinishAsyncSGIX = NULL;
-PFNGLGENASYNCMARKERSSGIXPROC __glewGenAsyncMarkersSGIX = NULL;
-PFNGLISASYNCMARKERSGIXPROC __glewIsAsyncMarkerSGIX = NULL;
-PFNGLPOLLASYNCSGIXPROC __glewPollAsyncSGIX = NULL;
-
-PFNGLFLUSHRASTERSGIXPROC __glewFlushRasterSGIX = NULL;
-
-PFNGLTEXTUREFOGSGIXPROC __glewTextureFogSGIX = NULL;
-
-PFNGLFRAGMENTCOLORMATERIALSGIXPROC __glewFragmentColorMaterialSGIX = NULL;
-PFNGLFRAGMENTLIGHTMODELFSGIXPROC __glewFragmentLightModelfSGIX = NULL;
-PFNGLFRAGMENTLIGHTMODELFVSGIXPROC __glewFragmentLightModelfvSGIX = NULL;
-PFNGLFRAGMENTLIGHTMODELISGIXPROC __glewFragmentLightModeliSGIX = NULL;
-PFNGLFRAGMENTLIGHTMODELIVSGIXPROC __glewFragmentLightModelivSGIX = NULL;
-PFNGLFRAGMENTLIGHTFSGIXPROC __glewFragmentLightfSGIX = NULL;
-PFNGLFRAGMENTLIGHTFVSGIXPROC __glewFragmentLightfvSGIX = NULL;
-PFNGLFRAGMENTLIGHTISGIXPROC __glewFragmentLightiSGIX = NULL;
-PFNGLFRAGMENTLIGHTIVSGIXPROC __glewFragmentLightivSGIX = NULL;
-PFNGLFRAGMENTMATERIALFSGIXPROC __glewFragmentMaterialfSGIX = NULL;
-PFNGLFRAGMENTMATERIALFVSGIXPROC __glewFragmentMaterialfvSGIX = NULL;
-PFNGLFRAGMENTMATERIALISGIXPROC __glewFragmentMaterialiSGIX = NULL;
-PFNGLFRAGMENTMATERIALIVSGIXPROC __glewFragmentMaterialivSGIX = NULL;
-PFNGLGETFRAGMENTLIGHTFVSGIXPROC __glewGetFragmentLightfvSGIX = NULL;
-PFNGLGETFRAGMENTLIGHTIVSGIXPROC __glewGetFragmentLightivSGIX = NULL;
-PFNGLGETFRAGMENTMATERIALFVSGIXPROC __glewGetFragmentMaterialfvSGIX = NULL;
-PFNGLGETFRAGMENTMATERIALIVSGIXPROC __glewGetFragmentMaterialivSGIX = NULL;
-
-PFNGLFRAMEZOOMSGIXPROC __glewFrameZoomSGIX = NULL;
-
-PFNGLPIXELTEXGENSGIXPROC __glewPixelTexGenSGIX = NULL;
-
-PFNGLREFERENCEPLANESGIXPROC __glewReferencePlaneSGIX = NULL;
-
-PFNGLSPRITEPARAMETERFSGIXPROC __glewSpriteParameterfSGIX = NULL;
-PFNGLSPRITEPARAMETERFVSGIXPROC __glewSpriteParameterfvSGIX = NULL;
-PFNGLSPRITEPARAMETERISGIXPROC __glewSpriteParameteriSGIX = NULL;
-PFNGLSPRITEPARAMETERIVSGIXPROC __glewSpriteParameterivSGIX = NULL;
-
-PFNGLTAGSAMPLEBUFFERSGIXPROC __glewTagSampleBufferSGIX = NULL;
-
-PFNGLCOLORTABLEPARAMETERFVSGIPROC __glewColorTableParameterfvSGI = NULL;
-PFNGLCOLORTABLEPARAMETERIVSGIPROC __glewColorTableParameterivSGI = NULL;
-PFNGLCOLORTABLESGIPROC __glewColorTableSGI = NULL;
-PFNGLCOPYCOLORTABLESGIPROC __glewCopyColorTableSGI = NULL;
-PFNGLGETCOLORTABLEPARAMETERFVSGIPROC __glewGetColorTableParameterfvSGI = NULL;
-PFNGLGETCOLORTABLEPARAMETERIVSGIPROC __glewGetColorTableParameterivSGI = NULL;
-PFNGLGETCOLORTABLESGIPROC __glewGetColorTableSGI = NULL;
-
-PFNGLFINISHTEXTURESUNXPROC __glewFinishTextureSUNX = NULL;
-
-PFNGLGLOBALALPHAFACTORBSUNPROC __glewGlobalAlphaFactorbSUN = NULL;
-PFNGLGLOBALALPHAFACTORDSUNPROC __glewGlobalAlphaFactordSUN = NULL;
-PFNGLGLOBALALPHAFACTORFSUNPROC __glewGlobalAlphaFactorfSUN = NULL;
-PFNGLGLOBALALPHAFACTORISUNPROC __glewGlobalAlphaFactoriSUN = NULL;
-PFNGLGLOBALALPHAFACTORSSUNPROC __glewGlobalAlphaFactorsSUN = NULL;
-PFNGLGLOBALALPHAFACTORUBSUNPROC __glewGlobalAlphaFactorubSUN = NULL;
-PFNGLGLOBALALPHAFACTORUISUNPROC __glewGlobalAlphaFactoruiSUN = NULL;
-PFNGLGLOBALALPHAFACTORUSSUNPROC __glewGlobalAlphaFactorusSUN = NULL;
-
-PFNGLREADVIDEOPIXELSSUNPROC __glewReadVideoPixelsSUN = NULL;
-
-PFNGLREPLACEMENTCODEPOINTERSUNPROC __glewReplacementCodePointerSUN = NULL;
-PFNGLREPLACEMENTCODEUBSUNPROC __glewReplacementCodeubSUN = NULL;
-PFNGLREPLACEMENTCODEUBVSUNPROC __glewReplacementCodeubvSUN = NULL;
-PFNGLREPLACEMENTCODEUISUNPROC __glewReplacementCodeuiSUN = NULL;
-PFNGLREPLACEMENTCODEUIVSUNPROC __glewReplacementCodeuivSUN = NULL;
-PFNGLREPLACEMENTCODEUSSUNPROC __glewReplacementCodeusSUN = NULL;
-PFNGLREPLACEMENTCODEUSVSUNPROC __glewReplacementCodeusvSUN = NULL;
-
-PFNGLCOLOR3FVERTEX3FSUNPROC __glewColor3fVertex3fSUN = NULL;
-PFNGLCOLOR3FVERTEX3FVSUNPROC __glewColor3fVertex3fvSUN = NULL;
-PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewColor4fNormal3fVertex3fSUN = NULL;
-PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewColor4fNormal3fVertex3fvSUN = NULL;
-PFNGLCOLOR4UBVERTEX2FSUNPROC __glewColor4ubVertex2fSUN = NULL;
-PFNGLCOLOR4UBVERTEX2FVSUNPROC __glewColor4ubVertex2fvSUN = NULL;
-PFNGLCOLOR4UBVERTEX3FSUNPROC __glewColor4ubVertex3fSUN = NULL;
-PFNGLCOLOR4UBVERTEX3FVSUNPROC __glewColor4ubVertex3fvSUN = NULL;
-PFNGLNORMAL3FVERTEX3FSUNPROC __glewNormal3fVertex3fSUN = NULL;
-PFNGLNORMAL3FVERTEX3FVSUNPROC __glewNormal3fVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC __glewReplacementCodeuiColor3fVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor3fVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC __glewReplacementCodeuiColor4ubVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC __glewReplacementCodeuiColor4ubVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiNormal3fVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiNormal3fVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC __glewReplacementCodeuiTexCoord2fVertex3fvSUN = NULL;
-PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC __glewReplacementCodeuiVertex3fSUN = NULL;
-PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC __glewReplacementCodeuiVertex3fvSUN = NULL;
-PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC __glewTexCoord2fColor3fVertex3fSUN = NULL;
-PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC __glewTexCoord2fColor3fVertex3fvSUN = NULL;
-PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fSUN = NULL;
-PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fColor4fNormal3fVertex3fvSUN = NULL;
-PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC __glewTexCoord2fColor4ubVertex3fSUN = NULL;
-PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC __glewTexCoord2fColor4ubVertex3fvSUN = NULL;
-PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC __glewTexCoord2fNormal3fVertex3fSUN = NULL;
-PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC __glewTexCoord2fNormal3fVertex3fvSUN = NULL;
-PFNGLTEXCOORD2FVERTEX3FSUNPROC __glewTexCoord2fVertex3fSUN = NULL;
-PFNGLTEXCOORD2FVERTEX3FVSUNPROC __glewTexCoord2fVertex3fvSUN = NULL;
-PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fSUN = NULL;
-PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC __glewTexCoord4fColor4fNormal3fVertex4fvSUN = NULL;
-PFNGLTEXCOORD4FVERTEX4FSUNPROC __glewTexCoord4fVertex4fSUN = NULL;
-PFNGLTEXCOORD4FVERTEX4FVSUNPROC __glewTexCoord4fVertex4fvSUN = NULL;
-
-PFNGLADDSWAPHINTRECTWINPROC __glewAddSwapHintRectWIN = NULL;
-
-#endif /* !WIN32 || !GLEW_MX */
-
-#if !defined(GLEW_MX)
-
-GLboolean __GLEW_VERSION_1_1 = GL_FALSE;
-GLboolean __GLEW_VERSION_1_2 = GL_FALSE;
-GLboolean __GLEW_VERSION_1_3 = GL_FALSE;
-GLboolean __GLEW_VERSION_1_4 = GL_FALSE;
-GLboolean __GLEW_VERSION_1_5 = GL_FALSE;
-GLboolean __GLEW_VERSION_2_0 = GL_FALSE;
-GLboolean __GLEW_VERSION_2_1 = GL_FALSE;
-GLboolean __GLEW_3DFX_multisample = GL_FALSE;
-GLboolean __GLEW_3DFX_tbuffer = GL_FALSE;
-GLboolean __GLEW_3DFX_texture_compression_FXT1 = GL_FALSE;
-GLboolean __GLEW_APPLE_client_storage = GL_FALSE;
-GLboolean __GLEW_APPLE_element_array = GL_FALSE;
-GLboolean __GLEW_APPLE_fence = GL_FALSE;
-GLboolean __GLEW_APPLE_float_pixels = GL_FALSE;
-GLboolean __GLEW_APPLE_flush_buffer_range = GL_FALSE;
-GLboolean __GLEW_APPLE_pixel_buffer = GL_FALSE;
-GLboolean __GLEW_APPLE_specular_vector = GL_FALSE;
-GLboolean __GLEW_APPLE_texture_range = GL_FALSE;
-GLboolean __GLEW_APPLE_transform_hint = GL_FALSE;
-GLboolean __GLEW_APPLE_vertex_array_object = GL_FALSE;
-GLboolean __GLEW_APPLE_vertex_array_range = GL_FALSE;
-GLboolean __GLEW_APPLE_ycbcr_422 = GL_FALSE;
-GLboolean __GLEW_ARB_color_buffer_float = GL_FALSE;
-GLboolean __GLEW_ARB_depth_texture = GL_FALSE;
-GLboolean __GLEW_ARB_draw_buffers = GL_FALSE;
-GLboolean __GLEW_ARB_fragment_program = GL_FALSE;
-GLboolean __GLEW_ARB_fragment_program_shadow = GL_FALSE;
-GLboolean __GLEW_ARB_fragment_shader = GL_FALSE;
-GLboolean __GLEW_ARB_half_float_pixel = GL_FALSE;
-GLboolean __GLEW_ARB_imaging = GL_FALSE;
-GLboolean __GLEW_ARB_matrix_palette = GL_FALSE;
-GLboolean __GLEW_ARB_multisample = GL_FALSE;
-GLboolean __GLEW_ARB_multitexture = GL_FALSE;
-GLboolean __GLEW_ARB_occlusion_query = GL_FALSE;
-GLboolean __GLEW_ARB_pixel_buffer_object = GL_FALSE;
-GLboolean __GLEW_ARB_point_parameters = GL_FALSE;
-GLboolean __GLEW_ARB_point_sprite = GL_FALSE;
-GLboolean __GLEW_ARB_shader_objects = GL_FALSE;
-GLboolean __GLEW_ARB_shading_language_100 = GL_FALSE;
-GLboolean __GLEW_ARB_shadow = GL_FALSE;
-GLboolean __GLEW_ARB_shadow_ambient = GL_FALSE;
-GLboolean __GLEW_ARB_texture_border_clamp = GL_FALSE;
-GLboolean __GLEW_ARB_texture_compression = GL_FALSE;
-GLboolean __GLEW_ARB_texture_cube_map = GL_FALSE;
-GLboolean __GLEW_ARB_texture_env_add = GL_FALSE;
-GLboolean __GLEW_ARB_texture_env_combine = GL_FALSE;
-GLboolean __GLEW_ARB_texture_env_crossbar = GL_FALSE;
-GLboolean __GLEW_ARB_texture_env_dot3 = GL_FALSE;
-GLboolean __GLEW_ARB_texture_float = GL_FALSE;
-GLboolean __GLEW_ARB_texture_mirrored_repeat = GL_FALSE;
-GLboolean __GLEW_ARB_texture_non_power_of_two = GL_FALSE;
-GLboolean __GLEW_ARB_texture_rectangle = GL_FALSE;
-GLboolean __GLEW_ARB_transpose_matrix = GL_FALSE;
-GLboolean __GLEW_ARB_vertex_blend = GL_FALSE;
-GLboolean __GLEW_ARB_vertex_buffer_object = GL_FALSE;
-GLboolean __GLEW_ARB_vertex_program = GL_FALSE;
-GLboolean __GLEW_ARB_vertex_shader = GL_FALSE;
-GLboolean __GLEW_ARB_window_pos = GL_FALSE;
-GLboolean __GLEW_ATIX_point_sprites = GL_FALSE;
-GLboolean __GLEW_ATIX_texture_env_combine3 = GL_FALSE;
-GLboolean __GLEW_ATIX_texture_env_route = GL_FALSE;
-GLboolean __GLEW_ATIX_vertex_shader_output_point_size = GL_FALSE;
-GLboolean __GLEW_ATI_draw_buffers = GL_FALSE;
-GLboolean __GLEW_ATI_element_array = GL_FALSE;
-GLboolean __GLEW_ATI_envmap_bumpmap = GL_FALSE;
-GLboolean __GLEW_ATI_fragment_shader = GL_FALSE;
-GLboolean __GLEW_ATI_map_object_buffer = GL_FALSE;
-GLboolean __GLEW_ATI_pn_triangles = GL_FALSE;
-GLboolean __GLEW_ATI_separate_stencil = GL_FALSE;
-GLboolean __GLEW_ATI_shader_texture_lod = GL_FALSE;
-GLboolean __GLEW_ATI_text_fragment_shader = GL_FALSE;
-GLboolean __GLEW_ATI_texture_compression_3dc = GL_FALSE;
-GLboolean __GLEW_ATI_texture_env_combine3 = GL_FALSE;
-GLboolean __GLEW_ATI_texture_float = GL_FALSE;
-GLboolean __GLEW_ATI_texture_mirror_once = GL_FALSE;
-GLboolean __GLEW_ATI_vertex_array_object = GL_FALSE;
-GLboolean __GLEW_ATI_vertex_attrib_array_object = GL_FALSE;
-GLboolean __GLEW_ATI_vertex_streams = GL_FALSE;
-GLboolean __GLEW_EXT_422_pixels = GL_FALSE;
-GLboolean __GLEW_EXT_Cg_shader = GL_FALSE;
-GLboolean __GLEW_EXT_abgr = GL_FALSE;
-GLboolean __GLEW_EXT_bgra = GL_FALSE;
-GLboolean __GLEW_EXT_bindable_uniform = GL_FALSE;
-GLboolean __GLEW_EXT_blend_color = GL_FALSE;
-GLboolean __GLEW_EXT_blend_equation_separate = GL_FALSE;
-GLboolean __GLEW_EXT_blend_func_separate = GL_FALSE;
-GLboolean __GLEW_EXT_blend_logic_op = GL_FALSE;
-GLboolean __GLEW_EXT_blend_minmax = GL_FALSE;
-GLboolean __GLEW_EXT_blend_subtract = GL_FALSE;
-GLboolean __GLEW_EXT_clip_volume_hint = GL_FALSE;
-GLboolean __GLEW_EXT_cmyka = GL_FALSE;
-GLboolean __GLEW_EXT_color_subtable = GL_FALSE;
-GLboolean __GLEW_EXT_compiled_vertex_array = GL_FALSE;
-GLboolean __GLEW_EXT_convolution = GL_FALSE;
-GLboolean __GLEW_EXT_coordinate_frame = GL_FALSE;
-GLboolean __GLEW_EXT_copy_texture = GL_FALSE;
-GLboolean __GLEW_EXT_cull_vertex = GL_FALSE;
-GLboolean __GLEW_EXT_depth_bounds_test = GL_FALSE;
-GLboolean __GLEW_EXT_draw_buffers2 = GL_FALSE;
-GLboolean __GLEW_EXT_draw_instanced = GL_FALSE;
-GLboolean __GLEW_EXT_draw_range_elements = GL_FALSE;
-GLboolean __GLEW_EXT_fog_coord = GL_FALSE;
-GLboolean __GLEW_EXT_fragment_lighting = GL_FALSE;
-GLboolean __GLEW_EXT_framebuffer_blit = GL_FALSE;
-GLboolean __GLEW_EXT_framebuffer_multisample = GL_FALSE;
-GLboolean __GLEW_EXT_framebuffer_object = GL_FALSE;
-GLboolean __GLEW_EXT_framebuffer_sRGB = GL_FALSE;
-GLboolean __GLEW_EXT_geometry_shader4 = GL_FALSE;
-GLboolean __GLEW_EXT_gpu_program_parameters = GL_FALSE;
-GLboolean __GLEW_EXT_gpu_shader4 = GL_FALSE;
-GLboolean __GLEW_EXT_histogram = GL_FALSE;
-GLboolean __GLEW_EXT_index_array_formats = GL_FALSE;
-GLboolean __GLEW_EXT_index_func = GL_FALSE;
-GLboolean __GLEW_EXT_index_material = GL_FALSE;
-GLboolean __GLEW_EXT_index_texture = GL_FALSE;
-GLboolean __GLEW_EXT_light_texture = GL_FALSE;
-GLboolean __GLEW_EXT_misc_attribute = GL_FALSE;
-GLboolean __GLEW_EXT_multi_draw_arrays = GL_FALSE;
-GLboolean __GLEW_EXT_multisample = GL_FALSE;
-GLboolean __GLEW_EXT_packed_depth_stencil = GL_FALSE;
-GLboolean __GLEW_EXT_packed_float = GL_FALSE;
-GLboolean __GLEW_EXT_packed_pixels = GL_FALSE;
-GLboolean __GLEW_EXT_paletted_texture = GL_FALSE;
-GLboolean __GLEW_EXT_pixel_buffer_object = GL_FALSE;
-GLboolean __GLEW_EXT_pixel_transform = GL_FALSE;
-GLboolean __GLEW_EXT_pixel_transform_color_table = GL_FALSE;
-GLboolean __GLEW_EXT_point_parameters = GL_FALSE;
-GLboolean __GLEW_EXT_polygon_offset = GL_FALSE;
-GLboolean __GLEW_EXT_rescale_normal = GL_FALSE;
-GLboolean __GLEW_EXT_scene_marker = GL_FALSE;
-GLboolean __GLEW_EXT_secondary_color = GL_FALSE;
-GLboolean __GLEW_EXT_separate_specular_color = GL_FALSE;
-GLboolean __GLEW_EXT_shadow_funcs = GL_FALSE;
-GLboolean __GLEW_EXT_shared_texture_palette = GL_FALSE;
-GLboolean __GLEW_EXT_stencil_clear_tag = GL_FALSE;
-GLboolean __GLEW_EXT_stencil_two_side = GL_FALSE;
-GLboolean __GLEW_EXT_stencil_wrap = GL_FALSE;
-GLboolean __GLEW_EXT_subtexture = GL_FALSE;
-GLboolean __GLEW_EXT_texture = GL_FALSE;
-GLboolean __GLEW_EXT_texture3D = GL_FALSE;
-GLboolean __GLEW_EXT_texture_array = GL_FALSE;
-GLboolean __GLEW_EXT_texture_buffer_object = GL_FALSE;
-GLboolean __GLEW_EXT_texture_compression_dxt1 = GL_FALSE;
-GLboolean __GLEW_EXT_texture_compression_latc = GL_FALSE;
-GLboolean __GLEW_EXT_texture_compression_rgtc = GL_FALSE;
-GLboolean __GLEW_EXT_texture_compression_s3tc = GL_FALSE;
-GLboolean __GLEW_EXT_texture_cube_map = GL_FALSE;
-GLboolean __GLEW_EXT_texture_edge_clamp = GL_FALSE;
-GLboolean __GLEW_EXT_texture_env = GL_FALSE;
-GLboolean __GLEW_EXT_texture_env_add = GL_FALSE;
-GLboolean __GLEW_EXT_texture_env_combine = GL_FALSE;
-GLboolean __GLEW_EXT_texture_env_dot3 = GL_FALSE;
-GLboolean __GLEW_EXT_texture_filter_anisotropic = GL_FALSE;
-GLboolean __GLEW_EXT_texture_integer = GL_FALSE;
-GLboolean __GLEW_EXT_texture_lod_bias = GL_FALSE;
-GLboolean __GLEW_EXT_texture_mirror_clamp = GL_FALSE;
-GLboolean __GLEW_EXT_texture_object = GL_FALSE;
-GLboolean __GLEW_EXT_texture_perturb_normal = GL_FALSE;
-GLboolean __GLEW_EXT_texture_rectangle = GL_FALSE;
-GLboolean __GLEW_EXT_texture_sRGB = GL_FALSE;
-GLboolean __GLEW_EXT_texture_shared_exponent = GL_FALSE;
-GLboolean __GLEW_EXT_timer_query = GL_FALSE;
-GLboolean __GLEW_EXT_vertex_array = GL_FALSE;
-GLboolean __GLEW_EXT_vertex_shader = GL_FALSE;
-GLboolean __GLEW_EXT_vertex_weighting = GL_FALSE;
-GLboolean __GLEW_GREMEDY_frame_terminator = GL_FALSE;
-GLboolean __GLEW_GREMEDY_string_marker = GL_FALSE;
-GLboolean __GLEW_HP_convolution_border_modes = GL_FALSE;
-GLboolean __GLEW_HP_image_transform = GL_FALSE;
-GLboolean __GLEW_HP_occlusion_test = GL_FALSE;
-GLboolean __GLEW_HP_texture_lighting = GL_FALSE;
-GLboolean __GLEW_IBM_cull_vertex = GL_FALSE;
-GLboolean __GLEW_IBM_multimode_draw_arrays = GL_FALSE;
-GLboolean __GLEW_IBM_rasterpos_clip = GL_FALSE;
-GLboolean __GLEW_IBM_static_data = GL_FALSE;
-GLboolean __GLEW_IBM_texture_mirrored_repeat = GL_FALSE;
-GLboolean __GLEW_IBM_vertex_array_lists = GL_FALSE;
-GLboolean __GLEW_INGR_color_clamp = GL_FALSE;
-GLboolean __GLEW_INGR_interlace_read = GL_FALSE;
-GLboolean __GLEW_INTEL_parallel_arrays = GL_FALSE;
-GLboolean __GLEW_INTEL_texture_scissor = GL_FALSE;
-GLboolean __GLEW_KTX_buffer_region = GL_FALSE;
-GLboolean __GLEW_MESAX_texture_stack = GL_FALSE;
-GLboolean __GLEW_MESA_pack_invert = GL_FALSE;
-GLboolean __GLEW_MESA_resize_buffers = GL_FALSE;
-GLboolean __GLEW_MESA_window_pos = GL_FALSE;
-GLboolean __GLEW_MESA_ycbcr_texture = GL_FALSE;
-GLboolean __GLEW_NV_blend_square = GL_FALSE;
-GLboolean __GLEW_NV_copy_depth_to_color = GL_FALSE;
-GLboolean __GLEW_NV_depth_buffer_float = GL_FALSE;
-GLboolean __GLEW_NV_depth_clamp = GL_FALSE;
-GLboolean __GLEW_NV_depth_range_unclamped = GL_FALSE;
-GLboolean __GLEW_NV_evaluators = GL_FALSE;
-GLboolean __GLEW_NV_fence = GL_FALSE;
-GLboolean __GLEW_NV_float_buffer = GL_FALSE;
-GLboolean __GLEW_NV_fog_distance = GL_FALSE;
-GLboolean __GLEW_NV_fragment_program = GL_FALSE;
-GLboolean __GLEW_NV_fragment_program2 = GL_FALSE;
-GLboolean __GLEW_NV_fragment_program4 = GL_FALSE;
-GLboolean __GLEW_NV_fragment_program_option = GL_FALSE;
-GLboolean __GLEW_NV_framebuffer_multisample_coverage = GL_FALSE;
-GLboolean __GLEW_NV_geometry_program4 = GL_FALSE;
-GLboolean __GLEW_NV_geometry_shader4 = GL_FALSE;
-GLboolean __GLEW_NV_gpu_program4 = GL_FALSE;
-GLboolean __GLEW_NV_half_float = GL_FALSE;
-GLboolean __GLEW_NV_light_max_exponent = GL_FALSE;
-GLboolean __GLEW_NV_multisample_filter_hint = GL_FALSE;
-GLboolean __GLEW_NV_occlusion_query = GL_FALSE;
-GLboolean __GLEW_NV_packed_depth_stencil = GL_FALSE;
-GLboolean __GLEW_NV_parameter_buffer_object = GL_FALSE;
-GLboolean __GLEW_NV_pixel_data_range = GL_FALSE;
-GLboolean __GLEW_NV_point_sprite = GL_FALSE;
-GLboolean __GLEW_NV_primitive_restart = GL_FALSE;
-GLboolean __GLEW_NV_register_combiners = GL_FALSE;
-GLboolean __GLEW_NV_register_combiners2 = GL_FALSE;
-GLboolean __GLEW_NV_texgen_emboss = GL_FALSE;
-GLboolean __GLEW_NV_texgen_reflection = GL_FALSE;
-GLboolean __GLEW_NV_texture_compression_vtc = GL_FALSE;
-GLboolean __GLEW_NV_texture_env_combine4 = GL_FALSE;
-GLboolean __GLEW_NV_texture_expand_normal = GL_FALSE;
-GLboolean __GLEW_NV_texture_rectangle = GL_FALSE;
-GLboolean __GLEW_NV_texture_shader = GL_FALSE;
-GLboolean __GLEW_NV_texture_shader2 = GL_FALSE;
-GLboolean __GLEW_NV_texture_shader3 = GL_FALSE;
-GLboolean __GLEW_NV_transform_feedback = GL_FALSE;
-GLboolean __GLEW_NV_vertex_array_range = GL_FALSE;
-GLboolean __GLEW_NV_vertex_array_range2 = GL_FALSE;
-GLboolean __GLEW_NV_vertex_program = GL_FALSE;
-GLboolean __GLEW_NV_vertex_program1_1 = GL_FALSE;
-GLboolean __GLEW_NV_vertex_program2 = GL_FALSE;
-GLboolean __GLEW_NV_vertex_program2_option = GL_FALSE;
-GLboolean __GLEW_NV_vertex_program3 = GL_FALSE;
-GLboolean __GLEW_NV_vertex_program4 = GL_FALSE;
-GLboolean __GLEW_OES_byte_coordinates = GL_FALSE;
-GLboolean __GLEW_OES_compressed_paletted_texture = GL_FALSE;
-GLboolean __GLEW_OES_read_format = GL_FALSE;
-GLboolean __GLEW_OES_single_precision = GL_FALSE;
-GLboolean __GLEW_OML_interlace = GL_FALSE;
-GLboolean __GLEW_OML_resample = GL_FALSE;
-GLboolean __GLEW_OML_subsample = GL_FALSE;
-GLboolean __GLEW_PGI_misc_hints = GL_FALSE;
-GLboolean __GLEW_PGI_vertex_hints = GL_FALSE;
-GLboolean __GLEW_REND_screen_coordinates = GL_FALSE;
-GLboolean __GLEW_S3_s3tc = GL_FALSE;
-GLboolean __GLEW_SGIS_color_range = GL_FALSE;
-GLboolean __GLEW_SGIS_detail_texture = GL_FALSE;
-GLboolean __GLEW_SGIS_fog_function = GL_FALSE;
-GLboolean __GLEW_SGIS_generate_mipmap = GL_FALSE;
-GLboolean __GLEW_SGIS_multisample = GL_FALSE;
-GLboolean __GLEW_SGIS_pixel_texture = GL_FALSE;
-GLboolean __GLEW_SGIS_sharpen_texture = GL_FALSE;
-GLboolean __GLEW_SGIS_texture4D = GL_FALSE;
-GLboolean __GLEW_SGIS_texture_border_clamp = GL_FALSE;
-GLboolean __GLEW_SGIS_texture_edge_clamp = GL_FALSE;
-GLboolean __GLEW_SGIS_texture_filter4 = GL_FALSE;
-GLboolean __GLEW_SGIS_texture_lod = GL_FALSE;
-GLboolean __GLEW_SGIS_texture_select = GL_FALSE;
-GLboolean __GLEW_SGIX_async = GL_FALSE;
-GLboolean __GLEW_SGIX_async_histogram = GL_FALSE;
-GLboolean __GLEW_SGIX_async_pixel = GL_FALSE;
-GLboolean __GLEW_SGIX_blend_alpha_minmax = GL_FALSE;
-GLboolean __GLEW_SGIX_clipmap = GL_FALSE;
-GLboolean __GLEW_SGIX_depth_texture = GL_FALSE;
-GLboolean __GLEW_SGIX_flush_raster = GL_FALSE;
-GLboolean __GLEW_SGIX_fog_offset = GL_FALSE;
-GLboolean __GLEW_SGIX_fog_texture = GL_FALSE;
-GLboolean __GLEW_SGIX_fragment_specular_lighting = GL_FALSE;
-GLboolean __GLEW_SGIX_framezoom = GL_FALSE;
-GLboolean __GLEW_SGIX_interlace = GL_FALSE;
-GLboolean __GLEW_SGIX_ir_instrument1 = GL_FALSE;
-GLboolean __GLEW_SGIX_list_priority = GL_FALSE;
-GLboolean __GLEW_SGIX_pixel_texture = GL_FALSE;
-GLboolean __GLEW_SGIX_pixel_texture_bits = GL_FALSE;
-GLboolean __GLEW_SGIX_reference_plane = GL_FALSE;
-GLboolean __GLEW_SGIX_resample = GL_FALSE;
-GLboolean __GLEW_SGIX_shadow = GL_FALSE;
-GLboolean __GLEW_SGIX_shadow_ambient = GL_FALSE;
-GLboolean __GLEW_SGIX_sprite = GL_FALSE;
-GLboolean __GLEW_SGIX_tag_sample_buffer = GL_FALSE;
-GLboolean __GLEW_SGIX_texture_add_env = GL_FALSE;
-GLboolean __GLEW_SGIX_texture_coordinate_clamp = GL_FALSE;
-GLboolean __GLEW_SGIX_texture_lod_bias = GL_FALSE;
-GLboolean __GLEW_SGIX_texture_multi_buffer = GL_FALSE;
-GLboolean __GLEW_SGIX_texture_range = GL_FALSE;
-GLboolean __GLEW_SGIX_texture_scale_bias = GL_FALSE;
-GLboolean __GLEW_SGIX_vertex_preclip = GL_FALSE;
-GLboolean __GLEW_SGIX_vertex_preclip_hint = GL_FALSE;
-GLboolean __GLEW_SGIX_ycrcb = GL_FALSE;
-GLboolean __GLEW_SGI_color_matrix = GL_FALSE;
-GLboolean __GLEW_SGI_color_table = GL_FALSE;
-GLboolean __GLEW_SGI_texture_color_table = GL_FALSE;
-GLboolean __GLEW_SUNX_constant_data = GL_FALSE;
-GLboolean __GLEW_SUN_convolution_border_modes = GL_FALSE;
-GLboolean __GLEW_SUN_global_alpha = GL_FALSE;
-GLboolean __GLEW_SUN_mesh_array = GL_FALSE;
-GLboolean __GLEW_SUN_read_video_pixels = GL_FALSE;
-GLboolean __GLEW_SUN_slice_accum = GL_FALSE;
-GLboolean __GLEW_SUN_triangle_list = GL_FALSE;
-GLboolean __GLEW_SUN_vertex = GL_FALSE;
-GLboolean __GLEW_WIN_phong_shading = GL_FALSE;
-GLboolean __GLEW_WIN_specular_fog = GL_FALSE;
-GLboolean __GLEW_WIN_swap_hint = GL_FALSE;
-
-#endif /* !GLEW_MX */
-
-#ifdef GL_VERSION_1_2
-
-static GLboolean _glewInit_GL_VERSION_1_2 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage3D")) == NULL) || r;
-  r = ((glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElements")) == NULL) || r;
-  r = ((glTexImage3D = (PFNGLTEXIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glTexImage3D")) == NULL) || r;
-  r = ((glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage3D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_VERSION_1_2 */
-
-#ifdef GL_VERSION_1_3
-
-static GLboolean _glewInit_GL_VERSION_1_3 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glActiveTexture = (PFNGLACTIVETEXTUREPROC)glewGetProcAddress((const GLubyte*)"glActiveTexture")) == NULL) || r;
-  r = ((glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)glewGetProcAddress((const GLubyte*)"glClientActiveTexture")) == NULL) || r;
-  r = ((glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage1D")) == NULL) || r;
-  r = ((glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage2D")) == NULL) || r;
-  r = ((glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage3D")) == NULL) || r;
-  r = ((glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage1D")) == NULL) || r;
-  r = ((glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage2D")) == NULL) || r;
-  r = ((glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage3D")) == NULL) || r;
-  r = ((glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)glewGetProcAddress((const GLubyte*)"glGetCompressedTexImage")) == NULL) || r;
-  r = ((glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixd")) == NULL) || r;
-  r = ((glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixf")) == NULL) || r;
-  r = ((glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixd")) == NULL) || r;
-  r = ((glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixf")) == NULL) || r;
-  r = ((glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1d")) == NULL) || r;
-  r = ((glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1dv")) == NULL) || r;
-  r = ((glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1f")) == NULL) || r;
-  r = ((glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1fv")) == NULL) || r;
-  r = ((glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1i")) == NULL) || r;
-  r = ((glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1iv")) == NULL) || r;
-  r = ((glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1s")) == NULL) || r;
-  r = ((glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1sv")) == NULL) || r;
-  r = ((glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2d")) == NULL) || r;
-  r = ((glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2dv")) == NULL) || r;
-  r = ((glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2f")) == NULL) || r;
-  r = ((glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2fv")) == NULL) || r;
-  r = ((glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2i")) == NULL) || r;
-  r = ((glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2iv")) == NULL) || r;
-  r = ((glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2s")) == NULL) || r;
-  r = ((glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2sv")) == NULL) || r;
-  r = ((glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3d")) == NULL) || r;
-  r = ((glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3dv")) == NULL) || r;
-  r = ((glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3f")) == NULL) || r;
-  r = ((glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3fv")) == NULL) || r;
-  r = ((glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3i")) == NULL) || r;
-  r = ((glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3iv")) == NULL) || r;
-  r = ((glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3s")) == NULL) || r;
-  r = ((glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3sv")) == NULL) || r;
-  r = ((glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4d")) == NULL) || r;
-  r = ((glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4dv")) == NULL) || r;
-  r = ((glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4f")) == NULL) || r;
-  r = ((glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4fv")) == NULL) || r;
-  r = ((glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4i")) == NULL) || r;
-  r = ((glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4iv")) == NULL) || r;
-  r = ((glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4s")) == NULL) || r;
-  r = ((glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4sv")) == NULL) || r;
-  r = ((glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)glewGetProcAddress((const GLubyte*)"glSampleCoverage")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_VERSION_1_3 */
-
-#ifdef GL_VERSION_1_4
-
-static GLboolean _glewInit_GL_VERSION_1_4 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBlendColor = (PFNGLBLENDCOLORPROC)glewGetProcAddress((const GLubyte*)"glBlendColor")) == NULL) || r;
-  r = ((glBlendEquation = (PFNGLBLENDEQUATIONPROC)glewGetProcAddress((const GLubyte*)"glBlendEquation")) == NULL) || r;
-  r = ((glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glBlendFuncSeparate")) == NULL) || r;
-  r = ((glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)glewGetProcAddress((const GLubyte*)"glFogCoordPointer")) == NULL) || r;
-  r = ((glFogCoordd = (PFNGLFOGCOORDDPROC)glewGetProcAddress((const GLubyte*)"glFogCoordd")) == NULL) || r;
-  r = ((glFogCoorddv = (PFNGLFOGCOORDDVPROC)glewGetProcAddress((const GLubyte*)"glFogCoorddv")) == NULL) || r;
-  r = ((glFogCoordf = (PFNGLFOGCOORDFPROC)glewGetProcAddress((const GLubyte*)"glFogCoordf")) == NULL) || r;
-  r = ((glFogCoordfv = (PFNGLFOGCOORDFVPROC)glewGetProcAddress((const GLubyte*)"glFogCoordfv")) == NULL) || r;
-  r = ((glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawArrays")) == NULL) || r;
-  r = ((glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawElements")) == NULL) || r;
-  r = ((glPointParameterf = (PFNGLPOINTPARAMETERFPROC)glewGetProcAddress((const GLubyte*)"glPointParameterf")) == NULL) || r;
-  r = ((glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfv")) == NULL) || r;
-  r = ((glPointParameteri = (PFNGLPOINTPARAMETERIPROC)glewGetProcAddress((const GLubyte*)"glPointParameteri")) == NULL) || r;
-  r = ((glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glPointParameteriv")) == NULL) || r;
-  r = ((glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3b")) == NULL) || r;
-  r = ((glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3bv")) == NULL) || r;
-  r = ((glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3d")) == NULL) || r;
-  r = ((glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3dv")) == NULL) || r;
-  r = ((glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3f")) == NULL) || r;
-  r = ((glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3fv")) == NULL) || r;
-  r = ((glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3i")) == NULL) || r;
-  r = ((glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3iv")) == NULL) || r;
-  r = ((glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3s")) == NULL) || r;
-  r = ((glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3sv")) == NULL) || r;
-  r = ((glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ub")) == NULL) || r;
-  r = ((glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ubv")) == NULL) || r;
-  r = ((glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ui")) == NULL) || r;
-  r = ((glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3uiv")) == NULL) || r;
-  r = ((glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3us")) == NULL) || r;
-  r = ((glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3usv")) == NULL) || r;
-  r = ((glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColorPointer")) == NULL) || r;
-  r = ((glWindowPos2d = (PFNGLWINDOWPOS2DPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2d")) == NULL) || r;
-  r = ((glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dv")) == NULL) || r;
-  r = ((glWindowPos2f = (PFNGLWINDOWPOS2FPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2f")) == NULL) || r;
-  r = ((glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fv")) == NULL) || r;
-  r = ((glWindowPos2i = (PFNGLWINDOWPOS2IPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2i")) == NULL) || r;
-  r = ((glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2iv")) == NULL) || r;
-  r = ((glWindowPos2s = (PFNGLWINDOWPOS2SPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2s")) == NULL) || r;
-  r = ((glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2sv")) == NULL) || r;
-  r = ((glWindowPos3d = (PFNGLWINDOWPOS3DPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3d")) == NULL) || r;
-  r = ((glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dv")) == NULL) || r;
-  r = ((glWindowPos3f = (PFNGLWINDOWPOS3FPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3f")) == NULL) || r;
-  r = ((glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fv")) == NULL) || r;
-  r = ((glWindowPos3i = (PFNGLWINDOWPOS3IPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3i")) == NULL) || r;
-  r = ((glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3iv")) == NULL) || r;
-  r = ((glWindowPos3s = (PFNGLWINDOWPOS3SPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3s")) == NULL) || r;
-  r = ((glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3sv")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_VERSION_1_4 */
-
-#ifdef GL_VERSION_1_5
-
-static GLboolean _glewInit_GL_VERSION_1_5 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBeginQuery = (PFNGLBEGINQUERYPROC)glewGetProcAddress((const GLubyte*)"glBeginQuery")) == NULL) || r;
-  r = ((glBindBuffer = (PFNGLBINDBUFFERPROC)glewGetProcAddress((const GLubyte*)"glBindBuffer")) == NULL) || r;
-  r = ((glBufferData = (PFNGLBUFFERDATAPROC)glewGetProcAddress((const GLubyte*)"glBufferData")) == NULL) || r;
-  r = ((glBufferSubData = (PFNGLBUFFERSUBDATAPROC)glewGetProcAddress((const GLubyte*)"glBufferSubData")) == NULL) || r;
-  r = ((glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)glewGetProcAddress((const GLubyte*)"glDeleteBuffers")) == NULL) || r;
-  r = ((glDeleteQueries = (PFNGLDELETEQUERIESPROC)glewGetProcAddress((const GLubyte*)"glDeleteQueries")) == NULL) || r;
-  r = ((glEndQuery = (PFNGLENDQUERYPROC)glewGetProcAddress((const GLubyte*)"glEndQuery")) == NULL) || r;
-  r = ((glGenBuffers = (PFNGLGENBUFFERSPROC)glewGetProcAddress((const GLubyte*)"glGenBuffers")) == NULL) || r;
-  r = ((glGenQueries = (PFNGLGENQUERIESPROC)glewGetProcAddress((const GLubyte*)"glGenQueries")) == NULL) || r;
-  r = ((glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetBufferParameteriv")) == NULL) || r;
-  r = ((glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)glewGetProcAddress((const GLubyte*)"glGetBufferPointerv")) == NULL) || r;
-  r = ((glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)glewGetProcAddress((const GLubyte*)"glGetBufferSubData")) == NULL) || r;
-  r = ((glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectiv")) == NULL) || r;
-  r = ((glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectuiv")) == NULL) || r;
-  r = ((glGetQueryiv = (PFNGLGETQUERYIVPROC)glewGetProcAddress((const GLubyte*)"glGetQueryiv")) == NULL) || r;
-  r = ((glIsBuffer = (PFNGLISBUFFERPROC)glewGetProcAddress((const GLubyte*)"glIsBuffer")) == NULL) || r;
-  r = ((glIsQuery = (PFNGLISQUERYPROC)glewGetProcAddress((const GLubyte*)"glIsQuery")) == NULL) || r;
-  r = ((glMapBuffer = (PFNGLMAPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glMapBuffer")) == NULL) || r;
-  r = ((glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glUnmapBuffer")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_VERSION_1_5 */
-
-#ifdef GL_VERSION_2_0
-
-static GLboolean _glewInit_GL_VERSION_2_0 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glAttachShader = (PFNGLATTACHSHADERPROC)glewGetProcAddress((const GLubyte*)"glAttachShader")) == NULL) || r;
-  r = ((glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)glewGetProcAddress((const GLubyte*)"glBindAttribLocation")) == NULL) || r;
-  r = ((glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glBlendEquationSeparate")) == NULL) || r;
-  r = ((glCompileShader = (PFNGLCOMPILESHADERPROC)glewGetProcAddress((const GLubyte*)"glCompileShader")) == NULL) || r;
-  r = ((glCreateProgram = (PFNGLCREATEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glCreateProgram")) == NULL) || r;
-  r = ((glCreateShader = (PFNGLCREATESHADERPROC)glewGetProcAddress((const GLubyte*)"glCreateShader")) == NULL) || r;
-  r = ((glDeleteProgram = (PFNGLDELETEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glDeleteProgram")) == NULL) || r;
-  r = ((glDeleteShader = (PFNGLDELETESHADERPROC)glewGetProcAddress((const GLubyte*)"glDeleteShader")) == NULL) || r;
-  r = ((glDetachShader = (PFNGLDETACHSHADERPROC)glewGetProcAddress((const GLubyte*)"glDetachShader")) == NULL) || r;
-  r = ((glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)glewGetProcAddress((const GLubyte*)"glDisableVertexAttribArray")) == NULL) || r;
-  r = ((glDrawBuffers = (PFNGLDRAWBUFFERSPROC)glewGetProcAddress((const GLubyte*)"glDrawBuffers")) == NULL) || r;
-  r = ((glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)glewGetProcAddress((const GLubyte*)"glEnableVertexAttribArray")) == NULL) || r;
-  r = ((glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)glewGetProcAddress((const GLubyte*)"glGetActiveAttrib")) == NULL) || r;
-  r = ((glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)glewGetProcAddress((const GLubyte*)"glGetActiveUniform")) == NULL) || r;
-  r = ((glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)glewGetProcAddress((const GLubyte*)"glGetAttachedShaders")) == NULL) || r;
-  r = ((glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)glewGetProcAddress((const GLubyte*)"glGetAttribLocation")) == NULL) || r;
-  r = ((glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)glewGetProcAddress((const GLubyte*)"glGetProgramInfoLog")) == NULL) || r;
-  r = ((glGetProgramiv = (PFNGLGETPROGRAMIVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramiv")) == NULL) || r;
-  r = ((glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)glewGetProcAddress((const GLubyte*)"glGetShaderInfoLog")) == NULL) || r;
-  r = ((glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)glewGetProcAddress((const GLubyte*)"glGetShaderSource")) == NULL) || r;
-  r = ((glGetShaderiv = (PFNGLGETSHADERIVPROC)glewGetProcAddress((const GLubyte*)"glGetShaderiv")) == NULL) || r;
-  r = ((glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)glewGetProcAddress((const GLubyte*)"glGetUniformLocation")) == NULL) || r;
-  r = ((glGetUniformfv = (PFNGLGETUNIFORMFVPROC)glewGetProcAddress((const GLubyte*)"glGetUniformfv")) == NULL) || r;
-  r = ((glGetUniformiv = (PFNGLGETUNIFORMIVPROC)glewGetProcAddress((const GLubyte*)"glGetUniformiv")) == NULL) || r;
-  r = ((glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribPointerv")) == NULL) || r;
-  r = ((glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribdv")) == NULL) || r;
-  r = ((glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribfv")) == NULL) || r;
-  r = ((glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribiv")) == NULL) || r;
-  r = ((glIsProgram = (PFNGLISPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glIsProgram")) == NULL) || r;
-  r = ((glIsShader = (PFNGLISSHADERPROC)glewGetProcAddress((const GLubyte*)"glIsShader")) == NULL) || r;
-  r = ((glLinkProgram = (PFNGLLINKPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glLinkProgram")) == NULL) || r;
-  r = ((glShaderSource = (PFNGLSHADERSOURCEPROC)glewGetProcAddress((const GLubyte*)"glShaderSource")) == NULL) || r;
-  r = ((glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glStencilFuncSeparate")) == NULL) || r;
-  r = ((glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glStencilMaskSeparate")) == NULL) || r;
-  r = ((glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)glewGetProcAddress((const GLubyte*)"glStencilOpSeparate")) == NULL) || r;
-  r = ((glUniform1f = (PFNGLUNIFORM1FPROC)glewGetProcAddress((const GLubyte*)"glUniform1f")) == NULL) || r;
-  r = ((glUniform1fv = (PFNGLUNIFORM1FVPROC)glewGetProcAddress((const GLubyte*)"glUniform1fv")) == NULL) || r;
-  r = ((glUniform1i = (PFNGLUNIFORM1IPROC)glewGetProcAddress((const GLubyte*)"glUniform1i")) == NULL) || r;
-  r = ((glUniform1iv = (PFNGLUNIFORM1IVPROC)glewGetProcAddress((const GLubyte*)"glUniform1iv")) == NULL) || r;
-  r = ((glUniform2f = (PFNGLUNIFORM2FPROC)glewGetProcAddress((const GLubyte*)"glUniform2f")) == NULL) || r;
-  r = ((glUniform2fv = (PFNGLUNIFORM2FVPROC)glewGetProcAddress((const GLubyte*)"glUniform2fv")) == NULL) || r;
-  r = ((glUniform2i = (PFNGLUNIFORM2IPROC)glewGetProcAddress((const GLubyte*)"glUniform2i")) == NULL) || r;
-  r = ((glUniform2iv = (PFNGLUNIFORM2IVPROC)glewGetProcAddress((const GLubyte*)"glUniform2iv")) == NULL) || r;
-  r = ((glUniform3f = (PFNGLUNIFORM3FPROC)glewGetProcAddress((const GLubyte*)"glUniform3f")) == NULL) || r;
-  r = ((glUniform3fv = (PFNGLUNIFORM3FVPROC)glewGetProcAddress((const GLubyte*)"glUniform3fv")) == NULL) || r;
-  r = ((glUniform3i = (PFNGLUNIFORM3IPROC)glewGetProcAddress((const GLubyte*)"glUniform3i")) == NULL) || r;
-  r = ((glUniform3iv = (PFNGLUNIFORM3IVPROC)glewGetProcAddress((const GLubyte*)"glUniform3iv")) == NULL) || r;
-  r = ((glUniform4f = (PFNGLUNIFORM4FPROC)glewGetProcAddress((const GLubyte*)"glUniform4f")) == NULL) || r;
-  r = ((glUniform4fv = (PFNGLUNIFORM4FVPROC)glewGetProcAddress((const GLubyte*)"glUniform4fv")) == NULL) || r;
-  r = ((glUniform4i = (PFNGLUNIFORM4IPROC)glewGetProcAddress((const GLubyte*)"glUniform4i")) == NULL) || r;
-  r = ((glUniform4iv = (PFNGLUNIFORM4IVPROC)glewGetProcAddress((const GLubyte*)"glUniform4iv")) == NULL) || r;
-  r = ((glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2fv")) == NULL) || r;
-  r = ((glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3fv")) == NULL) || r;
-  r = ((glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4fv")) == NULL) || r;
-  r = ((glUseProgram = (PFNGLUSEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glUseProgram")) == NULL) || r;
-  r = ((glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)glewGetProcAddress((const GLubyte*)"glValidateProgram")) == NULL) || r;
-  r = ((glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1d")) == NULL) || r;
-  r = ((glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dv")) == NULL) || r;
-  r = ((glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1f")) == NULL) || r;
-  r = ((glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fv")) == NULL) || r;
-  r = ((glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1s")) == NULL) || r;
-  r = ((glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1sv")) == NULL) || r;
-  r = ((glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2d")) == NULL) || r;
-  r = ((glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dv")) == NULL) || r;
-  r = ((glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2f")) == NULL) || r;
-  r = ((glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fv")) == NULL) || r;
-  r = ((glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2s")) == NULL) || r;
-  r = ((glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2sv")) == NULL) || r;
-  r = ((glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3d")) == NULL) || r;
-  r = ((glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dv")) == NULL) || r;
-  r = ((glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3f")) == NULL) || r;
-  r = ((glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fv")) == NULL) || r;
-  r = ((glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3s")) == NULL) || r;
-  r = ((glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3sv")) == NULL) || r;
-  r = ((glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nbv")) == NULL) || r;
-  r = ((glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Niv")) == NULL) || r;
-  r = ((glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nsv")) == NULL) || r;
-  r = ((glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nub")) == NULL) || r;
-  r = ((glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nubv")) == NULL) || r;
-  r = ((glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nuiv")) == NULL) || r;
-  r = ((glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4Nusv")) == NULL) || r;
-  r = ((glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4bv")) == NULL) || r;
-  r = ((glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4d")) == NULL) || r;
-  r = ((glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dv")) == NULL) || r;
-  r = ((glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4f")) == NULL) || r;
-  r = ((glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fv")) == NULL) || r;
-  r = ((glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4iv")) == NULL) || r;
-  r = ((glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4s")) == NULL) || r;
-  r = ((glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4sv")) == NULL) || r;
-  r = ((glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubv")) == NULL) || r;
-  r = ((glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4uiv")) == NULL) || r;
-  r = ((glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4usv")) == NULL) || r;
-  r = ((glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribPointer")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_VERSION_2_0 */
-
-#ifdef GL_VERSION_2_1
-
-static GLboolean _glewInit_GL_VERSION_2_1 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2x3fv")) == NULL) || r;
-  r = ((glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2x4fv")) == NULL) || r;
-  r = ((glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3x2fv")) == NULL) || r;
-  r = ((glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3x4fv")) == NULL) || r;
-  r = ((glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4x2fv")) == NULL) || r;
-  r = ((glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4x3fv")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_VERSION_2_1 */
-
-#ifdef GL_3DFX_multisample
-
-#endif /* GL_3DFX_multisample */
-
-#ifdef GL_3DFX_tbuffer
-
-static GLboolean _glewInit_GL_3DFX_tbuffer (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)glewGetProcAddress((const GLubyte*)"glTbufferMask3DFX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_3DFX_tbuffer */
-
-#ifdef GL_3DFX_texture_compression_FXT1
-
-#endif /* GL_3DFX_texture_compression_FXT1 */
-
-#ifdef GL_APPLE_client_storage
-
-#endif /* GL_APPLE_client_storage */
-
-#ifdef GL_APPLE_element_array
-
-static GLboolean _glewInit_GL_APPLE_element_array (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDrawElementArrayAPPLE")) == NULL) || r;
-  r = ((glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElementArrayAPPLE")) == NULL) || r;
-  r = ((glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)glewGetProcAddress((const GLubyte*)"glElementPointerAPPLE")) == NULL) || r;
-  r = ((glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawElementArrayAPPLE")) == NULL) || r;
-  r = ((glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawRangeElementArrayAPPLE")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_APPLE_element_array */
-
-#ifdef GL_APPLE_fence
-
-static GLboolean _glewInit_GL_APPLE_fence (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDeleteFencesAPPLE")) == NULL) || r;
-  r = ((glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFinishFenceAPPLE")) == NULL) || r;
-  r = ((glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFinishObjectAPPLE")) == NULL) || r;
-  r = ((glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)glewGetProcAddress((const GLubyte*)"glGenFencesAPPLE")) == NULL) || r;
-  r = ((glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glIsFenceAPPLE")) == NULL) || r;
-  r = ((glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glSetFenceAPPLE")) == NULL) || r;
-  r = ((glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glTestFenceAPPLE")) == NULL) || r;
-  r = ((glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)glewGetProcAddress((const GLubyte*)"glTestObjectAPPLE")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_APPLE_fence */
-
-#ifdef GL_APPLE_float_pixels
-
-#endif /* GL_APPLE_float_pixels */
-
-#ifdef GL_APPLE_flush_buffer_range
-
-static GLboolean _glewInit_GL_APPLE_flush_buffer_range (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)glewGetProcAddress((const GLubyte*)"glBufferParameteriAPPLE")) == NULL) || r;
-  r = ((glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFlushMappedBufferRangeAPPLE")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_APPLE_flush_buffer_range */
-
-#ifdef GL_APPLE_pixel_buffer
-
-#endif /* GL_APPLE_pixel_buffer */
-
-#ifdef GL_APPLE_specular_vector
-
-#endif /* GL_APPLE_specular_vector */
-
-#ifdef GL_APPLE_texture_range
-
-static GLboolean _glewInit_GL_APPLE_texture_range (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)glewGetProcAddress((const GLubyte*)"glGetTexParameterPointervAPPLE")) == NULL) || r;
-  r = ((glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glTextureRangeAPPLE")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_APPLE_texture_range */
-
-#ifdef GL_APPLE_transform_hint
-
-#endif /* GL_APPLE_transform_hint */
-
-#ifdef GL_APPLE_vertex_array_object
-
-static GLboolean _glewInit_GL_APPLE_vertex_array_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glBindVertexArrayAPPLE")) == NULL) || r;
-  r = ((glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)glewGetProcAddress((const GLubyte*)"glDeleteVertexArraysAPPLE")) == NULL) || r;
-  r = ((glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)glewGetProcAddress((const GLubyte*)"glGenVertexArraysAPPLE")) == NULL) || r;
-  r = ((glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)glewGetProcAddress((const GLubyte*)"glIsVertexArrayAPPLE")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_APPLE_vertex_array_object */
-
-#ifdef GL_APPLE_vertex_array_range
-
-static GLboolean _glewInit_GL_APPLE_vertex_array_range (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glFlushVertexArrayRangeAPPLE")) == NULL) || r;
-  r = ((glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)glewGetProcAddress((const GLubyte*)"glVertexArrayParameteriAPPLE")) == NULL) || r;
-  r = ((glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)glewGetProcAddress((const GLubyte*)"glVertexArrayRangeAPPLE")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_APPLE_vertex_array_range */
-
-#ifdef GL_APPLE_ycbcr_422
-
-#endif /* GL_APPLE_ycbcr_422 */
-
-#ifdef GL_ARB_color_buffer_float
-
-static GLboolean _glewInit_GL_ARB_color_buffer_float (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glClampColorARB = (PFNGLCLAMPCOLORARBPROC)glewGetProcAddress((const GLubyte*)"glClampColorARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_color_buffer_float */
-
-#ifdef GL_ARB_depth_texture
-
-#endif /* GL_ARB_depth_texture */
-
-#ifdef GL_ARB_draw_buffers
-
-static GLboolean _glewInit_GL_ARB_draw_buffers (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)glewGetProcAddress((const GLubyte*)"glDrawBuffersARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_draw_buffers */
-
-#ifdef GL_ARB_fragment_program
-
-#endif /* GL_ARB_fragment_program */
-
-#ifdef GL_ARB_fragment_program_shadow
-
-#endif /* GL_ARB_fragment_program_shadow */
-
-#ifdef GL_ARB_fragment_shader
-
-#endif /* GL_ARB_fragment_shader */
-
-#ifdef GL_ARB_half_float_pixel
-
-#endif /* GL_ARB_half_float_pixel */
-
-#ifdef GL_ARB_imaging
-
-static GLboolean _glewInit_GL_ARB_imaging (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBlendEquation = (PFNGLBLENDEQUATIONPROC)glewGetProcAddress((const GLubyte*)"glBlendEquation")) == NULL) || r;
-  r = ((glColorSubTable = (PFNGLCOLORSUBTABLEPROC)glewGetProcAddress((const GLubyte*)"glColorSubTable")) == NULL) || r;
-  r = ((glColorTable = (PFNGLCOLORTABLEPROC)glewGetProcAddress((const GLubyte*)"glColorTable")) == NULL) || r;
-  r = ((glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameterfv")) == NULL) || r;
-  r = ((glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameteriv")) == NULL) || r;
-  r = ((glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter1D")) == NULL) || r;
-  r = ((glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter2D")) == NULL) || r;
-  r = ((glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterf")) == NULL) || r;
-  r = ((glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterfv")) == NULL) || r;
-  r = ((glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameteri")) == NULL) || r;
-  r = ((glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameteriv")) == NULL) || r;
-  r = ((glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)glewGetProcAddress((const GLubyte*)"glCopyColorSubTable")) == NULL) || r;
-  r = ((glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)glewGetProcAddress((const GLubyte*)"glCopyColorTable")) == NULL) || r;
-  r = ((glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter1D")) == NULL) || r;
-  r = ((glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter2D")) == NULL) || r;
-  r = ((glGetColorTable = (PFNGLGETCOLORTABLEPROC)glewGetProcAddress((const GLubyte*)"glGetColorTable")) == NULL) || r;
-  r = ((glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterfv")) == NULL) || r;
-  r = ((glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameteriv")) == NULL) || r;
-  r = ((glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionFilter")) == NULL) || r;
-  r = ((glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameterfv")) == NULL) || r;
-  r = ((glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameteriv")) == NULL) || r;
-  r = ((glGetHistogram = (PFNGLGETHISTOGRAMPROC)glewGetProcAddress((const GLubyte*)"glGetHistogram")) == NULL) || r;
-  r = ((glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameterfv")) == NULL) || r;
-  r = ((glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameteriv")) == NULL) || r;
-  r = ((glGetMinmax = (PFNGLGETMINMAXPROC)glewGetProcAddress((const GLubyte*)"glGetMinmax")) == NULL) || r;
-  r = ((glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameterfv")) == NULL) || r;
-  r = ((glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameteriv")) == NULL) || r;
-  r = ((glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)glewGetProcAddress((const GLubyte*)"glGetSeparableFilter")) == NULL) || r;
-  r = ((glHistogram = (PFNGLHISTOGRAMPROC)glewGetProcAddress((const GLubyte*)"glHistogram")) == NULL) || r;
-  r = ((glMinmax = (PFNGLMINMAXPROC)glewGetProcAddress((const GLubyte*)"glMinmax")) == NULL) || r;
-  r = ((glResetHistogram = (PFNGLRESETHISTOGRAMPROC)glewGetProcAddress((const GLubyte*)"glResetHistogram")) == NULL) || r;
-  r = ((glResetMinmax = (PFNGLRESETMINMAXPROC)glewGetProcAddress((const GLubyte*)"glResetMinmax")) == NULL) || r;
-  r = ((glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)glewGetProcAddress((const GLubyte*)"glSeparableFilter2D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_imaging */
-
-#ifdef GL_ARB_matrix_palette
-
-static GLboolean _glewInit_GL_ARB_matrix_palette (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)glewGetProcAddress((const GLubyte*)"glCurrentPaletteMatrixARB")) == NULL) || r;
-  r = ((glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexPointerARB")) == NULL) || r;
-  r = ((glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexubvARB")) == NULL) || r;
-  r = ((glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexuivARB")) == NULL) || r;
-  r = ((glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)glewGetProcAddress((const GLubyte*)"glMatrixIndexusvARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_matrix_palette */
-
-#ifdef GL_ARB_multisample
-
-static GLboolean _glewInit_GL_ARB_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)glewGetProcAddress((const GLubyte*)"glSampleCoverageARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_multisample */
-
-#ifdef GL_ARB_multitexture
-
-static GLboolean _glewInit_GL_ARB_multitexture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)glewGetProcAddress((const GLubyte*)"glActiveTextureARB")) == NULL) || r;
-  r = ((glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)glewGetProcAddress((const GLubyte*)"glClientActiveTextureARB")) == NULL) || r;
-  r = ((glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1dARB")) == NULL) || r;
-  r = ((glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1dvARB")) == NULL) || r;
-  r = ((glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1fARB")) == NULL) || r;
-  r = ((glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1fvARB")) == NULL) || r;
-  r = ((glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1iARB")) == NULL) || r;
-  r = ((glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1ivARB")) == NULL) || r;
-  r = ((glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1sARB")) == NULL) || r;
-  r = ((glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1svARB")) == NULL) || r;
-  r = ((glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2dARB")) == NULL) || r;
-  r = ((glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2dvARB")) == NULL) || r;
-  r = ((glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2fARB")) == NULL) || r;
-  r = ((glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2fvARB")) == NULL) || r;
-  r = ((glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2iARB")) == NULL) || r;
-  r = ((glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2ivARB")) == NULL) || r;
-  r = ((glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2sARB")) == NULL) || r;
-  r = ((glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2svARB")) == NULL) || r;
-  r = ((glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3dARB")) == NULL) || r;
-  r = ((glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3dvARB")) == NULL) || r;
-  r = ((glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3fARB")) == NULL) || r;
-  r = ((glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3fvARB")) == NULL) || r;
-  r = ((glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3iARB")) == NULL) || r;
-  r = ((glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3ivARB")) == NULL) || r;
-  r = ((glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3sARB")) == NULL) || r;
-  r = ((glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3svARB")) == NULL) || r;
-  r = ((glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4dARB")) == NULL) || r;
-  r = ((glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4dvARB")) == NULL) || r;
-  r = ((glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4fARB")) == NULL) || r;
-  r = ((glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4fvARB")) == NULL) || r;
-  r = ((glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4iARB")) == NULL) || r;
-  r = ((glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4ivARB")) == NULL) || r;
-  r = ((glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4sARB")) == NULL) || r;
-  r = ((glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4svARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_multitexture */
-
-#ifdef GL_ARB_occlusion_query
-
-static GLboolean _glewInit_GL_ARB_occlusion_query (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)glewGetProcAddress((const GLubyte*)"glBeginQueryARB")) == NULL) || r;
-  r = ((glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteQueriesARB")) == NULL) || r;
-  r = ((glEndQueryARB = (PFNGLENDQUERYARBPROC)glewGetProcAddress((const GLubyte*)"glEndQueryARB")) == NULL) || r;
-  r = ((glGenQueriesARB = (PFNGLGENQUERIESARBPROC)glewGetProcAddress((const GLubyte*)"glGenQueriesARB")) == NULL) || r;
-  r = ((glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectivARB")) == NULL) || r;
-  r = ((glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectuivARB")) == NULL) || r;
-  r = ((glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetQueryivARB")) == NULL) || r;
-  r = ((glIsQueryARB = (PFNGLISQUERYARBPROC)glewGetProcAddress((const GLubyte*)"glIsQueryARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_occlusion_query */
-
-#ifdef GL_ARB_pixel_buffer_object
-
-#endif /* GL_ARB_pixel_buffer_object */
-
-#ifdef GL_ARB_point_parameters
-
-static GLboolean _glewInit_GL_ARB_point_parameters (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfARB")) == NULL) || r;
-  r = ((glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfvARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_point_parameters */
-
-#ifdef GL_ARB_point_sprite
-
-#endif /* GL_ARB_point_sprite */
-
-#ifdef GL_ARB_shader_objects
-
-static GLboolean _glewInit_GL_ARB_shader_objects (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glAttachObjectARB")) == NULL) || r;
-  r = ((glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)glewGetProcAddress((const GLubyte*)"glCompileShaderARB")) == NULL) || r;
-  r = ((glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glCreateProgramObjectARB")) == NULL) || r;
-  r = ((glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glCreateShaderObjectARB")) == NULL) || r;
-  r = ((glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteObjectARB")) == NULL) || r;
-  r = ((glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glDetachObjectARB")) == NULL) || r;
-  r = ((glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)glewGetProcAddress((const GLubyte*)"glGetActiveUniformARB")) == NULL) || r;
-  r = ((glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)glewGetProcAddress((const GLubyte*)"glGetAttachedObjectsARB")) == NULL) || r;
-  r = ((glGetHandleARB = (PFNGLGETHANDLEARBPROC)glewGetProcAddress((const GLubyte*)"glGetHandleARB")) == NULL) || r;
-  r = ((glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)glewGetProcAddress((const GLubyte*)"glGetInfoLogARB")) == NULL) || r;
-  r = ((glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetObjectParameterfvARB")) == NULL) || r;
-  r = ((glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetObjectParameterivARB")) == NULL) || r;
-  r = ((glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)glewGetProcAddress((const GLubyte*)"glGetShaderSourceARB")) == NULL) || r;
-  r = ((glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)glewGetProcAddress((const GLubyte*)"glGetUniformLocationARB")) == NULL) || r;
-  r = ((glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetUniformfvARB")) == NULL) || r;
-  r = ((glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetUniformivARB")) == NULL) || r;
-  r = ((glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glLinkProgramARB")) == NULL) || r;
-  r = ((glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)glewGetProcAddress((const GLubyte*)"glShaderSourceARB")) == NULL) || r;
-  r = ((glUniform1fARB = (PFNGLUNIFORM1FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1fARB")) == NULL) || r;
-  r = ((glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1fvARB")) == NULL) || r;
-  r = ((glUniform1iARB = (PFNGLUNIFORM1IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1iARB")) == NULL) || r;
-  r = ((glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform1ivARB")) == NULL) || r;
-  r = ((glUniform2fARB = (PFNGLUNIFORM2FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2fARB")) == NULL) || r;
-  r = ((glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2fvARB")) == NULL) || r;
-  r = ((glUniform2iARB = (PFNGLUNIFORM2IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2iARB")) == NULL) || r;
-  r = ((glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform2ivARB")) == NULL) || r;
-  r = ((glUniform3fARB = (PFNGLUNIFORM3FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3fARB")) == NULL) || r;
-  r = ((glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3fvARB")) == NULL) || r;
-  r = ((glUniform3iARB = (PFNGLUNIFORM3IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3iARB")) == NULL) || r;
-  r = ((glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform3ivARB")) == NULL) || r;
-  r = ((glUniform4fARB = (PFNGLUNIFORM4FARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4fARB")) == NULL) || r;
-  r = ((glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4fvARB")) == NULL) || r;
-  r = ((glUniform4iARB = (PFNGLUNIFORM4IARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4iARB")) == NULL) || r;
-  r = ((glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)glewGetProcAddress((const GLubyte*)"glUniform4ivARB")) == NULL) || r;
-  r = ((glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix2fvARB")) == NULL) || r;
-  r = ((glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix3fvARB")) == NULL) || r;
-  r = ((glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)glewGetProcAddress((const GLubyte*)"glUniformMatrix4fvARB")) == NULL) || r;
-  r = ((glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)glewGetProcAddress((const GLubyte*)"glUseProgramObjectARB")) == NULL) || r;
-  r = ((glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glValidateProgramARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_shader_objects */
-
-#ifdef GL_ARB_shading_language_100
-
-#endif /* GL_ARB_shading_language_100 */
-
-#ifdef GL_ARB_shadow
-
-#endif /* GL_ARB_shadow */
-
-#ifdef GL_ARB_shadow_ambient
-
-#endif /* GL_ARB_shadow_ambient */
-
-#ifdef GL_ARB_texture_border_clamp
-
-#endif /* GL_ARB_texture_border_clamp */
-
-#ifdef GL_ARB_texture_compression
-
-static GLboolean _glewInit_GL_ARB_texture_compression (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage1DARB")) == NULL) || r;
-  r = ((glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage2DARB")) == NULL) || r;
-  r = ((glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexImage3DARB")) == NULL) || r;
-  r = ((glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage1DARB")) == NULL) || r;
-  r = ((glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage2DARB")) == NULL) || r;
-  r = ((glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)glewGetProcAddress((const GLubyte*)"glCompressedTexSubImage3DARB")) == NULL) || r;
-  r = ((glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)glewGetProcAddress((const GLubyte*)"glGetCompressedTexImageARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_texture_compression */
-
-#ifdef GL_ARB_texture_cube_map
-
-#endif /* GL_ARB_texture_cube_map */
-
-#ifdef GL_ARB_texture_env_add
-
-#endif /* GL_ARB_texture_env_add */
-
-#ifdef GL_ARB_texture_env_combine
-
-#endif /* GL_ARB_texture_env_combine */
-
-#ifdef GL_ARB_texture_env_crossbar
-
-#endif /* GL_ARB_texture_env_crossbar */
-
-#ifdef GL_ARB_texture_env_dot3
-
-#endif /* GL_ARB_texture_env_dot3 */
-
-#ifdef GL_ARB_texture_float
-
-#endif /* GL_ARB_texture_float */
-
-#ifdef GL_ARB_texture_mirrored_repeat
-
-#endif /* GL_ARB_texture_mirrored_repeat */
-
-#ifdef GL_ARB_texture_non_power_of_two
-
-#endif /* GL_ARB_texture_non_power_of_two */
-
-#ifdef GL_ARB_texture_rectangle
-
-#endif /* GL_ARB_texture_rectangle */
-
-#ifdef GL_ARB_transpose_matrix
-
-static GLboolean _glewInit_GL_ARB_transpose_matrix (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixdARB")) == NULL) || r;
-  r = ((glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)glewGetProcAddress((const GLubyte*)"glLoadTransposeMatrixfARB")) == NULL) || r;
-  r = ((glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixdARB")) == NULL) || r;
-  r = ((glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)glewGetProcAddress((const GLubyte*)"glMultTransposeMatrixfARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_transpose_matrix */
-
-#ifdef GL_ARB_vertex_blend
-
-static GLboolean _glewInit_GL_ARB_vertex_blend (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)glewGetProcAddress((const GLubyte*)"glVertexBlendARB")) == NULL) || r;
-  r = ((glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)glewGetProcAddress((const GLubyte*)"glWeightPointerARB")) == NULL) || r;
-  r = ((glWeightbvARB = (PFNGLWEIGHTBVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightbvARB")) == NULL) || r;
-  r = ((glWeightdvARB = (PFNGLWEIGHTDVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightdvARB")) == NULL) || r;
-  r = ((glWeightfvARB = (PFNGLWEIGHTFVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightfvARB")) == NULL) || r;
-  r = ((glWeightivARB = (PFNGLWEIGHTIVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightivARB")) == NULL) || r;
-  r = ((glWeightsvARB = (PFNGLWEIGHTSVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightsvARB")) == NULL) || r;
-  r = ((glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightubvARB")) == NULL) || r;
-  r = ((glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightuivARB")) == NULL) || r;
-  r = ((glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)glewGetProcAddress((const GLubyte*)"glWeightusvARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_vertex_blend */
-
-#ifdef GL_ARB_vertex_buffer_object
-
-static GLboolean _glewInit_GL_ARB_vertex_buffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBindBufferARB = (PFNGLBINDBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glBindBufferARB")) == NULL) || r;
-  r = ((glBufferDataARB = (PFNGLBUFFERDATAARBPROC)glewGetProcAddress((const GLubyte*)"glBufferDataARB")) == NULL) || r;
-  r = ((glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)glewGetProcAddress((const GLubyte*)"glBufferSubDataARB")) == NULL) || r;
-  r = ((glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteBuffersARB")) == NULL) || r;
-  r = ((glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)glewGetProcAddress((const GLubyte*)"glGenBuffersARB")) == NULL) || r;
-  r = ((glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetBufferParameterivARB")) == NULL) || r;
-  r = ((glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)glewGetProcAddress((const GLubyte*)"glGetBufferPointervARB")) == NULL) || r;
-  r = ((glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)glewGetProcAddress((const GLubyte*)"glGetBufferSubDataARB")) == NULL) || r;
-  r = ((glIsBufferARB = (PFNGLISBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glIsBufferARB")) == NULL) || r;
-  r = ((glMapBufferARB = (PFNGLMAPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glMapBufferARB")) == NULL) || r;
-  r = ((glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"glUnmapBufferARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_vertex_buffer_object */
-
-#ifdef GL_ARB_vertex_program
-
-static GLboolean _glewInit_GL_ARB_vertex_program (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glBindProgramARB")) == NULL) || r;
-  r = ((glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)glewGetProcAddress((const GLubyte*)"glDeleteProgramsARB")) == NULL) || r;
-  r = ((glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)glewGetProcAddress((const GLubyte*)"glDisableVertexAttribArrayARB")) == NULL) || r;
-  r = ((glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)glewGetProcAddress((const GLubyte*)"glEnableVertexAttribArrayARB")) == NULL) || r;
-  r = ((glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)glewGetProcAddress((const GLubyte*)"glGenProgramsARB")) == NULL) || r;
-  r = ((glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramEnvParameterdvARB")) == NULL) || r;
-  r = ((glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramEnvParameterfvARB")) == NULL) || r;
-  r = ((glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramLocalParameterdvARB")) == NULL) || r;
-  r = ((glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramLocalParameterfvARB")) == NULL) || r;
-  r = ((glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramStringARB")) == NULL) || r;
-  r = ((glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetProgramivARB")) == NULL) || r;
-  r = ((glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribPointervARB")) == NULL) || r;
-  r = ((glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribdvARB")) == NULL) || r;
-  r = ((glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribfvARB")) == NULL) || r;
-  r = ((glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribivARB")) == NULL) || r;
-  r = ((glIsProgramARB = (PFNGLISPROGRAMARBPROC)glewGetProcAddress((const GLubyte*)"glIsProgramARB")) == NULL) || r;
-  r = ((glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4dARB")) == NULL) || r;
-  r = ((glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4dvARB")) == NULL) || r;
-  r = ((glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4fARB")) == NULL) || r;
-  r = ((glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameter4fvARB")) == NULL) || r;
-  r = ((glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4dARB")) == NULL) || r;
-  r = ((glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4dvARB")) == NULL) || r;
-  r = ((glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4fARB")) == NULL) || r;
-  r = ((glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameter4fvARB")) == NULL) || r;
-  r = ((glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"glProgramStringARB")) == NULL) || r;
-  r = ((glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dARB")) == NULL) || r;
-  r = ((glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dvARB")) == NULL) || r;
-  r = ((glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fARB")) == NULL) || r;
-  r = ((glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fvARB")) == NULL) || r;
-  r = ((glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1sARB")) == NULL) || r;
-  r = ((glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1svARB")) == NULL) || r;
-  r = ((glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dARB")) == NULL) || r;
-  r = ((glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dvARB")) == NULL) || r;
-  r = ((glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fARB")) == NULL) || r;
-  r = ((glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fvARB")) == NULL) || r;
-  r = ((glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2sARB")) == NULL) || r;
-  r = ((glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2svARB")) == NULL) || r;
-  r = ((glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dARB")) == NULL) || r;
-  r = ((glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dvARB")) == NULL) || r;
-  r = ((glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fARB")) == NULL) || r;
-  r = ((glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fvARB")) == NULL) || r;
-  r = ((glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3sARB")) == NULL) || r;
-  r = ((glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3svARB")) == NULL) || r;
-  r = ((glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NbvARB")) == NULL) || r;
-  r = ((glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NivARB")) == NULL) || r;
-  r = ((glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NsvARB")) == NULL) || r;
-  r = ((glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NubARB")) == NULL) || r;
-  r = ((glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NubvARB")) == NULL) || r;
-  r = ((glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NuivARB")) == NULL) || r;
-  r = ((glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4NusvARB")) == NULL) || r;
-  r = ((glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4bvARB")) == NULL) || r;
-  r = ((glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dARB")) == NULL) || r;
-  r = ((glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dvARB")) == NULL) || r;
-  r = ((glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fARB")) == NULL) || r;
-  r = ((glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fvARB")) == NULL) || r;
-  r = ((glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ivARB")) == NULL) || r;
-  r = ((glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4sARB")) == NULL) || r;
-  r = ((glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4svARB")) == NULL) || r;
-  r = ((glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubvARB")) == NULL) || r;
-  r = ((glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4uivARB")) == NULL) || r;
-  r = ((glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4usvARB")) == NULL) || r;
-  r = ((glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribPointerARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_vertex_program */
-
-#ifdef GL_ARB_vertex_shader
-
-static GLboolean _glewInit_GL_ARB_vertex_shader (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)glewGetProcAddress((const GLubyte*)"glBindAttribLocationARB")) == NULL) || r;
-  r = ((glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)glewGetProcAddress((const GLubyte*)"glGetActiveAttribARB")) == NULL) || r;
-  r = ((glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)glewGetProcAddress((const GLubyte*)"glGetAttribLocationARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_vertex_shader */
-
-#ifdef GL_ARB_window_pos
-
-static GLboolean _glewInit_GL_ARB_window_pos (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dARB")) == NULL) || r;
-  r = ((glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dvARB")) == NULL) || r;
-  r = ((glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fARB")) == NULL) || r;
-  r = ((glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fvARB")) == NULL) || r;
-  r = ((glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2iARB")) == NULL) || r;
-  r = ((glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2ivARB")) == NULL) || r;
-  r = ((glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2sARB")) == NULL) || r;
-  r = ((glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2svARB")) == NULL) || r;
-  r = ((glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dARB")) == NULL) || r;
-  r = ((glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dvARB")) == NULL) || r;
-  r = ((glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fARB")) == NULL) || r;
-  r = ((glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fvARB")) == NULL) || r;
-  r = ((glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3iARB")) == NULL) || r;
-  r = ((glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3ivARB")) == NULL) || r;
-  r = ((glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3sARB")) == NULL) || r;
-  r = ((glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3svARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ARB_window_pos */
-
-#ifdef GL_ATIX_point_sprites
-
-#endif /* GL_ATIX_point_sprites */
-
-#ifdef GL_ATIX_texture_env_combine3
-
-#endif /* GL_ATIX_texture_env_combine3 */
-
-#ifdef GL_ATIX_texture_env_route
-
-#endif /* GL_ATIX_texture_env_route */
-
-#ifdef GL_ATIX_vertex_shader_output_point_size
-
-#endif /* GL_ATIX_vertex_shader_output_point_size */
-
-#ifdef GL_ATI_draw_buffers
-
-static GLboolean _glewInit_GL_ATI_draw_buffers (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)glewGetProcAddress((const GLubyte*)"glDrawBuffersATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_draw_buffers */
-
-#ifdef GL_ATI_element_array
-
-static GLboolean _glewInit_GL_ATI_element_array (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)glewGetProcAddress((const GLubyte*)"glDrawElementArrayATI")) == NULL) || r;
-  r = ((glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElementArrayATI")) == NULL) || r;
-  r = ((glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)glewGetProcAddress((const GLubyte*)"glElementPointerATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_element_array */
-
-#ifdef GL_ATI_envmap_bumpmap
-
-static GLboolean _glewInit_GL_ATI_envmap_bumpmap (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetTexBumpParameterfvATI")) == NULL) || r;
-  r = ((glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetTexBumpParameterivATI")) == NULL) || r;
-  r = ((glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)glewGetProcAddress((const GLubyte*)"glTexBumpParameterfvATI")) == NULL) || r;
-  r = ((glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)glewGetProcAddress((const GLubyte*)"glTexBumpParameterivATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_envmap_bumpmap */
-
-#ifdef GL_ATI_fragment_shader
-
-static GLboolean _glewInit_GL_ATI_fragment_shader (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)glewGetProcAddress((const GLubyte*)"glAlphaFragmentOp1ATI")) == NULL) || r;
-  r = ((glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)glewGetProcAddress((const GLubyte*)"glAlphaFragmentOp2ATI")) == NULL) || r;
-  r = ((glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)glewGetProcAddress((const GLubyte*)"glAlphaFragmentOp3ATI")) == NULL) || r;
-  r = ((glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glBeginFragmentShaderATI")) == NULL) || r;
-  r = ((glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glBindFragmentShaderATI")) == NULL) || r;
-  r = ((glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)glewGetProcAddress((const GLubyte*)"glColorFragmentOp1ATI")) == NULL) || r;
-  r = ((glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)glewGetProcAddress((const GLubyte*)"glColorFragmentOp2ATI")) == NULL) || r;
-  r = ((glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)glewGetProcAddress((const GLubyte*)"glColorFragmentOp3ATI")) == NULL) || r;
-  r = ((glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glDeleteFragmentShaderATI")) == NULL) || r;
-  r = ((glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)glewGetProcAddress((const GLubyte*)"glEndFragmentShaderATI")) == NULL) || r;
-  r = ((glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)glewGetProcAddress((const GLubyte*)"glGenFragmentShadersATI")) == NULL) || r;
-  r = ((glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)glewGetProcAddress((const GLubyte*)"glPassTexCoordATI")) == NULL) || r;
-  r = ((glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)glewGetProcAddress((const GLubyte*)"glSampleMapATI")) == NULL) || r;
-  r = ((glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)glewGetProcAddress((const GLubyte*)"glSetFragmentShaderConstantATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_fragment_shader */
-
-#ifdef GL_ATI_map_object_buffer
-
-static GLboolean _glewInit_GL_ATI_map_object_buffer (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glMapObjectBufferATI")) == NULL) || r;
-  r = ((glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glUnmapObjectBufferATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_map_object_buffer */
-
-#ifdef GL_ATI_pn_triangles
-
-static GLboolean _glewInit_GL_ATI_pn_triangles (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)glewGetProcAddress((const GLubyte*)"glPNTrianglesfATI")) == NULL) || r;
-  r = ((glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)glewGetProcAddress((const GLubyte*)"glPNTrianglesiATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_pn_triangles */
-
-#ifdef GL_ATI_separate_stencil
-
-static GLboolean _glewInit_GL_ATI_separate_stencil (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)glewGetProcAddress((const GLubyte*)"glStencilFuncSeparateATI")) == NULL) || r;
-  r = ((glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)glewGetProcAddress((const GLubyte*)"glStencilOpSeparateATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_separate_stencil */
-
-#ifdef GL_ATI_shader_texture_lod
-
-#endif /* GL_ATI_shader_texture_lod */
-
-#ifdef GL_ATI_text_fragment_shader
-
-#endif /* GL_ATI_text_fragment_shader */
-
-#ifdef GL_ATI_texture_compression_3dc
-
-#endif /* GL_ATI_texture_compression_3dc */
-
-#ifdef GL_ATI_texture_env_combine3
-
-#endif /* GL_ATI_texture_env_combine3 */
-
-#ifdef GL_ATI_texture_float
-
-#endif /* GL_ATI_texture_float */
-
-#ifdef GL_ATI_texture_mirror_once
-
-#endif /* GL_ATI_texture_mirror_once */
-
-#ifdef GL_ATI_vertex_array_object
-
-static GLboolean _glewInit_GL_ATI_vertex_array_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)glewGetProcAddress((const GLubyte*)"glArrayObjectATI")) == NULL) || r;
-  r = ((glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glFreeObjectBufferATI")) == NULL) || r;
-  r = ((glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetArrayObjectfvATI")) == NULL) || r;
-  r = ((glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetArrayObjectivATI")) == NULL) || r;
-  r = ((glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetObjectBufferfvATI")) == NULL) || r;
-  r = ((glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetObjectBufferivATI")) == NULL) || r;
-  r = ((glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVariantArrayObjectfvATI")) == NULL) || r;
-  r = ((glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVariantArrayObjectivATI")) == NULL) || r;
-  r = ((glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glIsObjectBufferATI")) == NULL) || r;
-  r = ((glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glNewObjectBufferATI")) == NULL) || r;
-  r = ((glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)glewGetProcAddress((const GLubyte*)"glUpdateObjectBufferATI")) == NULL) || r;
-  r = ((glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)glewGetProcAddress((const GLubyte*)"glVariantArrayObjectATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_vertex_array_object */
-
-#ifdef GL_ATI_vertex_attrib_array_object
-
-static GLboolean _glewInit_GL_ATI_vertex_attrib_array_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribArrayObjectfvATI")) == NULL) || r;
-  r = ((glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribArrayObjectivATI")) == NULL) || r;
-  r = ((glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribArrayObjectATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_vertex_attrib_array_object */
-
-#ifdef GL_ATI_vertex_streams
-
-static GLboolean _glewInit_GL_ATI_vertex_streams (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)glewGetProcAddress((const GLubyte*)"glClientActiveVertexStreamATI")) == NULL) || r;
-  r = ((glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3bATI")) == NULL) || r;
-  r = ((glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3bvATI")) == NULL) || r;
-  r = ((glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3dATI")) == NULL) || r;
-  r = ((glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3dvATI")) == NULL) || r;
-  r = ((glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3fATI")) == NULL) || r;
-  r = ((glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3fvATI")) == NULL) || r;
-  r = ((glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3iATI")) == NULL) || r;
-  r = ((glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3ivATI")) == NULL) || r;
-  r = ((glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3sATI")) == NULL) || r;
-  r = ((glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)glewGetProcAddress((const GLubyte*)"glNormalStream3svATI")) == NULL) || r;
-  r = ((glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)glewGetProcAddress((const GLubyte*)"glVertexBlendEnvfATI")) == NULL) || r;
-  r = ((glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)glewGetProcAddress((const GLubyte*)"glVertexBlendEnviATI")) == NULL) || r;
-  r = ((glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2dATI")) == NULL) || r;
-  r = ((glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2dvATI")) == NULL) || r;
-  r = ((glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2fATI")) == NULL) || r;
-  r = ((glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2fvATI")) == NULL) || r;
-  r = ((glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2iATI")) == NULL) || r;
-  r = ((glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2ivATI")) == NULL) || r;
-  r = ((glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2sATI")) == NULL) || r;
-  r = ((glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream2svATI")) == NULL) || r;
-  r = ((glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3dATI")) == NULL) || r;
-  r = ((glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3dvATI")) == NULL) || r;
-  r = ((glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3fATI")) == NULL) || r;
-  r = ((glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3fvATI")) == NULL) || r;
-  r = ((glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3iATI")) == NULL) || r;
-  r = ((glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3ivATI")) == NULL) || r;
-  r = ((glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3sATI")) == NULL) || r;
-  r = ((glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream3svATI")) == NULL) || r;
-  r = ((glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4dATI")) == NULL) || r;
-  r = ((glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4dvATI")) == NULL) || r;
-  r = ((glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4fATI")) == NULL) || r;
-  r = ((glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4fvATI")) == NULL) || r;
-  r = ((glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4iATI")) == NULL) || r;
-  r = ((glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4ivATI")) == NULL) || r;
-  r = ((glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4sATI")) == NULL) || r;
-  r = ((glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)glewGetProcAddress((const GLubyte*)"glVertexStream4svATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_ATI_vertex_streams */
-
-#ifdef GL_EXT_422_pixels
-
-#endif /* GL_EXT_422_pixels */
-
-#ifdef GL_EXT_Cg_shader
-
-#endif /* GL_EXT_Cg_shader */
-
-#ifdef GL_EXT_abgr
-
-#endif /* GL_EXT_abgr */
-
-#ifdef GL_EXT_bgra
-
-#endif /* GL_EXT_bgra */
-
-#ifdef GL_EXT_bindable_uniform
-
-static GLboolean _glewInit_GL_EXT_bindable_uniform (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)glewGetProcAddress((const GLubyte*)"glGetUniformBufferSizeEXT")) == NULL) || r;
-  r = ((glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)glewGetProcAddress((const GLubyte*)"glGetUniformOffsetEXT")) == NULL) || r;
-  r = ((glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glUniformBufferEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_bindable_uniform */
-
-#ifdef GL_EXT_blend_color
-
-static GLboolean _glewInit_GL_EXT_blend_color (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)glewGetProcAddress((const GLubyte*)"glBlendColorEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_blend_color */
-
-#ifdef GL_EXT_blend_equation_separate
-
-static GLboolean _glewInit_GL_EXT_blend_equation_separate (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)glewGetProcAddress((const GLubyte*)"glBlendEquationSeparateEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_blend_equation_separate */
-
-#ifdef GL_EXT_blend_func_separate
-
-static GLboolean _glewInit_GL_EXT_blend_func_separate (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)glewGetProcAddress((const GLubyte*)"glBlendFuncSeparateEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_blend_func_separate */
-
-#ifdef GL_EXT_blend_logic_op
-
-#endif /* GL_EXT_blend_logic_op */
-
-#ifdef GL_EXT_blend_minmax
-
-static GLboolean _glewInit_GL_EXT_blend_minmax (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)glewGetProcAddress((const GLubyte*)"glBlendEquationEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_blend_minmax */
-
-#ifdef GL_EXT_blend_subtract
-
-#endif /* GL_EXT_blend_subtract */
-
-#ifdef GL_EXT_clip_volume_hint
-
-#endif /* GL_EXT_clip_volume_hint */
-
-#ifdef GL_EXT_cmyka
-
-#endif /* GL_EXT_cmyka */
-
-#ifdef GL_EXT_color_subtable
-
-static GLboolean _glewInit_GL_EXT_color_subtable (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glColorSubTableEXT")) == NULL) || r;
-  r = ((glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyColorSubTableEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_color_subtable */
-
-#ifdef GL_EXT_compiled_vertex_array
-
-static GLboolean _glewInit_GL_EXT_compiled_vertex_array (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glLockArraysEXT")) == NULL) || r;
-  r = ((glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glUnlockArraysEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_compiled_vertex_array */
-
-#ifdef GL_EXT_convolution
-
-static GLboolean _glewInit_GL_EXT_convolution (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter1DEXT")) == NULL) || r;
-  r = ((glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionFilter2DEXT")) == NULL) || r;
-  r = ((glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterfEXT")) == NULL) || r;
-  r = ((glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterfvEXT")) == NULL) || r;
-  r = ((glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameteriEXT")) == NULL) || r;
-  r = ((glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glConvolutionParameterivEXT")) == NULL) || r;
-  r = ((glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter1DEXT")) == NULL) || r;
-  r = ((glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyConvolutionFilter2DEXT")) == NULL) || r;
-  r = ((glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionFilterEXT")) == NULL) || r;
-  r = ((glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameterfvEXT")) == NULL) || r;
-  r = ((glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetConvolutionParameterivEXT")) == NULL) || r;
-  r = ((glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)glewGetProcAddress((const GLubyte*)"glGetSeparableFilterEXT")) == NULL) || r;
-  r = ((glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)glewGetProcAddress((const GLubyte*)"glSeparableFilter2DEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_convolution */
-
-#ifdef GL_EXT_coordinate_frame
-
-static GLboolean _glewInit_GL_EXT_coordinate_frame (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glBinormalPointerEXT")) == NULL) || r;
-  r = ((glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glTangentPointerEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_coordinate_frame */
-
-#ifdef GL_EXT_copy_texture
-
-static GLboolean _glewInit_GL_EXT_copy_texture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexImage1DEXT")) == NULL) || r;
-  r = ((glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexImage2DEXT")) == NULL) || r;
-  r = ((glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage1DEXT")) == NULL) || r;
-  r = ((glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage2DEXT")) == NULL) || r;
-  r = ((glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glCopyTexSubImage3DEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_copy_texture */
-
-#ifdef GL_EXT_cull_vertex
-
-static GLboolean _glewInit_GL_EXT_cull_vertex (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)glewGetProcAddress((const GLubyte*)"glCullParameterdvEXT")) == NULL) || r;
-  r = ((glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glCullParameterfvEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_cull_vertex */
-
-#ifdef GL_EXT_depth_bounds_test
-
-static GLboolean _glewInit_GL_EXT_depth_bounds_test (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)glewGetProcAddress((const GLubyte*)"glDepthBoundsEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_depth_bounds_test */
-
-#ifdef GL_EXT_draw_buffers2
-
-static GLboolean _glewInit_GL_EXT_draw_buffers2 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glColorMaskIndexedEXT")) == NULL) || r;
-  r = ((glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glDisableIndexedEXT")) == NULL) || r;
-  r = ((glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glEnableIndexedEXT")) == NULL) || r;
-  r = ((glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetBooleanIndexedvEXT")) == NULL) || r;
-  r = ((glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetIntegerIndexedvEXT")) == NULL) || r;
-  r = ((glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)glewGetProcAddress((const GLubyte*)"glIsEnabledIndexedEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_draw_buffers2 */
-
-#ifdef GL_EXT_draw_instanced
-
-static GLboolean _glewInit_GL_EXT_draw_instanced (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawArraysInstancedEXT")) == NULL) || r;
-  r = ((glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawElementsInstancedEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_draw_instanced */
-
-#ifdef GL_EXT_draw_range_elements
-
-static GLboolean _glewInit_GL_EXT_draw_range_elements (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawRangeElementsEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_draw_range_elements */
-
-#ifdef GL_EXT_fog_coord
-
-static GLboolean _glewInit_GL_EXT_fog_coord (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoordPointerEXT")) == NULL) || r;
-  r = ((glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoorddEXT")) == NULL) || r;
-  r = ((glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoorddvEXT")) == NULL) || r;
-  r = ((glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoordfEXT")) == NULL) || r;
-  r = ((glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFogCoordfvEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_fog_coord */
-
-#ifdef GL_EXT_fragment_lighting
-
-static GLboolean _glewInit_GL_EXT_fragment_lighting (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFragmentColorMaterialEXT = (PFNGLFRAGMENTCOLORMATERIALEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentColorMaterialEXT")) == NULL) || r;
-  r = ((glFragmentLightModelfEXT = (PFNGLFRAGMENTLIGHTMODELFEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfEXT")) == NULL) || r;
-  r = ((glFragmentLightModelfvEXT = (PFNGLFRAGMENTLIGHTMODELFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfvEXT")) == NULL) || r;
-  r = ((glFragmentLightModeliEXT = (PFNGLFRAGMENTLIGHTMODELIEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModeliEXT")) == NULL) || r;
-  r = ((glFragmentLightModelivEXT = (PFNGLFRAGMENTLIGHTMODELIVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelivEXT")) == NULL) || r;
-  r = ((glFragmentLightfEXT = (PFNGLFRAGMENTLIGHTFEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfEXT")) == NULL) || r;
-  r = ((glFragmentLightfvEXT = (PFNGLFRAGMENTLIGHTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfvEXT")) == NULL) || r;
-  r = ((glFragmentLightiEXT = (PFNGLFRAGMENTLIGHTIEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightiEXT")) == NULL) || r;
-  r = ((glFragmentLightivEXT = (PFNGLFRAGMENTLIGHTIVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightivEXT")) == NULL) || r;
-  r = ((glFragmentMaterialfEXT = (PFNGLFRAGMENTMATERIALFEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfEXT")) == NULL) || r;
-  r = ((glFragmentMaterialfvEXT = (PFNGLFRAGMENTMATERIALFVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfvEXT")) == NULL) || r;
-  r = ((glFragmentMaterialiEXT = (PFNGLFRAGMENTMATERIALIEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialiEXT")) == NULL) || r;
-  r = ((glFragmentMaterialivEXT = (PFNGLFRAGMENTMATERIALIVEXTPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialivEXT")) == NULL) || r;
-  r = ((glGetFragmentLightfvEXT = (PFNGLGETFRAGMENTLIGHTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightfvEXT")) == NULL) || r;
-  r = ((glGetFragmentLightivEXT = (PFNGLGETFRAGMENTLIGHTIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightivEXT")) == NULL) || r;
-  r = ((glGetFragmentMaterialfvEXT = (PFNGLGETFRAGMENTMATERIALFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialfvEXT")) == NULL) || r;
-  r = ((glGetFragmentMaterialivEXT = (PFNGLGETFRAGMENTMATERIALIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialivEXT")) == NULL) || r;
-  r = ((glLightEnviEXT = (PFNGLLIGHTENVIEXTPROC)glewGetProcAddress((const GLubyte*)"glLightEnviEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_fragment_lighting */
-
-#ifdef GL_EXT_framebuffer_blit
-
-static GLboolean _glewInit_GL_EXT_framebuffer_blit (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glBlitFramebufferEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_framebuffer_blit */
-
-#ifdef GL_EXT_framebuffer_multisample
-
-static GLboolean _glewInit_GL_EXT_framebuffer_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)glewGetProcAddress((const GLubyte*)"glRenderbufferStorageMultisampleEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_framebuffer_multisample */
-
-#ifdef GL_EXT_framebuffer_object
-
-static GLboolean _glewInit_GL_EXT_framebuffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindFramebufferEXT")) == NULL) || r;
-  r = ((glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindRenderbufferEXT")) == NULL) || r;
-  r = ((glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)glewGetProcAddress((const GLubyte*)"glCheckFramebufferStatusEXT")) == NULL) || r;
-  r = ((glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteFramebuffersEXT")) == NULL) || r;
-  r = ((glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteRenderbuffersEXT")) == NULL) || r;
-  r = ((glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferRenderbufferEXT")) == NULL) || r;
-  r = ((glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTexture1DEXT")) == NULL) || r;
-  r = ((glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTexture2DEXT")) == NULL) || r;
-  r = ((glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTexture3DEXT")) == NULL) || r;
-  r = ((glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenFramebuffersEXT")) == NULL) || r;
-  r = ((glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenRenderbuffersEXT")) == NULL) || r;
-  r = ((glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)glewGetProcAddress((const GLubyte*)"glGenerateMipmapEXT")) == NULL) || r;
-  r = ((glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFramebufferAttachmentParameterivEXT")) == NULL) || r;
-  r = ((glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetRenderbufferParameterivEXT")) == NULL) || r;
-  r = ((glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glIsFramebufferEXT")) == NULL) || r;
-  r = ((glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glIsRenderbufferEXT")) == NULL) || r;
-  r = ((glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)glewGetProcAddress((const GLubyte*)"glRenderbufferStorageEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_framebuffer_object */
-
-#ifdef GL_EXT_framebuffer_sRGB
-
-#endif /* GL_EXT_framebuffer_sRGB */
-
-#ifdef GL_EXT_geometry_shader4
-
-static GLboolean _glewInit_GL_EXT_geometry_shader4 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTextureEXT")) == NULL) || r;
-  r = ((glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTextureFaceEXT")) == NULL) || r;
-  r = ((glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)glewGetProcAddress((const GLubyte*)"glFramebufferTextureLayerEXT")) == NULL) || r;
-  r = ((glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)glewGetProcAddress((const GLubyte*)"glProgramParameteriEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_geometry_shader4 */
-
-#ifdef GL_EXT_gpu_program_parameters
-
-static GLboolean _glewInit_GL_EXT_gpu_program_parameters (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameters4fvEXT")) == NULL) || r;
-  r = ((glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameters4fvEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_gpu_program_parameters */
-
-#ifdef GL_EXT_gpu_shader4
-
-static GLboolean _glewInit_GL_EXT_gpu_shader4 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)glewGetProcAddress((const GLubyte*)"glBindFragDataLocationEXT")) == NULL) || r;
-  r = ((glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)glewGetProcAddress((const GLubyte*)"glGetFragDataLocationEXT")) == NULL) || r;
-  r = ((glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetUniformuivEXT")) == NULL) || r;
-  r = ((glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribIivEXT")) == NULL) || r;
-  r = ((glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribIuivEXT")) == NULL) || r;
-  r = ((glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform1uiEXT")) == NULL) || r;
-  r = ((glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform1uivEXT")) == NULL) || r;
-  r = ((glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform2uiEXT")) == NULL) || r;
-  r = ((glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform2uivEXT")) == NULL) || r;
-  r = ((glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform3uiEXT")) == NULL) || r;
-  r = ((glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform3uivEXT")) == NULL) || r;
-  r = ((glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform4uiEXT")) == NULL) || r;
-  r = ((glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glUniform4uivEXT")) == NULL) || r;
-  r = ((glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1iEXT")) == NULL) || r;
-  r = ((glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1ivEXT")) == NULL) || r;
-  r = ((glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1uiEXT")) == NULL) || r;
-  r = ((glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI1uivEXT")) == NULL) || r;
-  r = ((glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2iEXT")) == NULL) || r;
-  r = ((glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2ivEXT")) == NULL) || r;
-  r = ((glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2uiEXT")) == NULL) || r;
-  r = ((glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI2uivEXT")) == NULL) || r;
-  r = ((glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3iEXT")) == NULL) || r;
-  r = ((glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3ivEXT")) == NULL) || r;
-  r = ((glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3uiEXT")) == NULL) || r;
-  r = ((glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI3uivEXT")) == NULL) || r;
-  r = ((glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4bvEXT")) == NULL) || r;
-  r = ((glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4iEXT")) == NULL) || r;
-  r = ((glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4ivEXT")) == NULL) || r;
-  r = ((glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4svEXT")) == NULL) || r;
-  r = ((glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4ubvEXT")) == NULL) || r;
-  r = ((glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4uiEXT")) == NULL) || r;
-  r = ((glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4uivEXT")) == NULL) || r;
-  r = ((glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribI4usvEXT")) == NULL) || r;
-  r = ((glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribIPointerEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_gpu_shader4 */
-
-#ifdef GL_EXT_histogram
-
-static GLboolean _glewInit_GL_EXT_histogram (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramEXT")) == NULL) || r;
-  r = ((glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameterfvEXT")) == NULL) || r;
-  r = ((glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetHistogramParameterivEXT")) == NULL) || r;
-  r = ((glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxEXT")) == NULL) || r;
-  r = ((glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameterfvEXT")) == NULL) || r;
-  r = ((glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetMinmaxParameterivEXT")) == NULL) || r;
-  r = ((glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)glewGetProcAddress((const GLubyte*)"glHistogramEXT")) == NULL) || r;
-  r = ((glMinmaxEXT = (PFNGLMINMAXEXTPROC)glewGetProcAddress((const GLubyte*)"glMinmaxEXT")) == NULL) || r;
-  r = ((glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)glewGetProcAddress((const GLubyte*)"glResetHistogramEXT")) == NULL) || r;
-  r = ((glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)glewGetProcAddress((const GLubyte*)"glResetMinmaxEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_histogram */
-
-#ifdef GL_EXT_index_array_formats
-
-#endif /* GL_EXT_index_array_formats */
-
-#ifdef GL_EXT_index_func
-
-static GLboolean _glewInit_GL_EXT_index_func (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)glewGetProcAddress((const GLubyte*)"glIndexFuncEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_index_func */
-
-#ifdef GL_EXT_index_material
-
-static GLboolean _glewInit_GL_EXT_index_material (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)glewGetProcAddress((const GLubyte*)"glIndexMaterialEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_index_material */
-
-#ifdef GL_EXT_index_texture
-
-#endif /* GL_EXT_index_texture */
-
-#ifdef GL_EXT_light_texture
-
-static GLboolean _glewInit_GL_EXT_light_texture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glApplyTextureEXT")) == NULL) || r;
-  r = ((glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)glewGetProcAddress((const GLubyte*)"glTextureLightEXT")) == NULL) || r;
-  r = ((glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)glewGetProcAddress((const GLubyte*)"glTextureMaterialEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_light_texture */
-
-#ifdef GL_EXT_misc_attribute
-
-#endif /* GL_EXT_misc_attribute */
-
-#ifdef GL_EXT_multi_draw_arrays
-
-static GLboolean _glewInit_GL_EXT_multi_draw_arrays (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawArraysEXT")) == NULL) || r;
-  r = ((glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)glewGetProcAddress((const GLubyte*)"glMultiDrawElementsEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_multi_draw_arrays */
-
-#ifdef GL_EXT_multisample
-
-static GLboolean _glewInit_GL_EXT_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)glewGetProcAddress((const GLubyte*)"glSampleMaskEXT")) == NULL) || r;
-  r = ((glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)glewGetProcAddress((const GLubyte*)"glSamplePatternEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_multisample */
-
-#ifdef GL_EXT_packed_depth_stencil
-
-#endif /* GL_EXT_packed_depth_stencil */
-
-#ifdef GL_EXT_packed_float
-
-#endif /* GL_EXT_packed_float */
-
-#ifdef GL_EXT_packed_pixels
-
-#endif /* GL_EXT_packed_pixels */
-
-#ifdef GL_EXT_paletted_texture
-
-static GLboolean _glewInit_GL_EXT_paletted_texture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glColorTableEXT")) == NULL) || r;
-  r = ((glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableEXT")) == NULL) || r;
-  r = ((glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterfvEXT")) == NULL) || r;
-  r = ((glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterivEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_paletted_texture */
-
-#ifdef GL_EXT_pixel_buffer_object
-
-#endif /* GL_EXT_pixel_buffer_object */
-
-#ifdef GL_EXT_pixel_transform
-
-static GLboolean _glewInit_GL_EXT_pixel_transform (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetPixelTransformParameterfvEXT")) == NULL) || r;
-  r = ((glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetPixelTransformParameterivEXT")) == NULL) || r;
-  r = ((glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameterfEXT")) == NULL) || r;
-  r = ((glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameterfvEXT")) == NULL) || r;
-  r = ((glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameteriEXT")) == NULL) || r;
-  r = ((glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)glewGetProcAddress((const GLubyte*)"glPixelTransformParameterivEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_pixel_transform */
-
-#ifdef GL_EXT_pixel_transform_color_table
-
-#endif /* GL_EXT_pixel_transform_color_table */
-
-#ifdef GL_EXT_point_parameters
-
-static GLboolean _glewInit_GL_EXT_point_parameters (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfEXT")) == NULL) || r;
-  r = ((glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)glewGetProcAddress((const GLubyte*)"glPointParameterfvEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_point_parameters */
-
-#ifdef GL_EXT_polygon_offset
-
-static GLboolean _glewInit_GL_EXT_polygon_offset (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)glewGetProcAddress((const GLubyte*)"glPolygonOffsetEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_polygon_offset */
-
-#ifdef GL_EXT_rescale_normal
-
-#endif /* GL_EXT_rescale_normal */
-
-#ifdef GL_EXT_scene_marker
-
-static GLboolean _glewInit_GL_EXT_scene_marker (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBeginSceneEXT = (PFNGLBEGINSCENEEXTPROC)glewGetProcAddress((const GLubyte*)"glBeginSceneEXT")) == NULL) || r;
-  r = ((glEndSceneEXT = (PFNGLENDSCENEEXTPROC)glewGetProcAddress((const GLubyte*)"glEndSceneEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_scene_marker */
-
-#ifdef GL_EXT_secondary_color
-
-static GLboolean _glewInit_GL_EXT_secondary_color (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3bEXT")) == NULL) || r;
-  r = ((glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3bvEXT")) == NULL) || r;
-  r = ((glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3dEXT")) == NULL) || r;
-  r = ((glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3dvEXT")) == NULL) || r;
-  r = ((glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3fEXT")) == NULL) || r;
-  r = ((glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3fvEXT")) == NULL) || r;
-  r = ((glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3iEXT")) == NULL) || r;
-  r = ((glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ivEXT")) == NULL) || r;
-  r = ((glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3sEXT")) == NULL) || r;
-  r = ((glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3svEXT")) == NULL) || r;
-  r = ((glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ubEXT")) == NULL) || r;
-  r = ((glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3ubvEXT")) == NULL) || r;
-  r = ((glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3uiEXT")) == NULL) || r;
-  r = ((glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3uivEXT")) == NULL) || r;
-  r = ((glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3usEXT")) == NULL) || r;
-  r = ((glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3usvEXT")) == NULL) || r;
-  r = ((glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColorPointerEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_secondary_color */
-
-#ifdef GL_EXT_separate_specular_color
-
-#endif /* GL_EXT_separate_specular_color */
-
-#ifdef GL_EXT_shadow_funcs
-
-#endif /* GL_EXT_shadow_funcs */
-
-#ifdef GL_EXT_shared_texture_palette
-
-#endif /* GL_EXT_shared_texture_palette */
-
-#ifdef GL_EXT_stencil_clear_tag
-
-#endif /* GL_EXT_stencil_clear_tag */
-
-#ifdef GL_EXT_stencil_two_side
-
-static GLboolean _glewInit_GL_EXT_stencil_two_side (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)glewGetProcAddress((const GLubyte*)"glActiveStencilFaceEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_stencil_two_side */
-
-#ifdef GL_EXT_stencil_wrap
-
-#endif /* GL_EXT_stencil_wrap */
-
-#ifdef GL_EXT_subtexture
-
-static GLboolean _glewInit_GL_EXT_subtexture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage1DEXT")) == NULL) || r;
-  r = ((glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage2DEXT")) == NULL) || r;
-  r = ((glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage3DEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_subtexture */
-
-#ifdef GL_EXT_texture
-
-#endif /* GL_EXT_texture */
-
-#ifdef GL_EXT_texture3D
-
-static GLboolean _glewInit_GL_EXT_texture3D (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)glewGetProcAddress((const GLubyte*)"glTexImage3DEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_texture3D */
-
-#ifdef GL_EXT_texture_array
-
-#endif /* GL_EXT_texture_array */
-
-#ifdef GL_EXT_texture_buffer_object
-
-static GLboolean _glewInit_GL_EXT_texture_buffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"glTexBufferEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_texture_buffer_object */
-
-#ifdef GL_EXT_texture_compression_dxt1
-
-#endif /* GL_EXT_texture_compression_dxt1 */
-
-#ifdef GL_EXT_texture_compression_latc
-
-#endif /* GL_EXT_texture_compression_latc */
-
-#ifdef GL_EXT_texture_compression_rgtc
-
-#endif /* GL_EXT_texture_compression_rgtc */
-
-#ifdef GL_EXT_texture_compression_s3tc
-
-#endif /* GL_EXT_texture_compression_s3tc */
-
-#ifdef GL_EXT_texture_cube_map
-
-#endif /* GL_EXT_texture_cube_map */
-
-#ifdef GL_EXT_texture_edge_clamp
-
-#endif /* GL_EXT_texture_edge_clamp */
-
-#ifdef GL_EXT_texture_env
-
-#endif /* GL_EXT_texture_env */
-
-#ifdef GL_EXT_texture_env_add
-
-#endif /* GL_EXT_texture_env_add */
-
-#ifdef GL_EXT_texture_env_combine
-
-#endif /* GL_EXT_texture_env_combine */
-
-#ifdef GL_EXT_texture_env_dot3
-
-#endif /* GL_EXT_texture_env_dot3 */
-
-#ifdef GL_EXT_texture_filter_anisotropic
-
-#endif /* GL_EXT_texture_filter_anisotropic */
-
-#ifdef GL_EXT_texture_integer
-
-static GLboolean _glewInit_GL_EXT_texture_integer (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)glewGetProcAddress((const GLubyte*)"glClearColorIiEXT")) == NULL) || r;
-  r = ((glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)glewGetProcAddress((const GLubyte*)"glClearColorIuiEXT")) == NULL) || r;
-  r = ((glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetTexParameterIivEXT")) == NULL) || r;
-  r = ((glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetTexParameterIuivEXT")) == NULL) || r;
-  r = ((glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)glewGetProcAddress((const GLubyte*)"glTexParameterIivEXT")) == NULL) || r;
-  r = ((glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glTexParameterIuivEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_texture_integer */
-
-#ifdef GL_EXT_texture_lod_bias
-
-#endif /* GL_EXT_texture_lod_bias */
-
-#ifdef GL_EXT_texture_mirror_clamp
-
-#endif /* GL_EXT_texture_mirror_clamp */
-
-#ifdef GL_EXT_texture_object
-
-static GLboolean _glewInit_GL_EXT_texture_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)glewGetProcAddress((const GLubyte*)"glAreTexturesResidentEXT")) == NULL) || r;
-  r = ((glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glBindTextureEXT")) == NULL) || r;
-  r = ((glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteTexturesEXT")) == NULL) || r;
-  r = ((glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)glewGetProcAddress((const GLubyte*)"glGenTexturesEXT")) == NULL) || r;
-  r = ((glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)glewGetProcAddress((const GLubyte*)"glIsTextureEXT")) == NULL) || r;
-  r = ((glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)glewGetProcAddress((const GLubyte*)"glPrioritizeTexturesEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_texture_object */
-
-#ifdef GL_EXT_texture_perturb_normal
-
-static GLboolean _glewInit_GL_EXT_texture_perturb_normal (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)glewGetProcAddress((const GLubyte*)"glTextureNormalEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_texture_perturb_normal */
-
-#ifdef GL_EXT_texture_rectangle
-
-#endif /* GL_EXT_texture_rectangle */
-
-#ifdef GL_EXT_texture_sRGB
-
-#endif /* GL_EXT_texture_sRGB */
-
-#ifdef GL_EXT_texture_shared_exponent
-
-#endif /* GL_EXT_texture_shared_exponent */
-
-#ifdef GL_EXT_timer_query
-
-static GLboolean _glewInit_GL_EXT_timer_query (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjecti64vEXT")) == NULL) || r;
-  r = ((glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)glewGetProcAddress((const GLubyte*)"glGetQueryObjectui64vEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_timer_query */
-
-#ifdef GL_EXT_vertex_array
-
-static GLboolean _glewInit_GL_EXT_vertex_array (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)glewGetProcAddress((const GLubyte*)"glArrayElementEXT")) == NULL) || r;
-  r = ((glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glColorPointerEXT")) == NULL) || r;
-  r = ((glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawArraysEXT")) == NULL) || r;
-  r = ((glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glEdgeFlagPointerEXT")) == NULL) || r;
-  r = ((glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetPointervEXT")) == NULL) || r;
-  r = ((glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glIndexPointerEXT")) == NULL) || r;
-  r = ((glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glNormalPointerEXT")) == NULL) || r;
-  r = ((glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glTexCoordPointerEXT")) == NULL) || r;
-  r = ((glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVertexPointerEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_vertex_array */
-
-#ifdef GL_EXT_vertex_shader
-
-static GLboolean _glewInit_GL_EXT_vertex_shader (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glBeginVertexShaderEXT")) == NULL) || r;
-  r = ((glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindLightParameterEXT")) == NULL) || r;
-  r = ((glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindMaterialParameterEXT")) == NULL) || r;
-  r = ((glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindParameterEXT")) == NULL) || r;
-  r = ((glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindTexGenParameterEXT")) == NULL) || r;
-  r = ((glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindTextureUnitParameterEXT")) == NULL) || r;
-  r = ((glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glBindVertexShaderEXT")) == NULL) || r;
-  r = ((glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteVertexShaderEXT")) == NULL) || r;
-  r = ((glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)glewGetProcAddress((const GLubyte*)"glDisableVariantClientStateEXT")) == NULL) || r;
-  r = ((glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)glewGetProcAddress((const GLubyte*)"glEnableVariantClientStateEXT")) == NULL) || r;
-  r = ((glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)glewGetProcAddress((const GLubyte*)"glEndVertexShaderEXT")) == NULL) || r;
-  r = ((glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)glewGetProcAddress((const GLubyte*)"glExtractComponentEXT")) == NULL) || r;
-  r = ((glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenSymbolsEXT")) == NULL) || r;
-  r = ((glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)glewGetProcAddress((const GLubyte*)"glGenVertexShadersEXT")) == NULL) || r;
-  r = ((glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetInvariantBooleanvEXT")) == NULL) || r;
-  r = ((glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetInvariantFloatvEXT")) == NULL) || r;
-  r = ((glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetInvariantIntegervEXT")) == NULL) || r;
-  r = ((glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetLocalConstantBooleanvEXT")) == NULL) || r;
-  r = ((glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetLocalConstantFloatvEXT")) == NULL) || r;
-  r = ((glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetLocalConstantIntegervEXT")) == NULL) || r;
-  r = ((glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantBooleanvEXT")) == NULL) || r;
-  r = ((glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantFloatvEXT")) == NULL) || r;
-  r = ((glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantIntegervEXT")) == NULL) || r;
-  r = ((glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)glewGetProcAddress((const GLubyte*)"glGetVariantPointervEXT")) == NULL) || r;
-  r = ((glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)glewGetProcAddress((const GLubyte*)"glInsertComponentEXT")) == NULL) || r;
-  r = ((glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)glewGetProcAddress((const GLubyte*)"glIsVariantEnabledEXT")) == NULL) || r;
-  r = ((glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)glewGetProcAddress((const GLubyte*)"glSetInvariantEXT")) == NULL) || r;
-  r = ((glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)glewGetProcAddress((const GLubyte*)"glSetLocalConstantEXT")) == NULL) || r;
-  r = ((glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)glewGetProcAddress((const GLubyte*)"glShaderOp1EXT")) == NULL) || r;
-  r = ((glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)glewGetProcAddress((const GLubyte*)"glShaderOp2EXT")) == NULL) || r;
-  r = ((glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)glewGetProcAddress((const GLubyte*)"glShaderOp3EXT")) == NULL) || r;
-  r = ((glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)glewGetProcAddress((const GLubyte*)"glSwizzleEXT")) == NULL) || r;
-  r = ((glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVariantPointerEXT")) == NULL) || r;
-  r = ((glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantbvEXT")) == NULL) || r;
-  r = ((glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantdvEXT")) == NULL) || r;
-  r = ((glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantfvEXT")) == NULL) || r;
-  r = ((glVariantivEXT = (PFNGLVARIANTIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantivEXT")) == NULL) || r;
-  r = ((glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantsvEXT")) == NULL) || r;
-  r = ((glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantubvEXT")) == NULL) || r;
-  r = ((glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantuivEXT")) == NULL) || r;
-  r = ((glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)glewGetProcAddress((const GLubyte*)"glVariantusvEXT")) == NULL) || r;
-  r = ((glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)glewGetProcAddress((const GLubyte*)"glWriteMaskEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_vertex_shader */
-
-#ifdef GL_EXT_vertex_weighting
-
-static GLboolean _glewInit_GL_EXT_vertex_weighting (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)glewGetProcAddress((const GLubyte*)"glVertexWeightPointerEXT")) == NULL) || r;
-  r = ((glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexWeightfEXT")) == NULL) || r;
-  r = ((glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)glewGetProcAddress((const GLubyte*)"glVertexWeightfvEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_EXT_vertex_weighting */
-
-#ifdef GL_GREMEDY_frame_terminator
-
-static GLboolean _glewInit_GL_GREMEDY_frame_terminator (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)glewGetProcAddress((const GLubyte*)"glFrameTerminatorGREMEDY")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_GREMEDY_frame_terminator */
-
-#ifdef GL_GREMEDY_string_marker
-
-static GLboolean _glewInit_GL_GREMEDY_string_marker (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)glewGetProcAddress((const GLubyte*)"glStringMarkerGREMEDY")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_GREMEDY_string_marker */
-
-#ifdef GL_HP_convolution_border_modes
-
-#endif /* GL_HP_convolution_border_modes */
-
-#ifdef GL_HP_image_transform
-
-static GLboolean _glewInit_GL_HP_image_transform (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)glewGetProcAddress((const GLubyte*)"glGetImageTransformParameterfvHP")) == NULL) || r;
-  r = ((glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)glewGetProcAddress((const GLubyte*)"glGetImageTransformParameterivHP")) == NULL) || r;
-  r = ((glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameterfHP")) == NULL) || r;
-  r = ((glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameterfvHP")) == NULL) || r;
-  r = ((glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameteriHP")) == NULL) || r;
-  r = ((glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)glewGetProcAddress((const GLubyte*)"glImageTransformParameterivHP")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_HP_image_transform */
-
-#ifdef GL_HP_occlusion_test
-
-#endif /* GL_HP_occlusion_test */
-
-#ifdef GL_HP_texture_lighting
-
-#endif /* GL_HP_texture_lighting */
-
-#ifdef GL_IBM_cull_vertex
-
-#endif /* GL_IBM_cull_vertex */
-
-#ifdef GL_IBM_multimode_draw_arrays
-
-static GLboolean _glewInit_GL_IBM_multimode_draw_arrays (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)glewGetProcAddress((const GLubyte*)"glMultiModeDrawArraysIBM")) == NULL) || r;
-  r = ((glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)glewGetProcAddress((const GLubyte*)"glMultiModeDrawElementsIBM")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_IBM_multimode_draw_arrays */
-
-#ifdef GL_IBM_rasterpos_clip
-
-#endif /* GL_IBM_rasterpos_clip */
-
-#ifdef GL_IBM_static_data
-
-#endif /* GL_IBM_static_data */
-
-#ifdef GL_IBM_texture_mirrored_repeat
-
-#endif /* GL_IBM_texture_mirrored_repeat */
-
-#ifdef GL_IBM_vertex_array_lists
-
-static GLboolean _glewInit_GL_IBM_vertex_array_lists (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glColorPointerListIBM")) == NULL) || r;
-  r = ((glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glEdgeFlagPointerListIBM")) == NULL) || r;
-  r = ((glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glFogCoordPointerListIBM")) == NULL) || r;
-  r = ((glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glIndexPointerListIBM")) == NULL) || r;
-  r = ((glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glNormalPointerListIBM")) == NULL) || r;
-  r = ((glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColorPointerListIBM")) == NULL) || r;
-  r = ((glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glTexCoordPointerListIBM")) == NULL) || r;
-  r = ((glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)glewGetProcAddress((const GLubyte*)"glVertexPointerListIBM")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_IBM_vertex_array_lists */
-
-#ifdef GL_INGR_color_clamp
-
-#endif /* GL_INGR_color_clamp */
-
-#ifdef GL_INGR_interlace_read
-
-#endif /* GL_INGR_interlace_read */
-
-#ifdef GL_INTEL_parallel_arrays
-
-static GLboolean _glewInit_GL_INTEL_parallel_arrays (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glColorPointervINTEL")) == NULL) || r;
-  r = ((glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glNormalPointervINTEL")) == NULL) || r;
-  r = ((glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glTexCoordPointervINTEL")) == NULL) || r;
-  r = ((glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)glewGetProcAddress((const GLubyte*)"glVertexPointervINTEL")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_INTEL_parallel_arrays */
-
-#ifdef GL_INTEL_texture_scissor
-
-static GLboolean _glewInit_GL_INTEL_texture_scissor (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTexScissorFuncINTEL = (PFNGLTEXSCISSORFUNCINTELPROC)glewGetProcAddress((const GLubyte*)"glTexScissorFuncINTEL")) == NULL) || r;
-  r = ((glTexScissorINTEL = (PFNGLTEXSCISSORINTELPROC)glewGetProcAddress((const GLubyte*)"glTexScissorINTEL")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_INTEL_texture_scissor */
-
-#ifdef GL_KTX_buffer_region
-
-static GLboolean _glewInit_GL_KTX_buffer_region (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBufferRegionEnabledEXT = (PFNGLBUFFERREGIONENABLEDEXTPROC)glewGetProcAddress((const GLubyte*)"glBufferRegionEnabledEXT")) == NULL) || r;
-  r = ((glDeleteBufferRegionEXT = (PFNGLDELETEBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glDeleteBufferRegionEXT")) == NULL) || r;
-  r = ((glDrawBufferRegionEXT = (PFNGLDRAWBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glDrawBufferRegionEXT")) == NULL) || r;
-  r = ((glNewBufferRegionEXT = (PFNGLNEWBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glNewBufferRegionEXT")) == NULL) || r;
-  r = ((glReadBufferRegionEXT = (PFNGLREADBUFFERREGIONEXTPROC)glewGetProcAddress((const GLubyte*)"glReadBufferRegionEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_KTX_buffer_region */
-
-#ifdef GL_MESAX_texture_stack
-
-#endif /* GL_MESAX_texture_stack */
-
-#ifdef GL_MESA_pack_invert
-
-#endif /* GL_MESA_pack_invert */
-
-#ifdef GL_MESA_resize_buffers
-
-static GLboolean _glewInit_GL_MESA_resize_buffers (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)glewGetProcAddress((const GLubyte*)"glResizeBuffersMESA")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_MESA_resize_buffers */
-
-#ifdef GL_MESA_window_pos
-
-static GLboolean _glewInit_GL_MESA_window_pos (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dMESA")) == NULL) || r;
-  r = ((glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2dvMESA")) == NULL) || r;
-  r = ((glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fMESA")) == NULL) || r;
-  r = ((glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2fvMESA")) == NULL) || r;
-  r = ((glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2iMESA")) == NULL) || r;
-  r = ((glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2ivMESA")) == NULL) || r;
-  r = ((glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2sMESA")) == NULL) || r;
-  r = ((glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos2svMESA")) == NULL) || r;
-  r = ((glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dMESA")) == NULL) || r;
-  r = ((glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3dvMESA")) == NULL) || r;
-  r = ((glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fMESA")) == NULL) || r;
-  r = ((glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3fvMESA")) == NULL) || r;
-  r = ((glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3iMESA")) == NULL) || r;
-  r = ((glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3ivMESA")) == NULL) || r;
-  r = ((glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3sMESA")) == NULL) || r;
-  r = ((glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos3svMESA")) == NULL) || r;
-  r = ((glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4dMESA")) == NULL) || r;
-  r = ((glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4dvMESA")) == NULL) || r;
-  r = ((glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4fMESA")) == NULL) || r;
-  r = ((glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4fvMESA")) == NULL) || r;
-  r = ((glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4iMESA")) == NULL) || r;
-  r = ((glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4ivMESA")) == NULL) || r;
-  r = ((glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4sMESA")) == NULL) || r;
-  r = ((glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)glewGetProcAddress((const GLubyte*)"glWindowPos4svMESA")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_MESA_window_pos */
-
-#ifdef GL_MESA_ycbcr_texture
-
-#endif /* GL_MESA_ycbcr_texture */
-
-#ifdef GL_NV_blend_square
-
-#endif /* GL_NV_blend_square */
-
-#ifdef GL_NV_copy_depth_to_color
-
-#endif /* GL_NV_copy_depth_to_color */
-
-#ifdef GL_NV_depth_buffer_float
-
-static GLboolean _glewInit_GL_NV_depth_buffer_float (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)glewGetProcAddress((const GLubyte*)"glClearDepthdNV")) == NULL) || r;
-  r = ((glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)glewGetProcAddress((const GLubyte*)"glDepthBoundsdNV")) == NULL) || r;
-  r = ((glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)glewGetProcAddress((const GLubyte*)"glDepthRangedNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_depth_buffer_float */
-
-#ifdef GL_NV_depth_clamp
-
-#endif /* GL_NV_depth_clamp */
-
-#ifdef GL_NV_depth_range_unclamped
-
-#endif /* GL_NV_depth_range_unclamped */
-
-#ifdef GL_NV_evaluators
-
-static GLboolean _glewInit_GL_NV_evaluators (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glEvalMapsNV = (PFNGLEVALMAPSNVPROC)glewGetProcAddress((const GLubyte*)"glEvalMapsNV")) == NULL) || r;
-  r = ((glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapAttribParameterfvNV")) == NULL) || r;
-  r = ((glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapAttribParameterivNV")) == NULL) || r;
-  r = ((glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapControlPointsNV")) == NULL) || r;
-  r = ((glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapParameterfvNV")) == NULL) || r;
-  r = ((glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetMapParameterivNV")) == NULL) || r;
-  r = ((glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)glewGetProcAddress((const GLubyte*)"glMapControlPointsNV")) == NULL) || r;
-  r = ((glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glMapParameterfvNV")) == NULL) || r;
-  r = ((glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glMapParameterivNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_evaluators */
-
-#ifdef GL_NV_fence
-
-static GLboolean _glewInit_GL_NV_fence (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)glewGetProcAddress((const GLubyte*)"glDeleteFencesNV")) == NULL) || r;
-  r = ((glFinishFenceNV = (PFNGLFINISHFENCENVPROC)glewGetProcAddress((const GLubyte*)"glFinishFenceNV")) == NULL) || r;
-  r = ((glGenFencesNV = (PFNGLGENFENCESNVPROC)glewGetProcAddress((const GLubyte*)"glGenFencesNV")) == NULL) || r;
-  r = ((glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetFenceivNV")) == NULL) || r;
-  r = ((glIsFenceNV = (PFNGLISFENCENVPROC)glewGetProcAddress((const GLubyte*)"glIsFenceNV")) == NULL) || r;
-  r = ((glSetFenceNV = (PFNGLSETFENCENVPROC)glewGetProcAddress((const GLubyte*)"glSetFenceNV")) == NULL) || r;
-  r = ((glTestFenceNV = (PFNGLTESTFENCENVPROC)glewGetProcAddress((const GLubyte*)"glTestFenceNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_fence */
-
-#ifdef GL_NV_float_buffer
-
-#endif /* GL_NV_float_buffer */
-
-#ifdef GL_NV_fog_distance
-
-#endif /* GL_NV_fog_distance */
-
-#ifdef GL_NV_fragment_program
-
-static GLboolean _glewInit_GL_NV_fragment_program (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramNamedParameterdvNV")) == NULL) || r;
-  r = ((glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramNamedParameterfvNV")) == NULL) || r;
-  r = ((glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4dNV")) == NULL) || r;
-  r = ((glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4dvNV")) == NULL) || r;
-  r = ((glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4fNV")) == NULL) || r;
-  r = ((glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramNamedParameter4fvNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_fragment_program */
-
-#ifdef GL_NV_fragment_program2
-
-#endif /* GL_NV_fragment_program2 */
-
-#ifdef GL_NV_fragment_program4
-
-#endif /* GL_NV_fragment_program4 */
-
-#ifdef GL_NV_fragment_program_option
-
-#endif /* GL_NV_fragment_program_option */
-
-#ifdef GL_NV_framebuffer_multisample_coverage
-
-static GLboolean _glewInit_GL_NV_framebuffer_multisample_coverage (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)glewGetProcAddress((const GLubyte*)"glRenderbufferStorageMultisampleCoverageNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_framebuffer_multisample_coverage */
-
-#ifdef GL_NV_geometry_program4
-
-static GLboolean _glewInit_GL_NV_geometry_program4 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)glewGetProcAddress((const GLubyte*)"glProgramVertexLimitNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_geometry_program4 */
-
-#ifdef GL_NV_geometry_shader4
-
-#endif /* GL_NV_geometry_shader4 */
-
-#ifdef GL_NV_gpu_program4
-
-static GLboolean _glewInit_GL_NV_gpu_program4 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4iNV")) == NULL) || r;
-  r = ((glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4ivNV")) == NULL) || r;
-  r = ((glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4uiNV")) == NULL) || r;
-  r = ((glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParameterI4uivNV")) == NULL) || r;
-  r = ((glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParametersI4ivNV")) == NULL) || r;
-  r = ((glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramEnvParametersI4uivNV")) == NULL) || r;
-  r = ((glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4iNV")) == NULL) || r;
-  r = ((glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4ivNV")) == NULL) || r;
-  r = ((glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4uiNV")) == NULL) || r;
-  r = ((glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParameterI4uivNV")) == NULL) || r;
-  r = ((glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParametersI4ivNV")) == NULL) || r;
-  r = ((glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramLocalParametersI4uivNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_gpu_program4 */
-
-#ifdef GL_NV_half_float
-
-static GLboolean _glewInit_GL_NV_half_float (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColor3hNV = (PFNGLCOLOR3HNVPROC)glewGetProcAddress((const GLubyte*)"glColor3hNV")) == NULL) || r;
-  r = ((glColor3hvNV = (PFNGLCOLOR3HVNVPROC)glewGetProcAddress((const GLubyte*)"glColor3hvNV")) == NULL) || r;
-  r = ((glColor4hNV = (PFNGLCOLOR4HNVPROC)glewGetProcAddress((const GLubyte*)"glColor4hNV")) == NULL) || r;
-  r = ((glColor4hvNV = (PFNGLCOLOR4HVNVPROC)glewGetProcAddress((const GLubyte*)"glColor4hvNV")) == NULL) || r;
-  r = ((glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)glewGetProcAddress((const GLubyte*)"glFogCoordhNV")) == NULL) || r;
-  r = ((glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)glewGetProcAddress((const GLubyte*)"glFogCoordhvNV")) == NULL) || r;
-  r = ((glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1hNV")) == NULL) || r;
-  r = ((glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord1hvNV")) == NULL) || r;
-  r = ((glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2hNV")) == NULL) || r;
-  r = ((glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord2hvNV")) == NULL) || r;
-  r = ((glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3hNV")) == NULL) || r;
-  r = ((glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord3hvNV")) == NULL) || r;
-  r = ((glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4hNV")) == NULL) || r;
-  r = ((glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)glewGetProcAddress((const GLubyte*)"glMultiTexCoord4hvNV")) == NULL) || r;
-  r = ((glNormal3hNV = (PFNGLNORMAL3HNVPROC)glewGetProcAddress((const GLubyte*)"glNormal3hNV")) == NULL) || r;
-  r = ((glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)glewGetProcAddress((const GLubyte*)"glNormal3hvNV")) == NULL) || r;
-  r = ((glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3hNV")) == NULL) || r;
-  r = ((glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)glewGetProcAddress((const GLubyte*)"glSecondaryColor3hvNV")) == NULL) || r;
-  r = ((glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord1hNV")) == NULL) || r;
-  r = ((glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord1hvNV")) == NULL) || r;
-  r = ((glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2hNV")) == NULL) || r;
-  r = ((glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2hvNV")) == NULL) || r;
-  r = ((glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord3hNV")) == NULL) || r;
-  r = ((glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord3hvNV")) == NULL) || r;
-  r = ((glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4hNV")) == NULL) || r;
-  r = ((glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4hvNV")) == NULL) || r;
-  r = ((glVertex2hNV = (PFNGLVERTEX2HNVPROC)glewGetProcAddress((const GLubyte*)"glVertex2hNV")) == NULL) || r;
-  r = ((glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertex2hvNV")) == NULL) || r;
-  r = ((glVertex3hNV = (PFNGLVERTEX3HNVPROC)glewGetProcAddress((const GLubyte*)"glVertex3hNV")) == NULL) || r;
-  r = ((glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertex3hvNV")) == NULL) || r;
-  r = ((glVertex4hNV = (PFNGLVERTEX4HNVPROC)glewGetProcAddress((const GLubyte*)"glVertex4hNV")) == NULL) || r;
-  r = ((glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertex4hvNV")) == NULL) || r;
-  r = ((glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1hNV")) == NULL) || r;
-  r = ((glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1hvNV")) == NULL) || r;
-  r = ((glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2hNV")) == NULL) || r;
-  r = ((glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2hvNV")) == NULL) || r;
-  r = ((glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3hNV")) == NULL) || r;
-  r = ((glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3hvNV")) == NULL) || r;
-  r = ((glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4hNV")) == NULL) || r;
-  r = ((glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4hvNV")) == NULL) || r;
-  r = ((glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1hvNV")) == NULL) || r;
-  r = ((glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2hvNV")) == NULL) || r;
-  r = ((glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3hvNV")) == NULL) || r;
-  r = ((glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4hvNV")) == NULL) || r;
-  r = ((glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)glewGetProcAddress((const GLubyte*)"glVertexWeighthNV")) == NULL) || r;
-  r = ((glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexWeighthvNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_half_float */
-
-#ifdef GL_NV_light_max_exponent
-
-#endif /* GL_NV_light_max_exponent */
-
-#ifdef GL_NV_multisample_filter_hint
-
-#endif /* GL_NV_multisample_filter_hint */
-
-#ifdef GL_NV_occlusion_query
-
-static GLboolean _glewInit_GL_NV_occlusion_query (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)glewGetProcAddress((const GLubyte*)"glBeginOcclusionQueryNV")) == NULL) || r;
-  r = ((glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)glewGetProcAddress((const GLubyte*)"glDeleteOcclusionQueriesNV")) == NULL) || r;
-  r = ((glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)glewGetProcAddress((const GLubyte*)"glEndOcclusionQueryNV")) == NULL) || r;
-  r = ((glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)glewGetProcAddress((const GLubyte*)"glGenOcclusionQueriesNV")) == NULL) || r;
-  r = ((glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetOcclusionQueryivNV")) == NULL) || r;
-  r = ((glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetOcclusionQueryuivNV")) == NULL) || r;
-  r = ((glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)glewGetProcAddress((const GLubyte*)"glIsOcclusionQueryNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_occlusion_query */
-
-#ifdef GL_NV_packed_depth_stencil
-
-#endif /* GL_NV_packed_depth_stencil */
-
-#ifdef GL_NV_parameter_buffer_object
-
-static GLboolean _glewInit_GL_NV_parameter_buffer_object (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramBufferParametersIivNV")) == NULL) || r;
-  r = ((glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramBufferParametersIuivNV")) == NULL) || r;
-  r = ((glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramBufferParametersfvNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_parameter_buffer_object */
-
-#ifdef GL_NV_pixel_data_range
-
-static GLboolean _glewInit_GL_NV_pixel_data_range (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)glewGetProcAddress((const GLubyte*)"glFlushPixelDataRangeNV")) == NULL) || r;
-  r = ((glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)glewGetProcAddress((const GLubyte*)"glPixelDataRangeNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_pixel_data_range */
-
-#ifdef GL_NV_point_sprite
-
-static GLboolean _glewInit_GL_NV_point_sprite (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)glewGetProcAddress((const GLubyte*)"glPointParameteriNV")) == NULL) || r;
-  r = ((glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glPointParameterivNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_point_sprite */
-
-#ifdef GL_NV_primitive_restart
-
-static GLboolean _glewInit_GL_NV_primitive_restart (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)glewGetProcAddress((const GLubyte*)"glPrimitiveRestartIndexNV")) == NULL) || r;
-  r = ((glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)glewGetProcAddress((const GLubyte*)"glPrimitiveRestartNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_primitive_restart */
-
-#ifdef GL_NV_register_combiners
-
-static GLboolean _glewInit_GL_NV_register_combiners (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerInputNV")) == NULL) || r;
-  r = ((glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerOutputNV")) == NULL) || r;
-  r = ((glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameterfNV")) == NULL) || r;
-  r = ((glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameterfvNV")) == NULL) || r;
-  r = ((glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameteriNV")) == NULL) || r;
-  r = ((glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerParameterivNV")) == NULL) || r;
-  r = ((glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)glewGetProcAddress((const GLubyte*)"glFinalCombinerInputNV")) == NULL) || r;
-  r = ((glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerInputParameterfvNV")) == NULL) || r;
-  r = ((glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerInputParameterivNV")) == NULL) || r;
-  r = ((glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerOutputParameterfvNV")) == NULL) || r;
-  r = ((glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerOutputParameterivNV")) == NULL) || r;
-  r = ((glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetFinalCombinerInputParameterfvNV")) == NULL) || r;
-  r = ((glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetFinalCombinerInputParameterivNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_register_combiners */
-
-#ifdef GL_NV_register_combiners2
-
-static GLboolean _glewInit_GL_NV_register_combiners2 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glCombinerStageParameterfvNV")) == NULL) || r;
-  r = ((glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetCombinerStageParameterfvNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_register_combiners2 */
-
-#ifdef GL_NV_texgen_emboss
-
-#endif /* GL_NV_texgen_emboss */
-
-#ifdef GL_NV_texgen_reflection
-
-#endif /* GL_NV_texgen_reflection */
-
-#ifdef GL_NV_texture_compression_vtc
-
-#endif /* GL_NV_texture_compression_vtc */
-
-#ifdef GL_NV_texture_env_combine4
-
-#endif /* GL_NV_texture_env_combine4 */
-
-#ifdef GL_NV_texture_expand_normal
-
-#endif /* GL_NV_texture_expand_normal */
-
-#ifdef GL_NV_texture_rectangle
-
-#endif /* GL_NV_texture_rectangle */
-
-#ifdef GL_NV_texture_shader
-
-#endif /* GL_NV_texture_shader */
-
-#ifdef GL_NV_texture_shader2
-
-#endif /* GL_NV_texture_shader2 */
-
-#ifdef GL_NV_texture_shader3
-
-#endif /* GL_NV_texture_shader3 */
-
-#ifdef GL_NV_transform_feedback
-
-static GLboolean _glewInit_GL_NV_transform_feedback (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)glewGetProcAddress((const GLubyte*)"glActiveVaryingNV")) == NULL) || r;
-  r = ((glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)glewGetProcAddress((const GLubyte*)"glBeginTransformFeedbackNV")) == NULL) || r;
-  r = ((glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)glewGetProcAddress((const GLubyte*)"glBindBufferBaseNV")) == NULL) || r;
-  r = ((glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)glewGetProcAddress((const GLubyte*)"glBindBufferOffsetNV")) == NULL) || r;
-  r = ((glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)glewGetProcAddress((const GLubyte*)"glBindBufferRangeNV")) == NULL) || r;
-  r = ((glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)glewGetProcAddress((const GLubyte*)"glEndTransformFeedbackNV")) == NULL) || r;
-  r = ((glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)glewGetProcAddress((const GLubyte*)"glGetActiveVaryingNV")) == NULL) || r;
-  r = ((glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)glewGetProcAddress((const GLubyte*)"glGetTransformFeedbackVaryingNV")) == NULL) || r;
-  r = ((glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)glewGetProcAddress((const GLubyte*)"glGetVaryingLocationNV")) == NULL) || r;
-  r = ((glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)glewGetProcAddress((const GLubyte*)"glTransformFeedbackAttribsNV")) == NULL) || r;
-  r = ((glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)glewGetProcAddress((const GLubyte*)"glTransformFeedbackVaryingsNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_transform_feedback */
-
-#ifdef GL_NV_vertex_array_range
-
-static GLboolean _glewInit_GL_NV_vertex_array_range (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)glewGetProcAddress((const GLubyte*)"glFlushVertexArrayRangeNV")) == NULL) || r;
-  r = ((glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)glewGetProcAddress((const GLubyte*)"glVertexArrayRangeNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_vertex_array_range */
-
-#ifdef GL_NV_vertex_array_range2
-
-#endif /* GL_NV_vertex_array_range2 */
-
-#ifdef GL_NV_vertex_program
-
-static GLboolean _glewInit_GL_NV_vertex_program (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)glewGetProcAddress((const GLubyte*)"glAreProgramsResidentNV")) == NULL) || r;
-  r = ((glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glBindProgramNV")) == NULL) || r;
-  r = ((glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)glewGetProcAddress((const GLubyte*)"glDeleteProgramsNV")) == NULL) || r;
-  r = ((glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glExecuteProgramNV")) == NULL) || r;
-  r = ((glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)glewGetProcAddress((const GLubyte*)"glGenProgramsNV")) == NULL) || r;
-  r = ((glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramParameterdvNV")) == NULL) || r;
-  r = ((glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramParameterfvNV")) == NULL) || r;
-  r = ((glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramStringNV")) == NULL) || r;
-  r = ((glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetProgramivNV")) == NULL) || r;
-  r = ((glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetTrackMatrixivNV")) == NULL) || r;
-  r = ((glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribPointervNV")) == NULL) || r;
-  r = ((glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribdvNV")) == NULL) || r;
-  r = ((glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribfvNV")) == NULL) || r;
-  r = ((glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)glewGetProcAddress((const GLubyte*)"glGetVertexAttribivNV")) == NULL) || r;
-  r = ((glIsProgramNV = (PFNGLISPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glIsProgramNV")) == NULL) || r;
-  r = ((glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)glewGetProcAddress((const GLubyte*)"glLoadProgramNV")) == NULL) || r;
-  r = ((glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4dNV")) == NULL) || r;
-  r = ((glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4dvNV")) == NULL) || r;
-  r = ((glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4fNV")) == NULL) || r;
-  r = ((glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameter4fvNV")) == NULL) || r;
-  r = ((glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameters4dvNV")) == NULL) || r;
-  r = ((glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)glewGetProcAddress((const GLubyte*)"glProgramParameters4fvNV")) == NULL) || r;
-  r = ((glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)glewGetProcAddress((const GLubyte*)"glRequestResidentProgramsNV")) == NULL) || r;
-  r = ((glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)glewGetProcAddress((const GLubyte*)"glTrackMatrixNV")) == NULL) || r;
-  r = ((glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dNV")) == NULL) || r;
-  r = ((glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1dvNV")) == NULL) || r;
-  r = ((glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fNV")) == NULL) || r;
-  r = ((glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1fvNV")) == NULL) || r;
-  r = ((glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1sNV")) == NULL) || r;
-  r = ((glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib1svNV")) == NULL) || r;
-  r = ((glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dNV")) == NULL) || r;
-  r = ((glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2dvNV")) == NULL) || r;
-  r = ((glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fNV")) == NULL) || r;
-  r = ((glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2fvNV")) == NULL) || r;
-  r = ((glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2sNV")) == NULL) || r;
-  r = ((glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib2svNV")) == NULL) || r;
-  r = ((glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dNV")) == NULL) || r;
-  r = ((glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3dvNV")) == NULL) || r;
-  r = ((glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fNV")) == NULL) || r;
-  r = ((glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3fvNV")) == NULL) || r;
-  r = ((glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3sNV")) == NULL) || r;
-  r = ((glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib3svNV")) == NULL) || r;
-  r = ((glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dNV")) == NULL) || r;
-  r = ((glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4dvNV")) == NULL) || r;
-  r = ((glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fNV")) == NULL) || r;
-  r = ((glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4fvNV")) == NULL) || r;
-  r = ((glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4sNV")) == NULL) || r;
-  r = ((glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4svNV")) == NULL) || r;
-  r = ((glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubNV")) == NULL) || r;
-  r = ((glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttrib4ubvNV")) == NULL) || r;
-  r = ((glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribPointerNV")) == NULL) || r;
-  r = ((glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1dvNV")) == NULL) || r;
-  r = ((glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1fvNV")) == NULL) || r;
-  r = ((glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs1svNV")) == NULL) || r;
-  r = ((glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2dvNV")) == NULL) || r;
-  r = ((glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2fvNV")) == NULL) || r;
-  r = ((glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs2svNV")) == NULL) || r;
-  r = ((glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3dvNV")) == NULL) || r;
-  r = ((glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3fvNV")) == NULL) || r;
-  r = ((glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs3svNV")) == NULL) || r;
-  r = ((glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4dvNV")) == NULL) || r;
-  r = ((glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4fvNV")) == NULL) || r;
-  r = ((glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4svNV")) == NULL) || r;
-  r = ((glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)glewGetProcAddress((const GLubyte*)"glVertexAttribs4ubvNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_NV_vertex_program */
-
-#ifdef GL_NV_vertex_program1_1
-
-#endif /* GL_NV_vertex_program1_1 */
-
-#ifdef GL_NV_vertex_program2
-
-#endif /* GL_NV_vertex_program2 */
-
-#ifdef GL_NV_vertex_program2_option
-
-#endif /* GL_NV_vertex_program2_option */
-
-#ifdef GL_NV_vertex_program3
-
-#endif /* GL_NV_vertex_program3 */
-
-#ifdef GL_NV_vertex_program4
-
-#endif /* GL_NV_vertex_program4 */
-
-#ifdef GL_OES_byte_coordinates
-
-#endif /* GL_OES_byte_coordinates */
-
-#ifdef GL_OES_compressed_paletted_texture
-
-#endif /* GL_OES_compressed_paletted_texture */
-
-#ifdef GL_OES_read_format
-
-#endif /* GL_OES_read_format */
-
-#ifdef GL_OES_single_precision
-
-static GLboolean _glewInit_GL_OES_single_precision (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)glewGetProcAddress((const GLubyte*)"glClearDepthfOES")) == NULL) || r;
-  r = ((glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)glewGetProcAddress((const GLubyte*)"glClipPlanefOES")) == NULL) || r;
-  r = ((glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)glewGetProcAddress((const GLubyte*)"glDepthRangefOES")) == NULL) || r;
-  r = ((glFrustumfOES = (PFNGLFRUSTUMFOESPROC)glewGetProcAddress((const GLubyte*)"glFrustumfOES")) == NULL) || r;
-  r = ((glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)glewGetProcAddress((const GLubyte*)"glGetClipPlanefOES")) == NULL) || r;
-  r = ((glOrthofOES = (PFNGLORTHOFOESPROC)glewGetProcAddress((const GLubyte*)"glOrthofOES")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_OES_single_precision */
-
-#ifdef GL_OML_interlace
-
-#endif /* GL_OML_interlace */
-
-#ifdef GL_OML_resample
-
-#endif /* GL_OML_resample */
-
-#ifdef GL_OML_subsample
-
-#endif /* GL_OML_subsample */
-
-#ifdef GL_PGI_misc_hints
-
-#endif /* GL_PGI_misc_hints */
-
-#ifdef GL_PGI_vertex_hints
-
-#endif /* GL_PGI_vertex_hints */
-
-#ifdef GL_REND_screen_coordinates
-
-#endif /* GL_REND_screen_coordinates */
-
-#ifdef GL_S3_s3tc
-
-#endif /* GL_S3_s3tc */
-
-#ifdef GL_SGIS_color_range
-
-#endif /* GL_SGIS_color_range */
-
-#ifdef GL_SGIS_detail_texture
-
-static GLboolean _glewInit_GL_SGIS_detail_texture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glDetailTexFuncSGIS")) == NULL) || r;
-  r = ((glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetDetailTexFuncSGIS")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIS_detail_texture */
-
-#ifdef GL_SGIS_fog_function
-
-static GLboolean _glewInit_GL_SGIS_fog_function (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glFogFuncSGIS")) == NULL) || r;
-  r = ((glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetFogFuncSGIS")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIS_fog_function */
-
-#ifdef GL_SGIS_generate_mipmap
-
-#endif /* GL_SGIS_generate_mipmap */
-
-#ifdef GL_SGIS_multisample
-
-static GLboolean _glewInit_GL_SGIS_multisample (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)glewGetProcAddress((const GLubyte*)"glSampleMaskSGIS")) == NULL) || r;
-  r = ((glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)glewGetProcAddress((const GLubyte*)"glSamplePatternSGIS")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIS_multisample */
-
-#ifdef GL_SGIS_pixel_texture
-
-#endif /* GL_SGIS_pixel_texture */
-
-#ifdef GL_SGIS_sharpen_texture
-
-static GLboolean _glewInit_GL_SGIS_sharpen_texture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetSharpenTexFuncSGIS")) == NULL) || r;
-  r = ((glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glSharpenTexFuncSGIS")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIS_sharpen_texture */
-
-#ifdef GL_SGIS_texture4D
-
-static GLboolean _glewInit_GL_SGIS_texture4D (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)glewGetProcAddress((const GLubyte*)"glTexImage4DSGIS")) == NULL) || r;
-  r = ((glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)glewGetProcAddress((const GLubyte*)"glTexSubImage4DSGIS")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIS_texture4D */
-
-#ifdef GL_SGIS_texture_border_clamp
-
-#endif /* GL_SGIS_texture_border_clamp */
-
-#ifdef GL_SGIS_texture_edge_clamp
-
-#endif /* GL_SGIS_texture_edge_clamp */
-
-#ifdef GL_SGIS_texture_filter4
-
-static GLboolean _glewInit_GL_SGIS_texture_filter4 (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glGetTexFilterFuncSGIS")) == NULL) || r;
-  r = ((glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)glewGetProcAddress((const GLubyte*)"glTexFilterFuncSGIS")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIS_texture_filter4 */
-
-#ifdef GL_SGIS_texture_lod
-
-#endif /* GL_SGIS_texture_lod */
-
-#ifdef GL_SGIS_texture_select
-
-#endif /* GL_SGIS_texture_select */
-
-#ifdef GL_SGIX_async
-
-static GLboolean _glewInit_GL_SGIX_async (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)glewGetProcAddress((const GLubyte*)"glAsyncMarkerSGIX")) == NULL) || r;
-  r = ((glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)glewGetProcAddress((const GLubyte*)"glDeleteAsyncMarkersSGIX")) == NULL) || r;
-  r = ((glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)glewGetProcAddress((const GLubyte*)"glFinishAsyncSGIX")) == NULL) || r;
-  r = ((glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)glewGetProcAddress((const GLubyte*)"glGenAsyncMarkersSGIX")) == NULL) || r;
-  r = ((glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)glewGetProcAddress((const GLubyte*)"glIsAsyncMarkerSGIX")) == NULL) || r;
-  r = ((glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)glewGetProcAddress((const GLubyte*)"glPollAsyncSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_async */
-
-#ifdef GL_SGIX_async_histogram
-
-#endif /* GL_SGIX_async_histogram */
-
-#ifdef GL_SGIX_async_pixel
-
-#endif /* GL_SGIX_async_pixel */
-
-#ifdef GL_SGIX_blend_alpha_minmax
-
-#endif /* GL_SGIX_blend_alpha_minmax */
-
-#ifdef GL_SGIX_clipmap
-
-#endif /* GL_SGIX_clipmap */
-
-#ifdef GL_SGIX_depth_texture
-
-#endif /* GL_SGIX_depth_texture */
-
-#ifdef GL_SGIX_flush_raster
-
-static GLboolean _glewInit_GL_SGIX_flush_raster (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)glewGetProcAddress((const GLubyte*)"glFlushRasterSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_flush_raster */
-
-#ifdef GL_SGIX_fog_offset
-
-#endif /* GL_SGIX_fog_offset */
-
-#ifdef GL_SGIX_fog_texture
-
-static GLboolean _glewInit_GL_SGIX_fog_texture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTextureFogSGIX = (PFNGLTEXTUREFOGSGIXPROC)glewGetProcAddress((const GLubyte*)"glTextureFogSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_fog_texture */
-
-#ifdef GL_SGIX_fragment_specular_lighting
-
-static GLboolean _glewInit_GL_SGIX_fragment_specular_lighting (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentColorMaterialSGIX")) == NULL) || r;
-  r = ((glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfSGIX")) == NULL) || r;
-  r = ((glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelfvSGIX")) == NULL) || r;
-  r = ((glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModeliSGIX")) == NULL) || r;
-  r = ((glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightModelivSGIX")) == NULL) || r;
-  r = ((glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfSGIX")) == NULL) || r;
-  r = ((glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightfvSGIX")) == NULL) || r;
-  r = ((glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightiSGIX")) == NULL) || r;
-  r = ((glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentLightivSGIX")) == NULL) || r;
-  r = ((glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfSGIX")) == NULL) || r;
-  r = ((glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialfvSGIX")) == NULL) || r;
-  r = ((glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialiSGIX")) == NULL) || r;
-  r = ((glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glFragmentMaterialivSGIX")) == NULL) || r;
-  r = ((glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightfvSGIX")) == NULL) || r;
-  r = ((glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentLightivSGIX")) == NULL) || r;
-  r = ((glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialfvSGIX")) == NULL) || r;
-  r = ((glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glGetFragmentMaterialivSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_fragment_specular_lighting */
-
-#ifdef GL_SGIX_framezoom
-
-static GLboolean _glewInit_GL_SGIX_framezoom (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)glewGetProcAddress((const GLubyte*)"glFrameZoomSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_framezoom */
-
-#ifdef GL_SGIX_interlace
-
-#endif /* GL_SGIX_interlace */
-
-#ifdef GL_SGIX_ir_instrument1
-
-#endif /* GL_SGIX_ir_instrument1 */
-
-#ifdef GL_SGIX_list_priority
-
-#endif /* GL_SGIX_list_priority */
-
-#ifdef GL_SGIX_pixel_texture
-
-static GLboolean _glewInit_GL_SGIX_pixel_texture (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)glewGetProcAddress((const GLubyte*)"glPixelTexGenSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_pixel_texture */
-
-#ifdef GL_SGIX_pixel_texture_bits
-
-#endif /* GL_SGIX_pixel_texture_bits */
-
-#ifdef GL_SGIX_reference_plane
-
-static GLboolean _glewInit_GL_SGIX_reference_plane (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)glewGetProcAddress((const GLubyte*)"glReferencePlaneSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_reference_plane */
-
-#ifdef GL_SGIX_resample
-
-#endif /* GL_SGIX_resample */
-
-#ifdef GL_SGIX_shadow
-
-#endif /* GL_SGIX_shadow */
-
-#ifdef GL_SGIX_shadow_ambient
-
-#endif /* GL_SGIX_shadow_ambient */
-
-#ifdef GL_SGIX_sprite
-
-static GLboolean _glewInit_GL_SGIX_sprite (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameterfSGIX")) == NULL) || r;
-  r = ((glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameterfvSGIX")) == NULL) || r;
-  r = ((glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameteriSGIX")) == NULL) || r;
-  r = ((glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)glewGetProcAddress((const GLubyte*)"glSpriteParameterivSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_sprite */
-
-#ifdef GL_SGIX_tag_sample_buffer
-
-static GLboolean _glewInit_GL_SGIX_tag_sample_buffer (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glTagSampleBufferSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGIX_tag_sample_buffer */
-
-#ifdef GL_SGIX_texture_add_env
-
-#endif /* GL_SGIX_texture_add_env */
-
-#ifdef GL_SGIX_texture_coordinate_clamp
-
-#endif /* GL_SGIX_texture_coordinate_clamp */
-
-#ifdef GL_SGIX_texture_lod_bias
-
-#endif /* GL_SGIX_texture_lod_bias */
-
-#ifdef GL_SGIX_texture_multi_buffer
-
-#endif /* GL_SGIX_texture_multi_buffer */
-
-#ifdef GL_SGIX_texture_range
-
-#endif /* GL_SGIX_texture_range */
-
-#ifdef GL_SGIX_texture_scale_bias
-
-#endif /* GL_SGIX_texture_scale_bias */
-
-#ifdef GL_SGIX_vertex_preclip
-
-#endif /* GL_SGIX_vertex_preclip */
-
-#ifdef GL_SGIX_vertex_preclip_hint
-
-#endif /* GL_SGIX_vertex_preclip_hint */
-
-#ifdef GL_SGIX_ycrcb
-
-#endif /* GL_SGIX_ycrcb */
-
-#ifdef GL_SGI_color_matrix
-
-#endif /* GL_SGI_color_matrix */
-
-#ifdef GL_SGI_color_table
-
-static GLboolean _glewInit_GL_SGI_color_table (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameterfvSGI")) == NULL) || r;
-  r = ((glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)glewGetProcAddress((const GLubyte*)"glColorTableParameterivSGI")) == NULL) || r;
-  r = ((glColorTableSGI = (PFNGLCOLORTABLESGIPROC)glewGetProcAddress((const GLubyte*)"glColorTableSGI")) == NULL) || r;
-  r = ((glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)glewGetProcAddress((const GLubyte*)"glCopyColorTableSGI")) == NULL) || r;
-  r = ((glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterfvSGI")) == NULL) || r;
-  r = ((glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableParameterivSGI")) == NULL) || r;
-  r = ((glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)glewGetProcAddress((const GLubyte*)"glGetColorTableSGI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SGI_color_table */
-
-#ifdef GL_SGI_texture_color_table
-
-#endif /* GL_SGI_texture_color_table */
-
-#ifdef GL_SUNX_constant_data
-
-static GLboolean _glewInit_GL_SUNX_constant_data (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)glewGetProcAddress((const GLubyte*)"glFinishTextureSUNX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SUNX_constant_data */
-
-#ifdef GL_SUN_convolution_border_modes
-
-#endif /* GL_SUN_convolution_border_modes */
-
-#ifdef GL_SUN_global_alpha
-
-static GLboolean _glewInit_GL_SUN_global_alpha (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorbSUN")) == NULL) || r;
-  r = ((glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactordSUN")) == NULL) || r;
-  r = ((glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorfSUN")) == NULL) || r;
-  r = ((glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactoriSUN")) == NULL) || r;
-  r = ((glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorsSUN")) == NULL) || r;
-  r = ((glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorubSUN")) == NULL) || r;
-  r = ((glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactoruiSUN")) == NULL) || r;
-  r = ((glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)glewGetProcAddress((const GLubyte*)"glGlobalAlphaFactorusSUN")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SUN_global_alpha */
-
-#ifdef GL_SUN_mesh_array
-
-#endif /* GL_SUN_mesh_array */
-
-#ifdef GL_SUN_read_video_pixels
-
-static GLboolean _glewInit_GL_SUN_read_video_pixels (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glReadVideoPixelsSUN = (PFNGLREADVIDEOPIXELSSUNPROC)glewGetProcAddress((const GLubyte*)"glReadVideoPixelsSUN")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SUN_read_video_pixels */
-
-#ifdef GL_SUN_slice_accum
-
-#endif /* GL_SUN_slice_accum */
-
-#ifdef GL_SUN_triangle_list
-
-static GLboolean _glewInit_GL_SUN_triangle_list (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodePointerSUN")) == NULL) || r;
-  r = ((glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeubSUN")) == NULL) || r;
-  r = ((glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeubvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiSUN")) == NULL) || r;
-  r = ((glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuivSUN")) == NULL) || r;
-  r = ((glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeusSUN")) == NULL) || r;
-  r = ((glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeusvSUN")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SUN_triangle_list */
-
-#ifdef GL_SUN_vertex
-
-static GLboolean _glewInit_GL_SUN_vertex (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor3fVertex3fSUN")) == NULL) || r;
-  r = ((glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor3fVertex3fvSUN")) == NULL) || r;
-  r = ((glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4fNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4fNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex2fSUN")) == NULL) || r;
-  r = ((glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex2fvSUN")) == NULL) || r;
-  r = ((glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex3fSUN")) == NULL) || r;
-  r = ((glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glColor4ubVertex3fvSUN")) == NULL) || r;
-  r = ((glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor3fVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor3fVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4fNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4fNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4ubVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiColor4ubVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiTexCoord2fVertex3fvSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiVertex3fSUN")) == NULL) || r;
-  r = ((glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glReplacementCodeuiVertex3fvSUN")) == NULL) || r;
-  r = ((glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor3fVertex3fSUN")) == NULL) || r;
-  r = ((glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor3fVertex3fvSUN")) == NULL) || r;
-  r = ((glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4fNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4fNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4ubVertex3fSUN")) == NULL) || r;
-  r = ((glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fColor4ubVertex3fvSUN")) == NULL) || r;
-  r = ((glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fNormal3fVertex3fSUN")) == NULL) || r;
-  r = ((glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fNormal3fVertex3fvSUN")) == NULL) || r;
-  r = ((glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fVertex3fSUN")) == NULL) || r;
-  r = ((glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord2fVertex3fvSUN")) == NULL) || r;
-  r = ((glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fColor4fNormal3fVertex4fSUN")) == NULL) || r;
-  r = ((glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fColor4fNormal3fVertex4fvSUN")) == NULL) || r;
-  r = ((glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fVertex4fSUN")) == NULL) || r;
-  r = ((glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)glewGetProcAddress((const GLubyte*)"glTexCoord4fVertex4fvSUN")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_SUN_vertex */
-
-#ifdef GL_WIN_phong_shading
-
-#endif /* GL_WIN_phong_shading */
-
-#ifdef GL_WIN_specular_fog
-
-#endif /* GL_WIN_specular_fog */
-
-#ifdef GL_WIN_swap_hint
-
-static GLboolean _glewInit_GL_WIN_swap_hint (GLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glAddSwapHintRectWIN = (PFNGLADDSWAPHINTRECTWINPROC)glewGetProcAddress((const GLubyte*)"glAddSwapHintRectWIN")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GL_WIN_swap_hint */
-
-/* ------------------------------------------------------------------------- */
-
-/* 
- * Search for name in the extensions string. Use of strstr()
- * is not sufficient because extension names can be prefixes of
- * other extension names. Could use strtok() but the constant
- * string returned by glGetString might be in read-only memory.
- */
-GLboolean glewGetExtension (const char* name)
-{    
-  GLubyte* p;
-  GLubyte* end;
-  GLuint len = _glewStrLen((const GLubyte*)name);
-  p = (GLubyte*)glGetString(GL_EXTENSIONS);
-  if (0 == p) return GL_FALSE;
-  end = p + _glewStrLen(p);
-  while (p < end)
-  {
-    GLuint n = _glewStrCLen(p, ' ');
-    if (len == n && _glewStrSame((const GLubyte*)name, p, n)) return GL_TRUE;
-    p += n+1;
-  }
-  return GL_FALSE;
-}
-
-/* ------------------------------------------------------------------------- */
-
-#ifndef GLEW_MX
-static
-#endif
-GLenum glewContextInit (GLEW_CONTEXT_ARG_DEF_LIST)
-{
-  const GLubyte* s;
-  GLuint dot, major, minor;
-  /* query opengl version */
-  s = glGetString(GL_VERSION);
-  dot = _glewStrCLen(s, '.');
-  major = dot-1;
-  minor = dot+1;
-  if (dot == 0 || s[minor] == '\0')
-    return GLEW_ERROR_NO_GL_VERSION;
-  if (s[major] == '1' && s[minor] == '0')
-  {
-	return GLEW_ERROR_GL_VERSION_10_ONLY;
-  }
-  else
-  {
-    CONST_CAST(GLEW_VERSION_1_1) = GL_TRUE;
-	if (s[major] >= '2')
-	{
-      CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
-      CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
-      CONST_CAST(GLEW_VERSION_1_4) = GL_TRUE;
-	  CONST_CAST(GLEW_VERSION_1_5) = GL_TRUE;
-	  CONST_CAST(GLEW_VERSION_2_0) = GL_TRUE;
-	  if (s[minor] >= '1')
-	  {
-	    CONST_CAST(GLEW_VERSION_2_1) = GL_TRUE;
-      }
-	}
-	else
-	{
-	  if (s[minor] >= '5')
-	  {
-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_4) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_5) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
-	  }
-	  if (s[minor] == '4')
-	  {
-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_4) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
-	  }
-	  if (s[minor] == '3')
-	  {
-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_3) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_4) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
-	  }
-	  if (s[minor] == '2')
-	  {
-		CONST_CAST(GLEW_VERSION_1_2) = GL_TRUE;
-		CONST_CAST(GLEW_VERSION_1_3) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_1_4) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
-	  }
-	  if (s[minor] < '2')
-	  {
-		CONST_CAST(GLEW_VERSION_1_2) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_1_3) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_1_4) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_1_5) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_0) = GL_FALSE;
-		CONST_CAST(GLEW_VERSION_2_1) = GL_FALSE;
-	  }
-	}
-  }
-  /* initialize extensions */
-#ifdef GL_VERSION_1_2
-  if (glewExperimental || GLEW_VERSION_1_2) CONST_CAST(GLEW_VERSION_1_2) = !_glewInit_GL_VERSION_1_2(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_VERSION_1_2 */
-#ifdef GL_VERSION_1_3
-  if (glewExperimental || GLEW_VERSION_1_3) CONST_CAST(GLEW_VERSION_1_3) = !_glewInit_GL_VERSION_1_3(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_VERSION_1_3 */
-#ifdef GL_VERSION_1_4
-  if (glewExperimental || GLEW_VERSION_1_4) CONST_CAST(GLEW_VERSION_1_4) = !_glewInit_GL_VERSION_1_4(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_VERSION_1_4 */
-#ifdef GL_VERSION_1_5
-  if (glewExperimental || GLEW_VERSION_1_5) CONST_CAST(GLEW_VERSION_1_5) = !_glewInit_GL_VERSION_1_5(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_VERSION_1_5 */
-#ifdef GL_VERSION_2_0
-  if (glewExperimental || GLEW_VERSION_2_0) CONST_CAST(GLEW_VERSION_2_0) = !_glewInit_GL_VERSION_2_0(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_VERSION_2_0 */
-#ifdef GL_VERSION_2_1
-  if (glewExperimental || GLEW_VERSION_2_1) CONST_CAST(GLEW_VERSION_2_1) = !_glewInit_GL_VERSION_2_1(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_VERSION_2_1 */
-#ifdef GL_3DFX_multisample
-  CONST_CAST(GLEW_3DFX_multisample) = glewGetExtension("GL_3DFX_multisample");
-#endif /* GL_3DFX_multisample */
-#ifdef GL_3DFX_tbuffer
-  CONST_CAST(GLEW_3DFX_tbuffer) = glewGetExtension("GL_3DFX_tbuffer");
-  if (glewExperimental || GLEW_3DFX_tbuffer) CONST_CAST(GLEW_3DFX_tbuffer) = !_glewInit_GL_3DFX_tbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_3DFX_tbuffer */
-#ifdef GL_3DFX_texture_compression_FXT1
-  CONST_CAST(GLEW_3DFX_texture_compression_FXT1) = glewGetExtension("GL_3DFX_texture_compression_FXT1");
-#endif /* GL_3DFX_texture_compression_FXT1 */
-#ifdef GL_APPLE_client_storage
-  CONST_CAST(GLEW_APPLE_client_storage) = glewGetExtension("GL_APPLE_client_storage");
-#endif /* GL_APPLE_client_storage */
-#ifdef GL_APPLE_element_array
-  CONST_CAST(GLEW_APPLE_element_array) = glewGetExtension("GL_APPLE_element_array");
-  if (glewExperimental || GLEW_APPLE_element_array) CONST_CAST(GLEW_APPLE_element_array) = !_glewInit_GL_APPLE_element_array(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_APPLE_element_array */
-#ifdef GL_APPLE_fence
-  CONST_CAST(GLEW_APPLE_fence) = glewGetExtension("GL_APPLE_fence");
-  if (glewExperimental || GLEW_APPLE_fence) CONST_CAST(GLEW_APPLE_fence) = !_glewInit_GL_APPLE_fence(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_APPLE_fence */
-#ifdef GL_APPLE_float_pixels
-  CONST_CAST(GLEW_APPLE_float_pixels) = glewGetExtension("GL_APPLE_float_pixels");
-#endif /* GL_APPLE_float_pixels */
-#ifdef GL_APPLE_flush_buffer_range
-  CONST_CAST(GLEW_APPLE_flush_buffer_range) = glewGetExtension("GL_APPLE_flush_buffer_range");
-  if (glewExperimental || GLEW_APPLE_flush_buffer_range) CONST_CAST(GLEW_APPLE_flush_buffer_range) = !_glewInit_GL_APPLE_flush_buffer_range(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_APPLE_flush_buffer_range */
-#ifdef GL_APPLE_pixel_buffer
-  CONST_CAST(GLEW_APPLE_pixel_buffer) = glewGetExtension("GL_APPLE_pixel_buffer");
-#endif /* GL_APPLE_pixel_buffer */
-#ifdef GL_APPLE_specular_vector
-  CONST_CAST(GLEW_APPLE_specular_vector) = glewGetExtension("GL_APPLE_specular_vector");
-#endif /* GL_APPLE_specular_vector */
-#ifdef GL_APPLE_texture_range
-  CONST_CAST(GLEW_APPLE_texture_range) = glewGetExtension("GL_APPLE_texture_range");
-  if (glewExperimental || GLEW_APPLE_texture_range) CONST_CAST(GLEW_APPLE_texture_range) = !_glewInit_GL_APPLE_texture_range(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_APPLE_texture_range */
-#ifdef GL_APPLE_transform_hint
-  CONST_CAST(GLEW_APPLE_transform_hint) = glewGetExtension("GL_APPLE_transform_hint");
-#endif /* GL_APPLE_transform_hint */
-#ifdef GL_APPLE_vertex_array_object
-  CONST_CAST(GLEW_APPLE_vertex_array_object) = glewGetExtension("GL_APPLE_vertex_array_object");
-  if (glewExperimental || GLEW_APPLE_vertex_array_object) CONST_CAST(GLEW_APPLE_vertex_array_object) = !_glewInit_GL_APPLE_vertex_array_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_APPLE_vertex_array_object */
-#ifdef GL_APPLE_vertex_array_range
-  CONST_CAST(GLEW_APPLE_vertex_array_range) = glewGetExtension("GL_APPLE_vertex_array_range");
-  if (glewExperimental || GLEW_APPLE_vertex_array_range) CONST_CAST(GLEW_APPLE_vertex_array_range) = !_glewInit_GL_APPLE_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_APPLE_vertex_array_range */
-#ifdef GL_APPLE_ycbcr_422
-  CONST_CAST(GLEW_APPLE_ycbcr_422) = glewGetExtension("GL_APPLE_ycbcr_422");
-#endif /* GL_APPLE_ycbcr_422 */
-#ifdef GL_ARB_color_buffer_float
-  CONST_CAST(GLEW_ARB_color_buffer_float) = glewGetExtension("GL_ARB_color_buffer_float");
-  if (glewExperimental || GLEW_ARB_color_buffer_float) CONST_CAST(GLEW_ARB_color_buffer_float) = !_glewInit_GL_ARB_color_buffer_float(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_color_buffer_float */
-#ifdef GL_ARB_depth_texture
-  CONST_CAST(GLEW_ARB_depth_texture) = glewGetExtension("GL_ARB_depth_texture");
-#endif /* GL_ARB_depth_texture */
-#ifdef GL_ARB_draw_buffers
-  CONST_CAST(GLEW_ARB_draw_buffers) = glewGetExtension("GL_ARB_draw_buffers");
-  if (glewExperimental || GLEW_ARB_draw_buffers) CONST_CAST(GLEW_ARB_draw_buffers) = !_glewInit_GL_ARB_draw_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_draw_buffers */
-#ifdef GL_ARB_fragment_program
-  CONST_CAST(GLEW_ARB_fragment_program) = glewGetExtension("GL_ARB_fragment_program");
-#endif /* GL_ARB_fragment_program */
-#ifdef GL_ARB_fragment_program_shadow
-  CONST_CAST(GLEW_ARB_fragment_program_shadow) = glewGetExtension("GL_ARB_fragment_program_shadow");
-#endif /* GL_ARB_fragment_program_shadow */
-#ifdef GL_ARB_fragment_shader
-  CONST_CAST(GLEW_ARB_fragment_shader) = glewGetExtension("GL_ARB_fragment_shader");
-#endif /* GL_ARB_fragment_shader */
-#ifdef GL_ARB_half_float_pixel
-  CONST_CAST(GLEW_ARB_half_float_pixel) = glewGetExtension("GL_ARB_half_float_pixel");
-#endif /* GL_ARB_half_float_pixel */
-#ifdef GL_ARB_imaging
-  CONST_CAST(GLEW_ARB_imaging) = glewGetExtension("GL_ARB_imaging");
-  if (glewExperimental || GLEW_ARB_imaging) CONST_CAST(GLEW_ARB_imaging) = !_glewInit_GL_ARB_imaging(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_imaging */
-#ifdef GL_ARB_matrix_palette
-  CONST_CAST(GLEW_ARB_matrix_palette) = glewGetExtension("GL_ARB_matrix_palette");
-  if (glewExperimental || GLEW_ARB_matrix_palette) CONST_CAST(GLEW_ARB_matrix_palette) = !_glewInit_GL_ARB_matrix_palette(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_matrix_palette */
-#ifdef GL_ARB_multisample
-  CONST_CAST(GLEW_ARB_multisample) = glewGetExtension("GL_ARB_multisample");
-  if (glewExperimental || GLEW_ARB_multisample) CONST_CAST(GLEW_ARB_multisample) = !_glewInit_GL_ARB_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_multisample */
-#ifdef GL_ARB_multitexture
-  CONST_CAST(GLEW_ARB_multitexture) = glewGetExtension("GL_ARB_multitexture");
-  if (glewExperimental || GLEW_ARB_multitexture) CONST_CAST(GLEW_ARB_multitexture) = !_glewInit_GL_ARB_multitexture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_multitexture */
-#ifdef GL_ARB_occlusion_query
-  CONST_CAST(GLEW_ARB_occlusion_query) = glewGetExtension("GL_ARB_occlusion_query");
-  if (glewExperimental || GLEW_ARB_occlusion_query) CONST_CAST(GLEW_ARB_occlusion_query) = !_glewInit_GL_ARB_occlusion_query(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_occlusion_query */
-#ifdef GL_ARB_pixel_buffer_object
-  CONST_CAST(GLEW_ARB_pixel_buffer_object) = glewGetExtension("GL_ARB_pixel_buffer_object");
-#endif /* GL_ARB_pixel_buffer_object */
-#ifdef GL_ARB_point_parameters
-  CONST_CAST(GLEW_ARB_point_parameters) = glewGetExtension("GL_ARB_point_parameters");
-  if (glewExperimental || GLEW_ARB_point_parameters) CONST_CAST(GLEW_ARB_point_parameters) = !_glewInit_GL_ARB_point_parameters(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_point_parameters */
-#ifdef GL_ARB_point_sprite
-  CONST_CAST(GLEW_ARB_point_sprite) = glewGetExtension("GL_ARB_point_sprite");
-#endif /* GL_ARB_point_sprite */
-#ifdef GL_ARB_shader_objects
-  CONST_CAST(GLEW_ARB_shader_objects) = glewGetExtension("GL_ARB_shader_objects");
-  if (glewExperimental || GLEW_ARB_shader_objects) CONST_CAST(GLEW_ARB_shader_objects) = !_glewInit_GL_ARB_shader_objects(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_shader_objects */
-#ifdef GL_ARB_shading_language_100
-  CONST_CAST(GLEW_ARB_shading_language_100) = glewGetExtension("GL_ARB_shading_language_100");
-#endif /* GL_ARB_shading_language_100 */
-#ifdef GL_ARB_shadow
-  CONST_CAST(GLEW_ARB_shadow) = glewGetExtension("GL_ARB_shadow");
-#endif /* GL_ARB_shadow */
-#ifdef GL_ARB_shadow_ambient
-  CONST_CAST(GLEW_ARB_shadow_ambient) = glewGetExtension("GL_ARB_shadow_ambient");
-#endif /* GL_ARB_shadow_ambient */
-#ifdef GL_ARB_texture_border_clamp
-  CONST_CAST(GLEW_ARB_texture_border_clamp) = glewGetExtension("GL_ARB_texture_border_clamp");
-#endif /* GL_ARB_texture_border_clamp */
-#ifdef GL_ARB_texture_compression
-  CONST_CAST(GLEW_ARB_texture_compression) = glewGetExtension("GL_ARB_texture_compression");
-  if (glewExperimental || GLEW_ARB_texture_compression) CONST_CAST(GLEW_ARB_texture_compression) = !_glewInit_GL_ARB_texture_compression(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_texture_compression */
-#ifdef GL_ARB_texture_cube_map
-  CONST_CAST(GLEW_ARB_texture_cube_map) = glewGetExtension("GL_ARB_texture_cube_map");
-#endif /* GL_ARB_texture_cube_map */
-#ifdef GL_ARB_texture_env_add
-  CONST_CAST(GLEW_ARB_texture_env_add) = glewGetExtension("GL_ARB_texture_env_add");
-#endif /* GL_ARB_texture_env_add */
-#ifdef GL_ARB_texture_env_combine
-  CONST_CAST(GLEW_ARB_texture_env_combine) = glewGetExtension("GL_ARB_texture_env_combine");
-#endif /* GL_ARB_texture_env_combine */
-#ifdef GL_ARB_texture_env_crossbar
-  CONST_CAST(GLEW_ARB_texture_env_crossbar) = glewGetExtension("GL_ARB_texture_env_crossbar");
-#endif /* GL_ARB_texture_env_crossbar */
-#ifdef GL_ARB_texture_env_dot3
-  CONST_CAST(GLEW_ARB_texture_env_dot3) = glewGetExtension("GL_ARB_texture_env_dot3");
-#endif /* GL_ARB_texture_env_dot3 */
-#ifdef GL_ARB_texture_float
-  CONST_CAST(GLEW_ARB_texture_float) = glewGetExtension("GL_ARB_texture_float");
-#endif /* GL_ARB_texture_float */
-#ifdef GL_ARB_texture_mirrored_repeat
-  CONST_CAST(GLEW_ARB_texture_mirrored_repeat) = glewGetExtension("GL_ARB_texture_mirrored_repeat");
-#endif /* GL_ARB_texture_mirrored_repeat */
-#ifdef GL_ARB_texture_non_power_of_two
-  CONST_CAST(GLEW_ARB_texture_non_power_of_two) = glewGetExtension("GL_ARB_texture_non_power_of_two");
-#endif /* GL_ARB_texture_non_power_of_two */
-#ifdef GL_ARB_texture_rectangle
-  CONST_CAST(GLEW_ARB_texture_rectangle) = glewGetExtension("GL_ARB_texture_rectangle");
-#endif /* GL_ARB_texture_rectangle */
-#ifdef GL_ARB_transpose_matrix
-  CONST_CAST(GLEW_ARB_transpose_matrix) = glewGetExtension("GL_ARB_transpose_matrix");
-  if (glewExperimental || GLEW_ARB_transpose_matrix) CONST_CAST(GLEW_ARB_transpose_matrix) = !_glewInit_GL_ARB_transpose_matrix(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_transpose_matrix */
-#ifdef GL_ARB_vertex_blend
-  CONST_CAST(GLEW_ARB_vertex_blend) = glewGetExtension("GL_ARB_vertex_blend");
-  if (glewExperimental || GLEW_ARB_vertex_blend) CONST_CAST(GLEW_ARB_vertex_blend) = !_glewInit_GL_ARB_vertex_blend(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_vertex_blend */
-#ifdef GL_ARB_vertex_buffer_object
-  CONST_CAST(GLEW_ARB_vertex_buffer_object) = glewGetExtension("GL_ARB_vertex_buffer_object");
-  if (glewExperimental || GLEW_ARB_vertex_buffer_object) CONST_CAST(GLEW_ARB_vertex_buffer_object) = !_glewInit_GL_ARB_vertex_buffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_vertex_buffer_object */
-#ifdef GL_ARB_vertex_program
-  CONST_CAST(GLEW_ARB_vertex_program) = glewGetExtension("GL_ARB_vertex_program");
-  if (glewExperimental || GLEW_ARB_vertex_program) CONST_CAST(GLEW_ARB_vertex_program) = !_glewInit_GL_ARB_vertex_program(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_vertex_program */
-#ifdef GL_ARB_vertex_shader
-  CONST_CAST(GLEW_ARB_vertex_shader) = glewGetExtension("GL_ARB_vertex_shader");
-  if (glewExperimental || GLEW_ARB_vertex_shader) CONST_CAST(GLEW_ARB_vertex_shader) = !_glewInit_GL_ARB_vertex_shader(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_vertex_shader */
-#ifdef GL_ARB_window_pos
-  CONST_CAST(GLEW_ARB_window_pos) = glewGetExtension("GL_ARB_window_pos");
-  if (glewExperimental || GLEW_ARB_window_pos) CONST_CAST(GLEW_ARB_window_pos) = !_glewInit_GL_ARB_window_pos(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ARB_window_pos */
-#ifdef GL_ATIX_point_sprites
-  CONST_CAST(GLEW_ATIX_point_sprites) = glewGetExtension("GL_ATIX_point_sprites");
-#endif /* GL_ATIX_point_sprites */
-#ifdef GL_ATIX_texture_env_combine3
-  CONST_CAST(GLEW_ATIX_texture_env_combine3) = glewGetExtension("GL_ATIX_texture_env_combine3");
-#endif /* GL_ATIX_texture_env_combine3 */
-#ifdef GL_ATIX_texture_env_route
-  CONST_CAST(GLEW_ATIX_texture_env_route) = glewGetExtension("GL_ATIX_texture_env_route");
-#endif /* GL_ATIX_texture_env_route */
-#ifdef GL_ATIX_vertex_shader_output_point_size
-  CONST_CAST(GLEW_ATIX_vertex_shader_output_point_size) = glewGetExtension("GL_ATIX_vertex_shader_output_point_size");
-#endif /* GL_ATIX_vertex_shader_output_point_size */
-#ifdef GL_ATI_draw_buffers
-  CONST_CAST(GLEW_ATI_draw_buffers) = glewGetExtension("GL_ATI_draw_buffers");
-  if (glewExperimental || GLEW_ATI_draw_buffers) CONST_CAST(GLEW_ATI_draw_buffers) = !_glewInit_GL_ATI_draw_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_draw_buffers */
-#ifdef GL_ATI_element_array
-  CONST_CAST(GLEW_ATI_element_array) = glewGetExtension("GL_ATI_element_array");
-  if (glewExperimental || GLEW_ATI_element_array) CONST_CAST(GLEW_ATI_element_array) = !_glewInit_GL_ATI_element_array(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_element_array */
-#ifdef GL_ATI_envmap_bumpmap
-  CONST_CAST(GLEW_ATI_envmap_bumpmap) = glewGetExtension("GL_ATI_envmap_bumpmap");
-  if (glewExperimental || GLEW_ATI_envmap_bumpmap) CONST_CAST(GLEW_ATI_envmap_bumpmap) = !_glewInit_GL_ATI_envmap_bumpmap(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_envmap_bumpmap */
-#ifdef GL_ATI_fragment_shader
-  CONST_CAST(GLEW_ATI_fragment_shader) = glewGetExtension("GL_ATI_fragment_shader");
-  if (glewExperimental || GLEW_ATI_fragment_shader) CONST_CAST(GLEW_ATI_fragment_shader) = !_glewInit_GL_ATI_fragment_shader(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_fragment_shader */
-#ifdef GL_ATI_map_object_buffer
-  CONST_CAST(GLEW_ATI_map_object_buffer) = glewGetExtension("GL_ATI_map_object_buffer");
-  if (glewExperimental || GLEW_ATI_map_object_buffer) CONST_CAST(GLEW_ATI_map_object_buffer) = !_glewInit_GL_ATI_map_object_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_map_object_buffer */
-#ifdef GL_ATI_pn_triangles
-  CONST_CAST(GLEW_ATI_pn_triangles) = glewGetExtension("GL_ATI_pn_triangles");
-  if (glewExperimental || GLEW_ATI_pn_triangles) CONST_CAST(GLEW_ATI_pn_triangles) = !_glewInit_GL_ATI_pn_triangles(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_pn_triangles */
-#ifdef GL_ATI_separate_stencil
-  CONST_CAST(GLEW_ATI_separate_stencil) = glewGetExtension("GL_ATI_separate_stencil");
-  if (glewExperimental || GLEW_ATI_separate_stencil) CONST_CAST(GLEW_ATI_separate_stencil) = !_glewInit_GL_ATI_separate_stencil(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_separate_stencil */
-#ifdef GL_ATI_shader_texture_lod
-  CONST_CAST(GLEW_ATI_shader_texture_lod) = glewGetExtension("GL_ATI_shader_texture_lod");
-#endif /* GL_ATI_shader_texture_lod */
-#ifdef GL_ATI_text_fragment_shader
-  CONST_CAST(GLEW_ATI_text_fragment_shader) = glewGetExtension("GL_ATI_text_fragment_shader");
-#endif /* GL_ATI_text_fragment_shader */
-#ifdef GL_ATI_texture_compression_3dc
-  CONST_CAST(GLEW_ATI_texture_compression_3dc) = glewGetExtension("GL_ATI_texture_compression_3dc");
-#endif /* GL_ATI_texture_compression_3dc */
-#ifdef GL_ATI_texture_env_combine3
-  CONST_CAST(GLEW_ATI_texture_env_combine3) = glewGetExtension("GL_ATI_texture_env_combine3");
-#endif /* GL_ATI_texture_env_combine3 */
-#ifdef GL_ATI_texture_float
-  CONST_CAST(GLEW_ATI_texture_float) = glewGetExtension("GL_ATI_texture_float");
-#endif /* GL_ATI_texture_float */
-#ifdef GL_ATI_texture_mirror_once
-  CONST_CAST(GLEW_ATI_texture_mirror_once) = glewGetExtension("GL_ATI_texture_mirror_once");
-#endif /* GL_ATI_texture_mirror_once */
-#ifdef GL_ATI_vertex_array_object
-  CONST_CAST(GLEW_ATI_vertex_array_object) = glewGetExtension("GL_ATI_vertex_array_object");
-  if (glewExperimental || GLEW_ATI_vertex_array_object) CONST_CAST(GLEW_ATI_vertex_array_object) = !_glewInit_GL_ATI_vertex_array_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_vertex_array_object */
-#ifdef GL_ATI_vertex_attrib_array_object
-  CONST_CAST(GLEW_ATI_vertex_attrib_array_object) = glewGetExtension("GL_ATI_vertex_attrib_array_object");
-  if (glewExperimental || GLEW_ATI_vertex_attrib_array_object) CONST_CAST(GLEW_ATI_vertex_attrib_array_object) = !_glewInit_GL_ATI_vertex_attrib_array_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_vertex_attrib_array_object */
-#ifdef GL_ATI_vertex_streams
-  CONST_CAST(GLEW_ATI_vertex_streams) = glewGetExtension("GL_ATI_vertex_streams");
-  if (glewExperimental || GLEW_ATI_vertex_streams) CONST_CAST(GLEW_ATI_vertex_streams) = !_glewInit_GL_ATI_vertex_streams(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_ATI_vertex_streams */
-#ifdef GL_EXT_422_pixels
-  CONST_CAST(GLEW_EXT_422_pixels) = glewGetExtension("GL_EXT_422_pixels");
-#endif /* GL_EXT_422_pixels */
-#ifdef GL_EXT_Cg_shader
-  CONST_CAST(GLEW_EXT_Cg_shader) = glewGetExtension("GL_EXT_Cg_shader");
-#endif /* GL_EXT_Cg_shader */
-#ifdef GL_EXT_abgr
-  CONST_CAST(GLEW_EXT_abgr) = glewGetExtension("GL_EXT_abgr");
-#endif /* GL_EXT_abgr */
-#ifdef GL_EXT_bgra
-  CONST_CAST(GLEW_EXT_bgra) = glewGetExtension("GL_EXT_bgra");
-#endif /* GL_EXT_bgra */
-#ifdef GL_EXT_bindable_uniform
-  CONST_CAST(GLEW_EXT_bindable_uniform) = glewGetExtension("GL_EXT_bindable_uniform");
-  if (glewExperimental || GLEW_EXT_bindable_uniform) CONST_CAST(GLEW_EXT_bindable_uniform) = !_glewInit_GL_EXT_bindable_uniform(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_bindable_uniform */
-#ifdef GL_EXT_blend_color
-  CONST_CAST(GLEW_EXT_blend_color) = glewGetExtension("GL_EXT_blend_color");
-  if (glewExperimental || GLEW_EXT_blend_color) CONST_CAST(GLEW_EXT_blend_color) = !_glewInit_GL_EXT_blend_color(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_blend_color */
-#ifdef GL_EXT_blend_equation_separate
-  CONST_CAST(GLEW_EXT_blend_equation_separate) = glewGetExtension("GL_EXT_blend_equation_separate");
-  if (glewExperimental || GLEW_EXT_blend_equation_separate) CONST_CAST(GLEW_EXT_blend_equation_separate) = !_glewInit_GL_EXT_blend_equation_separate(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_blend_equation_separate */
-#ifdef GL_EXT_blend_func_separate
-  CONST_CAST(GLEW_EXT_blend_func_separate) = glewGetExtension("GL_EXT_blend_func_separate");
-  if (glewExperimental || GLEW_EXT_blend_func_separate) CONST_CAST(GLEW_EXT_blend_func_separate) = !_glewInit_GL_EXT_blend_func_separate(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_blend_func_separate */
-#ifdef GL_EXT_blend_logic_op
-  CONST_CAST(GLEW_EXT_blend_logic_op) = glewGetExtension("GL_EXT_blend_logic_op");
-#endif /* GL_EXT_blend_logic_op */
-#ifdef GL_EXT_blend_minmax
-  CONST_CAST(GLEW_EXT_blend_minmax) = glewGetExtension("GL_EXT_blend_minmax");
-  if (glewExperimental || GLEW_EXT_blend_minmax) CONST_CAST(GLEW_EXT_blend_minmax) = !_glewInit_GL_EXT_blend_minmax(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_blend_minmax */
-#ifdef GL_EXT_blend_subtract
-  CONST_CAST(GLEW_EXT_blend_subtract) = glewGetExtension("GL_EXT_blend_subtract");
-#endif /* GL_EXT_blend_subtract */
-#ifdef GL_EXT_clip_volume_hint
-  CONST_CAST(GLEW_EXT_clip_volume_hint) = glewGetExtension("GL_EXT_clip_volume_hint");
-#endif /* GL_EXT_clip_volume_hint */
-#ifdef GL_EXT_cmyka
-  CONST_CAST(GLEW_EXT_cmyka) = glewGetExtension("GL_EXT_cmyka");
-#endif /* GL_EXT_cmyka */
-#ifdef GL_EXT_color_subtable
-  CONST_CAST(GLEW_EXT_color_subtable) = glewGetExtension("GL_EXT_color_subtable");
-  if (glewExperimental || GLEW_EXT_color_subtable) CONST_CAST(GLEW_EXT_color_subtable) = !_glewInit_GL_EXT_color_subtable(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_color_subtable */
-#ifdef GL_EXT_compiled_vertex_array
-  CONST_CAST(GLEW_EXT_compiled_vertex_array) = glewGetExtension("GL_EXT_compiled_vertex_array");
-  if (glewExperimental || GLEW_EXT_compiled_vertex_array) CONST_CAST(GLEW_EXT_compiled_vertex_array) = !_glewInit_GL_EXT_compiled_vertex_array(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_compiled_vertex_array */
-#ifdef GL_EXT_convolution
-  CONST_CAST(GLEW_EXT_convolution) = glewGetExtension("GL_EXT_convolution");
-  if (glewExperimental || GLEW_EXT_convolution) CONST_CAST(GLEW_EXT_convolution) = !_glewInit_GL_EXT_convolution(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_convolution */
-#ifdef GL_EXT_coordinate_frame
-  CONST_CAST(GLEW_EXT_coordinate_frame) = glewGetExtension("GL_EXT_coordinate_frame");
-  if (glewExperimental || GLEW_EXT_coordinate_frame) CONST_CAST(GLEW_EXT_coordinate_frame) = !_glewInit_GL_EXT_coordinate_frame(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_coordinate_frame */
-#ifdef GL_EXT_copy_texture
-  CONST_CAST(GLEW_EXT_copy_texture) = glewGetExtension("GL_EXT_copy_texture");
-  if (glewExperimental || GLEW_EXT_copy_texture) CONST_CAST(GLEW_EXT_copy_texture) = !_glewInit_GL_EXT_copy_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_copy_texture */
-#ifdef GL_EXT_cull_vertex
-  CONST_CAST(GLEW_EXT_cull_vertex) = glewGetExtension("GL_EXT_cull_vertex");
-  if (glewExperimental || GLEW_EXT_cull_vertex) CONST_CAST(GLEW_EXT_cull_vertex) = !_glewInit_GL_EXT_cull_vertex(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_cull_vertex */
-#ifdef GL_EXT_depth_bounds_test
-  CONST_CAST(GLEW_EXT_depth_bounds_test) = glewGetExtension("GL_EXT_depth_bounds_test");
-  if (glewExperimental || GLEW_EXT_depth_bounds_test) CONST_CAST(GLEW_EXT_depth_bounds_test) = !_glewInit_GL_EXT_depth_bounds_test(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_depth_bounds_test */
-#ifdef GL_EXT_draw_buffers2
-  CONST_CAST(GLEW_EXT_draw_buffers2) = glewGetExtension("GL_EXT_draw_buffers2");
-  if (glewExperimental || GLEW_EXT_draw_buffers2) CONST_CAST(GLEW_EXT_draw_buffers2) = !_glewInit_GL_EXT_draw_buffers2(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_draw_buffers2 */
-#ifdef GL_EXT_draw_instanced
-  CONST_CAST(GLEW_EXT_draw_instanced) = glewGetExtension("GL_EXT_draw_instanced");
-  if (glewExperimental || GLEW_EXT_draw_instanced) CONST_CAST(GLEW_EXT_draw_instanced) = !_glewInit_GL_EXT_draw_instanced(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_draw_instanced */
-#ifdef GL_EXT_draw_range_elements
-  CONST_CAST(GLEW_EXT_draw_range_elements) = glewGetExtension("GL_EXT_draw_range_elements");
-  if (glewExperimental || GLEW_EXT_draw_range_elements) CONST_CAST(GLEW_EXT_draw_range_elements) = !_glewInit_GL_EXT_draw_range_elements(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_draw_range_elements */
-#ifdef GL_EXT_fog_coord
-  CONST_CAST(GLEW_EXT_fog_coord) = glewGetExtension("GL_EXT_fog_coord");
-  if (glewExperimental || GLEW_EXT_fog_coord) CONST_CAST(GLEW_EXT_fog_coord) = !_glewInit_GL_EXT_fog_coord(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_fog_coord */
-#ifdef GL_EXT_fragment_lighting
-  CONST_CAST(GLEW_EXT_fragment_lighting) = glewGetExtension("GL_EXT_fragment_lighting");
-  if (glewExperimental || GLEW_EXT_fragment_lighting) CONST_CAST(GLEW_EXT_fragment_lighting) = !_glewInit_GL_EXT_fragment_lighting(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_fragment_lighting */
-#ifdef GL_EXT_framebuffer_blit
-  CONST_CAST(GLEW_EXT_framebuffer_blit) = glewGetExtension("GL_EXT_framebuffer_blit");
-  if (glewExperimental || GLEW_EXT_framebuffer_blit) CONST_CAST(GLEW_EXT_framebuffer_blit) = !_glewInit_GL_EXT_framebuffer_blit(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_framebuffer_blit */
-#ifdef GL_EXT_framebuffer_multisample
-  CONST_CAST(GLEW_EXT_framebuffer_multisample) = glewGetExtension("GL_EXT_framebuffer_multisample");
-  if (glewExperimental || GLEW_EXT_framebuffer_multisample) CONST_CAST(GLEW_EXT_framebuffer_multisample) = !_glewInit_GL_EXT_framebuffer_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_framebuffer_multisample */
-#ifdef GL_EXT_framebuffer_object
-  CONST_CAST(GLEW_EXT_framebuffer_object) = glewGetExtension("GL_EXT_framebuffer_object");
-  if (glewExperimental || GLEW_EXT_framebuffer_object) CONST_CAST(GLEW_EXT_framebuffer_object) = !_glewInit_GL_EXT_framebuffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_framebuffer_object */
-#ifdef GL_EXT_framebuffer_sRGB
-  CONST_CAST(GLEW_EXT_framebuffer_sRGB) = glewGetExtension("GL_EXT_framebuffer_sRGB");
-#endif /* GL_EXT_framebuffer_sRGB */
-#ifdef GL_EXT_geometry_shader4
-  CONST_CAST(GLEW_EXT_geometry_shader4) = glewGetExtension("GL_EXT_geometry_shader4");
-  if (glewExperimental || GLEW_EXT_geometry_shader4) CONST_CAST(GLEW_EXT_geometry_shader4) = !_glewInit_GL_EXT_geometry_shader4(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_geometry_shader4 */
-#ifdef GL_EXT_gpu_program_parameters
-  CONST_CAST(GLEW_EXT_gpu_program_parameters) = glewGetExtension("GL_EXT_gpu_program_parameters");
-  if (glewExperimental || GLEW_EXT_gpu_program_parameters) CONST_CAST(GLEW_EXT_gpu_program_parameters) = !_glewInit_GL_EXT_gpu_program_parameters(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_gpu_program_parameters */
-#ifdef GL_EXT_gpu_shader4
-  CONST_CAST(GLEW_EXT_gpu_shader4) = glewGetExtension("GL_EXT_gpu_shader4");
-  if (glewExperimental || GLEW_EXT_gpu_shader4) CONST_CAST(GLEW_EXT_gpu_shader4) = !_glewInit_GL_EXT_gpu_shader4(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_gpu_shader4 */
-#ifdef GL_EXT_histogram
-  CONST_CAST(GLEW_EXT_histogram) = glewGetExtension("GL_EXT_histogram");
-  if (glewExperimental || GLEW_EXT_histogram) CONST_CAST(GLEW_EXT_histogram) = !_glewInit_GL_EXT_histogram(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_histogram */
-#ifdef GL_EXT_index_array_formats
-  CONST_CAST(GLEW_EXT_index_array_formats) = glewGetExtension("GL_EXT_index_array_formats");
-#endif /* GL_EXT_index_array_formats */
-#ifdef GL_EXT_index_func
-  CONST_CAST(GLEW_EXT_index_func) = glewGetExtension("GL_EXT_index_func");
-  if (glewExperimental || GLEW_EXT_index_func) CONST_CAST(GLEW_EXT_index_func) = !_glewInit_GL_EXT_index_func(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_index_func */
-#ifdef GL_EXT_index_material
-  CONST_CAST(GLEW_EXT_index_material) = glewGetExtension("GL_EXT_index_material");
-  if (glewExperimental || GLEW_EXT_index_material) CONST_CAST(GLEW_EXT_index_material) = !_glewInit_GL_EXT_index_material(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_index_material */
-#ifdef GL_EXT_index_texture
-  CONST_CAST(GLEW_EXT_index_texture) = glewGetExtension("GL_EXT_index_texture");
-#endif /* GL_EXT_index_texture */
-#ifdef GL_EXT_light_texture
-  CONST_CAST(GLEW_EXT_light_texture) = glewGetExtension("GL_EXT_light_texture");
-  if (glewExperimental || GLEW_EXT_light_texture) CONST_CAST(GLEW_EXT_light_texture) = !_glewInit_GL_EXT_light_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_light_texture */
-#ifdef GL_EXT_misc_attribute
-  CONST_CAST(GLEW_EXT_misc_attribute) = glewGetExtension("GL_EXT_misc_attribute");
-#endif /* GL_EXT_misc_attribute */
-#ifdef GL_EXT_multi_draw_arrays
-  CONST_CAST(GLEW_EXT_multi_draw_arrays) = glewGetExtension("GL_EXT_multi_draw_arrays");
-  if (glewExperimental || GLEW_EXT_multi_draw_arrays) CONST_CAST(GLEW_EXT_multi_draw_arrays) = !_glewInit_GL_EXT_multi_draw_arrays(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_multi_draw_arrays */
-#ifdef GL_EXT_multisample
-  CONST_CAST(GLEW_EXT_multisample) = glewGetExtension("GL_EXT_multisample");
-  if (glewExperimental || GLEW_EXT_multisample) CONST_CAST(GLEW_EXT_multisample) = !_glewInit_GL_EXT_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_multisample */
-#ifdef GL_EXT_packed_depth_stencil
-  CONST_CAST(GLEW_EXT_packed_depth_stencil) = glewGetExtension("GL_EXT_packed_depth_stencil");
-#endif /* GL_EXT_packed_depth_stencil */
-#ifdef GL_EXT_packed_float
-  CONST_CAST(GLEW_EXT_packed_float) = glewGetExtension("GL_EXT_packed_float");
-#endif /* GL_EXT_packed_float */
-#ifdef GL_EXT_packed_pixels
-  CONST_CAST(GLEW_EXT_packed_pixels) = glewGetExtension("GL_EXT_packed_pixels");
-#endif /* GL_EXT_packed_pixels */
-#ifdef GL_EXT_paletted_texture
-  CONST_CAST(GLEW_EXT_paletted_texture) = glewGetExtension("GL_EXT_paletted_texture");
-  if (glewExperimental || GLEW_EXT_paletted_texture) CONST_CAST(GLEW_EXT_paletted_texture) = !_glewInit_GL_EXT_paletted_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_paletted_texture */
-#ifdef GL_EXT_pixel_buffer_object
-  CONST_CAST(GLEW_EXT_pixel_buffer_object) = glewGetExtension("GL_EXT_pixel_buffer_object");
-#endif /* GL_EXT_pixel_buffer_object */
-#ifdef GL_EXT_pixel_transform
-  CONST_CAST(GLEW_EXT_pixel_transform) = glewGetExtension("GL_EXT_pixel_transform");
-  if (glewExperimental || GLEW_EXT_pixel_transform) CONST_CAST(GLEW_EXT_pixel_transform) = !_glewInit_GL_EXT_pixel_transform(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_pixel_transform */
-#ifdef GL_EXT_pixel_transform_color_table
-  CONST_CAST(GLEW_EXT_pixel_transform_color_table) = glewGetExtension("GL_EXT_pixel_transform_color_table");
-#endif /* GL_EXT_pixel_transform_color_table */
-#ifdef GL_EXT_point_parameters
-  CONST_CAST(GLEW_EXT_point_parameters) = glewGetExtension("GL_EXT_point_parameters");
-  if (glewExperimental || GLEW_EXT_point_parameters) CONST_CAST(GLEW_EXT_point_parameters) = !_glewInit_GL_EXT_point_parameters(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_point_parameters */
-#ifdef GL_EXT_polygon_offset
-  CONST_CAST(GLEW_EXT_polygon_offset) = glewGetExtension("GL_EXT_polygon_offset");
-  if (glewExperimental || GLEW_EXT_polygon_offset) CONST_CAST(GLEW_EXT_polygon_offset) = !_glewInit_GL_EXT_polygon_offset(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_polygon_offset */
-#ifdef GL_EXT_rescale_normal
-  CONST_CAST(GLEW_EXT_rescale_normal) = glewGetExtension("GL_EXT_rescale_normal");
-#endif /* GL_EXT_rescale_normal */
-#ifdef GL_EXT_scene_marker
-  CONST_CAST(GLEW_EXT_scene_marker) = glewGetExtension("GL_EXT_scene_marker");
-  if (glewExperimental || GLEW_EXT_scene_marker) CONST_CAST(GLEW_EXT_scene_marker) = !_glewInit_GL_EXT_scene_marker(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_scene_marker */
-#ifdef GL_EXT_secondary_color
-  CONST_CAST(GLEW_EXT_secondary_color) = glewGetExtension("GL_EXT_secondary_color");
-  if (glewExperimental || GLEW_EXT_secondary_color) CONST_CAST(GLEW_EXT_secondary_color) = !_glewInit_GL_EXT_secondary_color(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_secondary_color */
-#ifdef GL_EXT_separate_specular_color
-  CONST_CAST(GLEW_EXT_separate_specular_color) = glewGetExtension("GL_EXT_separate_specular_color");
-#endif /* GL_EXT_separate_specular_color */
-#ifdef GL_EXT_shadow_funcs
-  CONST_CAST(GLEW_EXT_shadow_funcs) = glewGetExtension("GL_EXT_shadow_funcs");
-#endif /* GL_EXT_shadow_funcs */
-#ifdef GL_EXT_shared_texture_palette
-  CONST_CAST(GLEW_EXT_shared_texture_palette) = glewGetExtension("GL_EXT_shared_texture_palette");
-#endif /* GL_EXT_shared_texture_palette */
-#ifdef GL_EXT_stencil_clear_tag
-  CONST_CAST(GLEW_EXT_stencil_clear_tag) = glewGetExtension("GL_EXT_stencil_clear_tag");
-#endif /* GL_EXT_stencil_clear_tag */
-#ifdef GL_EXT_stencil_two_side
-  CONST_CAST(GLEW_EXT_stencil_two_side) = glewGetExtension("GL_EXT_stencil_two_side");
-  if (glewExperimental || GLEW_EXT_stencil_two_side) CONST_CAST(GLEW_EXT_stencil_two_side) = !_glewInit_GL_EXT_stencil_two_side(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_stencil_two_side */
-#ifdef GL_EXT_stencil_wrap
-  CONST_CAST(GLEW_EXT_stencil_wrap) = glewGetExtension("GL_EXT_stencil_wrap");
-#endif /* GL_EXT_stencil_wrap */
-#ifdef GL_EXT_subtexture
-  CONST_CAST(GLEW_EXT_subtexture) = glewGetExtension("GL_EXT_subtexture");
-  if (glewExperimental || GLEW_EXT_subtexture) CONST_CAST(GLEW_EXT_subtexture) = !_glewInit_GL_EXT_subtexture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_subtexture */
-#ifdef GL_EXT_texture
-  CONST_CAST(GLEW_EXT_texture) = glewGetExtension("GL_EXT_texture");
-#endif /* GL_EXT_texture */
-#ifdef GL_EXT_texture3D
-  CONST_CAST(GLEW_EXT_texture3D) = glewGetExtension("GL_EXT_texture3D");
-  if (glewExperimental || GLEW_EXT_texture3D) CONST_CAST(GLEW_EXT_texture3D) = !_glewInit_GL_EXT_texture3D(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_texture3D */
-#ifdef GL_EXT_texture_array
-  CONST_CAST(GLEW_EXT_texture_array) = glewGetExtension("GL_EXT_texture_array");
-#endif /* GL_EXT_texture_array */
-#ifdef GL_EXT_texture_buffer_object
-  CONST_CAST(GLEW_EXT_texture_buffer_object) = glewGetExtension("GL_EXT_texture_buffer_object");
-  if (glewExperimental || GLEW_EXT_texture_buffer_object) CONST_CAST(GLEW_EXT_texture_buffer_object) = !_glewInit_GL_EXT_texture_buffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_texture_buffer_object */
-#ifdef GL_EXT_texture_compression_dxt1
-  CONST_CAST(GLEW_EXT_texture_compression_dxt1) = glewGetExtension("GL_EXT_texture_compression_dxt1");
-#endif /* GL_EXT_texture_compression_dxt1 */
-#ifdef GL_EXT_texture_compression_latc
-  CONST_CAST(GLEW_EXT_texture_compression_latc) = glewGetExtension("GL_EXT_texture_compression_latc");
-#endif /* GL_EXT_texture_compression_latc */
-#ifdef GL_EXT_texture_compression_rgtc
-  CONST_CAST(GLEW_EXT_texture_compression_rgtc) = glewGetExtension("GL_EXT_texture_compression_rgtc");
-#endif /* GL_EXT_texture_compression_rgtc */
-#ifdef GL_EXT_texture_compression_s3tc
-  CONST_CAST(GLEW_EXT_texture_compression_s3tc) = glewGetExtension("GL_EXT_texture_compression_s3tc");
-#endif /* GL_EXT_texture_compression_s3tc */
-#ifdef GL_EXT_texture_cube_map
-  CONST_CAST(GLEW_EXT_texture_cube_map) = glewGetExtension("GL_EXT_texture_cube_map");
-#endif /* GL_EXT_texture_cube_map */
-#ifdef GL_EXT_texture_edge_clamp
-  CONST_CAST(GLEW_EXT_texture_edge_clamp) = glewGetExtension("GL_EXT_texture_edge_clamp");
-#endif /* GL_EXT_texture_edge_clamp */
-#ifdef GL_EXT_texture_env
-  CONST_CAST(GLEW_EXT_texture_env) = glewGetExtension("GL_EXT_texture_env");
-#endif /* GL_EXT_texture_env */
-#ifdef GL_EXT_texture_env_add
-  CONST_CAST(GLEW_EXT_texture_env_add) = glewGetExtension("GL_EXT_texture_env_add");
-#endif /* GL_EXT_texture_env_add */
-#ifdef GL_EXT_texture_env_combine
-  CONST_CAST(GLEW_EXT_texture_env_combine) = glewGetExtension("GL_EXT_texture_env_combine");
-#endif /* GL_EXT_texture_env_combine */
-#ifdef GL_EXT_texture_env_dot3
-  CONST_CAST(GLEW_EXT_texture_env_dot3) = glewGetExtension("GL_EXT_texture_env_dot3");
-#endif /* GL_EXT_texture_env_dot3 */
-#ifdef GL_EXT_texture_filter_anisotropic
-  CONST_CAST(GLEW_EXT_texture_filter_anisotropic) = glewGetExtension("GL_EXT_texture_filter_anisotropic");
-#endif /* GL_EXT_texture_filter_anisotropic */
-#ifdef GL_EXT_texture_integer
-  CONST_CAST(GLEW_EXT_texture_integer) = glewGetExtension("GL_EXT_texture_integer");
-  if (glewExperimental || GLEW_EXT_texture_integer) CONST_CAST(GLEW_EXT_texture_integer) = !_glewInit_GL_EXT_texture_integer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_texture_integer */
-#ifdef GL_EXT_texture_lod_bias
-  CONST_CAST(GLEW_EXT_texture_lod_bias) = glewGetExtension("GL_EXT_texture_lod_bias");
-#endif /* GL_EXT_texture_lod_bias */
-#ifdef GL_EXT_texture_mirror_clamp
-  CONST_CAST(GLEW_EXT_texture_mirror_clamp) = glewGetExtension("GL_EXT_texture_mirror_clamp");
-#endif /* GL_EXT_texture_mirror_clamp */
-#ifdef GL_EXT_texture_object
-  CONST_CAST(GLEW_EXT_texture_object) = glewGetExtension("GL_EXT_texture_object");
-  if (glewExperimental || GLEW_EXT_texture_object) CONST_CAST(GLEW_EXT_texture_object) = !_glewInit_GL_EXT_texture_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_texture_object */
-#ifdef GL_EXT_texture_perturb_normal
-  CONST_CAST(GLEW_EXT_texture_perturb_normal) = glewGetExtension("GL_EXT_texture_perturb_normal");
-  if (glewExperimental || GLEW_EXT_texture_perturb_normal) CONST_CAST(GLEW_EXT_texture_perturb_normal) = !_glewInit_GL_EXT_texture_perturb_normal(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_texture_perturb_normal */
-#ifdef GL_EXT_texture_rectangle
-  CONST_CAST(GLEW_EXT_texture_rectangle) = glewGetExtension("GL_EXT_texture_rectangle");
-#endif /* GL_EXT_texture_rectangle */
-#ifdef GL_EXT_texture_sRGB
-  CONST_CAST(GLEW_EXT_texture_sRGB) = glewGetExtension("GL_EXT_texture_sRGB");
-#endif /* GL_EXT_texture_sRGB */
-#ifdef GL_EXT_texture_shared_exponent
-  CONST_CAST(GLEW_EXT_texture_shared_exponent) = glewGetExtension("GL_EXT_texture_shared_exponent");
-#endif /* GL_EXT_texture_shared_exponent */
-#ifdef GL_EXT_timer_query
-  CONST_CAST(GLEW_EXT_timer_query) = glewGetExtension("GL_EXT_timer_query");
-  if (glewExperimental || GLEW_EXT_timer_query) CONST_CAST(GLEW_EXT_timer_query) = !_glewInit_GL_EXT_timer_query(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_timer_query */
-#ifdef GL_EXT_vertex_array
-  CONST_CAST(GLEW_EXT_vertex_array) = glewGetExtension("GL_EXT_vertex_array");
-  if (glewExperimental || GLEW_EXT_vertex_array) CONST_CAST(GLEW_EXT_vertex_array) = !_glewInit_GL_EXT_vertex_array(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_vertex_array */
-#ifdef GL_EXT_vertex_shader
-  CONST_CAST(GLEW_EXT_vertex_shader) = glewGetExtension("GL_EXT_vertex_shader");
-  if (glewExperimental || GLEW_EXT_vertex_shader) CONST_CAST(GLEW_EXT_vertex_shader) = !_glewInit_GL_EXT_vertex_shader(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_vertex_shader */
-#ifdef GL_EXT_vertex_weighting
-  CONST_CAST(GLEW_EXT_vertex_weighting) = glewGetExtension("GL_EXT_vertex_weighting");
-  if (glewExperimental || GLEW_EXT_vertex_weighting) CONST_CAST(GLEW_EXT_vertex_weighting) = !_glewInit_GL_EXT_vertex_weighting(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_EXT_vertex_weighting */
-#ifdef GL_GREMEDY_frame_terminator
-  CONST_CAST(GLEW_GREMEDY_frame_terminator) = glewGetExtension("GL_GREMEDY_frame_terminator");
-  if (glewExperimental || GLEW_GREMEDY_frame_terminator) CONST_CAST(GLEW_GREMEDY_frame_terminator) = !_glewInit_GL_GREMEDY_frame_terminator(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_GREMEDY_frame_terminator */
-#ifdef GL_GREMEDY_string_marker
-  CONST_CAST(GLEW_GREMEDY_string_marker) = glewGetExtension("GL_GREMEDY_string_marker");
-  if (glewExperimental || GLEW_GREMEDY_string_marker) CONST_CAST(GLEW_GREMEDY_string_marker) = !_glewInit_GL_GREMEDY_string_marker(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_GREMEDY_string_marker */
-#ifdef GL_HP_convolution_border_modes
-  CONST_CAST(GLEW_HP_convolution_border_modes) = glewGetExtension("GL_HP_convolution_border_modes");
-#endif /* GL_HP_convolution_border_modes */
-#ifdef GL_HP_image_transform
-  CONST_CAST(GLEW_HP_image_transform) = glewGetExtension("GL_HP_image_transform");
-  if (glewExperimental || GLEW_HP_image_transform) CONST_CAST(GLEW_HP_image_transform) = !_glewInit_GL_HP_image_transform(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_HP_image_transform */
-#ifdef GL_HP_occlusion_test
-  CONST_CAST(GLEW_HP_occlusion_test) = glewGetExtension("GL_HP_occlusion_test");
-#endif /* GL_HP_occlusion_test */
-#ifdef GL_HP_texture_lighting
-  CONST_CAST(GLEW_HP_texture_lighting) = glewGetExtension("GL_HP_texture_lighting");
-#endif /* GL_HP_texture_lighting */
-#ifdef GL_IBM_cull_vertex
-  CONST_CAST(GLEW_IBM_cull_vertex) = glewGetExtension("GL_IBM_cull_vertex");
-#endif /* GL_IBM_cull_vertex */
-#ifdef GL_IBM_multimode_draw_arrays
-  CONST_CAST(GLEW_IBM_multimode_draw_arrays) = glewGetExtension("GL_IBM_multimode_draw_arrays");
-  if (glewExperimental || GLEW_IBM_multimode_draw_arrays) CONST_CAST(GLEW_IBM_multimode_draw_arrays) = !_glewInit_GL_IBM_multimode_draw_arrays(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_IBM_multimode_draw_arrays */
-#ifdef GL_IBM_rasterpos_clip
-  CONST_CAST(GLEW_IBM_rasterpos_clip) = glewGetExtension("GL_IBM_rasterpos_clip");
-#endif /* GL_IBM_rasterpos_clip */
-#ifdef GL_IBM_static_data
-  CONST_CAST(GLEW_IBM_static_data) = glewGetExtension("GL_IBM_static_data");
-#endif /* GL_IBM_static_data */
-#ifdef GL_IBM_texture_mirrored_repeat
-  CONST_CAST(GLEW_IBM_texture_mirrored_repeat) = glewGetExtension("GL_IBM_texture_mirrored_repeat");
-#endif /* GL_IBM_texture_mirrored_repeat */
-#ifdef GL_IBM_vertex_array_lists
-  CONST_CAST(GLEW_IBM_vertex_array_lists) = glewGetExtension("GL_IBM_vertex_array_lists");
-  if (glewExperimental || GLEW_IBM_vertex_array_lists) CONST_CAST(GLEW_IBM_vertex_array_lists) = !_glewInit_GL_IBM_vertex_array_lists(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_IBM_vertex_array_lists */
-#ifdef GL_INGR_color_clamp
-  CONST_CAST(GLEW_INGR_color_clamp) = glewGetExtension("GL_INGR_color_clamp");
-#endif /* GL_INGR_color_clamp */
-#ifdef GL_INGR_interlace_read
-  CONST_CAST(GLEW_INGR_interlace_read) = glewGetExtension("GL_INGR_interlace_read");
-#endif /* GL_INGR_interlace_read */
-#ifdef GL_INTEL_parallel_arrays
-  CONST_CAST(GLEW_INTEL_parallel_arrays) = glewGetExtension("GL_INTEL_parallel_arrays");
-  if (glewExperimental || GLEW_INTEL_parallel_arrays) CONST_CAST(GLEW_INTEL_parallel_arrays) = !_glewInit_GL_INTEL_parallel_arrays(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_INTEL_parallel_arrays */
-#ifdef GL_INTEL_texture_scissor
-  CONST_CAST(GLEW_INTEL_texture_scissor) = glewGetExtension("GL_INTEL_texture_scissor");
-  if (glewExperimental || GLEW_INTEL_texture_scissor) CONST_CAST(GLEW_INTEL_texture_scissor) = !_glewInit_GL_INTEL_texture_scissor(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_INTEL_texture_scissor */
-#ifdef GL_KTX_buffer_region
-  CONST_CAST(GLEW_KTX_buffer_region) = glewGetExtension("GL_KTX_buffer_region");
-  if (glewExperimental || GLEW_KTX_buffer_region) CONST_CAST(GLEW_KTX_buffer_region) = !_glewInit_GL_KTX_buffer_region(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_KTX_buffer_region */
-#ifdef GL_MESAX_texture_stack
-  CONST_CAST(GLEW_MESAX_texture_stack) = glewGetExtension("GL_MESAX_texture_stack");
-#endif /* GL_MESAX_texture_stack */
-#ifdef GL_MESA_pack_invert
-  CONST_CAST(GLEW_MESA_pack_invert) = glewGetExtension("GL_MESA_pack_invert");
-#endif /* GL_MESA_pack_invert */
-#ifdef GL_MESA_resize_buffers
-  CONST_CAST(GLEW_MESA_resize_buffers) = glewGetExtension("GL_MESA_resize_buffers");
-  if (glewExperimental || GLEW_MESA_resize_buffers) CONST_CAST(GLEW_MESA_resize_buffers) = !_glewInit_GL_MESA_resize_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_MESA_resize_buffers */
-#ifdef GL_MESA_window_pos
-  CONST_CAST(GLEW_MESA_window_pos) = glewGetExtension("GL_MESA_window_pos");
-  if (glewExperimental || GLEW_MESA_window_pos) CONST_CAST(GLEW_MESA_window_pos) = !_glewInit_GL_MESA_window_pos(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_MESA_window_pos */
-#ifdef GL_MESA_ycbcr_texture
-  CONST_CAST(GLEW_MESA_ycbcr_texture) = glewGetExtension("GL_MESA_ycbcr_texture");
-#endif /* GL_MESA_ycbcr_texture */
-#ifdef GL_NV_blend_square
-  CONST_CAST(GLEW_NV_blend_square) = glewGetExtension("GL_NV_blend_square");
-#endif /* GL_NV_blend_square */
-#ifdef GL_NV_copy_depth_to_color
-  CONST_CAST(GLEW_NV_copy_depth_to_color) = glewGetExtension("GL_NV_copy_depth_to_color");
-#endif /* GL_NV_copy_depth_to_color */
-#ifdef GL_NV_depth_buffer_float
-  CONST_CAST(GLEW_NV_depth_buffer_float) = glewGetExtension("GL_NV_depth_buffer_float");
-  if (glewExperimental || GLEW_NV_depth_buffer_float) CONST_CAST(GLEW_NV_depth_buffer_float) = !_glewInit_GL_NV_depth_buffer_float(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_depth_buffer_float */
-#ifdef GL_NV_depth_clamp
-  CONST_CAST(GLEW_NV_depth_clamp) = glewGetExtension("GL_NV_depth_clamp");
-#endif /* GL_NV_depth_clamp */
-#ifdef GL_NV_depth_range_unclamped
-  CONST_CAST(GLEW_NV_depth_range_unclamped) = glewGetExtension("GL_NV_depth_range_unclamped");
-#endif /* GL_NV_depth_range_unclamped */
-#ifdef GL_NV_evaluators
-  CONST_CAST(GLEW_NV_evaluators) = glewGetExtension("GL_NV_evaluators");
-  if (glewExperimental || GLEW_NV_evaluators) CONST_CAST(GLEW_NV_evaluators) = !_glewInit_GL_NV_evaluators(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_evaluators */
-#ifdef GL_NV_fence
-  CONST_CAST(GLEW_NV_fence) = glewGetExtension("GL_NV_fence");
-  if (glewExperimental || GLEW_NV_fence) CONST_CAST(GLEW_NV_fence) = !_glewInit_GL_NV_fence(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_fence */
-#ifdef GL_NV_float_buffer
-  CONST_CAST(GLEW_NV_float_buffer) = glewGetExtension("GL_NV_float_buffer");
-#endif /* GL_NV_float_buffer */
-#ifdef GL_NV_fog_distance
-  CONST_CAST(GLEW_NV_fog_distance) = glewGetExtension("GL_NV_fog_distance");
-#endif /* GL_NV_fog_distance */
-#ifdef GL_NV_fragment_program
-  CONST_CAST(GLEW_NV_fragment_program) = glewGetExtension("GL_NV_fragment_program");
-  if (glewExperimental || GLEW_NV_fragment_program) CONST_CAST(GLEW_NV_fragment_program) = !_glewInit_GL_NV_fragment_program(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_fragment_program */
-#ifdef GL_NV_fragment_program2
-  CONST_CAST(GLEW_NV_fragment_program2) = glewGetExtension("GL_NV_fragment_program2");
-#endif /* GL_NV_fragment_program2 */
-#ifdef GL_NV_fragment_program4
-  CONST_CAST(GLEW_NV_fragment_program4) = glewGetExtension("GL_NV_gpu_program4");
-#endif /* GL_NV_fragment_program4 */
-#ifdef GL_NV_fragment_program_option
-  CONST_CAST(GLEW_NV_fragment_program_option) = glewGetExtension("GL_NV_fragment_program_option");
-#endif /* GL_NV_fragment_program_option */
-#ifdef GL_NV_framebuffer_multisample_coverage
-  CONST_CAST(GLEW_NV_framebuffer_multisample_coverage) = glewGetExtension("GL_NV_framebuffer_multisample_coverage");
-  if (glewExperimental || GLEW_NV_framebuffer_multisample_coverage) CONST_CAST(GLEW_NV_framebuffer_multisample_coverage) = !_glewInit_GL_NV_framebuffer_multisample_coverage(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_framebuffer_multisample_coverage */
-#ifdef GL_NV_geometry_program4
-  CONST_CAST(GLEW_NV_geometry_program4) = glewGetExtension("GL_NV_gpu_program4");
-  if (glewExperimental || GLEW_NV_geometry_program4) CONST_CAST(GLEW_NV_geometry_program4) = !_glewInit_GL_NV_geometry_program4(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_geometry_program4 */
-#ifdef GL_NV_geometry_shader4
-  CONST_CAST(GLEW_NV_geometry_shader4) = glewGetExtension("GL_NV_geometry_shader4");
-#endif /* GL_NV_geometry_shader4 */
-#ifdef GL_NV_gpu_program4
-  CONST_CAST(GLEW_NV_gpu_program4) = glewGetExtension("GL_NV_gpu_program4");
-  if (glewExperimental || GLEW_NV_gpu_program4) CONST_CAST(GLEW_NV_gpu_program4) = !_glewInit_GL_NV_gpu_program4(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_gpu_program4 */
-#ifdef GL_NV_half_float
-  CONST_CAST(GLEW_NV_half_float) = glewGetExtension("GL_NV_half_float");
-  if (glewExperimental || GLEW_NV_half_float) CONST_CAST(GLEW_NV_half_float) = !_glewInit_GL_NV_half_float(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_half_float */
-#ifdef GL_NV_light_max_exponent
-  CONST_CAST(GLEW_NV_light_max_exponent) = glewGetExtension("GL_NV_light_max_exponent");
-#endif /* GL_NV_light_max_exponent */
-#ifdef GL_NV_multisample_filter_hint
-  CONST_CAST(GLEW_NV_multisample_filter_hint) = glewGetExtension("GL_NV_multisample_filter_hint");
-#endif /* GL_NV_multisample_filter_hint */
-#ifdef GL_NV_occlusion_query
-  CONST_CAST(GLEW_NV_occlusion_query) = glewGetExtension("GL_NV_occlusion_query");
-  if (glewExperimental || GLEW_NV_occlusion_query) CONST_CAST(GLEW_NV_occlusion_query) = !_glewInit_GL_NV_occlusion_query(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_occlusion_query */
-#ifdef GL_NV_packed_depth_stencil
-  CONST_CAST(GLEW_NV_packed_depth_stencil) = glewGetExtension("GL_NV_packed_depth_stencil");
-#endif /* GL_NV_packed_depth_stencil */
-#ifdef GL_NV_parameter_buffer_object
-  CONST_CAST(GLEW_NV_parameter_buffer_object) = glewGetExtension("GL_NV_parameter_buffer_object");
-  if (glewExperimental || GLEW_NV_parameter_buffer_object) CONST_CAST(GLEW_NV_parameter_buffer_object) = !_glewInit_GL_NV_parameter_buffer_object(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_parameter_buffer_object */
-#ifdef GL_NV_pixel_data_range
-  CONST_CAST(GLEW_NV_pixel_data_range) = glewGetExtension("GL_NV_pixel_data_range");
-  if (glewExperimental || GLEW_NV_pixel_data_range) CONST_CAST(GLEW_NV_pixel_data_range) = !_glewInit_GL_NV_pixel_data_range(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_pixel_data_range */
-#ifdef GL_NV_point_sprite
-  CONST_CAST(GLEW_NV_point_sprite) = glewGetExtension("GL_NV_point_sprite");
-  if (glewExperimental || GLEW_NV_point_sprite) CONST_CAST(GLEW_NV_point_sprite) = !_glewInit_GL_NV_point_sprite(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_point_sprite */
-#ifdef GL_NV_primitive_restart
-  CONST_CAST(GLEW_NV_primitive_restart) = glewGetExtension("GL_NV_primitive_restart");
-  if (glewExperimental || GLEW_NV_primitive_restart) CONST_CAST(GLEW_NV_primitive_restart) = !_glewInit_GL_NV_primitive_restart(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_primitive_restart */
-#ifdef GL_NV_register_combiners
-  CONST_CAST(GLEW_NV_register_combiners) = glewGetExtension("GL_NV_register_combiners");
-  if (glewExperimental || GLEW_NV_register_combiners) CONST_CAST(GLEW_NV_register_combiners) = !_glewInit_GL_NV_register_combiners(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_register_combiners */
-#ifdef GL_NV_register_combiners2
-  CONST_CAST(GLEW_NV_register_combiners2) = glewGetExtension("GL_NV_register_combiners2");
-  if (glewExperimental || GLEW_NV_register_combiners2) CONST_CAST(GLEW_NV_register_combiners2) = !_glewInit_GL_NV_register_combiners2(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_register_combiners2 */
-#ifdef GL_NV_texgen_emboss
-  CONST_CAST(GLEW_NV_texgen_emboss) = glewGetExtension("GL_NV_texgen_emboss");
-#endif /* GL_NV_texgen_emboss */
-#ifdef GL_NV_texgen_reflection
-  CONST_CAST(GLEW_NV_texgen_reflection) = glewGetExtension("GL_NV_texgen_reflection");
-#endif /* GL_NV_texgen_reflection */
-#ifdef GL_NV_texture_compression_vtc
-  CONST_CAST(GLEW_NV_texture_compression_vtc) = glewGetExtension("GL_NV_texture_compression_vtc");
-#endif /* GL_NV_texture_compression_vtc */
-#ifdef GL_NV_texture_env_combine4
-  CONST_CAST(GLEW_NV_texture_env_combine4) = glewGetExtension("GL_NV_texture_env_combine4");
-#endif /* GL_NV_texture_env_combine4 */
-#ifdef GL_NV_texture_expand_normal
-  CONST_CAST(GLEW_NV_texture_expand_normal) = glewGetExtension("GL_NV_texture_expand_normal");
-#endif /* GL_NV_texture_expand_normal */
-#ifdef GL_NV_texture_rectangle
-  CONST_CAST(GLEW_NV_texture_rectangle) = glewGetExtension("GL_NV_texture_rectangle");
-#endif /* GL_NV_texture_rectangle */
-#ifdef GL_NV_texture_shader
-  CONST_CAST(GLEW_NV_texture_shader) = glewGetExtension("GL_NV_texture_shader");
-#endif /* GL_NV_texture_shader */
-#ifdef GL_NV_texture_shader2
-  CONST_CAST(GLEW_NV_texture_shader2) = glewGetExtension("GL_NV_texture_shader2");
-#endif /* GL_NV_texture_shader2 */
-#ifdef GL_NV_texture_shader3
-  CONST_CAST(GLEW_NV_texture_shader3) = glewGetExtension("GL_NV_texture_shader3");
-#endif /* GL_NV_texture_shader3 */
-#ifdef GL_NV_transform_feedback
-  CONST_CAST(GLEW_NV_transform_feedback) = glewGetExtension("GL_NV_transform_feedback");
-  if (glewExperimental || GLEW_NV_transform_feedback) CONST_CAST(GLEW_NV_transform_feedback) = !_glewInit_GL_NV_transform_feedback(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_transform_feedback */
-#ifdef GL_NV_vertex_array_range
-  CONST_CAST(GLEW_NV_vertex_array_range) = glewGetExtension("GL_NV_vertex_array_range");
-  if (glewExperimental || GLEW_NV_vertex_array_range) CONST_CAST(GLEW_NV_vertex_array_range) = !_glewInit_GL_NV_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_vertex_array_range */
-#ifdef GL_NV_vertex_array_range2
-  CONST_CAST(GLEW_NV_vertex_array_range2) = glewGetExtension("GL_NV_vertex_array_range2");
-#endif /* GL_NV_vertex_array_range2 */
-#ifdef GL_NV_vertex_program
-  CONST_CAST(GLEW_NV_vertex_program) = glewGetExtension("GL_NV_vertex_program");
-  if (glewExperimental || GLEW_NV_vertex_program) CONST_CAST(GLEW_NV_vertex_program) = !_glewInit_GL_NV_vertex_program(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_NV_vertex_program */
-#ifdef GL_NV_vertex_program1_1
-  CONST_CAST(GLEW_NV_vertex_program1_1) = glewGetExtension("GL_NV_vertex_program1_1");
-#endif /* GL_NV_vertex_program1_1 */
-#ifdef GL_NV_vertex_program2
-  CONST_CAST(GLEW_NV_vertex_program2) = glewGetExtension("GL_NV_vertex_program2");
-#endif /* GL_NV_vertex_program2 */
-#ifdef GL_NV_vertex_program2_option
-  CONST_CAST(GLEW_NV_vertex_program2_option) = glewGetExtension("GL_NV_vertex_program2_option");
-#endif /* GL_NV_vertex_program2_option */
-#ifdef GL_NV_vertex_program3
-  CONST_CAST(GLEW_NV_vertex_program3) = glewGetExtension("GL_NV_vertex_program3");
-#endif /* GL_NV_vertex_program3 */
-#ifdef GL_NV_vertex_program4
-  CONST_CAST(GLEW_NV_vertex_program4) = glewGetExtension("GL_NV_gpu_program4");
-#endif /* GL_NV_vertex_program4 */
-#ifdef GL_OES_byte_coordinates
-  CONST_CAST(GLEW_OES_byte_coordinates) = glewGetExtension("GL_OES_byte_coordinates");
-#endif /* GL_OES_byte_coordinates */
-#ifdef GL_OES_compressed_paletted_texture
-  CONST_CAST(GLEW_OES_compressed_paletted_texture) = glewGetExtension("GL_OES_compressed_paletted_texture");
-#endif /* GL_OES_compressed_paletted_texture */
-#ifdef GL_OES_read_format
-  CONST_CAST(GLEW_OES_read_format) = glewGetExtension("GL_OES_read_format");
-#endif /* GL_OES_read_format */
-#ifdef GL_OES_single_precision
-  CONST_CAST(GLEW_OES_single_precision) = glewGetExtension("GL_OES_single_precision");
-  if (glewExperimental || GLEW_OES_single_precision) CONST_CAST(GLEW_OES_single_precision) = !_glewInit_GL_OES_single_precision(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_OES_single_precision */
-#ifdef GL_OML_interlace
-  CONST_CAST(GLEW_OML_interlace) = glewGetExtension("GL_OML_interlace");
-#endif /* GL_OML_interlace */
-#ifdef GL_OML_resample
-  CONST_CAST(GLEW_OML_resample) = glewGetExtension("GL_OML_resample");
-#endif /* GL_OML_resample */
-#ifdef GL_OML_subsample
-  CONST_CAST(GLEW_OML_subsample) = glewGetExtension("GL_OML_subsample");
-#endif /* GL_OML_subsample */
-#ifdef GL_PGI_misc_hints
-  CONST_CAST(GLEW_PGI_misc_hints) = glewGetExtension("GL_PGI_misc_hints");
-#endif /* GL_PGI_misc_hints */
-#ifdef GL_PGI_vertex_hints
-  CONST_CAST(GLEW_PGI_vertex_hints) = glewGetExtension("GL_PGI_vertex_hints");
-#endif /* GL_PGI_vertex_hints */
-#ifdef GL_REND_screen_coordinates
-  CONST_CAST(GLEW_REND_screen_coordinates) = glewGetExtension("GL_REND_screen_coordinates");
-#endif /* GL_REND_screen_coordinates */
-#ifdef GL_S3_s3tc
-  CONST_CAST(GLEW_S3_s3tc) = glewGetExtension("GL_S3_s3tc");
-#endif /* GL_S3_s3tc */
-#ifdef GL_SGIS_color_range
-  CONST_CAST(GLEW_SGIS_color_range) = glewGetExtension("GL_SGIS_color_range");
-#endif /* GL_SGIS_color_range */
-#ifdef GL_SGIS_detail_texture
-  CONST_CAST(GLEW_SGIS_detail_texture) = glewGetExtension("GL_SGIS_detail_texture");
-  if (glewExperimental || GLEW_SGIS_detail_texture) CONST_CAST(GLEW_SGIS_detail_texture) = !_glewInit_GL_SGIS_detail_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIS_detail_texture */
-#ifdef GL_SGIS_fog_function
-  CONST_CAST(GLEW_SGIS_fog_function) = glewGetExtension("GL_SGIS_fog_function");
-  if (glewExperimental || GLEW_SGIS_fog_function) CONST_CAST(GLEW_SGIS_fog_function) = !_glewInit_GL_SGIS_fog_function(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIS_fog_function */
-#ifdef GL_SGIS_generate_mipmap
-  CONST_CAST(GLEW_SGIS_generate_mipmap) = glewGetExtension("GL_SGIS_generate_mipmap");
-#endif /* GL_SGIS_generate_mipmap */
-#ifdef GL_SGIS_multisample
-  CONST_CAST(GLEW_SGIS_multisample) = glewGetExtension("GL_SGIS_multisample");
-  if (glewExperimental || GLEW_SGIS_multisample) CONST_CAST(GLEW_SGIS_multisample) = !_glewInit_GL_SGIS_multisample(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIS_multisample */
-#ifdef GL_SGIS_pixel_texture
-  CONST_CAST(GLEW_SGIS_pixel_texture) = glewGetExtension("GL_SGIS_pixel_texture");
-#endif /* GL_SGIS_pixel_texture */
-#ifdef GL_SGIS_sharpen_texture
-  CONST_CAST(GLEW_SGIS_sharpen_texture) = glewGetExtension("GL_SGIS_sharpen_texture");
-  if (glewExperimental || GLEW_SGIS_sharpen_texture) CONST_CAST(GLEW_SGIS_sharpen_texture) = !_glewInit_GL_SGIS_sharpen_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIS_sharpen_texture */
-#ifdef GL_SGIS_texture4D
-  CONST_CAST(GLEW_SGIS_texture4D) = glewGetExtension("GL_SGIS_texture4D");
-  if (glewExperimental || GLEW_SGIS_texture4D) CONST_CAST(GLEW_SGIS_texture4D) = !_glewInit_GL_SGIS_texture4D(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIS_texture4D */
-#ifdef GL_SGIS_texture_border_clamp
-  CONST_CAST(GLEW_SGIS_texture_border_clamp) = glewGetExtension("GL_SGIS_texture_border_clamp");
-#endif /* GL_SGIS_texture_border_clamp */
-#ifdef GL_SGIS_texture_edge_clamp
-  CONST_CAST(GLEW_SGIS_texture_edge_clamp) = glewGetExtension("GL_SGIS_texture_edge_clamp");
-#endif /* GL_SGIS_texture_edge_clamp */
-#ifdef GL_SGIS_texture_filter4
-  CONST_CAST(GLEW_SGIS_texture_filter4) = glewGetExtension("GL_SGIS_texture_filter4");
-  if (glewExperimental || GLEW_SGIS_texture_filter4) CONST_CAST(GLEW_SGIS_texture_filter4) = !_glewInit_GL_SGIS_texture_filter4(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIS_texture_filter4 */
-#ifdef GL_SGIS_texture_lod
-  CONST_CAST(GLEW_SGIS_texture_lod) = glewGetExtension("GL_SGIS_texture_lod");
-#endif /* GL_SGIS_texture_lod */
-#ifdef GL_SGIS_texture_select
-  CONST_CAST(GLEW_SGIS_texture_select) = glewGetExtension("GL_SGIS_texture_select");
-#endif /* GL_SGIS_texture_select */
-#ifdef GL_SGIX_async
-  CONST_CAST(GLEW_SGIX_async) = glewGetExtension("GL_SGIX_async");
-  if (glewExperimental || GLEW_SGIX_async) CONST_CAST(GLEW_SGIX_async) = !_glewInit_GL_SGIX_async(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_async */
-#ifdef GL_SGIX_async_histogram
-  CONST_CAST(GLEW_SGIX_async_histogram) = glewGetExtension("GL_SGIX_async_histogram");
-#endif /* GL_SGIX_async_histogram */
-#ifdef GL_SGIX_async_pixel
-  CONST_CAST(GLEW_SGIX_async_pixel) = glewGetExtension("GL_SGIX_async_pixel");
-#endif /* GL_SGIX_async_pixel */
-#ifdef GL_SGIX_blend_alpha_minmax
-  CONST_CAST(GLEW_SGIX_blend_alpha_minmax) = glewGetExtension("GL_SGIX_blend_alpha_minmax");
-#endif /* GL_SGIX_blend_alpha_minmax */
-#ifdef GL_SGIX_clipmap
-  CONST_CAST(GLEW_SGIX_clipmap) = glewGetExtension("GL_SGIX_clipmap");
-#endif /* GL_SGIX_clipmap */
-#ifdef GL_SGIX_depth_texture
-  CONST_CAST(GLEW_SGIX_depth_texture) = glewGetExtension("GL_SGIX_depth_texture");
-#endif /* GL_SGIX_depth_texture */
-#ifdef GL_SGIX_flush_raster
-  CONST_CAST(GLEW_SGIX_flush_raster) = glewGetExtension("GL_SGIX_flush_raster");
-  if (glewExperimental || GLEW_SGIX_flush_raster) CONST_CAST(GLEW_SGIX_flush_raster) = !_glewInit_GL_SGIX_flush_raster(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_flush_raster */
-#ifdef GL_SGIX_fog_offset
-  CONST_CAST(GLEW_SGIX_fog_offset) = glewGetExtension("GL_SGIX_fog_offset");
-#endif /* GL_SGIX_fog_offset */
-#ifdef GL_SGIX_fog_texture
-  CONST_CAST(GLEW_SGIX_fog_texture) = glewGetExtension("GL_SGIX_fog_texture");
-  if (glewExperimental || GLEW_SGIX_fog_texture) CONST_CAST(GLEW_SGIX_fog_texture) = !_glewInit_GL_SGIX_fog_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_fog_texture */
-#ifdef GL_SGIX_fragment_specular_lighting
-  CONST_CAST(GLEW_SGIX_fragment_specular_lighting) = glewGetExtension("GL_SGIX_fragment_specular_lighting");
-  if (glewExperimental || GLEW_SGIX_fragment_specular_lighting) CONST_CAST(GLEW_SGIX_fragment_specular_lighting) = !_glewInit_GL_SGIX_fragment_specular_lighting(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_fragment_specular_lighting */
-#ifdef GL_SGIX_framezoom
-  CONST_CAST(GLEW_SGIX_framezoom) = glewGetExtension("GL_SGIX_framezoom");
-  if (glewExperimental || GLEW_SGIX_framezoom) CONST_CAST(GLEW_SGIX_framezoom) = !_glewInit_GL_SGIX_framezoom(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_framezoom */
-#ifdef GL_SGIX_interlace
-  CONST_CAST(GLEW_SGIX_interlace) = glewGetExtension("GL_SGIX_interlace");
-#endif /* GL_SGIX_interlace */
-#ifdef GL_SGIX_ir_instrument1
-  CONST_CAST(GLEW_SGIX_ir_instrument1) = glewGetExtension("GL_SGIX_ir_instrument1");
-#endif /* GL_SGIX_ir_instrument1 */
-#ifdef GL_SGIX_list_priority
-  CONST_CAST(GLEW_SGIX_list_priority) = glewGetExtension("GL_SGIX_list_priority");
-#endif /* GL_SGIX_list_priority */
-#ifdef GL_SGIX_pixel_texture
-  CONST_CAST(GLEW_SGIX_pixel_texture) = glewGetExtension("GL_SGIX_pixel_texture");
-  if (glewExperimental || GLEW_SGIX_pixel_texture) CONST_CAST(GLEW_SGIX_pixel_texture) = !_glewInit_GL_SGIX_pixel_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_pixel_texture */
-#ifdef GL_SGIX_pixel_texture_bits
-  CONST_CAST(GLEW_SGIX_pixel_texture_bits) = glewGetExtension("GL_SGIX_pixel_texture_bits");
-#endif /* GL_SGIX_pixel_texture_bits */
-#ifdef GL_SGIX_reference_plane
-  CONST_CAST(GLEW_SGIX_reference_plane) = glewGetExtension("GL_SGIX_reference_plane");
-  if (glewExperimental || GLEW_SGIX_reference_plane) CONST_CAST(GLEW_SGIX_reference_plane) = !_glewInit_GL_SGIX_reference_plane(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_reference_plane */
-#ifdef GL_SGIX_resample
-  CONST_CAST(GLEW_SGIX_resample) = glewGetExtension("GL_SGIX_resample");
-#endif /* GL_SGIX_resample */
-#ifdef GL_SGIX_shadow
-  CONST_CAST(GLEW_SGIX_shadow) = glewGetExtension("GL_SGIX_shadow");
-#endif /* GL_SGIX_shadow */
-#ifdef GL_SGIX_shadow_ambient
-  CONST_CAST(GLEW_SGIX_shadow_ambient) = glewGetExtension("GL_SGIX_shadow_ambient");
-#endif /* GL_SGIX_shadow_ambient */
-#ifdef GL_SGIX_sprite
-  CONST_CAST(GLEW_SGIX_sprite) = glewGetExtension("GL_SGIX_sprite");
-  if (glewExperimental || GLEW_SGIX_sprite) CONST_CAST(GLEW_SGIX_sprite) = !_glewInit_GL_SGIX_sprite(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_sprite */
-#ifdef GL_SGIX_tag_sample_buffer
-  CONST_CAST(GLEW_SGIX_tag_sample_buffer) = glewGetExtension("GL_SGIX_tag_sample_buffer");
-  if (glewExperimental || GLEW_SGIX_tag_sample_buffer) CONST_CAST(GLEW_SGIX_tag_sample_buffer) = !_glewInit_GL_SGIX_tag_sample_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGIX_tag_sample_buffer */
-#ifdef GL_SGIX_texture_add_env
-  CONST_CAST(GLEW_SGIX_texture_add_env) = glewGetExtension("GL_SGIX_texture_add_env");
-#endif /* GL_SGIX_texture_add_env */
-#ifdef GL_SGIX_texture_coordinate_clamp
-  CONST_CAST(GLEW_SGIX_texture_coordinate_clamp) = glewGetExtension("GL_SGIX_texture_coordinate_clamp");
-#endif /* GL_SGIX_texture_coordinate_clamp */
-#ifdef GL_SGIX_texture_lod_bias
-  CONST_CAST(GLEW_SGIX_texture_lod_bias) = glewGetExtension("GL_SGIX_texture_lod_bias");
-#endif /* GL_SGIX_texture_lod_bias */
-#ifdef GL_SGIX_texture_multi_buffer
-  CONST_CAST(GLEW_SGIX_texture_multi_buffer) = glewGetExtension("GL_SGIX_texture_multi_buffer");
-#endif /* GL_SGIX_texture_multi_buffer */
-#ifdef GL_SGIX_texture_range
-  CONST_CAST(GLEW_SGIX_texture_range) = glewGetExtension("GL_SGIX_texture_range");
-#endif /* GL_SGIX_texture_range */
-#ifdef GL_SGIX_texture_scale_bias
-  CONST_CAST(GLEW_SGIX_texture_scale_bias) = glewGetExtension("GL_SGIX_texture_scale_bias");
-#endif /* GL_SGIX_texture_scale_bias */
-#ifdef GL_SGIX_vertex_preclip
-  CONST_CAST(GLEW_SGIX_vertex_preclip) = glewGetExtension("GL_SGIX_vertex_preclip");
-#endif /* GL_SGIX_vertex_preclip */
-#ifdef GL_SGIX_vertex_preclip_hint
-  CONST_CAST(GLEW_SGIX_vertex_preclip_hint) = glewGetExtension("GL_SGIX_vertex_preclip_hint");
-#endif /* GL_SGIX_vertex_preclip_hint */
-#ifdef GL_SGIX_ycrcb
-  CONST_CAST(GLEW_SGIX_ycrcb) = glewGetExtension("GL_SGIX_ycrcb");
-#endif /* GL_SGIX_ycrcb */
-#ifdef GL_SGI_color_matrix
-  CONST_CAST(GLEW_SGI_color_matrix) = glewGetExtension("GL_SGI_color_matrix");
-#endif /* GL_SGI_color_matrix */
-#ifdef GL_SGI_color_table
-  CONST_CAST(GLEW_SGI_color_table) = glewGetExtension("GL_SGI_color_table");
-  if (glewExperimental || GLEW_SGI_color_table) CONST_CAST(GLEW_SGI_color_table) = !_glewInit_GL_SGI_color_table(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SGI_color_table */
-#ifdef GL_SGI_texture_color_table
-  CONST_CAST(GLEW_SGI_texture_color_table) = glewGetExtension("GL_SGI_texture_color_table");
-#endif /* GL_SGI_texture_color_table */
-#ifdef GL_SUNX_constant_data
-  CONST_CAST(GLEW_SUNX_constant_data) = glewGetExtension("GL_SUNX_constant_data");
-  if (glewExperimental || GLEW_SUNX_constant_data) CONST_CAST(GLEW_SUNX_constant_data) = !_glewInit_GL_SUNX_constant_data(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SUNX_constant_data */
-#ifdef GL_SUN_convolution_border_modes
-  CONST_CAST(GLEW_SUN_convolution_border_modes) = glewGetExtension("GL_SUN_convolution_border_modes");
-#endif /* GL_SUN_convolution_border_modes */
-#ifdef GL_SUN_global_alpha
-  CONST_CAST(GLEW_SUN_global_alpha) = glewGetExtension("GL_SUN_global_alpha");
-  if (glewExperimental || GLEW_SUN_global_alpha) CONST_CAST(GLEW_SUN_global_alpha) = !_glewInit_GL_SUN_global_alpha(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SUN_global_alpha */
-#ifdef GL_SUN_mesh_array
-  CONST_CAST(GLEW_SUN_mesh_array) = glewGetExtension("GL_SUN_mesh_array");
-#endif /* GL_SUN_mesh_array */
-#ifdef GL_SUN_read_video_pixels
-  CONST_CAST(GLEW_SUN_read_video_pixels) = glewGetExtension("GL_SUN_read_video_pixels");
-  if (glewExperimental || GLEW_SUN_read_video_pixels) CONST_CAST(GLEW_SUN_read_video_pixels) = !_glewInit_GL_SUN_read_video_pixels(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SUN_read_video_pixels */
-#ifdef GL_SUN_slice_accum
-  CONST_CAST(GLEW_SUN_slice_accum) = glewGetExtension("GL_SUN_slice_accum");
-#endif /* GL_SUN_slice_accum */
-#ifdef GL_SUN_triangle_list
-  CONST_CAST(GLEW_SUN_triangle_list) = glewGetExtension("GL_SUN_triangle_list");
-  if (glewExperimental || GLEW_SUN_triangle_list) CONST_CAST(GLEW_SUN_triangle_list) = !_glewInit_GL_SUN_triangle_list(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SUN_triangle_list */
-#ifdef GL_SUN_vertex
-  CONST_CAST(GLEW_SUN_vertex) = glewGetExtension("GL_SUN_vertex");
-  if (glewExperimental || GLEW_SUN_vertex) CONST_CAST(GLEW_SUN_vertex) = !_glewInit_GL_SUN_vertex(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_SUN_vertex */
-#ifdef GL_WIN_phong_shading
-  CONST_CAST(GLEW_WIN_phong_shading) = glewGetExtension("GL_WIN_phong_shading");
-#endif /* GL_WIN_phong_shading */
-#ifdef GL_WIN_specular_fog
-  CONST_CAST(GLEW_WIN_specular_fog) = glewGetExtension("GL_WIN_specular_fog");
-#endif /* GL_WIN_specular_fog */
-#ifdef GL_WIN_swap_hint
-  CONST_CAST(GLEW_WIN_swap_hint) = glewGetExtension("GL_WIN_swap_hint");
-  if (glewExperimental || GLEW_WIN_swap_hint) CONST_CAST(GLEW_WIN_swap_hint) = !_glewInit_GL_WIN_swap_hint(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GL_WIN_swap_hint */
-
-  return GLEW_OK;
-}
-
-
-#if defined(_WIN32)
-
-#if !defined(GLEW_MX)
-
-PFNWGLSETSTEREOEMITTERSTATE3DLPROC __wglewSetStereoEmitterState3DL = NULL;
-
-PFNWGLCREATEBUFFERREGIONARBPROC __wglewCreateBufferRegionARB = NULL;
-PFNWGLDELETEBUFFERREGIONARBPROC __wglewDeleteBufferRegionARB = NULL;
-PFNWGLRESTOREBUFFERREGIONARBPROC __wglewRestoreBufferRegionARB = NULL;
-PFNWGLSAVEBUFFERREGIONARBPROC __wglewSaveBufferRegionARB = NULL;
-
-PFNWGLGETEXTENSIONSSTRINGARBPROC __wglewGetExtensionsStringARB = NULL;
-
-PFNWGLGETCURRENTREADDCARBPROC __wglewGetCurrentReadDCARB = NULL;
-PFNWGLMAKECONTEXTCURRENTARBPROC __wglewMakeContextCurrentARB = NULL;
-
-PFNWGLCREATEPBUFFERARBPROC __wglewCreatePbufferARB = NULL;
-PFNWGLDESTROYPBUFFERARBPROC __wglewDestroyPbufferARB = NULL;
-PFNWGLGETPBUFFERDCARBPROC __wglewGetPbufferDCARB = NULL;
-PFNWGLQUERYPBUFFERARBPROC __wglewQueryPbufferARB = NULL;
-PFNWGLRELEASEPBUFFERDCARBPROC __wglewReleasePbufferDCARB = NULL;
-
-PFNWGLCHOOSEPIXELFORMATARBPROC __wglewChoosePixelFormatARB = NULL;
-PFNWGLGETPIXELFORMATATTRIBFVARBPROC __wglewGetPixelFormatAttribfvARB = NULL;
-PFNWGLGETPIXELFORMATATTRIBIVARBPROC __wglewGetPixelFormatAttribivARB = NULL;
-
-PFNWGLBINDTEXIMAGEARBPROC __wglewBindTexImageARB = NULL;
-PFNWGLRELEASETEXIMAGEARBPROC __wglewReleaseTexImageARB = NULL;
-PFNWGLSETPBUFFERATTRIBARBPROC __wglewSetPbufferAttribARB = NULL;
-
-PFNWGLBINDDISPLAYCOLORTABLEEXTPROC __wglewBindDisplayColorTableEXT = NULL;
-PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC __wglewCreateDisplayColorTableEXT = NULL;
-PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC __wglewDestroyDisplayColorTableEXT = NULL;
-PFNWGLLOADDISPLAYCOLORTABLEEXTPROC __wglewLoadDisplayColorTableEXT = NULL;
-
-PFNWGLGETEXTENSIONSSTRINGEXTPROC __wglewGetExtensionsStringEXT = NULL;
-
-PFNWGLGETCURRENTREADDCEXTPROC __wglewGetCurrentReadDCEXT = NULL;
-PFNWGLMAKECONTEXTCURRENTEXTPROC __wglewMakeContextCurrentEXT = NULL;
-
-PFNWGLCREATEPBUFFEREXTPROC __wglewCreatePbufferEXT = NULL;
-PFNWGLDESTROYPBUFFEREXTPROC __wglewDestroyPbufferEXT = NULL;
-PFNWGLGETPBUFFERDCEXTPROC __wglewGetPbufferDCEXT = NULL;
-PFNWGLQUERYPBUFFEREXTPROC __wglewQueryPbufferEXT = NULL;
-PFNWGLRELEASEPBUFFERDCEXTPROC __wglewReleasePbufferDCEXT = NULL;
-
-PFNWGLCHOOSEPIXELFORMATEXTPROC __wglewChoosePixelFormatEXT = NULL;
-PFNWGLGETPIXELFORMATATTRIBFVEXTPROC __wglewGetPixelFormatAttribfvEXT = NULL;
-PFNWGLGETPIXELFORMATATTRIBIVEXTPROC __wglewGetPixelFormatAttribivEXT = NULL;
-
-PFNWGLGETSWAPINTERVALEXTPROC __wglewGetSwapIntervalEXT = NULL;
-PFNWGLSWAPINTERVALEXTPROC __wglewSwapIntervalEXT = NULL;
-
-PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC __wglewGetDigitalVideoParametersI3D = NULL;
-PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC __wglewSetDigitalVideoParametersI3D = NULL;
-
-PFNWGLGETGAMMATABLEI3DPROC __wglewGetGammaTableI3D = NULL;
-PFNWGLGETGAMMATABLEPARAMETERSI3DPROC __wglewGetGammaTableParametersI3D = NULL;
-PFNWGLSETGAMMATABLEI3DPROC __wglewSetGammaTableI3D = NULL;
-PFNWGLSETGAMMATABLEPARAMETERSI3DPROC __wglewSetGammaTableParametersI3D = NULL;
-
-PFNWGLDISABLEGENLOCKI3DPROC __wglewDisableGenlockI3D = NULL;
-PFNWGLENABLEGENLOCKI3DPROC __wglewEnableGenlockI3D = NULL;
-PFNWGLGENLOCKSAMPLERATEI3DPROC __wglewGenlockSampleRateI3D = NULL;
-PFNWGLGENLOCKSOURCEDELAYI3DPROC __wglewGenlockSourceDelayI3D = NULL;
-PFNWGLGENLOCKSOURCEEDGEI3DPROC __wglewGenlockSourceEdgeI3D = NULL;
-PFNWGLGENLOCKSOURCEI3DPROC __wglewGenlockSourceI3D = NULL;
-PFNWGLGETGENLOCKSAMPLERATEI3DPROC __wglewGetGenlockSampleRateI3D = NULL;
-PFNWGLGETGENLOCKSOURCEDELAYI3DPROC __wglewGetGenlockSourceDelayI3D = NULL;
-PFNWGLGETGENLOCKSOURCEEDGEI3DPROC __wglewGetGenlockSourceEdgeI3D = NULL;
-PFNWGLGETGENLOCKSOURCEI3DPROC __wglewGetGenlockSourceI3D = NULL;
-PFNWGLISENABLEDGENLOCKI3DPROC __wglewIsEnabledGenlockI3D = NULL;
-PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC __wglewQueryGenlockMaxSourceDelayI3D = NULL;
-
-PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC __wglewAssociateImageBufferEventsI3D = NULL;
-PFNWGLCREATEIMAGEBUFFERI3DPROC __wglewCreateImageBufferI3D = NULL;
-PFNWGLDESTROYIMAGEBUFFERI3DPROC __wglewDestroyImageBufferI3D = NULL;
-PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC __wglewReleaseImageBufferEventsI3D = NULL;
-
-PFNWGLDISABLEFRAMELOCKI3DPROC __wglewDisableFrameLockI3D = NULL;
-PFNWGLENABLEFRAMELOCKI3DPROC __wglewEnableFrameLockI3D = NULL;
-PFNWGLISENABLEDFRAMELOCKI3DPROC __wglewIsEnabledFrameLockI3D = NULL;
-PFNWGLQUERYFRAMELOCKMASTERI3DPROC __wglewQueryFrameLockMasterI3D = NULL;
-
-PFNWGLBEGINFRAMETRACKINGI3DPROC __wglewBeginFrameTrackingI3D = NULL;
-PFNWGLENDFRAMETRACKINGI3DPROC __wglewEndFrameTrackingI3D = NULL;
-PFNWGLGETFRAMEUSAGEI3DPROC __wglewGetFrameUsageI3D = NULL;
-PFNWGLQUERYFRAMETRACKINGI3DPROC __wglewQueryFrameTrackingI3D = NULL;
-
-PFNWGLCREATEAFFINITYDCNVPROC __wglewCreateAffinityDCNV = NULL;
-PFNWGLDELETEDCNVPROC __wglewDeleteDCNV = NULL;
-PFNWGLENUMGPUDEVICESNVPROC __wglewEnumGpuDevicesNV = NULL;
-PFNWGLENUMGPUSFROMAFFINITYDCNVPROC __wglewEnumGpusFromAffinityDCNV = NULL;
-PFNWGLENUMGPUSNVPROC __wglewEnumGpusNV = NULL;
-
-PFNWGLALLOCATEMEMORYNVPROC __wglewAllocateMemoryNV = NULL;
-PFNWGLFREEMEMORYNVPROC __wglewFreeMemoryNV = NULL;
-
-PFNWGLGETMSCRATEOMLPROC __wglewGetMscRateOML = NULL;
-PFNWGLGETSYNCVALUESOMLPROC __wglewGetSyncValuesOML = NULL;
-PFNWGLSWAPBUFFERSMSCOMLPROC __wglewSwapBuffersMscOML = NULL;
-PFNWGLSWAPLAYERBUFFERSMSCOMLPROC __wglewSwapLayerBuffersMscOML = NULL;
-PFNWGLWAITFORMSCOMLPROC __wglewWaitForMscOML = NULL;
-PFNWGLWAITFORSBCOMLPROC __wglewWaitForSbcOML = NULL;
-GLboolean __WGLEW_3DFX_multisample = GL_FALSE;
-GLboolean __WGLEW_3DL_stereo_control = GL_FALSE;
-GLboolean __WGLEW_ARB_buffer_region = GL_FALSE;
-GLboolean __WGLEW_ARB_extensions_string = GL_FALSE;
-GLboolean __WGLEW_ARB_make_current_read = GL_FALSE;
-GLboolean __WGLEW_ARB_multisample = GL_FALSE;
-GLboolean __WGLEW_ARB_pbuffer = GL_FALSE;
-GLboolean __WGLEW_ARB_pixel_format = GL_FALSE;
-GLboolean __WGLEW_ARB_pixel_format_float = GL_FALSE;
-GLboolean __WGLEW_ARB_render_texture = GL_FALSE;
-GLboolean __WGLEW_ATI_pixel_format_float = GL_FALSE;
-GLboolean __WGLEW_ATI_render_texture_rectangle = GL_FALSE;
-GLboolean __WGLEW_EXT_depth_float = GL_FALSE;
-GLboolean __WGLEW_EXT_display_color_table = GL_FALSE;
-GLboolean __WGLEW_EXT_extensions_string = GL_FALSE;
-GLboolean __WGLEW_EXT_framebuffer_sRGB = GL_FALSE;
-GLboolean __WGLEW_EXT_make_current_read = GL_FALSE;
-GLboolean __WGLEW_EXT_multisample = GL_FALSE;
-GLboolean __WGLEW_EXT_pbuffer = GL_FALSE;
-GLboolean __WGLEW_EXT_pixel_format = GL_FALSE;
-GLboolean __WGLEW_EXT_pixel_format_packed_float = GL_FALSE;
-GLboolean __WGLEW_EXT_swap_control = GL_FALSE;
-GLboolean __WGLEW_I3D_digital_video_control = GL_FALSE;
-GLboolean __WGLEW_I3D_gamma = GL_FALSE;
-GLboolean __WGLEW_I3D_genlock = GL_FALSE;
-GLboolean __WGLEW_I3D_image_buffer = GL_FALSE;
-GLboolean __WGLEW_I3D_swap_frame_lock = GL_FALSE;
-GLboolean __WGLEW_I3D_swap_frame_usage = GL_FALSE;
-GLboolean __WGLEW_NV_float_buffer = GL_FALSE;
-GLboolean __WGLEW_NV_gpu_affinity = GL_FALSE;
-GLboolean __WGLEW_NV_render_depth_texture = GL_FALSE;
-GLboolean __WGLEW_NV_render_texture_rectangle = GL_FALSE;
-GLboolean __WGLEW_NV_vertex_array_range = GL_FALSE;
-GLboolean __WGLEW_OML_sync_control = GL_FALSE;
-
-#endif /* !GLEW_MX */
-
-#ifdef WGL_3DFX_multisample
-
-#endif /* WGL_3DFX_multisample */
-
-#ifdef WGL_3DL_stereo_control
-
-static GLboolean _glewInit_WGL_3DL_stereo_control (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglSetStereoEmitterState3DL = (PFNWGLSETSTEREOEMITTERSTATE3DLPROC)glewGetProcAddress((const GLubyte*)"wglSetStereoEmitterState3DL")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_3DL_stereo_control */
-
-#ifdef WGL_ARB_buffer_region
-
-static GLboolean _glewInit_WGL_ARB_buffer_region (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglCreateBufferRegionARB = (PFNWGLCREATEBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglCreateBufferRegionARB")) == NULL) || r;
-  r = ((wglDeleteBufferRegionARB = (PFNWGLDELETEBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglDeleteBufferRegionARB")) == NULL) || r;
-  r = ((wglRestoreBufferRegionARB = (PFNWGLRESTOREBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglRestoreBufferRegionARB")) == NULL) || r;
-  r = ((wglSaveBufferRegionARB = (PFNWGLSAVEBUFFERREGIONARBPROC)glewGetProcAddress((const GLubyte*)"wglSaveBufferRegionARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_ARB_buffer_region */
-
-#ifdef WGL_ARB_extensions_string
-
-static GLboolean _glewInit_WGL_ARB_extensions_string (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_ARB_extensions_string */
-
-#ifdef WGL_ARB_make_current_read
-
-static GLboolean _glewInit_WGL_ARB_make_current_read (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetCurrentReadDCARB = (PFNWGLGETCURRENTREADDCARBPROC)glewGetProcAddress((const GLubyte*)"wglGetCurrentReadDCARB")) == NULL) || r;
-  r = ((wglMakeContextCurrentARB = (PFNWGLMAKECONTEXTCURRENTARBPROC)glewGetProcAddress((const GLubyte*)"wglMakeContextCurrentARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_ARB_make_current_read */
-
-#ifdef WGL_ARB_multisample
-
-#endif /* WGL_ARB_multisample */
-
-#ifdef WGL_ARB_pbuffer
-
-static GLboolean _glewInit_WGL_ARB_pbuffer (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglCreatePbufferARB = (PFNWGLCREATEPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"wglCreatePbufferARB")) == NULL) || r;
-  r = ((wglDestroyPbufferARB = (PFNWGLDESTROYPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"wglDestroyPbufferARB")) == NULL) || r;
-  r = ((wglGetPbufferDCARB = (PFNWGLGETPBUFFERDCARBPROC)glewGetProcAddress((const GLubyte*)"wglGetPbufferDCARB")) == NULL) || r;
-  r = ((wglQueryPbufferARB = (PFNWGLQUERYPBUFFERARBPROC)glewGetProcAddress((const GLubyte*)"wglQueryPbufferARB")) == NULL) || r;
-  r = ((wglReleasePbufferDCARB = (PFNWGLRELEASEPBUFFERDCARBPROC)glewGetProcAddress((const GLubyte*)"wglReleasePbufferDCARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_ARB_pbuffer */
-
-#ifdef WGL_ARB_pixel_format
-
-static GLboolean _glewInit_WGL_ARB_pixel_format (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC)glewGetProcAddress((const GLubyte*)"wglChoosePixelFormatARB")) == NULL) || r;
-  r = ((wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribfvARB")) == NULL) || r;
-  r = ((wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribivARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_ARB_pixel_format */
-
-#ifdef WGL_ARB_pixel_format_float
-
-#endif /* WGL_ARB_pixel_format_float */
-
-#ifdef WGL_ARB_render_texture
-
-static GLboolean _glewInit_WGL_ARB_render_texture (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglBindTexImageARB = (PFNWGLBINDTEXIMAGEARBPROC)glewGetProcAddress((const GLubyte*)"wglBindTexImageARB")) == NULL) || r;
-  r = ((wglReleaseTexImageARB = (PFNWGLRELEASETEXIMAGEARBPROC)glewGetProcAddress((const GLubyte*)"wglReleaseTexImageARB")) == NULL) || r;
-  r = ((wglSetPbufferAttribARB = (PFNWGLSETPBUFFERATTRIBARBPROC)glewGetProcAddress((const GLubyte*)"wglSetPbufferAttribARB")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_ARB_render_texture */
-
-#ifdef WGL_ATI_pixel_format_float
-
-#endif /* WGL_ATI_pixel_format_float */
-
-#ifdef WGL_ATI_render_texture_rectangle
-
-#endif /* WGL_ATI_render_texture_rectangle */
-
-#ifdef WGL_EXT_depth_float
-
-#endif /* WGL_EXT_depth_float */
-
-#ifdef WGL_EXT_display_color_table
-
-static GLboolean _glewInit_WGL_EXT_display_color_table (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglBindDisplayColorTableEXT = (PFNWGLBINDDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglBindDisplayColorTableEXT")) == NULL) || r;
-  r = ((wglCreateDisplayColorTableEXT = (PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglCreateDisplayColorTableEXT")) == NULL) || r;
-  r = ((wglDestroyDisplayColorTableEXT = (PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglDestroyDisplayColorTableEXT")) == NULL) || r;
-  r = ((wglLoadDisplayColorTableEXT = (PFNWGLLOADDISPLAYCOLORTABLEEXTPROC)glewGetProcAddress((const GLubyte*)"wglLoadDisplayColorTableEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_EXT_display_color_table */
-
-#ifdef WGL_EXT_extensions_string
-
-static GLboolean _glewInit_WGL_EXT_extensions_string (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_EXT_extensions_string */
-
-#ifdef WGL_EXT_framebuffer_sRGB
-
-#endif /* WGL_EXT_framebuffer_sRGB */
-
-#ifdef WGL_EXT_make_current_read
-
-static GLboolean _glewInit_WGL_EXT_make_current_read (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetCurrentReadDCEXT = (PFNWGLGETCURRENTREADDCEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetCurrentReadDCEXT")) == NULL) || r;
-  r = ((wglMakeContextCurrentEXT = (PFNWGLMAKECONTEXTCURRENTEXTPROC)glewGetProcAddress((const GLubyte*)"wglMakeContextCurrentEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_EXT_make_current_read */
-
-#ifdef WGL_EXT_multisample
-
-#endif /* WGL_EXT_multisample */
-
-#ifdef WGL_EXT_pbuffer
-
-static GLboolean _glewInit_WGL_EXT_pbuffer (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglCreatePbufferEXT = (PFNWGLCREATEPBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"wglCreatePbufferEXT")) == NULL) || r;
-  r = ((wglDestroyPbufferEXT = (PFNWGLDESTROYPBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"wglDestroyPbufferEXT")) == NULL) || r;
-  r = ((wglGetPbufferDCEXT = (PFNWGLGETPBUFFERDCEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetPbufferDCEXT")) == NULL) || r;
-  r = ((wglQueryPbufferEXT = (PFNWGLQUERYPBUFFEREXTPROC)glewGetProcAddress((const GLubyte*)"wglQueryPbufferEXT")) == NULL) || r;
-  r = ((wglReleasePbufferDCEXT = (PFNWGLRELEASEPBUFFERDCEXTPROC)glewGetProcAddress((const GLubyte*)"wglReleasePbufferDCEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_EXT_pbuffer */
-
-#ifdef WGL_EXT_pixel_format
-
-static GLboolean _glewInit_WGL_EXT_pixel_format (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglChoosePixelFormatEXT = (PFNWGLCHOOSEPIXELFORMATEXTPROC)glewGetProcAddress((const GLubyte*)"wglChoosePixelFormatEXT")) == NULL) || r;
-  r = ((wglGetPixelFormatAttribfvEXT = (PFNWGLGETPIXELFORMATATTRIBFVEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribfvEXT")) == NULL) || r;
-  r = ((wglGetPixelFormatAttribivEXT = (PFNWGLGETPIXELFORMATATTRIBIVEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetPixelFormatAttribivEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_EXT_pixel_format */
-
-#ifdef WGL_EXT_pixel_format_packed_float
-
-#endif /* WGL_EXT_pixel_format_packed_float */
-
-#ifdef WGL_EXT_swap_control
-
-static GLboolean _glewInit_WGL_EXT_swap_control (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetSwapIntervalEXT")) == NULL) || r;
-  r = ((wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC)glewGetProcAddress((const GLubyte*)"wglSwapIntervalEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_EXT_swap_control */
-
-#ifdef WGL_I3D_digital_video_control
-
-static GLboolean _glewInit_WGL_I3D_digital_video_control (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetDigitalVideoParametersI3D = (PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetDigitalVideoParametersI3D")) == NULL) || r;
-  r = ((wglSetDigitalVideoParametersI3D = (PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglSetDigitalVideoParametersI3D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_I3D_digital_video_control */
-
-#ifdef WGL_I3D_gamma
-
-static GLboolean _glewInit_WGL_I3D_gamma (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetGammaTableI3D = (PFNWGLGETGAMMATABLEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGammaTableI3D")) == NULL) || r;
-  r = ((wglGetGammaTableParametersI3D = (PFNWGLGETGAMMATABLEPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGammaTableParametersI3D")) == NULL) || r;
-  r = ((wglSetGammaTableI3D = (PFNWGLSETGAMMATABLEI3DPROC)glewGetProcAddress((const GLubyte*)"wglSetGammaTableI3D")) == NULL) || r;
-  r = ((wglSetGammaTableParametersI3D = (PFNWGLSETGAMMATABLEPARAMETERSI3DPROC)glewGetProcAddress((const GLubyte*)"wglSetGammaTableParametersI3D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_I3D_gamma */
-
-#ifdef WGL_I3D_genlock
-
-static GLboolean _glewInit_WGL_I3D_genlock (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglDisableGenlockI3D = (PFNWGLDISABLEGENLOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglDisableGenlockI3D")) == NULL) || r;
-  r = ((wglEnableGenlockI3D = (PFNWGLENABLEGENLOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglEnableGenlockI3D")) == NULL) || r;
-  r = ((wglGenlockSampleRateI3D = (PFNWGLGENLOCKSAMPLERATEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSampleRateI3D")) == NULL) || r;
-  r = ((wglGenlockSourceDelayI3D = (PFNWGLGENLOCKSOURCEDELAYI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSourceDelayI3D")) == NULL) || r;
-  r = ((wglGenlockSourceEdgeI3D = (PFNWGLGENLOCKSOURCEEDGEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSourceEdgeI3D")) == NULL) || r;
-  r = ((wglGenlockSourceI3D = (PFNWGLGENLOCKSOURCEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGenlockSourceI3D")) == NULL) || r;
-  r = ((wglGetGenlockSampleRateI3D = (PFNWGLGETGENLOCKSAMPLERATEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSampleRateI3D")) == NULL) || r;
-  r = ((wglGetGenlockSourceDelayI3D = (PFNWGLGETGENLOCKSOURCEDELAYI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSourceDelayI3D")) == NULL) || r;
-  r = ((wglGetGenlockSourceEdgeI3D = (PFNWGLGETGENLOCKSOURCEEDGEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSourceEdgeI3D")) == NULL) || r;
-  r = ((wglGetGenlockSourceI3D = (PFNWGLGETGENLOCKSOURCEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetGenlockSourceI3D")) == NULL) || r;
-  r = ((wglIsEnabledGenlockI3D = (PFNWGLISENABLEDGENLOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglIsEnabledGenlockI3D")) == NULL) || r;
-  r = ((wglQueryGenlockMaxSourceDelayI3D = (PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC)glewGetProcAddress((const GLubyte*)"wglQueryGenlockMaxSourceDelayI3D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_I3D_genlock */
-
-#ifdef WGL_I3D_image_buffer
-
-static GLboolean _glewInit_WGL_I3D_image_buffer (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglAssociateImageBufferEventsI3D = (PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC)glewGetProcAddress((const GLubyte*)"wglAssociateImageBufferEventsI3D")) == NULL) || r;
-  r = ((wglCreateImageBufferI3D = (PFNWGLCREATEIMAGEBUFFERI3DPROC)glewGetProcAddress((const GLubyte*)"wglCreateImageBufferI3D")) == NULL) || r;
-  r = ((wglDestroyImageBufferI3D = (PFNWGLDESTROYIMAGEBUFFERI3DPROC)glewGetProcAddress((const GLubyte*)"wglDestroyImageBufferI3D")) == NULL) || r;
-  r = ((wglReleaseImageBufferEventsI3D = (PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC)glewGetProcAddress((const GLubyte*)"wglReleaseImageBufferEventsI3D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_I3D_image_buffer */
-
-#ifdef WGL_I3D_swap_frame_lock
-
-static GLboolean _glewInit_WGL_I3D_swap_frame_lock (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglDisableFrameLockI3D = (PFNWGLDISABLEFRAMELOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglDisableFrameLockI3D")) == NULL) || r;
-  r = ((wglEnableFrameLockI3D = (PFNWGLENABLEFRAMELOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglEnableFrameLockI3D")) == NULL) || r;
-  r = ((wglIsEnabledFrameLockI3D = (PFNWGLISENABLEDFRAMELOCKI3DPROC)glewGetProcAddress((const GLubyte*)"wglIsEnabledFrameLockI3D")) == NULL) || r;
-  r = ((wglQueryFrameLockMasterI3D = (PFNWGLQUERYFRAMELOCKMASTERI3DPROC)glewGetProcAddress((const GLubyte*)"wglQueryFrameLockMasterI3D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_I3D_swap_frame_lock */
-
-#ifdef WGL_I3D_swap_frame_usage
-
-static GLboolean _glewInit_WGL_I3D_swap_frame_usage (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglBeginFrameTrackingI3D = (PFNWGLBEGINFRAMETRACKINGI3DPROC)glewGetProcAddress((const GLubyte*)"wglBeginFrameTrackingI3D")) == NULL) || r;
-  r = ((wglEndFrameTrackingI3D = (PFNWGLENDFRAMETRACKINGI3DPROC)glewGetProcAddress((const GLubyte*)"wglEndFrameTrackingI3D")) == NULL) || r;
-  r = ((wglGetFrameUsageI3D = (PFNWGLGETFRAMEUSAGEI3DPROC)glewGetProcAddress((const GLubyte*)"wglGetFrameUsageI3D")) == NULL) || r;
-  r = ((wglQueryFrameTrackingI3D = (PFNWGLQUERYFRAMETRACKINGI3DPROC)glewGetProcAddress((const GLubyte*)"wglQueryFrameTrackingI3D")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_I3D_swap_frame_usage */
-
-#ifdef WGL_NV_float_buffer
-
-#endif /* WGL_NV_float_buffer */
-
-#ifdef WGL_NV_gpu_affinity
-
-static GLboolean _glewInit_WGL_NV_gpu_affinity (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglCreateAffinityDCNV = (PFNWGLCREATEAFFINITYDCNVPROC)glewGetProcAddress((const GLubyte*)"wglCreateAffinityDCNV")) == NULL) || r;
-  r = ((wglDeleteDCNV = (PFNWGLDELETEDCNVPROC)glewGetProcAddress((const GLubyte*)"wglDeleteDCNV")) == NULL) || r;
-  r = ((wglEnumGpuDevicesNV = (PFNWGLENUMGPUDEVICESNVPROC)glewGetProcAddress((const GLubyte*)"wglEnumGpuDevicesNV")) == NULL) || r;
-  r = ((wglEnumGpusFromAffinityDCNV = (PFNWGLENUMGPUSFROMAFFINITYDCNVPROC)glewGetProcAddress((const GLubyte*)"wglEnumGpusFromAffinityDCNV")) == NULL) || r;
-  r = ((wglEnumGpusNV = (PFNWGLENUMGPUSNVPROC)glewGetProcAddress((const GLubyte*)"wglEnumGpusNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_NV_gpu_affinity */
-
-#ifdef WGL_NV_render_depth_texture
-
-#endif /* WGL_NV_render_depth_texture */
-
-#ifdef WGL_NV_render_texture_rectangle
-
-#endif /* WGL_NV_render_texture_rectangle */
-
-#ifdef WGL_NV_vertex_array_range
-
-static GLboolean _glewInit_WGL_NV_vertex_array_range (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"wglAllocateMemoryNV")) == NULL) || r;
-  r = ((wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"wglFreeMemoryNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_NV_vertex_array_range */
-
-#ifdef WGL_OML_sync_control
-
-static GLboolean _glewInit_WGL_OML_sync_control (WGLEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((wglGetMscRateOML = (PFNWGLGETMSCRATEOMLPROC)glewGetProcAddress((const GLubyte*)"wglGetMscRateOML")) == NULL) || r;
-  r = ((wglGetSyncValuesOML = (PFNWGLGETSYNCVALUESOMLPROC)glewGetProcAddress((const GLubyte*)"wglGetSyncValuesOML")) == NULL) || r;
-  r = ((wglSwapBuffersMscOML = (PFNWGLSWAPBUFFERSMSCOMLPROC)glewGetProcAddress((const GLubyte*)"wglSwapBuffersMscOML")) == NULL) || r;
-  r = ((wglSwapLayerBuffersMscOML = (PFNWGLSWAPLAYERBUFFERSMSCOMLPROC)glewGetProcAddress((const GLubyte*)"wglSwapLayerBuffersMscOML")) == NULL) || r;
-  r = ((wglWaitForMscOML = (PFNWGLWAITFORMSCOMLPROC)glewGetProcAddress((const GLubyte*)"wglWaitForMscOML")) == NULL) || r;
-  r = ((wglWaitForSbcOML = (PFNWGLWAITFORSBCOMLPROC)glewGetProcAddress((const GLubyte*)"wglWaitForSbcOML")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* WGL_OML_sync_control */
-
-/* ------------------------------------------------------------------------- */
-
-static PFNWGLGETEXTENSIONSSTRINGARBPROC _wglewGetExtensionsStringARB = NULL;
-static PFNWGLGETEXTENSIONSSTRINGEXTPROC _wglewGetExtensionsStringEXT = NULL;
-
-GLboolean wglewGetExtension (const char* name)
-{    
-  GLubyte* p;
-  GLubyte* end;
-  GLuint len = _glewStrLen((const GLubyte*)name);
-  if (_wglewGetExtensionsStringARB == NULL)
-    if (_wglewGetExtensionsStringEXT == NULL)
-      return GL_FALSE;
-    else
-      p = (GLubyte*)_wglewGetExtensionsStringEXT();
-  else
-    p = (GLubyte*)_wglewGetExtensionsStringARB(wglGetCurrentDC());
-  if (0 == p) return GL_FALSE;
-  end = p + _glewStrLen(p);
-  while (p < end)
-  {
-    GLuint n = _glewStrCLen(p, ' ');
-    if (len == n && _glewStrSame((const GLubyte*)name, p, n)) return GL_TRUE;
-    p += n+1;
-  }
-  return GL_FALSE;
-}
-
-GLenum wglewContextInit (WGLEW_CONTEXT_ARG_DEF_LIST)
-{
-  GLboolean crippled;
-  /* find wgl extension string query functions */
-  _wglewGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringARB");
-  _wglewGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC)glewGetProcAddress((const GLubyte*)"wglGetExtensionsStringEXT");
-  /* initialize extensions */
-  crippled = _wglewGetExtensionsStringARB == NULL && _wglewGetExtensionsStringEXT == NULL;
-#ifdef WGL_3DFX_multisample
-  CONST_CAST(WGLEW_3DFX_multisample) = wglewGetExtension("WGL_3DFX_multisample");
-#endif /* WGL_3DFX_multisample */
-#ifdef WGL_3DL_stereo_control
-  CONST_CAST(WGLEW_3DL_stereo_control) = wglewGetExtension("WGL_3DL_stereo_control");
-  if (glewExperimental || WGLEW_3DL_stereo_control|| crippled) CONST_CAST(WGLEW_3DL_stereo_control)= !_glewInit_WGL_3DL_stereo_control(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_3DL_stereo_control */
-#ifdef WGL_ARB_buffer_region
-  CONST_CAST(WGLEW_ARB_buffer_region) = wglewGetExtension("WGL_ARB_buffer_region");
-  if (glewExperimental || WGLEW_ARB_buffer_region|| crippled) CONST_CAST(WGLEW_ARB_buffer_region)= !_glewInit_WGL_ARB_buffer_region(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_ARB_buffer_region */
-#ifdef WGL_ARB_extensions_string
-  CONST_CAST(WGLEW_ARB_extensions_string) = wglewGetExtension("WGL_ARB_extensions_string");
-  if (glewExperimental || WGLEW_ARB_extensions_string|| crippled) CONST_CAST(WGLEW_ARB_extensions_string)= !_glewInit_WGL_ARB_extensions_string(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_ARB_extensions_string */
-#ifdef WGL_ARB_make_current_read
-  CONST_CAST(WGLEW_ARB_make_current_read) = wglewGetExtension("WGL_ARB_make_current_read");
-  if (glewExperimental || WGLEW_ARB_make_current_read|| crippled) CONST_CAST(WGLEW_ARB_make_current_read)= !_glewInit_WGL_ARB_make_current_read(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_ARB_make_current_read */
-#ifdef WGL_ARB_multisample
-  CONST_CAST(WGLEW_ARB_multisample) = wglewGetExtension("WGL_ARB_multisample");
-#endif /* WGL_ARB_multisample */
-#ifdef WGL_ARB_pbuffer
-  CONST_CAST(WGLEW_ARB_pbuffer) = wglewGetExtension("WGL_ARB_pbuffer");
-  if (glewExperimental || WGLEW_ARB_pbuffer|| crippled) CONST_CAST(WGLEW_ARB_pbuffer)= !_glewInit_WGL_ARB_pbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_ARB_pbuffer */
-#ifdef WGL_ARB_pixel_format
-  CONST_CAST(WGLEW_ARB_pixel_format) = wglewGetExtension("WGL_ARB_pixel_format");
-  if (glewExperimental || WGLEW_ARB_pixel_format|| crippled) CONST_CAST(WGLEW_ARB_pixel_format)= !_glewInit_WGL_ARB_pixel_format(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_ARB_pixel_format */
-#ifdef WGL_ARB_pixel_format_float
-  CONST_CAST(WGLEW_ARB_pixel_format_float) = wglewGetExtension("WGL_ARB_pixel_format_float");
-#endif /* WGL_ARB_pixel_format_float */
-#ifdef WGL_ARB_render_texture
-  CONST_CAST(WGLEW_ARB_render_texture) = wglewGetExtension("WGL_ARB_render_texture");
-  if (glewExperimental || WGLEW_ARB_render_texture|| crippled) CONST_CAST(WGLEW_ARB_render_texture)= !_glewInit_WGL_ARB_render_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_ARB_render_texture */
-#ifdef WGL_ATI_pixel_format_float
-  CONST_CAST(WGLEW_ATI_pixel_format_float) = wglewGetExtension("WGL_ATI_pixel_format_float");
-#endif /* WGL_ATI_pixel_format_float */
-#ifdef WGL_ATI_render_texture_rectangle
-  CONST_CAST(WGLEW_ATI_render_texture_rectangle) = wglewGetExtension("WGL_ATI_render_texture_rectangle");
-#endif /* WGL_ATI_render_texture_rectangle */
-#ifdef WGL_EXT_depth_float
-  CONST_CAST(WGLEW_EXT_depth_float) = wglewGetExtension("WGL_EXT_depth_float");
-#endif /* WGL_EXT_depth_float */
-#ifdef WGL_EXT_display_color_table
-  CONST_CAST(WGLEW_EXT_display_color_table) = wglewGetExtension("WGL_EXT_display_color_table");
-  if (glewExperimental || WGLEW_EXT_display_color_table|| crippled) CONST_CAST(WGLEW_EXT_display_color_table)= !_glewInit_WGL_EXT_display_color_table(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_EXT_display_color_table */
-#ifdef WGL_EXT_extensions_string
-  CONST_CAST(WGLEW_EXT_extensions_string) = wglewGetExtension("WGL_EXT_extensions_string");
-  if (glewExperimental || WGLEW_EXT_extensions_string|| crippled) CONST_CAST(WGLEW_EXT_extensions_string)= !_glewInit_WGL_EXT_extensions_string(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_EXT_extensions_string */
-#ifdef WGL_EXT_framebuffer_sRGB
-  CONST_CAST(WGLEW_EXT_framebuffer_sRGB) = wglewGetExtension("WGL_EXT_framebuffer_sRGB");
-#endif /* WGL_EXT_framebuffer_sRGB */
-#ifdef WGL_EXT_make_current_read
-  CONST_CAST(WGLEW_EXT_make_current_read) = wglewGetExtension("WGL_EXT_make_current_read");
-  if (glewExperimental || WGLEW_EXT_make_current_read|| crippled) CONST_CAST(WGLEW_EXT_make_current_read)= !_glewInit_WGL_EXT_make_current_read(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_EXT_make_current_read */
-#ifdef WGL_EXT_multisample
-  CONST_CAST(WGLEW_EXT_multisample) = wglewGetExtension("WGL_EXT_multisample");
-#endif /* WGL_EXT_multisample */
-#ifdef WGL_EXT_pbuffer
-  CONST_CAST(WGLEW_EXT_pbuffer) = wglewGetExtension("WGL_EXT_pbuffer");
-  if (glewExperimental || WGLEW_EXT_pbuffer|| crippled) CONST_CAST(WGLEW_EXT_pbuffer)= !_glewInit_WGL_EXT_pbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_EXT_pbuffer */
-#ifdef WGL_EXT_pixel_format
-  CONST_CAST(WGLEW_EXT_pixel_format) = wglewGetExtension("WGL_EXT_pixel_format");
-  if (glewExperimental || WGLEW_EXT_pixel_format|| crippled) CONST_CAST(WGLEW_EXT_pixel_format)= !_glewInit_WGL_EXT_pixel_format(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_EXT_pixel_format */
-#ifdef WGL_EXT_pixel_format_packed_float
-  CONST_CAST(WGLEW_EXT_pixel_format_packed_float) = wglewGetExtension("WGL_EXT_pixel_format_packed_float");
-#endif /* WGL_EXT_pixel_format_packed_float */
-#ifdef WGL_EXT_swap_control
-  CONST_CAST(WGLEW_EXT_swap_control) = wglewGetExtension("WGL_EXT_swap_control");
-  if (glewExperimental || WGLEW_EXT_swap_control|| crippled) CONST_CAST(WGLEW_EXT_swap_control)= !_glewInit_WGL_EXT_swap_control(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_EXT_swap_control */
-#ifdef WGL_I3D_digital_video_control
-  CONST_CAST(WGLEW_I3D_digital_video_control) = wglewGetExtension("WGL_I3D_digital_video_control");
-  if (glewExperimental || WGLEW_I3D_digital_video_control|| crippled) CONST_CAST(WGLEW_I3D_digital_video_control)= !_glewInit_WGL_I3D_digital_video_control(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_I3D_digital_video_control */
-#ifdef WGL_I3D_gamma
-  CONST_CAST(WGLEW_I3D_gamma) = wglewGetExtension("WGL_I3D_gamma");
-  if (glewExperimental || WGLEW_I3D_gamma|| crippled) CONST_CAST(WGLEW_I3D_gamma)= !_glewInit_WGL_I3D_gamma(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_I3D_gamma */
-#ifdef WGL_I3D_genlock
-  CONST_CAST(WGLEW_I3D_genlock) = wglewGetExtension("WGL_I3D_genlock");
-  if (glewExperimental || WGLEW_I3D_genlock|| crippled) CONST_CAST(WGLEW_I3D_genlock)= !_glewInit_WGL_I3D_genlock(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_I3D_genlock */
-#ifdef WGL_I3D_image_buffer
-  CONST_CAST(WGLEW_I3D_image_buffer) = wglewGetExtension("WGL_I3D_image_buffer");
-  if (glewExperimental || WGLEW_I3D_image_buffer|| crippled) CONST_CAST(WGLEW_I3D_image_buffer)= !_glewInit_WGL_I3D_image_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_I3D_image_buffer */
-#ifdef WGL_I3D_swap_frame_lock
-  CONST_CAST(WGLEW_I3D_swap_frame_lock) = wglewGetExtension("WGL_I3D_swap_frame_lock");
-  if (glewExperimental || WGLEW_I3D_swap_frame_lock|| crippled) CONST_CAST(WGLEW_I3D_swap_frame_lock)= !_glewInit_WGL_I3D_swap_frame_lock(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_I3D_swap_frame_lock */
-#ifdef WGL_I3D_swap_frame_usage
-  CONST_CAST(WGLEW_I3D_swap_frame_usage) = wglewGetExtension("WGL_I3D_swap_frame_usage");
-  if (glewExperimental || WGLEW_I3D_swap_frame_usage|| crippled) CONST_CAST(WGLEW_I3D_swap_frame_usage)= !_glewInit_WGL_I3D_swap_frame_usage(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_I3D_swap_frame_usage */
-#ifdef WGL_NV_float_buffer
-  CONST_CAST(WGLEW_NV_float_buffer) = wglewGetExtension("WGL_NV_float_buffer");
-#endif /* WGL_NV_float_buffer */
-#ifdef WGL_NV_gpu_affinity
-  CONST_CAST(WGLEW_NV_gpu_affinity) = wglewGetExtension("WGL_NV_gpu_affinity");
-  if (glewExperimental || WGLEW_NV_gpu_affinity|| crippled) CONST_CAST(WGLEW_NV_gpu_affinity)= !_glewInit_WGL_NV_gpu_affinity(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_NV_gpu_affinity */
-#ifdef WGL_NV_render_depth_texture
-  CONST_CAST(WGLEW_NV_render_depth_texture) = wglewGetExtension("WGL_NV_render_depth_texture");
-#endif /* WGL_NV_render_depth_texture */
-#ifdef WGL_NV_render_texture_rectangle
-  CONST_CAST(WGLEW_NV_render_texture_rectangle) = wglewGetExtension("WGL_NV_render_texture_rectangle");
-#endif /* WGL_NV_render_texture_rectangle */
-#ifdef WGL_NV_vertex_array_range
-  CONST_CAST(WGLEW_NV_vertex_array_range) = wglewGetExtension("WGL_NV_vertex_array_range");
-  if (glewExperimental || WGLEW_NV_vertex_array_range|| crippled) CONST_CAST(WGLEW_NV_vertex_array_range)= !_glewInit_WGL_NV_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_NV_vertex_array_range */
-#ifdef WGL_OML_sync_control
-  CONST_CAST(WGLEW_OML_sync_control) = wglewGetExtension("WGL_OML_sync_control");
-  if (glewExperimental || WGLEW_OML_sync_control|| crippled) CONST_CAST(WGLEW_OML_sync_control)= !_glewInit_WGL_OML_sync_control(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* WGL_OML_sync_control */
-
-  return GLEW_OK;
-}
-
-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)
-
-PFNGLXGETCURRENTDISPLAYPROC __glewXGetCurrentDisplay = NULL;
-
-PFNGLXCHOOSEFBCONFIGPROC __glewXChooseFBConfig = NULL;
-PFNGLXCREATENEWCONTEXTPROC __glewXCreateNewContext = NULL;
-PFNGLXCREATEPBUFFERPROC __glewXCreatePbuffer = NULL;
-PFNGLXCREATEPIXMAPPROC __glewXCreatePixmap = NULL;
-PFNGLXCREATEWINDOWPROC __glewXCreateWindow = NULL;
-PFNGLXDESTROYPBUFFERPROC __glewXDestroyPbuffer = NULL;
-PFNGLXDESTROYPIXMAPPROC __glewXDestroyPixmap = NULL;
-PFNGLXDESTROYWINDOWPROC __glewXDestroyWindow = NULL;
-PFNGLXGETCURRENTREADDRAWABLEPROC __glewXGetCurrentReadDrawable = NULL;
-PFNGLXGETFBCONFIGATTRIBPROC __glewXGetFBConfigAttrib = NULL;
-PFNGLXGETFBCONFIGSPROC __glewXGetFBConfigs = NULL;
-PFNGLXGETSELECTEDEVENTPROC __glewXGetSelectedEvent = NULL;
-PFNGLXGETVISUALFROMFBCONFIGPROC __glewXGetVisualFromFBConfig = NULL;
-PFNGLXMAKECONTEXTCURRENTPROC __glewXMakeContextCurrent = NULL;
-PFNGLXQUERYCONTEXTPROC __glewXQueryContext = NULL;
-PFNGLXQUERYDRAWABLEPROC __glewXQueryDrawable = NULL;
-PFNGLXSELECTEVENTPROC __glewXSelectEvent = NULL;
-
-PFNGLXBINDTEXIMAGEATIPROC __glewXBindTexImageATI = NULL;
-PFNGLXDRAWABLEATTRIBATIPROC __glewXDrawableAttribATI = NULL;
-PFNGLXRELEASETEXIMAGEATIPROC __glewXReleaseTexImageATI = NULL;
-
-PFNGLXFREECONTEXTEXTPROC __glewXFreeContextEXT = NULL;
-PFNGLXGETCONTEXTIDEXTPROC __glewXGetContextIDEXT = NULL;
-PFNGLXIMPORTCONTEXTEXTPROC __glewXImportContextEXT = NULL;
-PFNGLXQUERYCONTEXTINFOEXTPROC __glewXQueryContextInfoEXT = NULL;
-
-PFNGLXBINDTEXIMAGEEXTPROC __glewXBindTexImageEXT = NULL;
-PFNGLXRELEASETEXIMAGEEXTPROC __glewXReleaseTexImageEXT = NULL;
-
-PFNGLXGETAGPOFFSETMESAPROC __glewXGetAGPOffsetMESA = NULL;
-
-PFNGLXCOPYSUBBUFFERMESAPROC __glewXCopySubBufferMESA = NULL;
-
-PFNGLXCREATEGLXPIXMAPMESAPROC __glewXCreateGLXPixmapMESA = NULL;
-
-PFNGLXRELEASEBUFFERSMESAPROC __glewXReleaseBuffersMESA = NULL;
-
-PFNGLXSET3DFXMODEMESAPROC __glewXSet3DfxModeMESA = NULL;
-
-PFNGLXALLOCATEMEMORYNVPROC __glewXAllocateMemoryNV = NULL;
-PFNGLXFREEMEMORYNVPROC __glewXFreeMemoryNV = NULL;
-
-PFNGLXGETMSCRATEOMLPROC __glewXGetMscRateOML = NULL;
-PFNGLXGETSYNCVALUESOMLPROC __glewXGetSyncValuesOML = NULL;
-PFNGLXSWAPBUFFERSMSCOMLPROC __glewXSwapBuffersMscOML = NULL;
-PFNGLXWAITFORMSCOMLPROC __glewXWaitForMscOML = NULL;
-PFNGLXWAITFORSBCOMLPROC __glewXWaitForSbcOML = NULL;
-
-PFNGLXCHOOSEFBCONFIGSGIXPROC __glewXChooseFBConfigSGIX = NULL;
-PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC __glewXCreateContextWithConfigSGIX = NULL;
-PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC __glewXCreateGLXPixmapWithConfigSGIX = NULL;
-PFNGLXGETFBCONFIGATTRIBSGIXPROC __glewXGetFBConfigAttribSGIX = NULL;
-PFNGLXGETFBCONFIGFROMVISUALSGIXPROC __glewXGetFBConfigFromVisualSGIX = NULL;
-PFNGLXGETVISUALFROMFBCONFIGSGIXPROC __glewXGetVisualFromFBConfigSGIX = NULL;
-
-PFNGLXBINDHYPERPIPESGIXPROC __glewXBindHyperpipeSGIX = NULL;
-PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC __glewXDestroyHyperpipeConfigSGIX = NULL;
-PFNGLXHYPERPIPEATTRIBSGIXPROC __glewXHyperpipeAttribSGIX = NULL;
-PFNGLXHYPERPIPECONFIGSGIXPROC __glewXHyperpipeConfigSGIX = NULL;
-PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC __glewXQueryHyperpipeAttribSGIX = NULL;
-PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC __glewXQueryHyperpipeBestAttribSGIX = NULL;
-PFNGLXQUERYHYPERPIPECONFIGSGIXPROC __glewXQueryHyperpipeConfigSGIX = NULL;
-PFNGLXQUERYHYPERPIPENETWORKSGIXPROC __glewXQueryHyperpipeNetworkSGIX = NULL;
-
-PFNGLXCREATEGLXPBUFFERSGIXPROC __glewXCreateGLXPbufferSGIX = NULL;
-PFNGLXDESTROYGLXPBUFFERSGIXPROC __glewXDestroyGLXPbufferSGIX = NULL;
-PFNGLXGETSELECTEDEVENTSGIXPROC __glewXGetSelectedEventSGIX = NULL;
-PFNGLXQUERYGLXPBUFFERSGIXPROC __glewXQueryGLXPbufferSGIX = NULL;
-PFNGLXSELECTEVENTSGIXPROC __glewXSelectEventSGIX = NULL;
-
-PFNGLXBINDSWAPBARRIERSGIXPROC __glewXBindSwapBarrierSGIX = NULL;
-PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC __glewXQueryMaxSwapBarriersSGIX = NULL;
-
-PFNGLXJOINSWAPGROUPSGIXPROC __glewXJoinSwapGroupSGIX = NULL;
-
-PFNGLXBINDCHANNELTOWINDOWSGIXPROC __glewXBindChannelToWindowSGIX = NULL;
-PFNGLXCHANNELRECTSGIXPROC __glewXChannelRectSGIX = NULL;
-PFNGLXCHANNELRECTSYNCSGIXPROC __glewXChannelRectSyncSGIX = NULL;
-PFNGLXQUERYCHANNELDELTASSGIXPROC __glewXQueryChannelDeltasSGIX = NULL;
-PFNGLXQUERYCHANNELRECTSGIXPROC __glewXQueryChannelRectSGIX = NULL;
-
-PFNGLXCUSHIONSGIPROC __glewXCushionSGI = NULL;
-
-PFNGLXGETCURRENTREADDRAWABLESGIPROC __glewXGetCurrentReadDrawableSGI = NULL;
-PFNGLXMAKECURRENTREADSGIPROC __glewXMakeCurrentReadSGI = NULL;
-
-PFNGLXSWAPINTERVALSGIPROC __glewXSwapIntervalSGI = NULL;
-
-PFNGLXGETVIDEOSYNCSGIPROC __glewXGetVideoSyncSGI = NULL;
-PFNGLXWAITVIDEOSYNCSGIPROC __glewXWaitVideoSyncSGI = NULL;
-
-PFNGLXGETTRANSPARENTINDEXSUNPROC __glewXGetTransparentIndexSUN = NULL;
-
-PFNGLXGETVIDEORESIZESUNPROC __glewXGetVideoResizeSUN = NULL;
-PFNGLXVIDEORESIZESUNPROC __glewXVideoResizeSUN = NULL;
-
-#if !defined(GLEW_MX)
-
-GLboolean __GLXEW_VERSION_1_0 = GL_FALSE;
-GLboolean __GLXEW_VERSION_1_1 = GL_FALSE;
-GLboolean __GLXEW_VERSION_1_2 = GL_FALSE;
-GLboolean __GLXEW_VERSION_1_3 = GL_FALSE;
-GLboolean __GLXEW_VERSION_1_4 = GL_FALSE;
-GLboolean __GLXEW_3DFX_multisample = GL_FALSE;
-GLboolean __GLXEW_ARB_fbconfig_float = GL_FALSE;
-GLboolean __GLXEW_ARB_get_proc_address = GL_FALSE;
-GLboolean __GLXEW_ARB_multisample = GL_FALSE;
-GLboolean __GLXEW_ATI_pixel_format_float = GL_FALSE;
-GLboolean __GLXEW_ATI_render_texture = GL_FALSE;
-GLboolean __GLXEW_EXT_fbconfig_packed_float = GL_FALSE;
-GLboolean __GLXEW_EXT_framebuffer_sRGB = GL_FALSE;
-GLboolean __GLXEW_EXT_import_context = GL_FALSE;
-GLboolean __GLXEW_EXT_scene_marker = GL_FALSE;
-GLboolean __GLXEW_EXT_texture_from_pixmap = GL_FALSE;
-GLboolean __GLXEW_EXT_visual_info = GL_FALSE;
-GLboolean __GLXEW_EXT_visual_rating = GL_FALSE;
-GLboolean __GLXEW_MESA_agp_offset = GL_FALSE;
-GLboolean __GLXEW_MESA_copy_sub_buffer = GL_FALSE;
-GLboolean __GLXEW_MESA_pixmap_colormap = GL_FALSE;
-GLboolean __GLXEW_MESA_release_buffers = GL_FALSE;
-GLboolean __GLXEW_MESA_set_3dfx_mode = GL_FALSE;
-GLboolean __GLXEW_NV_float_buffer = GL_FALSE;
-GLboolean __GLXEW_NV_vertex_array_range = GL_FALSE;
-GLboolean __GLXEW_OML_swap_method = GL_FALSE;
-GLboolean __GLXEW_OML_sync_control = GL_FALSE;
-GLboolean __GLXEW_SGIS_blended_overlay = GL_FALSE;
-GLboolean __GLXEW_SGIS_color_range = GL_FALSE;
-GLboolean __GLXEW_SGIS_multisample = GL_FALSE;
-GLboolean __GLXEW_SGIS_shared_multisample = GL_FALSE;
-GLboolean __GLXEW_SGIX_fbconfig = GL_FALSE;
-GLboolean __GLXEW_SGIX_hyperpipe = GL_FALSE;
-GLboolean __GLXEW_SGIX_pbuffer = GL_FALSE;
-GLboolean __GLXEW_SGIX_swap_barrier = GL_FALSE;
-GLboolean __GLXEW_SGIX_swap_group = GL_FALSE;
-GLboolean __GLXEW_SGIX_video_resize = GL_FALSE;
-GLboolean __GLXEW_SGIX_visual_select_group = GL_FALSE;
-GLboolean __GLXEW_SGI_cushion = GL_FALSE;
-GLboolean __GLXEW_SGI_make_current_read = GL_FALSE;
-GLboolean __GLXEW_SGI_swap_control = GL_FALSE;
-GLboolean __GLXEW_SGI_video_sync = GL_FALSE;
-GLboolean __GLXEW_SUN_get_transparent_index = GL_FALSE;
-GLboolean __GLXEW_SUN_video_resize = GL_FALSE;
-
-#endif /* !GLEW_MX */
-
-#ifdef GLX_VERSION_1_2
-
-static GLboolean _glewInit_GLX_VERSION_1_2 (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXGetCurrentDisplay = (PFNGLXGETCURRENTDISPLAYPROC)glewGetProcAddress((const GLubyte*)"glXGetCurrentDisplay")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_VERSION_1_2 */
-
-#ifdef GLX_VERSION_1_3
-
-static GLboolean _glewInit_GLX_VERSION_1_3 (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXChooseFBConfig = (PFNGLXCHOOSEFBCONFIGPROC)glewGetProcAddress((const GLubyte*)"glXChooseFBConfig")) == NULL) || r;
-  r = ((glXCreateNewContext = (PFNGLXCREATENEWCONTEXTPROC)glewGetProcAddress((const GLubyte*)"glXCreateNewContext")) == NULL) || r;
-  r = ((glXCreatePbuffer = (PFNGLXCREATEPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glXCreatePbuffer")) == NULL) || r;
-  r = ((glXCreatePixmap = (PFNGLXCREATEPIXMAPPROC)glewGetProcAddress((const GLubyte*)"glXCreatePixmap")) == NULL) || r;
-  r = ((glXCreateWindow = (PFNGLXCREATEWINDOWPROC)glewGetProcAddress((const GLubyte*)"glXCreateWindow")) == NULL) || r;
-  r = ((glXDestroyPbuffer = (PFNGLXDESTROYPBUFFERPROC)glewGetProcAddress((const GLubyte*)"glXDestroyPbuffer")) == NULL) || r;
-  r = ((glXDestroyPixmap = (PFNGLXDESTROYPIXMAPPROC)glewGetProcAddress((const GLubyte*)"glXDestroyPixmap")) == NULL) || r;
-  r = ((glXDestroyWindow = (PFNGLXDESTROYWINDOWPROC)glewGetProcAddress((const GLubyte*)"glXDestroyWindow")) == NULL) || r;
-  r = ((glXGetCurrentReadDrawable = (PFNGLXGETCURRENTREADDRAWABLEPROC)glewGetProcAddress((const GLubyte*)"glXGetCurrentReadDrawable")) == NULL) || r;
-  r = ((glXGetFBConfigAttrib = (PFNGLXGETFBCONFIGATTRIBPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigAttrib")) == NULL) || r;
-  r = ((glXGetFBConfigs = (PFNGLXGETFBCONFIGSPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigs")) == NULL) || r;
-  r = ((glXGetSelectedEvent = (PFNGLXGETSELECTEDEVENTPROC)glewGetProcAddress((const GLubyte*)"glXGetSelectedEvent")) == NULL) || r;
-  r = ((glXGetVisualFromFBConfig = (PFNGLXGETVISUALFROMFBCONFIGPROC)glewGetProcAddress((const GLubyte*)"glXGetVisualFromFBConfig")) == NULL) || r;
-  r = ((glXMakeContextCurrent = (PFNGLXMAKECONTEXTCURRENTPROC)glewGetProcAddress((const GLubyte*)"glXMakeContextCurrent")) == NULL) || r;
-  r = ((glXQueryContext = (PFNGLXQUERYCONTEXTPROC)glewGetProcAddress((const GLubyte*)"glXQueryContext")) == NULL) || r;
-  r = ((glXQueryDrawable = (PFNGLXQUERYDRAWABLEPROC)glewGetProcAddress((const GLubyte*)"glXQueryDrawable")) == NULL) || r;
-  r = ((glXSelectEvent = (PFNGLXSELECTEVENTPROC)glewGetProcAddress((const GLubyte*)"glXSelectEvent")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_VERSION_1_3 */
-
-#ifdef GLX_VERSION_1_4
-
-#endif /* GLX_VERSION_1_4 */
-
-#ifdef GLX_3DFX_multisample
-
-#endif /* GLX_3DFX_multisample */
-
-#ifdef GLX_ARB_fbconfig_float
-
-#endif /* GLX_ARB_fbconfig_float */
-
-#ifdef GLX_ARB_get_proc_address
-
-#endif /* GLX_ARB_get_proc_address */
-
-#ifdef GLX_ARB_multisample
-
-#endif /* GLX_ARB_multisample */
-
-#ifdef GLX_ATI_pixel_format_float
-
-#endif /* GLX_ATI_pixel_format_float */
-
-#ifdef GLX_ATI_render_texture
-
-static GLboolean _glewInit_GLX_ATI_render_texture (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXBindTexImageATI = (PFNGLXBINDTEXIMAGEATIPROC)glewGetProcAddress((const GLubyte*)"glXBindTexImageATI")) == NULL) || r;
-  r = ((glXDrawableAttribATI = (PFNGLXDRAWABLEATTRIBATIPROC)glewGetProcAddress((const GLubyte*)"glXDrawableAttribATI")) == NULL) || r;
-  r = ((glXReleaseTexImageATI = (PFNGLXRELEASETEXIMAGEATIPROC)glewGetProcAddress((const GLubyte*)"glXReleaseTexImageATI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_ATI_render_texture */
-
-#ifdef GLX_EXT_fbconfig_packed_float
-
-#endif /* GLX_EXT_fbconfig_packed_float */
-
-#ifdef GLX_EXT_framebuffer_sRGB
-
-#endif /* GLX_EXT_framebuffer_sRGB */
-
-#ifdef GLX_EXT_import_context
-
-static GLboolean _glewInit_GLX_EXT_import_context (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXFreeContextEXT = (PFNGLXFREECONTEXTEXTPROC)glewGetProcAddress((const GLubyte*)"glXFreeContextEXT")) == NULL) || r;
-  r = ((glXGetContextIDEXT = (PFNGLXGETCONTEXTIDEXTPROC)glewGetProcAddress((const GLubyte*)"glXGetContextIDEXT")) == NULL) || r;
-  r = ((glXImportContextEXT = (PFNGLXIMPORTCONTEXTEXTPROC)glewGetProcAddress((const GLubyte*)"glXImportContextEXT")) == NULL) || r;
-  r = ((glXQueryContextInfoEXT = (PFNGLXQUERYCONTEXTINFOEXTPROC)glewGetProcAddress((const GLubyte*)"glXQueryContextInfoEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_EXT_import_context */
-
-#ifdef GLX_EXT_scene_marker
-
-#endif /* GLX_EXT_scene_marker */
-
-#ifdef GLX_EXT_texture_from_pixmap
-
-static GLboolean _glewInit_GLX_EXT_texture_from_pixmap (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXBindTexImageEXT = (PFNGLXBINDTEXIMAGEEXTPROC)glewGetProcAddress((const GLubyte*)"glXBindTexImageEXT")) == NULL) || r;
-  r = ((glXReleaseTexImageEXT = (PFNGLXRELEASETEXIMAGEEXTPROC)glewGetProcAddress((const GLubyte*)"glXReleaseTexImageEXT")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_EXT_texture_from_pixmap */
-
-#ifdef GLX_EXT_visual_info
-
-#endif /* GLX_EXT_visual_info */
-
-#ifdef GLX_EXT_visual_rating
-
-#endif /* GLX_EXT_visual_rating */
-
-#ifdef GLX_MESA_agp_offset
-
-static GLboolean _glewInit_GLX_MESA_agp_offset (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXGetAGPOffsetMESA = (PFNGLXGETAGPOFFSETMESAPROC)glewGetProcAddress((const GLubyte*)"glXGetAGPOffsetMESA")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_MESA_agp_offset */
-
-#ifdef GLX_MESA_copy_sub_buffer
-
-static GLboolean _glewInit_GLX_MESA_copy_sub_buffer (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXCopySubBufferMESA = (PFNGLXCOPYSUBBUFFERMESAPROC)glewGetProcAddress((const GLubyte*)"glXCopySubBufferMESA")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_MESA_copy_sub_buffer */
-
-#ifdef GLX_MESA_pixmap_colormap
-
-static GLboolean _glewInit_GLX_MESA_pixmap_colormap (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXCreateGLXPixmapMESA = (PFNGLXCREATEGLXPIXMAPMESAPROC)glewGetProcAddress((const GLubyte*)"glXCreateGLXPixmapMESA")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_MESA_pixmap_colormap */
-
-#ifdef GLX_MESA_release_buffers
-
-static GLboolean _glewInit_GLX_MESA_release_buffers (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXReleaseBuffersMESA = (PFNGLXRELEASEBUFFERSMESAPROC)glewGetProcAddress((const GLubyte*)"glXReleaseBuffersMESA")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_MESA_release_buffers */
-
-#ifdef GLX_MESA_set_3dfx_mode
-
-static GLboolean _glewInit_GLX_MESA_set_3dfx_mode (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXSet3DfxModeMESA = (PFNGLXSET3DFXMODEMESAPROC)glewGetProcAddress((const GLubyte*)"glXSet3DfxModeMESA")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_MESA_set_3dfx_mode */
-
-#ifdef GLX_NV_float_buffer
-
-#endif /* GLX_NV_float_buffer */
-
-#ifdef GLX_NV_vertex_array_range
-
-static GLboolean _glewInit_GLX_NV_vertex_array_range (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXAllocateMemoryNV = (PFNGLXALLOCATEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"glXAllocateMemoryNV")) == NULL) || r;
-  r = ((glXFreeMemoryNV = (PFNGLXFREEMEMORYNVPROC)glewGetProcAddress((const GLubyte*)"glXFreeMemoryNV")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_NV_vertex_array_range */
-
-#ifdef GLX_OML_swap_method
-
-#endif /* GLX_OML_swap_method */
-
-#ifdef GLX_OML_sync_control
-
-static GLboolean _glewInit_GLX_OML_sync_control (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXGetMscRateOML = (PFNGLXGETMSCRATEOMLPROC)glewGetProcAddress((const GLubyte*)"glXGetMscRateOML")) == NULL) || r;
-  r = ((glXGetSyncValuesOML = (PFNGLXGETSYNCVALUESOMLPROC)glewGetProcAddress((const GLubyte*)"glXGetSyncValuesOML")) == NULL) || r;
-  r = ((glXSwapBuffersMscOML = (PFNGLXSWAPBUFFERSMSCOMLPROC)glewGetProcAddress((const GLubyte*)"glXSwapBuffersMscOML")) == NULL) || r;
-  r = ((glXWaitForMscOML = (PFNGLXWAITFORMSCOMLPROC)glewGetProcAddress((const GLubyte*)"glXWaitForMscOML")) == NULL) || r;
-  r = ((glXWaitForSbcOML = (PFNGLXWAITFORSBCOMLPROC)glewGetProcAddress((const GLubyte*)"glXWaitForSbcOML")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_OML_sync_control */
-
-#ifdef GLX_SGIS_blended_overlay
-
-#endif /* GLX_SGIS_blended_overlay */
-
-#ifdef GLX_SGIS_color_range
-
-#endif /* GLX_SGIS_color_range */
-
-#ifdef GLX_SGIS_multisample
-
-#endif /* GLX_SGIS_multisample */
-
-#ifdef GLX_SGIS_shared_multisample
-
-#endif /* GLX_SGIS_shared_multisample */
-
-#ifdef GLX_SGIX_fbconfig
-
-static GLboolean _glewInit_GLX_SGIX_fbconfig (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXChooseFBConfigSGIX = (PFNGLXCHOOSEFBCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXChooseFBConfigSGIX")) == NULL) || r;
-  r = ((glXCreateContextWithConfigSGIX = (PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXCreateContextWithConfigSGIX")) == NULL) || r;
-  r = ((glXCreateGLXPixmapWithConfigSGIX = (PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXCreateGLXPixmapWithConfigSGIX")) == NULL) || r;
-  r = ((glXGetFBConfigAttribSGIX = (PFNGLXGETFBCONFIGATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigAttribSGIX")) == NULL) || r;
-  r = ((glXGetFBConfigFromVisualSGIX = (PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetFBConfigFromVisualSGIX")) == NULL) || r;
-  r = ((glXGetVisualFromFBConfigSGIX = (PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetVisualFromFBConfigSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGIX_fbconfig */
-
-#ifdef GLX_SGIX_hyperpipe
-
-static GLboolean _glewInit_GLX_SGIX_hyperpipe (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXBindHyperpipeSGIX = (PFNGLXBINDHYPERPIPESGIXPROC)glewGetProcAddress((const GLubyte*)"glXBindHyperpipeSGIX")) == NULL) || r;
-  r = ((glXDestroyHyperpipeConfigSGIX = (PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXDestroyHyperpipeConfigSGIX")) == NULL) || r;
-  r = ((glXHyperpipeAttribSGIX = (PFNGLXHYPERPIPEATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXHyperpipeAttribSGIX")) == NULL) || r;
-  r = ((glXHyperpipeConfigSGIX = (PFNGLXHYPERPIPECONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXHyperpipeConfigSGIX")) == NULL) || r;
-  r = ((glXQueryHyperpipeAttribSGIX = (PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeAttribSGIX")) == NULL) || r;
-  r = ((glXQueryHyperpipeBestAttribSGIX = (PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeBestAttribSGIX")) == NULL) || r;
-  r = ((glXQueryHyperpipeConfigSGIX = (PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeConfigSGIX")) == NULL) || r;
-  r = ((glXQueryHyperpipeNetworkSGIX = (PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryHyperpipeNetworkSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGIX_hyperpipe */
-
-#ifdef GLX_SGIX_pbuffer
-
-static GLboolean _glewInit_GLX_SGIX_pbuffer (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXCreateGLXPbufferSGIX = (PFNGLXCREATEGLXPBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXCreateGLXPbufferSGIX")) == NULL) || r;
-  r = ((glXDestroyGLXPbufferSGIX = (PFNGLXDESTROYGLXPBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXDestroyGLXPbufferSGIX")) == NULL) || r;
-  r = ((glXGetSelectedEventSGIX = (PFNGLXGETSELECTEDEVENTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXGetSelectedEventSGIX")) == NULL) || r;
-  r = ((glXQueryGLXPbufferSGIX = (PFNGLXQUERYGLXPBUFFERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryGLXPbufferSGIX")) == NULL) || r;
-  r = ((glXSelectEventSGIX = (PFNGLXSELECTEVENTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXSelectEventSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGIX_pbuffer */
-
-#ifdef GLX_SGIX_swap_barrier
-
-static GLboolean _glewInit_GLX_SGIX_swap_barrier (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXBindSwapBarrierSGIX = (PFNGLXBINDSWAPBARRIERSGIXPROC)glewGetProcAddress((const GLubyte*)"glXBindSwapBarrierSGIX")) == NULL) || r;
-  r = ((glXQueryMaxSwapBarriersSGIX = (PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryMaxSwapBarriersSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGIX_swap_barrier */
-
-#ifdef GLX_SGIX_swap_group
-
-static GLboolean _glewInit_GLX_SGIX_swap_group (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXJoinSwapGroupSGIX = (PFNGLXJOINSWAPGROUPSGIXPROC)glewGetProcAddress((const GLubyte*)"glXJoinSwapGroupSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGIX_swap_group */
-
-#ifdef GLX_SGIX_video_resize
-
-static GLboolean _glewInit_GLX_SGIX_video_resize (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXBindChannelToWindowSGIX = (PFNGLXBINDCHANNELTOWINDOWSGIXPROC)glewGetProcAddress((const GLubyte*)"glXBindChannelToWindowSGIX")) == NULL) || r;
-  r = ((glXChannelRectSGIX = (PFNGLXCHANNELRECTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXChannelRectSGIX")) == NULL) || r;
-  r = ((glXChannelRectSyncSGIX = (PFNGLXCHANNELRECTSYNCSGIXPROC)glewGetProcAddress((const GLubyte*)"glXChannelRectSyncSGIX")) == NULL) || r;
-  r = ((glXQueryChannelDeltasSGIX = (PFNGLXQUERYCHANNELDELTASSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryChannelDeltasSGIX")) == NULL) || r;
-  r = ((glXQueryChannelRectSGIX = (PFNGLXQUERYCHANNELRECTSGIXPROC)glewGetProcAddress((const GLubyte*)"glXQueryChannelRectSGIX")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGIX_video_resize */
-
-#ifdef GLX_SGIX_visual_select_group
-
-#endif /* GLX_SGIX_visual_select_group */
-
-#ifdef GLX_SGI_cushion
-
-static GLboolean _glewInit_GLX_SGI_cushion (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXCushionSGI = (PFNGLXCUSHIONSGIPROC)glewGetProcAddress((const GLubyte*)"glXCushionSGI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGI_cushion */
-
-#ifdef GLX_SGI_make_current_read
-
-static GLboolean _glewInit_GLX_SGI_make_current_read (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXGetCurrentReadDrawableSGI = (PFNGLXGETCURRENTREADDRAWABLESGIPROC)glewGetProcAddress((const GLubyte*)"glXGetCurrentReadDrawableSGI")) == NULL) || r;
-  r = ((glXMakeCurrentReadSGI = (PFNGLXMAKECURRENTREADSGIPROC)glewGetProcAddress((const GLubyte*)"glXMakeCurrentReadSGI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGI_make_current_read */
-
-#ifdef GLX_SGI_swap_control
-
-static GLboolean _glewInit_GLX_SGI_swap_control (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXSwapIntervalSGI = (PFNGLXSWAPINTERVALSGIPROC)glewGetProcAddress((const GLubyte*)"glXSwapIntervalSGI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGI_swap_control */
-
-#ifdef GLX_SGI_video_sync
-
-static GLboolean _glewInit_GLX_SGI_video_sync (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXGetVideoSyncSGI = (PFNGLXGETVIDEOSYNCSGIPROC)glewGetProcAddress((const GLubyte*)"glXGetVideoSyncSGI")) == NULL) || r;
-  r = ((glXWaitVideoSyncSGI = (PFNGLXWAITVIDEOSYNCSGIPROC)glewGetProcAddress((const GLubyte*)"glXWaitVideoSyncSGI")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SGI_video_sync */
-
-#ifdef GLX_SUN_get_transparent_index
-
-static GLboolean _glewInit_GLX_SUN_get_transparent_index (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXGetTransparentIndexSUN = (PFNGLXGETTRANSPARENTINDEXSUNPROC)glewGetProcAddress((const GLubyte*)"glXGetTransparentIndexSUN")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SUN_get_transparent_index */
-
-#ifdef GLX_SUN_video_resize
-
-static GLboolean _glewInit_GLX_SUN_video_resize (GLXEW_CONTEXT_ARG_DEF_INIT)
-{
-  GLboolean r = GL_FALSE;
-
-  r = ((glXGetVideoResizeSUN = (PFNGLXGETVIDEORESIZESUNPROC)glewGetProcAddress((const GLubyte*)"glXGetVideoResizeSUN")) == NULL) || r;
-  r = ((glXVideoResizeSUN = (PFNGLXVIDEORESIZESUNPROC)glewGetProcAddress((const GLubyte*)"glXVideoResizeSUN")) == NULL) || r;
-
-  return r;
-}
-
-#endif /* GLX_SUN_video_resize */
-
-/* ------------------------------------------------------------------------ */
-
-GLboolean glxewGetExtension (const char* name)
-{    
-  GLubyte* p;
-  GLubyte* end;
-  GLuint len = _glewStrLen((const GLubyte*)name);
-/*   if (glXQueryExtensionsString == NULL || glXGetCurrentDisplay == NULL) return GL_FALSE; */
-/*   p = (GLubyte*)glXQueryExtensionsString(glXGetCurrentDisplay(), DefaultScreen(glXGetCurrentDisplay())); */
-  if (glXGetClientString == NULL || glXGetCurrentDisplay == NULL) return GL_FALSE;
-  p = (GLubyte*)glXGetClientString(glXGetCurrentDisplay(), GLX_EXTENSIONS);
-  if (0 == p) return GL_FALSE;
-  end = p + _glewStrLen(p);
-  while (p < end)
-  {
-    GLuint n = _glewStrCLen(p, ' ');
-    if (len == n && _glewStrSame((const GLubyte*)name, p, n)) return GL_TRUE;
-    p += n+1;
-  }
-  return GL_FALSE;
-}
-
-GLenum glxewContextInit (GLXEW_CONTEXT_ARG_DEF_LIST)
-{
-  int major, minor;
-  /* initialize core GLX 1.2 */
-  if (_glewInit_GLX_VERSION_1_2(GLEW_CONTEXT_ARG_VAR_INIT)) return GLEW_ERROR_GLX_VERSION_11_ONLY;
-  /* initialize flags */
-  CONST_CAST(GLXEW_VERSION_1_0) = GL_TRUE;
-  CONST_CAST(GLXEW_VERSION_1_1) = GL_TRUE;
-  CONST_CAST(GLXEW_VERSION_1_2) = GL_TRUE;
-  CONST_CAST(GLXEW_VERSION_1_3) = GL_TRUE;
-  CONST_CAST(GLXEW_VERSION_1_4) = GL_TRUE;
-  /* query GLX version */
-  glXQueryVersion(glXGetCurrentDisplay(), &major, &minor);
-  if (major == 1 && minor <= 3)
-  {
-    switch (minor)
-    {
-      case 3:
-      CONST_CAST(GLXEW_VERSION_1_4) = GL_FALSE;
-      break;
-      case 2:
-      CONST_CAST(GLXEW_VERSION_1_4) = GL_FALSE;
-      CONST_CAST(GLXEW_VERSION_1_3) = GL_FALSE;
-      break;
-      default:
-      return GLEW_ERROR_GLX_VERSION_11_ONLY;
-      break;
-    }
-  }
-  /* initialize extensions */
-#ifdef GLX_VERSION_1_3
-  if (glewExperimental || GLXEW_VERSION_1_3) CONST_CAST(GLXEW_VERSION_1_3) = !_glewInit_GLX_VERSION_1_3(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_VERSION_1_3 */
-#ifdef GLX_3DFX_multisample
-  CONST_CAST(GLXEW_3DFX_multisample) = glxewGetExtension("GLX_3DFX_multisample");
-#endif /* GLX_3DFX_multisample */
-#ifdef GLX_ARB_fbconfig_float
-  CONST_CAST(GLXEW_ARB_fbconfig_float) = glxewGetExtension("GLX_ARB_fbconfig_float");
-#endif /* GLX_ARB_fbconfig_float */
-#ifdef GLX_ARB_get_proc_address
-  CONST_CAST(GLXEW_ARB_get_proc_address) = glxewGetExtension("GLX_ARB_get_proc_address");
-#endif /* GLX_ARB_get_proc_address */
-#ifdef GLX_ARB_multisample
-  CONST_CAST(GLXEW_ARB_multisample) = glxewGetExtension("GLX_ARB_multisample");
-#endif /* GLX_ARB_multisample */
-#ifdef GLX_ATI_pixel_format_float
-  CONST_CAST(GLXEW_ATI_pixel_format_float) = glxewGetExtension("GLX_ATI_pixel_format_float");
-#endif /* GLX_ATI_pixel_format_float */
-#ifdef GLX_ATI_render_texture
-  CONST_CAST(GLXEW_ATI_render_texture) = glxewGetExtension("GLX_ATI_render_texture");
-  if (glewExperimental || GLXEW_ATI_render_texture) CONST_CAST(GLXEW_ATI_render_texture) = !_glewInit_GLX_ATI_render_texture(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_ATI_render_texture */
-#ifdef GLX_EXT_fbconfig_packed_float
-  CONST_CAST(GLXEW_EXT_fbconfig_packed_float) = glxewGetExtension("GLX_EXT_fbconfig_packed_float");
-#endif /* GLX_EXT_fbconfig_packed_float */
-#ifdef GLX_EXT_framebuffer_sRGB
-  CONST_CAST(GLXEW_EXT_framebuffer_sRGB) = glxewGetExtension("GLX_EXT_framebuffer_sRGB");
-#endif /* GLX_EXT_framebuffer_sRGB */
-#ifdef GLX_EXT_import_context
-  CONST_CAST(GLXEW_EXT_import_context) = glxewGetExtension("GLX_EXT_import_context");
-  if (glewExperimental || GLXEW_EXT_import_context) CONST_CAST(GLXEW_EXT_import_context) = !_glewInit_GLX_EXT_import_context(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_EXT_import_context */
-#ifdef GLX_EXT_scene_marker
-  CONST_CAST(GLXEW_EXT_scene_marker) = glxewGetExtension("GLX_EXT_scene_marker");
-#endif /* GLX_EXT_scene_marker */
-#ifdef GLX_EXT_texture_from_pixmap
-  CONST_CAST(GLXEW_EXT_texture_from_pixmap) = glxewGetExtension("GLX_EXT_texture_from_pixmap");
-  if (glewExperimental || GLXEW_EXT_texture_from_pixmap) CONST_CAST(GLXEW_EXT_texture_from_pixmap) = !_glewInit_GLX_EXT_texture_from_pixmap(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_EXT_texture_from_pixmap */
-#ifdef GLX_EXT_visual_info
-  CONST_CAST(GLXEW_EXT_visual_info) = glxewGetExtension("GLX_EXT_visual_info");
-#endif /* GLX_EXT_visual_info */
-#ifdef GLX_EXT_visual_rating
-  CONST_CAST(GLXEW_EXT_visual_rating) = glxewGetExtension("GLX_EXT_visual_rating");
-#endif /* GLX_EXT_visual_rating */
-#ifdef GLX_MESA_agp_offset
-  CONST_CAST(GLXEW_MESA_agp_offset) = glxewGetExtension("GLX_MESA_agp_offset");
-  if (glewExperimental || GLXEW_MESA_agp_offset) CONST_CAST(GLXEW_MESA_agp_offset) = !_glewInit_GLX_MESA_agp_offset(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_MESA_agp_offset */
-#ifdef GLX_MESA_copy_sub_buffer
-  CONST_CAST(GLXEW_MESA_copy_sub_buffer) = glxewGetExtension("GLX_MESA_copy_sub_buffer");
-  if (glewExperimental || GLXEW_MESA_copy_sub_buffer) CONST_CAST(GLXEW_MESA_copy_sub_buffer) = !_glewInit_GLX_MESA_copy_sub_buffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_MESA_copy_sub_buffer */
-#ifdef GLX_MESA_pixmap_colormap
-  CONST_CAST(GLXEW_MESA_pixmap_colormap) = glxewGetExtension("GLX_MESA_pixmap_colormap");
-  if (glewExperimental || GLXEW_MESA_pixmap_colormap) CONST_CAST(GLXEW_MESA_pixmap_colormap) = !_glewInit_GLX_MESA_pixmap_colormap(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_MESA_pixmap_colormap */
-#ifdef GLX_MESA_release_buffers
-  CONST_CAST(GLXEW_MESA_release_buffers) = glxewGetExtension("GLX_MESA_release_buffers");
-  if (glewExperimental || GLXEW_MESA_release_buffers) CONST_CAST(GLXEW_MESA_release_buffers) = !_glewInit_GLX_MESA_release_buffers(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_MESA_release_buffers */
-#ifdef GLX_MESA_set_3dfx_mode
-  CONST_CAST(GLXEW_MESA_set_3dfx_mode) = glxewGetExtension("GLX_MESA_set_3dfx_mode");
-  if (glewExperimental || GLXEW_MESA_set_3dfx_mode) CONST_CAST(GLXEW_MESA_set_3dfx_mode) = !_glewInit_GLX_MESA_set_3dfx_mode(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_MESA_set_3dfx_mode */
-#ifdef GLX_NV_float_buffer
-  CONST_CAST(GLXEW_NV_float_buffer) = glxewGetExtension("GLX_NV_float_buffer");
-#endif /* GLX_NV_float_buffer */
-#ifdef GLX_NV_vertex_array_range
-  CONST_CAST(GLXEW_NV_vertex_array_range) = glxewGetExtension("GLX_NV_vertex_array_range");
-  if (glewExperimental || GLXEW_NV_vertex_array_range) CONST_CAST(GLXEW_NV_vertex_array_range) = !_glewInit_GLX_NV_vertex_array_range(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_NV_vertex_array_range */
-#ifdef GLX_OML_swap_method
-  CONST_CAST(GLXEW_OML_swap_method) = glxewGetExtension("GLX_OML_swap_method");
-#endif /* GLX_OML_swap_method */
-#ifdef GLX_OML_sync_control
-  CONST_CAST(GLXEW_OML_sync_control) = glxewGetExtension("GLX_OML_sync_control");
-  if (glewExperimental || GLXEW_OML_sync_control) CONST_CAST(GLXEW_OML_sync_control) = !_glewInit_GLX_OML_sync_control(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_OML_sync_control */
-#ifdef GLX_SGIS_blended_overlay
-  CONST_CAST(GLXEW_SGIS_blended_overlay) = glxewGetExtension("GLX_SGIS_blended_overlay");
-#endif /* GLX_SGIS_blended_overlay */
-#ifdef GLX_SGIS_color_range
-  CONST_CAST(GLXEW_SGIS_color_range) = glxewGetExtension("GLX_SGIS_color_range");
-#endif /* GLX_SGIS_color_range */
-#ifdef GLX_SGIS_multisample
-  CONST_CAST(GLXEW_SGIS_multisample) = glxewGetExtension("GLX_SGIS_multisample");
-#endif /* GLX_SGIS_multisample */
-#ifdef GLX_SGIS_shared_multisample
-  CONST_CAST(GLXEW_SGIS_shared_multisample) = glxewGetExtension("GLX_SGIS_shared_multisample");
-#endif /* GLX_SGIS_shared_multisample */
-#ifdef GLX_SGIX_fbconfig
-  CONST_CAST(GLXEW_SGIX_fbconfig) = glxewGetExtension("GLX_SGIX_fbconfig");
-  if (glewExperimental || GLXEW_SGIX_fbconfig) CONST_CAST(GLXEW_SGIX_fbconfig) = !_glewInit_GLX_SGIX_fbconfig(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGIX_fbconfig */
-#ifdef GLX_SGIX_hyperpipe
-  CONST_CAST(GLXEW_SGIX_hyperpipe) = glxewGetExtension("GLX_SGIX_hyperpipe");
-  if (glewExperimental || GLXEW_SGIX_hyperpipe) CONST_CAST(GLXEW_SGIX_hyperpipe) = !_glewInit_GLX_SGIX_hyperpipe(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGIX_hyperpipe */
-#ifdef GLX_SGIX_pbuffer
-  CONST_CAST(GLXEW_SGIX_pbuffer) = glxewGetExtension("GLX_SGIX_pbuffer");
-  if (glewExperimental || GLXEW_SGIX_pbuffer) CONST_CAST(GLXEW_SGIX_pbuffer) = !_glewInit_GLX_SGIX_pbuffer(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGIX_pbuffer */
-#ifdef GLX_SGIX_swap_barrier
-  CONST_CAST(GLXEW_SGIX_swap_barrier) = glxewGetExtension("GLX_SGIX_swap_barrier");
-  if (glewExperimental || GLXEW_SGIX_swap_barrier) CONST_CAST(GLXEW_SGIX_swap_barrier) = !_glewInit_GLX_SGIX_swap_barrier(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGIX_swap_barrier */
-#ifdef GLX_SGIX_swap_group
-  CONST_CAST(GLXEW_SGIX_swap_group) = glxewGetExtension("GLX_SGIX_swap_group");
-  if (glewExperimental || GLXEW_SGIX_swap_group) CONST_CAST(GLXEW_SGIX_swap_group) = !_glewInit_GLX_SGIX_swap_group(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGIX_swap_group */
-#ifdef GLX_SGIX_video_resize
-  CONST_CAST(GLXEW_SGIX_video_resize) = glxewGetExtension("GLX_SGIX_video_resize");
-  if (glewExperimental || GLXEW_SGIX_video_resize) CONST_CAST(GLXEW_SGIX_video_resize) = !_glewInit_GLX_SGIX_video_resize(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGIX_video_resize */
-#ifdef GLX_SGIX_visual_select_group
-  CONST_CAST(GLXEW_SGIX_visual_select_group) = glxewGetExtension("GLX_SGIX_visual_select_group");
-#endif /* GLX_SGIX_visual_select_group */
-#ifdef GLX_SGI_cushion
-  CONST_CAST(GLXEW_SGI_cushion) = glxewGetExtension("GLX_SGI_cushion");
-  if (glewExperimental || GLXEW_SGI_cushion) CONST_CAST(GLXEW_SGI_cushion) = !_glewInit_GLX_SGI_cushion(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGI_cushion */
-#ifdef GLX_SGI_make_current_read
-  CONST_CAST(GLXEW_SGI_make_current_read) = glxewGetExtension("GLX_SGI_make_current_read");
-  if (glewExperimental || GLXEW_SGI_make_current_read) CONST_CAST(GLXEW_SGI_make_current_read) = !_glewInit_GLX_SGI_make_current_read(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGI_make_current_read */
-#ifdef GLX_SGI_swap_control
-  CONST_CAST(GLXEW_SGI_swap_control) = glxewGetExtension("GLX_SGI_swap_control");
-  if (glewExperimental || GLXEW_SGI_swap_control) CONST_CAST(GLXEW_SGI_swap_control) = !_glewInit_GLX_SGI_swap_control(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGI_swap_control */
-#ifdef GLX_SGI_video_sync
-  CONST_CAST(GLXEW_SGI_video_sync) = glxewGetExtension("GLX_SGI_video_sync");
-  if (glewExperimental || GLXEW_SGI_video_sync) CONST_CAST(GLXEW_SGI_video_sync) = !_glewInit_GLX_SGI_video_sync(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SGI_video_sync */
-#ifdef GLX_SUN_get_transparent_index
-  CONST_CAST(GLXEW_SUN_get_transparent_index) = glxewGetExtension("GLX_SUN_get_transparent_index");
-  if (glewExperimental || GLXEW_SUN_get_transparent_index) CONST_CAST(GLXEW_SUN_get_transparent_index) = !_glewInit_GLX_SUN_get_transparent_index(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SUN_get_transparent_index */
-#ifdef GLX_SUN_video_resize
-  CONST_CAST(GLXEW_SUN_video_resize) = glxewGetExtension("GLX_SUN_video_resize");
-  if (glewExperimental || GLXEW_SUN_video_resize) CONST_CAST(GLXEW_SUN_video_resize) = !_glewInit_GLX_SUN_video_resize(GLEW_CONTEXT_ARG_VAR_INIT);
-#endif /* GLX_SUN_video_resize */
-
-  return GLEW_OK;
-}
-
-#endif /* !__APPLE__ || GLEW_APPLE_GLX */
-
-/* ------------------------------------------------------------------------ */
-
-const GLubyte* glewGetErrorString (GLenum error)
-{
-  static const GLubyte* _glewErrorString[] =
-  {
-    (const GLubyte*)"No error",
-    (const GLubyte*)"Missing GL version",
-    (const GLubyte*)"GL 1.1 and up are not supported",
-    (const GLubyte*)"GLX 1.2 and up are not supported",
-    (const GLubyte*)"Unknown error"
-  };
-  const int max_error = sizeof(_glewErrorString)/sizeof(*_glewErrorString) - 1;
-  return _glewErrorString[(int)error > max_error ? max_error : (int)error];
-}
-
-const GLubyte* glewGetString (GLenum name)
-{
-  static const GLubyte* _glewString[] =
-  {
-    (const GLubyte*)NULL,
-    (const GLubyte*)"1.5.0",
-    (const GLubyte*)"1",
-    (const GLubyte*)"5",
-    (const GLubyte*)"0"
-  };
-  const int max_string = sizeof(_glewString)/sizeof(*_glewString) - 1;
-  return _glewString[(int)name > max_string ? 0 : (int)name];
-}
-
-/* ------------------------------------------------------------------------ */
-
-GLboolean glewExperimental = GL_FALSE;
-
-#if !defined(GLEW_MX)
-
-#if defined(_WIN32)
-extern GLenum wglewContextInit (void);
-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX) /* _UNIX */
-extern GLenum glxewContextInit (void);
-#endif /* _WIN32 */
-
-GLenum glewInit ()
-{
-  GLenum r;
-  if ( (r = glewContextInit()) ) return r;
-#if defined(_WIN32)
-  return wglewContextInit();
-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX) /* _UNIX */
-  return glxewContextInit();
-#else
-  return r;
-#endif /* _WIN32 */
-}
-
-#endif /* !GLEW_MX */
-#ifdef GLEW_MX
-GLboolean glewContextIsSupported (GLEWContext* ctx, const char* name)
-#else
-GLboolean glewIsSupported (const char* name)
-#endif
-{
-  GLubyte* pos = (GLubyte*)name;
-  GLuint len = _glewStrLen(pos);
-  GLboolean ret = GL_TRUE;
-  while (ret && len > 0)
-  {
-    if (_glewStrSame1(&pos, &len, (const GLubyte*)"GL_", 3))
-    {
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"VERSION_", 8))
-      {
-#ifdef GL_VERSION_1_2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_2", 3))
-        {
-          ret = GLEW_VERSION_1_2;
-          continue;
-        }
-#endif
-#ifdef GL_VERSION_1_3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_3", 3))
-        {
-          ret = GLEW_VERSION_1_3;
-          continue;
-        }
-#endif
-#ifdef GL_VERSION_1_4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_4", 3))
-        {
-          ret = GLEW_VERSION_1_4;
-          continue;
-        }
-#endif
-#ifdef GL_VERSION_1_5
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_5", 3))
-        {
-          ret = GLEW_VERSION_1_5;
-          continue;
-        }
-#endif
-#ifdef GL_VERSION_2_0
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"2_0", 3))
-        {
-          ret = GLEW_VERSION_2_0;
-          continue;
-        }
-#endif
-#ifdef GL_VERSION_2_1
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"2_1", 3))
-        {
-          ret = GLEW_VERSION_2_1;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DFX_", 5))
-      {
-#ifdef GL_3DFX_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = GLEW_3DFX_multisample;
-          continue;
-        }
-#endif
-#ifdef GL_3DFX_tbuffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"tbuffer", 7))
-        {
-          ret = GLEW_3DFX_tbuffer;
-          continue;
-        }
-#endif
-#ifdef GL_3DFX_texture_compression_FXT1
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_FXT1", 24))
-        {
-          ret = GLEW_3DFX_texture_compression_FXT1;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"APPLE_", 6))
-      {
-#ifdef GL_APPLE_client_storage
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"client_storage", 14))
-        {
-          ret = GLEW_APPLE_client_storage;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_element_array
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"element_array", 13))
-        {
-          ret = GLEW_APPLE_element_array;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_fence
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fence", 5))
-        {
-          ret = GLEW_APPLE_fence;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_float_pixels
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_pixels", 12))
-        {
-          ret = GLEW_APPLE_float_pixels;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_flush_buffer_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"flush_buffer_range", 18))
-        {
-          ret = GLEW_APPLE_flush_buffer_range;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_pixel_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_buffer", 12))
-        {
-          ret = GLEW_APPLE_pixel_buffer;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_specular_vector
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"specular_vector", 15))
-        {
-          ret = GLEW_APPLE_specular_vector;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_texture_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_range", 13))
-        {
-          ret = GLEW_APPLE_texture_range;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_transform_hint
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"transform_hint", 14))
-        {
-          ret = GLEW_APPLE_transform_hint;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_vertex_array_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_object", 19))
-        {
-          ret = GLEW_APPLE_vertex_array_object;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_vertex_array_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
-        {
-          ret = GLEW_APPLE_vertex_array_range;
-          continue;
-        }
-#endif
-#ifdef GL_APPLE_ycbcr_422
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ycbcr_422", 9))
-        {
-          ret = GLEW_APPLE_ycbcr_422;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ARB_", 4))
-      {
-#ifdef GL_ARB_color_buffer_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_buffer_float", 18))
-        {
-          ret = GLEW_ARB_color_buffer_float;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_depth_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_texture", 13))
-        {
-          ret = GLEW_ARB_depth_texture;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_draw_buffers
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_buffers", 12))
-        {
-          ret = GLEW_ARB_draw_buffers;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_fragment_program
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program", 16))
-        {
-          ret = GLEW_ARB_fragment_program;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_fragment_program_shadow
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program_shadow", 23))
-        {
-          ret = GLEW_ARB_fragment_program_shadow;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_fragment_shader
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_shader", 15))
-        {
-          ret = GLEW_ARB_fragment_shader;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_half_float_pixel
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"half_float_pixel", 16))
-        {
-          ret = GLEW_ARB_half_float_pixel;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_imaging
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"imaging", 7))
-        {
-          ret = GLEW_ARB_imaging;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_matrix_palette
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"matrix_palette", 14))
-        {
-          ret = GLEW_ARB_matrix_palette;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = GLEW_ARB_multisample;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_multitexture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multitexture", 12))
-        {
-          ret = GLEW_ARB_multitexture;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_occlusion_query
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"occlusion_query", 15))
-        {
-          ret = GLEW_ARB_occlusion_query;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_pixel_buffer_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_buffer_object", 19))
-        {
-          ret = GLEW_ARB_pixel_buffer_object;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_point_parameters
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_parameters", 16))
-        {
-          ret = GLEW_ARB_point_parameters;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_point_sprite
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_sprite", 12))
-        {
-          ret = GLEW_ARB_point_sprite;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_shader_objects
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shader_objects", 14))
-        {
-          ret = GLEW_ARB_shader_objects;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_shading_language_100
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shading_language_100", 20))
-        {
-          ret = GLEW_ARB_shading_language_100;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_shadow
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow", 6))
-        {
-          ret = GLEW_ARB_shadow;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_shadow_ambient
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow_ambient", 14))
-        {
-          ret = GLEW_ARB_shadow_ambient;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_border_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_border_clamp", 20))
-        {
-          ret = GLEW_ARB_texture_border_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_compression
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression", 19))
-        {
-          ret = GLEW_ARB_texture_compression;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_cube_map
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_cube_map", 16))
-        {
-          ret = GLEW_ARB_texture_cube_map;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_env_add
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_add", 15))
-        {
-          ret = GLEW_ARB_texture_env_add;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_env_combine
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine", 19))
-        {
-          ret = GLEW_ARB_texture_env_combine;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_env_crossbar
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_crossbar", 20))
-        {
-          ret = GLEW_ARB_texture_env_crossbar;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_env_dot3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_dot3", 16))
-        {
-          ret = GLEW_ARB_texture_env_dot3;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_float", 13))
-        {
-          ret = GLEW_ARB_texture_float;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_mirrored_repeat
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirrored_repeat", 23))
-        {
-          ret = GLEW_ARB_texture_mirrored_repeat;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_non_power_of_two
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_non_power_of_two", 24))
-        {
-          ret = GLEW_ARB_texture_non_power_of_two;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_texture_rectangle
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_rectangle", 17))
-        {
-          ret = GLEW_ARB_texture_rectangle;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_transpose_matrix
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"transpose_matrix", 16))
-        {
-          ret = GLEW_ARB_transpose_matrix;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_vertex_blend
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_blend", 12))
-        {
-          ret = GLEW_ARB_vertex_blend;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_vertex_buffer_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_buffer_object", 20))
-        {
-          ret = GLEW_ARB_vertex_buffer_object;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_vertex_program
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program", 14))
-        {
-          ret = GLEW_ARB_vertex_program;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_vertex_shader
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_shader", 13))
-        {
-          ret = GLEW_ARB_vertex_shader;
-          continue;
-        }
-#endif
-#ifdef GL_ARB_window_pos
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"window_pos", 10))
-        {
-          ret = GLEW_ARB_window_pos;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATIX_", 5))
-      {
-#ifdef GL_ATIX_point_sprites
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_sprites", 13))
-        {
-          ret = GLEW_ATIX_point_sprites;
-          continue;
-        }
-#endif
-#ifdef GL_ATIX_texture_env_combine3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine3", 20))
-        {
-          ret = GLEW_ATIX_texture_env_combine3;
-          continue;
-        }
-#endif
-#ifdef GL_ATIX_texture_env_route
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_route", 17))
-        {
-          ret = GLEW_ATIX_texture_env_route;
-          continue;
-        }
-#endif
-#ifdef GL_ATIX_vertex_shader_output_point_size
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_shader_output_point_size", 31))
-        {
-          ret = GLEW_ATIX_vertex_shader_output_point_size;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATI_", 4))
-      {
-#ifdef GL_ATI_draw_buffers
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_buffers", 12))
-        {
-          ret = GLEW_ATI_draw_buffers;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_element_array
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"element_array", 13))
-        {
-          ret = GLEW_ATI_element_array;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_envmap_bumpmap
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"envmap_bumpmap", 14))
-        {
-          ret = GLEW_ATI_envmap_bumpmap;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_fragment_shader
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_shader", 15))
-        {
-          ret = GLEW_ATI_fragment_shader;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_map_object_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"map_object_buffer", 17))
-        {
-          ret = GLEW_ATI_map_object_buffer;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_pn_triangles
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pn_triangles", 12))
-        {
-          ret = GLEW_ATI_pn_triangles;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_separate_stencil
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"separate_stencil", 16))
-        {
-          ret = GLEW_ATI_separate_stencil;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_shader_texture_lod
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shader_texture_lod", 18))
-        {
-          ret = GLEW_ATI_shader_texture_lod;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_text_fragment_shader
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"text_fragment_shader", 20))
-        {
-          ret = GLEW_ATI_text_fragment_shader;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_texture_compression_3dc
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_3dc", 23))
-        {
-          ret = GLEW_ATI_texture_compression_3dc;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_texture_env_combine3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine3", 20))
-        {
-          ret = GLEW_ATI_texture_env_combine3;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_texture_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_float", 13))
-        {
-          ret = GLEW_ATI_texture_float;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_texture_mirror_once
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirror_once", 19))
-        {
-          ret = GLEW_ATI_texture_mirror_once;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_vertex_array_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_object", 19))
-        {
-          ret = GLEW_ATI_vertex_array_object;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_vertex_attrib_array_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_attrib_array_object", 26))
-        {
-          ret = GLEW_ATI_vertex_attrib_array_object;
-          continue;
-        }
-#endif
-#ifdef GL_ATI_vertex_streams
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_streams", 14))
-        {
-          ret = GLEW_ATI_vertex_streams;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"EXT_", 4))
-      {
-#ifdef GL_EXT_422_pixels
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"422_pixels", 10))
-        {
-          ret = GLEW_EXT_422_pixels;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_Cg_shader
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"Cg_shader", 9))
-        {
-          ret = GLEW_EXT_Cg_shader;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_abgr
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"abgr", 4))
-        {
-          ret = GLEW_EXT_abgr;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_bgra
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"bgra", 4))
-        {
-          ret = GLEW_EXT_bgra;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_bindable_uniform
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"bindable_uniform", 16))
-        {
-          ret = GLEW_EXT_bindable_uniform;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_blend_color
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_color", 11))
-        {
-          ret = GLEW_EXT_blend_color;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_blend_equation_separate
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_equation_separate", 23))
-        {
-          ret = GLEW_EXT_blend_equation_separate;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_blend_func_separate
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_func_separate", 19))
-        {
-          ret = GLEW_EXT_blend_func_separate;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_blend_logic_op
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_logic_op", 14))
-        {
-          ret = GLEW_EXT_blend_logic_op;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_blend_minmax
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_minmax", 12))
-        {
-          ret = GLEW_EXT_blend_minmax;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_blend_subtract
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_subtract", 14))
-        {
-          ret = GLEW_EXT_blend_subtract;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_clip_volume_hint
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"clip_volume_hint", 16))
-        {
-          ret = GLEW_EXT_clip_volume_hint;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_cmyka
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cmyka", 5))
-        {
-          ret = GLEW_EXT_cmyka;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_color_subtable
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_subtable", 14))
-        {
-          ret = GLEW_EXT_color_subtable;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_compiled_vertex_array
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"compiled_vertex_array", 21))
-        {
-          ret = GLEW_EXT_compiled_vertex_array;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_convolution
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"convolution", 11))
-        {
-          ret = GLEW_EXT_convolution;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_coordinate_frame
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"coordinate_frame", 16))
-        {
-          ret = GLEW_EXT_coordinate_frame;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_copy_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"copy_texture", 12))
-        {
-          ret = GLEW_EXT_copy_texture;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_cull_vertex
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cull_vertex", 11))
-        {
-          ret = GLEW_EXT_cull_vertex;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_depth_bounds_test
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_bounds_test", 17))
-        {
-          ret = GLEW_EXT_depth_bounds_test;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_draw_buffers2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_buffers2", 13))
-        {
-          ret = GLEW_EXT_draw_buffers2;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_draw_instanced
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_instanced", 14))
-        {
-          ret = GLEW_EXT_draw_instanced;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_draw_range_elements
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"draw_range_elements", 19))
-        {
-          ret = GLEW_EXT_draw_range_elements;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_fog_coord
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_coord", 9))
-        {
-          ret = GLEW_EXT_fog_coord;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_fragment_lighting
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_lighting", 17))
-        {
-          ret = GLEW_EXT_fragment_lighting;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_framebuffer_blit
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_blit", 16))
-        {
-          ret = GLEW_EXT_framebuffer_blit;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_framebuffer_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_multisample", 23))
-        {
-          ret = GLEW_EXT_framebuffer_multisample;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_framebuffer_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_object", 18))
-        {
-          ret = GLEW_EXT_framebuffer_object;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_framebuffer_sRGB
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_sRGB", 16))
-        {
-          ret = GLEW_EXT_framebuffer_sRGB;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_geometry_shader4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"geometry_shader4", 16))
-        {
-          ret = GLEW_EXT_geometry_shader4;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_gpu_program_parameters
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_program_parameters", 22))
-        {
-          ret = GLEW_EXT_gpu_program_parameters;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_gpu_shader4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_shader4", 11))
-        {
-          ret = GLEW_EXT_gpu_shader4;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_histogram
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"histogram", 9))
-        {
-          ret = GLEW_EXT_histogram;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_index_array_formats
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_array_formats", 19))
-        {
-          ret = GLEW_EXT_index_array_formats;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_index_func
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_func", 10))
-        {
-          ret = GLEW_EXT_index_func;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_index_material
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_material", 14))
-        {
-          ret = GLEW_EXT_index_material;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_index_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"index_texture", 13))
-        {
-          ret = GLEW_EXT_index_texture;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_light_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"light_texture", 13))
-        {
-          ret = GLEW_EXT_light_texture;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_misc_attribute
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"misc_attribute", 14))
-        {
-          ret = GLEW_EXT_misc_attribute;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_multi_draw_arrays
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multi_draw_arrays", 17))
-        {
-          ret = GLEW_EXT_multi_draw_arrays;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = GLEW_EXT_multisample;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_packed_depth_stencil
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_depth_stencil", 20))
-        {
-          ret = GLEW_EXT_packed_depth_stencil;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_packed_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_float", 12))
-        {
-          ret = GLEW_EXT_packed_float;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_packed_pixels
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_pixels", 13))
-        {
-          ret = GLEW_EXT_packed_pixels;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_paletted_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"paletted_texture", 16))
-        {
-          ret = GLEW_EXT_paletted_texture;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_pixel_buffer_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_buffer_object", 19))
-        {
-          ret = GLEW_EXT_pixel_buffer_object;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_pixel_transform
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_transform", 15))
-        {
-          ret = GLEW_EXT_pixel_transform;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_pixel_transform_color_table
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_transform_color_table", 27))
-        {
-          ret = GLEW_EXT_pixel_transform_color_table;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_point_parameters
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_parameters", 16))
-        {
-          ret = GLEW_EXT_point_parameters;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_polygon_offset
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"polygon_offset", 14))
-        {
-          ret = GLEW_EXT_polygon_offset;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_rescale_normal
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"rescale_normal", 14))
-        {
-          ret = GLEW_EXT_rescale_normal;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_scene_marker
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"scene_marker", 12))
-        {
-          ret = GLEW_EXT_scene_marker;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_secondary_color
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"secondary_color", 15))
-        {
-          ret = GLEW_EXT_secondary_color;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_separate_specular_color
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"separate_specular_color", 23))
-        {
-          ret = GLEW_EXT_separate_specular_color;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_shadow_funcs
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow_funcs", 12))
-        {
-          ret = GLEW_EXT_shadow_funcs;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_shared_texture_palette
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shared_texture_palette", 22))
-        {
-          ret = GLEW_EXT_shared_texture_palette;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_stencil_clear_tag
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stencil_clear_tag", 17))
-        {
-          ret = GLEW_EXT_stencil_clear_tag;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_stencil_two_side
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stencil_two_side", 16))
-        {
-          ret = GLEW_EXT_stencil_two_side;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_stencil_wrap
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stencil_wrap", 12))
-        {
-          ret = GLEW_EXT_stencil_wrap;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_subtexture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"subtexture", 10))
-        {
-          ret = GLEW_EXT_subtexture;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture", 7))
-        {
-          ret = GLEW_EXT_texture;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture3D
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture3D", 9))
-        {
-          ret = GLEW_EXT_texture3D;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_array
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_array", 13))
-        {
-          ret = GLEW_EXT_texture_array;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_buffer_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_buffer_object", 21))
-        {
-          ret = GLEW_EXT_texture_buffer_object;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_compression_dxt1
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_dxt1", 24))
-        {
-          ret = GLEW_EXT_texture_compression_dxt1;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_compression_latc
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_latc", 24))
-        {
-          ret = GLEW_EXT_texture_compression_latc;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_compression_rgtc
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_rgtc", 24))
-        {
-          ret = GLEW_EXT_texture_compression_rgtc;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_compression_s3tc
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_s3tc", 24))
-        {
-          ret = GLEW_EXT_texture_compression_s3tc;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_cube_map
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_cube_map", 16))
-        {
-          ret = GLEW_EXT_texture_cube_map;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_edge_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_edge_clamp", 18))
-        {
-          ret = GLEW_EXT_texture_edge_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_env
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env", 11))
-        {
-          ret = GLEW_EXT_texture_env;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_env_add
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_add", 15))
-        {
-          ret = GLEW_EXT_texture_env_add;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_env_combine
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine", 19))
-        {
-          ret = GLEW_EXT_texture_env_combine;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_env_dot3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_dot3", 16))
-        {
-          ret = GLEW_EXT_texture_env_dot3;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_filter_anisotropic
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_filter_anisotropic", 26))
-        {
-          ret = GLEW_EXT_texture_filter_anisotropic;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_integer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_integer", 15))
-        {
-          ret = GLEW_EXT_texture_integer;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_lod_bias
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lod_bias", 16))
-        {
-          ret = GLEW_EXT_texture_lod_bias;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_mirror_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirror_clamp", 20))
-        {
-          ret = GLEW_EXT_texture_mirror_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_object", 14))
-        {
-          ret = GLEW_EXT_texture_object;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_perturb_normal
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_perturb_normal", 22))
-        {
-          ret = GLEW_EXT_texture_perturb_normal;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_rectangle
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_rectangle", 17))
-        {
-          ret = GLEW_EXT_texture_rectangle;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_sRGB
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_sRGB", 12))
-        {
-          ret = GLEW_EXT_texture_sRGB;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_texture_shared_exponent
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shared_exponent", 23))
-        {
-          ret = GLEW_EXT_texture_shared_exponent;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_timer_query
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"timer_query", 11))
-        {
-          ret = GLEW_EXT_timer_query;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_vertex_array
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array", 12))
-        {
-          ret = GLEW_EXT_vertex_array;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_vertex_shader
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_shader", 13))
-        {
-          ret = GLEW_EXT_vertex_shader;
-          continue;
-        }
-#endif
-#ifdef GL_EXT_vertex_weighting
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_weighting", 16))
-        {
-          ret = GLEW_EXT_vertex_weighting;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"GREMEDY_", 8))
-      {
-#ifdef GL_GREMEDY_frame_terminator
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"frame_terminator", 16))
-        {
-          ret = GLEW_GREMEDY_frame_terminator;
-          continue;
-        }
-#endif
-#ifdef GL_GREMEDY_string_marker
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"string_marker", 13))
-        {
-          ret = GLEW_GREMEDY_string_marker;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"HP_", 3))
-      {
-#ifdef GL_HP_convolution_border_modes
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"convolution_border_modes", 24))
-        {
-          ret = GLEW_HP_convolution_border_modes;
-          continue;
-        }
-#endif
-#ifdef GL_HP_image_transform
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"image_transform", 15))
-        {
-          ret = GLEW_HP_image_transform;
-          continue;
-        }
-#endif
-#ifdef GL_HP_occlusion_test
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"occlusion_test", 14))
-        {
-          ret = GLEW_HP_occlusion_test;
-          continue;
-        }
-#endif
-#ifdef GL_HP_texture_lighting
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lighting", 16))
-        {
-          ret = GLEW_HP_texture_lighting;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"IBM_", 4))
-      {
-#ifdef GL_IBM_cull_vertex
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cull_vertex", 11))
-        {
-          ret = GLEW_IBM_cull_vertex;
-          continue;
-        }
-#endif
-#ifdef GL_IBM_multimode_draw_arrays
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multimode_draw_arrays", 21))
-        {
-          ret = GLEW_IBM_multimode_draw_arrays;
-          continue;
-        }
-#endif
-#ifdef GL_IBM_rasterpos_clip
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"rasterpos_clip", 14))
-        {
-          ret = GLEW_IBM_rasterpos_clip;
-          continue;
-        }
-#endif
-#ifdef GL_IBM_static_data
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"static_data", 11))
-        {
-          ret = GLEW_IBM_static_data;
-          continue;
-        }
-#endif
-#ifdef GL_IBM_texture_mirrored_repeat
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_mirrored_repeat", 23))
-        {
-          ret = GLEW_IBM_texture_mirrored_repeat;
-          continue;
-        }
-#endif
-#ifdef GL_IBM_vertex_array_lists
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_lists", 18))
-        {
-          ret = GLEW_IBM_vertex_array_lists;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"INGR_", 5))
-      {
-#ifdef GL_INGR_color_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_clamp", 11))
-        {
-          ret = GLEW_INGR_color_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_INGR_interlace_read
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"interlace_read", 14))
-        {
-          ret = GLEW_INGR_interlace_read;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"INTEL_", 6))
-      {
-#ifdef GL_INTEL_parallel_arrays
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"parallel_arrays", 15))
-        {
-          ret = GLEW_INTEL_parallel_arrays;
-          continue;
-        }
-#endif
-#ifdef GL_INTEL_texture_scissor
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_scissor", 15))
-        {
-          ret = GLEW_INTEL_texture_scissor;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"KTX_", 4))
-      {
-#ifdef GL_KTX_buffer_region
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"buffer_region", 13))
-        {
-          ret = GLEW_KTX_buffer_region;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"MESAX_", 6))
-      {
-#ifdef GL_MESAX_texture_stack
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_stack", 13))
-        {
-          ret = GLEW_MESAX_texture_stack;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"MESA_", 5))
-      {
-#ifdef GL_MESA_pack_invert
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pack_invert", 11))
-        {
-          ret = GLEW_MESA_pack_invert;
-          continue;
-        }
-#endif
-#ifdef GL_MESA_resize_buffers
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"resize_buffers", 14))
-        {
-          ret = GLEW_MESA_resize_buffers;
-          continue;
-        }
-#endif
-#ifdef GL_MESA_window_pos
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"window_pos", 10))
-        {
-          ret = GLEW_MESA_window_pos;
-          continue;
-        }
-#endif
-#ifdef GL_MESA_ycbcr_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ycbcr_texture", 13))
-        {
-          ret = GLEW_MESA_ycbcr_texture;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"NV_", 3))
-      {
-#ifdef GL_NV_blend_square
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_square", 12))
-        {
-          ret = GLEW_NV_blend_square;
-          continue;
-        }
-#endif
-#ifdef GL_NV_copy_depth_to_color
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"copy_depth_to_color", 19))
-        {
-          ret = GLEW_NV_copy_depth_to_color;
-          continue;
-        }
-#endif
-#ifdef GL_NV_depth_buffer_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_buffer_float", 18))
-        {
-          ret = GLEW_NV_depth_buffer_float;
-          continue;
-        }
-#endif
-#ifdef GL_NV_depth_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_clamp", 11))
-        {
-          ret = GLEW_NV_depth_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_NV_depth_range_unclamped
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_range_unclamped", 21))
-        {
-          ret = GLEW_NV_depth_range_unclamped;
-          continue;
-        }
-#endif
-#ifdef GL_NV_evaluators
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"evaluators", 10))
-        {
-          ret = GLEW_NV_evaluators;
-          continue;
-        }
-#endif
-#ifdef GL_NV_fence
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fence", 5))
-        {
-          ret = GLEW_NV_fence;
-          continue;
-        }
-#endif
-#ifdef GL_NV_float_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_buffer", 12))
-        {
-          ret = GLEW_NV_float_buffer;
-          continue;
-        }
-#endif
-#ifdef GL_NV_fog_distance
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_distance", 12))
-        {
-          ret = GLEW_NV_fog_distance;
-          continue;
-        }
-#endif
-#ifdef GL_NV_fragment_program
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program", 16))
-        {
-          ret = GLEW_NV_fragment_program;
-          continue;
-        }
-#endif
-#ifdef GL_NV_fragment_program2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program2", 17))
-        {
-          ret = GLEW_NV_fragment_program2;
-          continue;
-        }
-#endif
-#ifdef GL_NV_fragment_program4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program4", 17))
-        {
-          ret = GLEW_NV_fragment_program4;
-          continue;
-        }
-#endif
-#ifdef GL_NV_fragment_program_option
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_program_option", 23))
-        {
-          ret = GLEW_NV_fragment_program_option;
-          continue;
-        }
-#endif
-#ifdef GL_NV_framebuffer_multisample_coverage
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_multisample_coverage", 32))
-        {
-          ret = GLEW_NV_framebuffer_multisample_coverage;
-          continue;
-        }
-#endif
-#ifdef GL_NV_geometry_program4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"geometry_program4", 17))
-        {
-          ret = GLEW_NV_geometry_program4;
-          continue;
-        }
-#endif
-#ifdef GL_NV_geometry_shader4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"geometry_shader4", 16))
-        {
-          ret = GLEW_NV_geometry_shader4;
-          continue;
-        }
-#endif
-#ifdef GL_NV_gpu_program4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_program4", 12))
-        {
-          ret = GLEW_NV_gpu_program4;
-          continue;
-        }
-#endif
-#ifdef GL_NV_half_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"half_float", 10))
-        {
-          ret = GLEW_NV_half_float;
-          continue;
-        }
-#endif
-#ifdef GL_NV_light_max_exponent
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"light_max_exponent", 18))
-        {
-          ret = GLEW_NV_light_max_exponent;
-          continue;
-        }
-#endif
-#ifdef GL_NV_multisample_filter_hint
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample_filter_hint", 23))
-        {
-          ret = GLEW_NV_multisample_filter_hint;
-          continue;
-        }
-#endif
-#ifdef GL_NV_occlusion_query
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"occlusion_query", 15))
-        {
-          ret = GLEW_NV_occlusion_query;
-          continue;
-        }
-#endif
-#ifdef GL_NV_packed_depth_stencil
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"packed_depth_stencil", 20))
-        {
-          ret = GLEW_NV_packed_depth_stencil;
-          continue;
-        }
-#endif
-#ifdef GL_NV_parameter_buffer_object
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"parameter_buffer_object", 23))
-        {
-          ret = GLEW_NV_parameter_buffer_object;
-          continue;
-        }
-#endif
-#ifdef GL_NV_pixel_data_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_data_range", 16))
-        {
-          ret = GLEW_NV_pixel_data_range;
-          continue;
-        }
-#endif
-#ifdef GL_NV_point_sprite
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"point_sprite", 12))
-        {
-          ret = GLEW_NV_point_sprite;
-          continue;
-        }
-#endif
-#ifdef GL_NV_primitive_restart
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"primitive_restart", 17))
-        {
-          ret = GLEW_NV_primitive_restart;
-          continue;
-        }
-#endif
-#ifdef GL_NV_register_combiners
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"register_combiners", 18))
-        {
-          ret = GLEW_NV_register_combiners;
-          continue;
-        }
-#endif
-#ifdef GL_NV_register_combiners2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"register_combiners2", 19))
-        {
-          ret = GLEW_NV_register_combiners2;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texgen_emboss
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texgen_emboss", 13))
-        {
-          ret = GLEW_NV_texgen_emboss;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texgen_reflection
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texgen_reflection", 17))
-        {
-          ret = GLEW_NV_texgen_reflection;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texture_compression_vtc
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_compression_vtc", 23))
-        {
-          ret = GLEW_NV_texture_compression_vtc;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texture_env_combine4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_env_combine4", 20))
-        {
-          ret = GLEW_NV_texture_env_combine4;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texture_expand_normal
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_expand_normal", 21))
-        {
-          ret = GLEW_NV_texture_expand_normal;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texture_rectangle
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_rectangle", 17))
-        {
-          ret = GLEW_NV_texture_rectangle;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texture_shader
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shader", 14))
-        {
-          ret = GLEW_NV_texture_shader;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texture_shader2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shader2", 15))
-        {
-          ret = GLEW_NV_texture_shader2;
-          continue;
-        }
-#endif
-#ifdef GL_NV_texture_shader3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_shader3", 15))
-        {
-          ret = GLEW_NV_texture_shader3;
-          continue;
-        }
-#endif
-#ifdef GL_NV_transform_feedback
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"transform_feedback", 18))
-        {
-          ret = GLEW_NV_transform_feedback;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_array_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
-        {
-          ret = GLEW_NV_vertex_array_range;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_array_range2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range2", 19))
-        {
-          ret = GLEW_NV_vertex_array_range2;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_program
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program", 14))
-        {
-          ret = GLEW_NV_vertex_program;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_program1_1
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program1_1", 17))
-        {
-          ret = GLEW_NV_vertex_program1_1;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_program2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program2", 15))
-        {
-          ret = GLEW_NV_vertex_program2;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_program2_option
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program2_option", 22))
-        {
-          ret = GLEW_NV_vertex_program2_option;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_program3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program3", 15))
-        {
-          ret = GLEW_NV_vertex_program3;
-          continue;
-        }
-#endif
-#ifdef GL_NV_vertex_program4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_program4", 15))
-        {
-          ret = GLEW_NV_vertex_program4;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OES_", 4))
-      {
-#ifdef GL_OES_byte_coordinates
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"byte_coordinates", 16))
-        {
-          ret = GLEW_OES_byte_coordinates;
-          continue;
-        }
-#endif
-#ifdef GL_OES_compressed_paletted_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"compressed_paletted_texture", 27))
-        {
-          ret = GLEW_OES_compressed_paletted_texture;
-          continue;
-        }
-#endif
-#ifdef GL_OES_read_format
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"read_format", 11))
-        {
-          ret = GLEW_OES_read_format;
-          continue;
-        }
-#endif
-#ifdef GL_OES_single_precision
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"single_precision", 16))
-        {
-          ret = GLEW_OES_single_precision;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OML_", 4))
-      {
-#ifdef GL_OML_interlace
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"interlace", 9))
-        {
-          ret = GLEW_OML_interlace;
-          continue;
-        }
-#endif
-#ifdef GL_OML_resample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"resample", 8))
-        {
-          ret = GLEW_OML_resample;
-          continue;
-        }
-#endif
-#ifdef GL_OML_subsample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"subsample", 9))
-        {
-          ret = GLEW_OML_subsample;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"PGI_", 4))
-      {
-#ifdef GL_PGI_misc_hints
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"misc_hints", 10))
-        {
-          ret = GLEW_PGI_misc_hints;
-          continue;
-        }
-#endif
-#ifdef GL_PGI_vertex_hints
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_hints", 12))
-        {
-          ret = GLEW_PGI_vertex_hints;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"REND_", 5))
-      {
-#ifdef GL_REND_screen_coordinates
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"screen_coordinates", 18))
-        {
-          ret = GLEW_REND_screen_coordinates;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"S3_", 3))
-      {
-#ifdef GL_S3_s3tc
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"s3tc", 4))
-        {
-          ret = GLEW_S3_s3tc;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIS_", 5))
-      {
-#ifdef GL_SGIS_color_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_range", 11))
-        {
-          ret = GLEW_SGIS_color_range;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_detail_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"detail_texture", 14))
-        {
-          ret = GLEW_SGIS_detail_texture;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_fog_function
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_function", 12))
-        {
-          ret = GLEW_SGIS_fog_function;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_generate_mipmap
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"generate_mipmap", 15))
-        {
-          ret = GLEW_SGIS_generate_mipmap;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = GLEW_SGIS_multisample;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_pixel_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_texture", 13))
-        {
-          ret = GLEW_SGIS_pixel_texture;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_sharpen_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sharpen_texture", 15))
-        {
-          ret = GLEW_SGIS_sharpen_texture;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_texture4D
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture4D", 9))
-        {
-          ret = GLEW_SGIS_texture4D;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_texture_border_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_border_clamp", 20))
-        {
-          ret = GLEW_SGIS_texture_border_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_texture_edge_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_edge_clamp", 18))
-        {
-          ret = GLEW_SGIS_texture_edge_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_texture_filter4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_filter4", 15))
-        {
-          ret = GLEW_SGIS_texture_filter4;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_texture_lod
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lod", 11))
-        {
-          ret = GLEW_SGIS_texture_lod;
-          continue;
-        }
-#endif
-#ifdef GL_SGIS_texture_select
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_select", 14))
-        {
-          ret = GLEW_SGIS_texture_select;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIX_", 5))
-      {
-#ifdef GL_SGIX_async
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"async", 5))
-        {
-          ret = GLEW_SGIX_async;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_async_histogram
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"async_histogram", 15))
-        {
-          ret = GLEW_SGIX_async_histogram;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_async_pixel
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"async_pixel", 11))
-        {
-          ret = GLEW_SGIX_async_pixel;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_blend_alpha_minmax
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blend_alpha_minmax", 18))
-        {
-          ret = GLEW_SGIX_blend_alpha_minmax;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_clipmap
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"clipmap", 7))
-        {
-          ret = GLEW_SGIX_clipmap;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_depth_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_texture", 13))
-        {
-          ret = GLEW_SGIX_depth_texture;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_flush_raster
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"flush_raster", 12))
-        {
-          ret = GLEW_SGIX_flush_raster;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_fog_offset
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_offset", 10))
-        {
-          ret = GLEW_SGIX_fog_offset;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_fog_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fog_texture", 11))
-        {
-          ret = GLEW_SGIX_fog_texture;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_fragment_specular_lighting
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fragment_specular_lighting", 26))
-        {
-          ret = GLEW_SGIX_fragment_specular_lighting;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_framezoom
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framezoom", 9))
-        {
-          ret = GLEW_SGIX_framezoom;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_interlace
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"interlace", 9))
-        {
-          ret = GLEW_SGIX_interlace;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_ir_instrument1
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ir_instrument1", 14))
-        {
-          ret = GLEW_SGIX_ir_instrument1;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_list_priority
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"list_priority", 13))
-        {
-          ret = GLEW_SGIX_list_priority;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_pixel_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_texture", 13))
-        {
-          ret = GLEW_SGIX_pixel_texture;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_pixel_texture_bits
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_texture_bits", 18))
-        {
-          ret = GLEW_SGIX_pixel_texture_bits;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_reference_plane
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"reference_plane", 15))
-        {
-          ret = GLEW_SGIX_reference_plane;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_resample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"resample", 8))
-        {
-          ret = GLEW_SGIX_resample;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_shadow
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow", 6))
-        {
-          ret = GLEW_SGIX_shadow;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_shadow_ambient
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shadow_ambient", 14))
-        {
-          ret = GLEW_SGIX_shadow_ambient;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_sprite
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sprite", 6))
-        {
-          ret = GLEW_SGIX_sprite;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_tag_sample_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"tag_sample_buffer", 17))
-        {
-          ret = GLEW_SGIX_tag_sample_buffer;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_texture_add_env
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_add_env", 15))
-        {
-          ret = GLEW_SGIX_texture_add_env;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_texture_coordinate_clamp
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_coordinate_clamp", 24))
-        {
-          ret = GLEW_SGIX_texture_coordinate_clamp;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_texture_lod_bias
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_lod_bias", 16))
-        {
-          ret = GLEW_SGIX_texture_lod_bias;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_texture_multi_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_multi_buffer", 20))
-        {
-          ret = GLEW_SGIX_texture_multi_buffer;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_texture_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_range", 13))
-        {
-          ret = GLEW_SGIX_texture_range;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_texture_scale_bias
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_scale_bias", 18))
-        {
-          ret = GLEW_SGIX_texture_scale_bias;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_vertex_preclip
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_preclip", 14))
-        {
-          ret = GLEW_SGIX_vertex_preclip;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_vertex_preclip_hint
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_preclip_hint", 19))
-        {
-          ret = GLEW_SGIX_vertex_preclip_hint;
-          continue;
-        }
-#endif
-#ifdef GL_SGIX_ycrcb
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"ycrcb", 5))
-        {
-          ret = GLEW_SGIX_ycrcb;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGI_", 4))
-      {
-#ifdef GL_SGI_color_matrix
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_matrix", 12))
-        {
-          ret = GLEW_SGI_color_matrix;
-          continue;
-        }
-#endif
-#ifdef GL_SGI_color_table
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_table", 11))
-        {
-          ret = GLEW_SGI_color_table;
-          continue;
-        }
-#endif
-#ifdef GL_SGI_texture_color_table
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_color_table", 19))
-        {
-          ret = GLEW_SGI_texture_color_table;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SUNX_", 5))
-      {
-#ifdef GL_SUNX_constant_data
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"constant_data", 13))
-        {
-          ret = GLEW_SUNX_constant_data;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SUN_", 4))
-      {
-#ifdef GL_SUN_convolution_border_modes
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"convolution_border_modes", 24))
-        {
-          ret = GLEW_SUN_convolution_border_modes;
-          continue;
-        }
-#endif
-#ifdef GL_SUN_global_alpha
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"global_alpha", 12))
-        {
-          ret = GLEW_SUN_global_alpha;
-          continue;
-        }
-#endif
-#ifdef GL_SUN_mesh_array
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"mesh_array", 10))
-        {
-          ret = GLEW_SUN_mesh_array;
-          continue;
-        }
-#endif
-#ifdef GL_SUN_read_video_pixels
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"read_video_pixels", 17))
-        {
-          ret = GLEW_SUN_read_video_pixels;
-          continue;
-        }
-#endif
-#ifdef GL_SUN_slice_accum
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"slice_accum", 11))
-        {
-          ret = GLEW_SUN_slice_accum;
-          continue;
-        }
-#endif
-#ifdef GL_SUN_triangle_list
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"triangle_list", 13))
-        {
-          ret = GLEW_SUN_triangle_list;
-          continue;
-        }
-#endif
-#ifdef GL_SUN_vertex
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex", 6))
-        {
-          ret = GLEW_SUN_vertex;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"WIN_", 4))
-      {
-#ifdef GL_WIN_phong_shading
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"phong_shading", 13))
-        {
-          ret = GLEW_WIN_phong_shading;
-          continue;
-        }
-#endif
-#ifdef GL_WIN_specular_fog
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"specular_fog", 12))
-        {
-          ret = GLEW_WIN_specular_fog;
-          continue;
-        }
-#endif
-#ifdef GL_WIN_swap_hint
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_hint", 9))
-        {
-          ret = GLEW_WIN_swap_hint;
-          continue;
-        }
-#endif
-      }
-    }
-    ret = (len == 0);
-  }
-  return ret;
-}
-
-#if defined(_WIN32)
-
-#if defined(GLEW_MX)
-GLboolean wglewContextIsSupported (WGLEWContext* ctx, const char* name)
-#else
-GLboolean wglewIsSupported (const char* name)
-#endif
-{
-  GLubyte* pos = (GLubyte*)name;
-  GLuint len = _glewStrLen(pos);
-  GLboolean ret = GL_TRUE;
-  while (ret && len > 0)
-  {
-    if (_glewStrSame1(&pos, &len, (const GLubyte*)"WGL_", 4))
-    {
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DFX_", 5))
-      {
-#ifdef WGL_3DFX_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = WGLEW_3DFX_multisample;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DL_", 4))
-      {
-#ifdef WGL_3DL_stereo_control
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"stereo_control", 14))
-        {
-          ret = WGLEW_3DL_stereo_control;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ARB_", 4))
-      {
-#ifdef WGL_ARB_buffer_region
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"buffer_region", 13))
-        {
-          ret = WGLEW_ARB_buffer_region;
-          continue;
-        }
-#endif
-#ifdef WGL_ARB_extensions_string
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"extensions_string", 17))
-        {
-          ret = WGLEW_ARB_extensions_string;
-          continue;
-        }
-#endif
-#ifdef WGL_ARB_make_current_read
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"make_current_read", 17))
-        {
-          ret = WGLEW_ARB_make_current_read;
-          continue;
-        }
-#endif
-#ifdef WGL_ARB_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = WGLEW_ARB_multisample;
-          continue;
-        }
-#endif
-#ifdef WGL_ARB_pbuffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pbuffer", 7))
-        {
-          ret = WGLEW_ARB_pbuffer;
-          continue;
-        }
-#endif
-#ifdef WGL_ARB_pixel_format
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format", 12))
-        {
-          ret = WGLEW_ARB_pixel_format;
-          continue;
-        }
-#endif
-#ifdef WGL_ARB_pixel_format_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_float", 18))
-        {
-          ret = WGLEW_ARB_pixel_format_float;
-          continue;
-        }
-#endif
-#ifdef WGL_ARB_render_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture", 14))
-        {
-          ret = WGLEW_ARB_render_texture;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATI_", 4))
-      {
-#ifdef WGL_ATI_pixel_format_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_float", 18))
-        {
-          ret = WGLEW_ATI_pixel_format_float;
-          continue;
-        }
-#endif
-#ifdef WGL_ATI_render_texture_rectangle
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture_rectangle", 24))
-        {
-          ret = WGLEW_ATI_render_texture_rectangle;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"EXT_", 4))
-      {
-#ifdef WGL_EXT_depth_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"depth_float", 11))
-        {
-          ret = WGLEW_EXT_depth_float;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_display_color_table
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"display_color_table", 19))
-        {
-          ret = WGLEW_EXT_display_color_table;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_extensions_string
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"extensions_string", 17))
-        {
-          ret = WGLEW_EXT_extensions_string;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_framebuffer_sRGB
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_sRGB", 16))
-        {
-          ret = WGLEW_EXT_framebuffer_sRGB;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_make_current_read
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"make_current_read", 17))
-        {
-          ret = WGLEW_EXT_make_current_read;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = WGLEW_EXT_multisample;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_pbuffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pbuffer", 7))
-        {
-          ret = WGLEW_EXT_pbuffer;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_pixel_format
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format", 12))
-        {
-          ret = WGLEW_EXT_pixel_format;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_pixel_format_packed_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_packed_float", 25))
-        {
-          ret = WGLEW_EXT_pixel_format_packed_float;
-          continue;
-        }
-#endif
-#ifdef WGL_EXT_swap_control
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_control", 12))
-        {
-          ret = WGLEW_EXT_swap_control;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"I3D_", 4))
-      {
-#ifdef WGL_I3D_digital_video_control
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"digital_video_control", 21))
-        {
-          ret = WGLEW_I3D_digital_video_control;
-          continue;
-        }
-#endif
-#ifdef WGL_I3D_gamma
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gamma", 5))
-        {
-          ret = WGLEW_I3D_gamma;
-          continue;
-        }
-#endif
-#ifdef WGL_I3D_genlock
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"genlock", 7))
-        {
-          ret = WGLEW_I3D_genlock;
-          continue;
-        }
-#endif
-#ifdef WGL_I3D_image_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"image_buffer", 12))
-        {
-          ret = WGLEW_I3D_image_buffer;
-          continue;
-        }
-#endif
-#ifdef WGL_I3D_swap_frame_lock
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_frame_lock", 15))
-        {
-          ret = WGLEW_I3D_swap_frame_lock;
-          continue;
-        }
-#endif
-#ifdef WGL_I3D_swap_frame_usage
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_frame_usage", 16))
-        {
-          ret = WGLEW_I3D_swap_frame_usage;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"NV_", 3))
-      {
-#ifdef WGL_NV_float_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_buffer", 12))
-        {
-          ret = WGLEW_NV_float_buffer;
-          continue;
-        }
-#endif
-#ifdef WGL_NV_gpu_affinity
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"gpu_affinity", 12))
-        {
-          ret = WGLEW_NV_gpu_affinity;
-          continue;
-        }
-#endif
-#ifdef WGL_NV_render_depth_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_depth_texture", 20))
-        {
-          ret = WGLEW_NV_render_depth_texture;
-          continue;
-        }
-#endif
-#ifdef WGL_NV_render_texture_rectangle
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture_rectangle", 24))
-        {
-          ret = WGLEW_NV_render_texture_rectangle;
-          continue;
-        }
-#endif
-#ifdef WGL_NV_vertex_array_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
-        {
-          ret = WGLEW_NV_vertex_array_range;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OML_", 4))
-      {
-#ifdef WGL_OML_sync_control
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sync_control", 12))
-        {
-          ret = WGLEW_OML_sync_control;
-          continue;
-        }
-#endif
-      }
-    }
-    ret = (len == 0);
-  }
-  return ret;
-}
-
-#elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)
-
-#if defined(GLEW_MX)
-GLboolean glxewContextIsSupported (GLXEWContext* ctx, const char* name)
-#else
-GLboolean glxewIsSupported (const char* name)
-#endif
-{
-  GLubyte* pos = (GLubyte*)name;
-  GLuint len = _glewStrLen(pos);
-  GLboolean ret = GL_TRUE;
-  while (ret && len > 0)
-  {
-    if(_glewStrSame1(&pos, &len, (const GLubyte*)"GLX_", 4))
-    {
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"VERSION_", 8))
-      {
-#ifdef GLX_VERSION_1_2
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_2", 3))
-        {
-          ret = GLXEW_VERSION_1_2;
-          continue;
-        }
-#endif
-#ifdef GLX_VERSION_1_3
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_3", 3))
-        {
-          ret = GLXEW_VERSION_1_3;
-          continue;
-        }
-#endif
-#ifdef GLX_VERSION_1_4
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"1_4", 3))
-        {
-          ret = GLXEW_VERSION_1_4;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"3DFX_", 5))
-      {
-#ifdef GLX_3DFX_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = GLXEW_3DFX_multisample;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ARB_", 4))
-      {
-#ifdef GLX_ARB_fbconfig_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fbconfig_float", 14))
-        {
-          ret = GLXEW_ARB_fbconfig_float;
-          continue;
-        }
-#endif
-#ifdef GLX_ARB_get_proc_address
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"get_proc_address", 16))
-        {
-          ret = GLXEW_ARB_get_proc_address;
-          continue;
-        }
-#endif
-#ifdef GLX_ARB_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = GLXEW_ARB_multisample;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"ATI_", 4))
-      {
-#ifdef GLX_ATI_pixel_format_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixel_format_float", 18))
-        {
-          ret = GLXEW_ATI_pixel_format_float;
-          continue;
-        }
-#endif
-#ifdef GLX_ATI_render_texture
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"render_texture", 14))
-        {
-          ret = GLXEW_ATI_render_texture;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"EXT_", 4))
-      {
-#ifdef GLX_EXT_fbconfig_packed_float
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fbconfig_packed_float", 21))
-        {
-          ret = GLXEW_EXT_fbconfig_packed_float;
-          continue;
-        }
-#endif
-#ifdef GLX_EXT_framebuffer_sRGB
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"framebuffer_sRGB", 16))
-        {
-          ret = GLXEW_EXT_framebuffer_sRGB;
-          continue;
-        }
-#endif
-#ifdef GLX_EXT_import_context
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"import_context", 14))
-        {
-          ret = GLXEW_EXT_import_context;
-          continue;
-        }
-#endif
-#ifdef GLX_EXT_scene_marker
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"scene_marker", 12))
-        {
-          ret = GLXEW_EXT_scene_marker;
-          continue;
-        }
-#endif
-#ifdef GLX_EXT_texture_from_pixmap
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"texture_from_pixmap", 19))
-        {
-          ret = GLXEW_EXT_texture_from_pixmap;
-          continue;
-        }
-#endif
-#ifdef GLX_EXT_visual_info
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"visual_info", 11))
-        {
-          ret = GLXEW_EXT_visual_info;
-          continue;
-        }
-#endif
-#ifdef GLX_EXT_visual_rating
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"visual_rating", 13))
-        {
-          ret = GLXEW_EXT_visual_rating;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"MESA_", 5))
-      {
-#ifdef GLX_MESA_agp_offset
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"agp_offset", 10))
-        {
-          ret = GLXEW_MESA_agp_offset;
-          continue;
-        }
-#endif
-#ifdef GLX_MESA_copy_sub_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"copy_sub_buffer", 15))
-        {
-          ret = GLXEW_MESA_copy_sub_buffer;
-          continue;
-        }
-#endif
-#ifdef GLX_MESA_pixmap_colormap
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pixmap_colormap", 15))
-        {
-          ret = GLXEW_MESA_pixmap_colormap;
-          continue;
-        }
-#endif
-#ifdef GLX_MESA_release_buffers
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"release_buffers", 15))
-        {
-          ret = GLXEW_MESA_release_buffers;
-          continue;
-        }
-#endif
-#ifdef GLX_MESA_set_3dfx_mode
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"set_3dfx_mode", 13))
-        {
-          ret = GLXEW_MESA_set_3dfx_mode;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"NV_", 3))
-      {
-#ifdef GLX_NV_float_buffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"float_buffer", 12))
-        {
-          ret = GLXEW_NV_float_buffer;
-          continue;
-        }
-#endif
-#ifdef GLX_NV_vertex_array_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"vertex_array_range", 18))
-        {
-          ret = GLXEW_NV_vertex_array_range;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"OML_", 4))
-      {
-#ifdef GLX_OML_swap_method
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_method", 11))
-        {
-          ret = GLXEW_OML_swap_method;
-          continue;
-        }
-#endif
-#ifdef GLX_OML_sync_control
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"sync_control", 12))
-        {
-          ret = GLXEW_OML_sync_control;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIS_", 5))
-      {
-#ifdef GLX_SGIS_blended_overlay
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"blended_overlay", 15))
-        {
-          ret = GLXEW_SGIS_blended_overlay;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIS_color_range
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"color_range", 11))
-        {
-          ret = GLXEW_SGIS_color_range;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIS_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"multisample", 11))
-        {
-          ret = GLXEW_SGIS_multisample;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIS_shared_multisample
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"shared_multisample", 18))
-        {
-          ret = GLXEW_SGIS_shared_multisample;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGIX_", 5))
-      {
-#ifdef GLX_SGIX_fbconfig
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"fbconfig", 8))
-        {
-          ret = GLXEW_SGIX_fbconfig;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIX_hyperpipe
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"hyperpipe", 9))
-        {
-          ret = GLXEW_SGIX_hyperpipe;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIX_pbuffer
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"pbuffer", 7))
-        {
-          ret = GLXEW_SGIX_pbuffer;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIX_swap_barrier
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_barrier", 12))
-        {
-          ret = GLXEW_SGIX_swap_barrier;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIX_swap_group
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_group", 10))
-        {
-          ret = GLXEW_SGIX_swap_group;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIX_video_resize
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"video_resize", 12))
-        {
-          ret = GLXEW_SGIX_video_resize;
-          continue;
-        }
-#endif
-#ifdef GLX_SGIX_visual_select_group
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"visual_select_group", 19))
-        {
-          ret = GLXEW_SGIX_visual_select_group;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SGI_", 4))
-      {
-#ifdef GLX_SGI_cushion
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"cushion", 7))
-        {
-          ret = GLXEW_SGI_cushion;
-          continue;
-        }
-#endif
-#ifdef GLX_SGI_make_current_read
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"make_current_read", 17))
-        {
-          ret = GLXEW_SGI_make_current_read;
-          continue;
-        }
-#endif
-#ifdef GLX_SGI_swap_control
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"swap_control", 12))
-        {
-          ret = GLXEW_SGI_swap_control;
-          continue;
-        }
-#endif
-#ifdef GLX_SGI_video_sync
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"video_sync", 10))
-        {
-          ret = GLXEW_SGI_video_sync;
-          continue;
-        }
-#endif
-      }
-      if (_glewStrSame2(&pos, &len, (const GLubyte*)"SUN_", 4))
-      {
-#ifdef GLX_SUN_get_transparent_index
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"get_transparent_index", 21))
-        {
-          ret = GLXEW_SUN_get_transparent_index;
-          continue;
-        }
-#endif
-#ifdef GLX_SUN_video_resize
-        if (_glewStrSame3(&pos, &len, (const GLubyte*)"video_resize", 12))
-        {
-          ret = GLXEW_SUN_video_resize;
-          continue;
-        }
-#endif
-      }
-    }
-    ret = (len == 0);
-  }
-  return ret;
-}
-
-#endif /* _WIN32 */
diff --git a/nvcommon/include/framebufferObject.h b/nvcommon/include/framebufferObject.h
deleted file mode 100644
index c7561b9..0000000
--- a/nvcommon/include/framebufferObject.h
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
-  Copyright (c) 2005, 
-	  Aaron Lefohn	  (lefohn@cs.ucdavis.edu)
-	  Robert Strzodka (strzodka@stanford.edu)
-	  Adam Moerschell (atmoerschell@ucdavis.edu)
-  All rights reserved.
-
-  This software is licensed under the BSD open-source license. See
-  http://www.opensource.org/licenses/bsd-license.php for more detail.
-
-  *************************************************************
-  Redistribution and use in source and binary forms, with or 
-  without modification, are permitted provided that the following 
-  conditions are met:
-
-  Redistributions of source code must retain the above copyright notice, 
-  this list of conditions and the following disclaimer. 
-
-  Redistributions in binary form must reproduce the above copyright notice, 
-  this list of conditions and the following disclaimer in the documentation 
-  and/or other materials provided with the distribution. 
-
-  Neither the name of the University of Californa, Davis nor the names of 
-  the contributors may be used to endorse or promote products derived 
-  from this software without specific prior written permission.
-
-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
-  OF SUCH DAMAGE.
-*/
-
-#ifndef UCDAVIS_FRAMEBUFFER_OBJECT_H
-#define UCDAVIS_FRAMEBUFFER_OBJECT_H
-
-#ifdef __APPLE__
-#include <OpenGL/gl.h>
-#else
-#include <GL/glew.h>
-#endif
-
-#include <iostream>
-
-/*!
-FramebufferObject Class. This class encapsulates the FramebufferObject
-(FBO) OpenGL spec. See the official spec at:
-	http://oss.sgi.com/projects/ogl-sample/registry/EXT/framebuffer_object.txt
-
-for details.
-
-A framebuffer object (FBO) is conceptually a structure containing pointers
-to GPU memory. The memory pointed to is either an OpenGL texture or an
-OpenGL RenderBuffer. FBOs can be used to render to one or more textures,
-share depth buffers between multiple sets of color buffers/textures and
-are a complete replacement for pbuffers.
-
-Performance Notes:
-  1) It is more efficient (but not required) to call Bind() 
-     on an FBO before making multiple method calls. For example:
-		
-      FramebufferObject fbo;
-      fbo.Bind();
-      fbo.AttachTexture(GL_TEXTURE_2D, texId0, GL_COLOR_ATTACHMENT0_EXT);
-      fbo.AttachTexture(GL_TEXTURE_2D, texId1, GL_COLOR_ATTACHMENT1_EXT);
-      fbo.IsValid();
-
-    To provide a complete encapsulation, the following usage
-    pattern works correctly but is less efficient:
-
-      FramebufferObject fbo;
-      // NOTE : No Bind() call
-      fbo.AttachTexture(GL_TEXTURE_2D, texId0, GL_COLOR_ATTACHMENT0_EXT);
-      fbo.AttachTexture(GL_TEXTURE_2D, texId1, GL_COLOR_ATTACHMENT1_EXT);
-      fbo.IsValid();
-
-    The first usage pattern binds the FBO only once, whereas
-    the second usage binds/unbinds the FBO for each method call.
-
-  2) Use FramebufferObject::Disable() sparingly. We have intentionally
-     left out an "Unbind()" method because it is largely unnecessary
-     and encourages rendundant Bind/Unbind coding. Binding an FBO is
-     usually much faster than enabling/disabling a pbuffer, but is
-     still a costly operation. When switching between multiple FBOs
-     and a visible OpenGL framebuffer, the following usage pattern 
-     is recommended:
-
-      FramebufferObject fbo1, fbo2;
-      fbo1.Bind();
-        ... Render ...
-      // NOTE : No Unbind/Disable here...
-
-      fbo2.Bind();
-        ... Render ...
-
-      // Disable FBO rendering and return to visible window
-      // OpenGL framebuffer.
-      FramebufferObject::Disable();
-*/
-class FramebufferObject
-{
-public:
-  /// Ctor/Dtor
-  FramebufferObject();
-  virtual ~FramebufferObject();
-
-  /// Bind this FBO as current render target
-  void Bind();
-
-  /// Bind a texture to the "attachment" point of this FBO
-  virtual void AttachTexture( GLenum texTarget, 
-                              GLuint texId,
-                              GLenum attachment = GL_COLOR_ATTACHMENT0_EXT,
-                              int mipLevel      = 0,
-                              int zSlice        = 0 );
-
-  /// Bind an array of textures to multiple "attachment" points of this FBO
-  ///  - By default, the first 'numTextures' attachments are used,
-  ///    starting with GL_COLOR_ATTACHMENT0_EXT
-  virtual void AttachTextures( int numTextures, 
-                               GLenum texTarget[], 
-                               GLuint texId[],
-                               GLenum attachment[] = NULL,
-                               int mipLevel[]      = NULL,
-                               int zSlice[]        = NULL );
-
-  /// Bind a render buffer to the "attachment" point of this FBO
-  virtual void AttachRenderBuffer( GLuint buffId,
-                                   GLenum attachment = GL_COLOR_ATTACHMENT0_EXT );
-
-  /// Bind an array of render buffers to corresponding "attachment" points
-  /// of this FBO.
-  /// - By default, the first 'numBuffers' attachments are used,
-  ///   starting with GL_COLOR_ATTACHMENT0_EXT
-  virtual void AttachRenderBuffers( int numBuffers, GLuint buffId[],
-                                    GLenum attachment[] = NULL );
-
-  /// Free any resource bound to the "attachment" point of this FBO
-  void Unattach( GLenum attachment );
-
-  /// Free any resources bound to any attachment points of this FBO
-  void UnattachAll();
-
-  /// Is this FBO currently a valid render target?
-  ///  - Sends output to std::cerr by default but can
-  ///    be a user-defined C++ stream
-  ///
-  /// NOTE : This function works correctly in debug build
-  ///        mode but always returns "true" if NDEBUG is
-  ///        is defined (optimized builds)
-#ifndef NDEBUG
-  bool IsValid( std::ostream& ostr = std::cerr );
-#else
-  bool IsValid( std::ostream& ostr = std::cerr ) { 
-    return true; 
-  }
-#endif
-
-  /// BEGIN : Accessors
-
-    /// Get the FBO ID
-    GLuint GetID( ) { return m_fboId; }
-
-    /// Is attached type GL_RENDERBUFFER_EXT or GL_TEXTURE?
-    GLenum GetAttachedType( GLenum attachment );
-
-    /// What is the Id of Renderbuffer/texture currently 
-    /// attached to "attachement?"
-    GLuint GetAttachedId( GLenum attachment );
-
-    /// Which mipmap level is currently attached to "attachement?"
-    GLint  GetAttachedMipLevel( GLenum attachment );
-
-    /// Which cube face is currently attached to "attachment?"
-    GLint  GetAttachedCubeFace( GLenum attachment );
-
-    /// Which z-slice is currently attached to "attachment?"
-    GLint  GetAttachedZSlice( GLenum attachment );
-  /// END : Accessors
-
-
-  /// BEGIN : Static methods global to all FBOs
-    /// Return number of color attachments permitted
-    static GLint GetMaxColorAttachments();
-
-    /// Disable all FBO rendering and return to traditional,
-    /// windowing-system controlled framebuffer
-    ///  NOTE:
-    ///     This is NOT an "unbind" for this specific FBO, but rather
-    ///     disables all FBO rendering. This call is intentionally "static"
-    ///     and named "Disable" instead of "Unbind" for this reason. The
-    ///     motivation for this strange semantic is performance. Providing
-    ///     "Unbind" would likely lead to a large number of unnecessary
-    ///     FBO enablings/disabling.
-    static void Disable();
-  /// END : Static methods global to all FBOs
-
-protected:
-  void  _GuardedBind();
-  void  _GuardedUnbind();
-  void  _FramebufferTextureND( GLenum attachment, GLenum texTarget, 
-                               GLuint texId, int mipLevel, int zSlice );
-  static GLuint _GenerateFboId();
-
-private:
-  GLuint m_fboId;
-  GLint  m_savedFboId;
-};
-
-#endif
-
diff --git a/nvcommon/include/nvArray.h b/nvcommon/include/nvArray.h
deleted file mode 100644
index fcd58e6..0000000
--- a/nvcommon/include/nvArray.h
+++ /dev/null
@@ -1,52 +0,0 @@
-// array classes
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-#ifndef NV_ARRAY_H
-#define NV_ARRAY_H
-
-namespace nv {
-
-// 2d array
-template <class T>
-class array2
-{
-public:
-    typedef T value_type;
-
-	array2(int width, int height, int channels=1)
-	{
-		w = width;
-		h = height;
-		c = channels;
-		data = new T [w*h*c];
-	}
-
-	~array2()
-	{
-		delete [] data;
-	}
-
-	T & operator () (int x, int y, int channel=0)
-	{
-		if (x < 0) x += w;
-		if (y < 0) y += h;
-		if (x > w-1) x -= w;
-		if (y > h-1) y -= h;
-		return data[((y*w+x)*c)+channel];
-	}
-	
-	T * get_data()
-	{
-		return data;
-	}
-
-private:
-	int w, h, c;
-	T *data;
-};
-
-};
-
-#endif
\ No newline at end of file
diff --git a/nvcommon/include/nvGlutManipulators.h b/nvcommon/include/nvGlutManipulators.h
deleted file mode 100644
index c13fcd8..0000000
--- a/nvcommon/include/nvGlutManipulators.h
+++ /dev/null
@@ -1,335 +0,0 @@
-// Adaptors to GLUT native commands for manipulator objects
-//
-// This code is in part deriver from glh, cross platform glut helper library.
-// The copyright for glh follows this notice.
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-/*
-    Copyright (c) 2000 Cass Everitt
-	Copyright (c) 2000 NVIDIA Corporation
-    All rights reserved.
-
-    Redistribution and use in source and binary forms, with or
-	without modification, are permitted provided that the following
-	conditions are met:
-
-     * Redistributions of source code must retain the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer.
-
-     * Redistributions in binary form must reproduce the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer in the documentation and/or other materials
-	   provided with the distribution.
-
-     * The names of contributors to this software may not be used
-	   to endorse or promote products derived from this software
-	   without specific prior written permission. 
-
-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
-	   POSSIBILITY OF SUCH DAMAGE. 
-
-
-    Cass Everitt - cass@r3.nu
-*/
-
-#ifndef NV_GLUT_MANIPULATORS_H
-#define NV_GLUT_MANIPULATORS_H
-
-#include <nvManipulators.h>
-#ifdef __APPLE__
-#include <GLUT/glut.h>
-#else
-#include <GL/glut.h>
-#endif
-
-namespace nv {
-
-class GlutManipulator {
-
-public:
-    
-    GlutManipulator( Manipulator &m) : _manip(m) { } 
-    virtual ~GlutManipulator() {}
-
-    //
-    //  reshape
-    //
-    //    This function should be called, whenever the region containing the control
-    //  has been resized. Typically, this is a window resize event.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void reshape( int width, int height) { _manip.reshape( width, height); }
-
-    //
-    //  mouse
-    //
-    //    This function should be invoked whenever the state of a mouse button
-    //  changes.
-    //    
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void mouse( int button, int state, int x, int y) {
-        _manip.mouse( convertButtonFromGlut(button), convertModifierFromGlut(glutGetModifiers()), state == GLUT_DOWN, x, y);
-    }
-
-    //
-    //  mouse
-    //
-    //    This function should be invoked whenever the state of a mouse button
-    //  changes.
-    //    
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void mouse( int button, int state, int modifier, int x, int y) {
-        _manip.mouse( convertButtonFromGlut(button), convertModifierFromGlut(modifier), state == GLUT_DOWN, x, y);
-    }
-
-    //
-    //  motion
-    //
-    //    This function should be called whenever the mouse is moved
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void motion( int x, int y) { _manip.motion( x, y); }
-
-    //
-    //  idle
-    //
-    //    This function should be called when no input is happening,
-    //  but the manipulator is likely to need to update.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void idle() { _manip.idle(); }
-
-    //
-    //  update
-    //
-    //    This function is called to apply the latest forces to the
-    //  manipulator.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void update() { _manip.update(); }
-
-    //
-    //  applyTransform
-    //
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void applyTransform() { _manip.applyTransform(); }
-
-    //
-    //  getTransform
-    //
-    //    Compute the current transform based on the latest update, and
-    //  return it as a 4x4 matrix.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual matrix4f getTransform() { return _manip.getTransform(); }
-
-	// get a reference to the manipulator
-	virtual Manipulator &getManipulator() { return _manip; }
-
-protected:
-
-    //
-    //  convertButtonFromGlut
-    //
-    //    Converts the integer used by GLUT to identify a mouse button
-    //  to the UI independent enums used by the manipulators
-    ////////////////////////////////////////////////////////////////////////////
-    static Manipulator::Button convertButtonFromGlut( int button) {
-        switch (button) {
-            case GLUT_LEFT_BUTTON:
-                return Manipulator::ELeftButton;
-            case GLUT_MIDDLE_BUTTON:
-                return Manipulator::EMiddleButton;
-            case GLUT_RIGHT_BUTTON:
-                return Manipulator::ERightButton;
-        }
-
-        //handle fallthrough
-        return Manipulator::ENoButton;
-    }
-
-    //
-    //  convertModifierFromGlut
-    //
-    //    Converts the integer used by GLUT to identify modifier keys
-    //  to the UI independent enums used by the manipulators
-    ////////////////////////////////////////////////////////////////////////////
-    static Manipulator::Modifier convertModifierFromGlut( int modifier) {
-        int val = (int)Manipulator::ENoModifier;
-
-        //need to use a bitwise or, because it could be multiple keys
-        if (modifier & GLUT_ACTIVE_ALT)
-            val |= Manipulator::EAltModifier;
-        
-        if (modifier & GLUT_ACTIVE_CTRL)
-            val |= Manipulator::EControlModifier;
-        
-        if (modifier & GLUT_ACTIVE_SHIFT)
-            val |= Manipulator::EShiftModifier;
-
-        return (Manipulator::Modifier)val;
-    }
-
-
-    //
-    //  Manipulator reference
-    //
-    //    This reference is used such that the GLUT manipulator adaptors
-    //  can all share the same UI message passing code.
-    ////////////////////////////////////////////////////////////////////////////
-    Manipulator &_manip;
-};
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-class GlutTrackball : public GlutManipulator{
-
-public:
-
-    //
-    //
-    /////////////////////////////////////////////////////////////////
-    GlutTrackball() : GlutManipulator(_trackball) {}
-
-    //
-    //  setTrackballActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballActivate( int button, int modifier = 0) {
-        _trackball.setTrackballActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
-    }
-
-    //
-    //  setTrackballScale
-    //
-    //    Set the speed for the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballScale( float scale) {
-        _trackball.setTrackballScale( scale);
-    }
-
-    //
-    //  setCenterOfRotation
-    //
-    //    Set the point around which the trackball will rotate.
-    //////////////////////////////////////////////////////////////////
-    void setCenterOfRotation( const vec3f& c) {
-        _trackball.setCenterOfRotation( c);
-    }
-
-
-protected:
-    TrackballManipulator _trackball;
-};
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-class GlutExamine : public GlutManipulator{
-
-public:
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    GlutExamine() : GlutManipulator(_examine) {}
-
-    //
-    //  setTrackballActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballActivate( int button, int modifier = 0) {
-        _examine.setTrackballActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
-    }
-
-    //
-    //  setTrackballScale
-    //
-    //    Set the speed for the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballScale( float scale) {
-        _examine.setTrackballScale( scale);
-    }
-
-    //
-    //  setDollyActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the dolly operation.
-    //////////////////////////////////////////////////////////////////
-    void setDollyActivate( int button, int modifier = 0) {
-        _examine.setDollyActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
-    }
-
-    //
-    //  setDollyScale
-    //
-    //    Set the speed for the dolly operation.
-    //////////////////////////////////////////////////////////////////
-    void setDollyScale( float scale) {
-        _examine.setDollyScale( scale);
-    }
-
-    //
-    //  setDollyPosition
-    //
-    //    Set the Dolly to a specified distance.
-    //////////////////////////////////////////////////////////////////
-    void setDollyPosition( float pos) {
-        _examine.setDollyPosition( pos);
-    }
-
-    //
-    //  setPanActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the pan operation.
-    //////////////////////////////////////////////////////////////////
-    void setPanActivate( int button, int modifier = 0) {
-        _examine.setPanActivate( convertButtonFromGlut(button), convertModifierFromGlut(modifier));
-    }
-
-    //
-    //  setPanScale
-    //
-    //    Set the speed for panning.
-    //////////////////////////////////////////////////////////////////
-    void setPanScale( float scale) {
-        _examine.setPanScale( scale);
-    }
-
-    //
-    //  setCenterOfRotation
-    //
-    //    Set the point around which the trackball will rotate.
-    //////////////////////////////////////////////////////////////////
-    void setCenterOfRotation( const vec3f& c) {
-        _examine.setCenterOfRotation( c);
-    }
-
-
-    void rotate( const nv::vec3f& axis, float angle ) {
-      _examine.rotate(axis, angle);
-    }
-
-protected:
-    ExamineManipulator _examine;
-};
-
-
-};
-
-#endif
diff --git a/nvcommon/include/nvManipulators.h b/nvcommon/include/nvManipulators.h
deleted file mode 100644
index 703fbe4..0000000
--- a/nvcommon/include/nvManipulators.h
+++ /dev/null
@@ -1,616 +0,0 @@
-// Simple manipulator objects, for applying user input to a model
-//
-// This code is in part deriver from glh, cross platform glut helper library.
-// The copyright for glh follows this notice.
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-/*
-    Copyright (c) 2000 Cass Everitt
-	Copyright (c) 2000 NVIDIA Corporation
-    All rights reserved.
-
-    Redistribution and use in source and binary forms, with or
-	without modification, are permitted provided that the following
-	conditions are met:
-
-     * Redistributions of source code must retain the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer.
-
-     * Redistributions in binary form must reproduce the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer in the documentation and/or other materials
-	   provided with the distribution.
-
-     * The names of contributors to this software may not be used
-	   to endorse or promote products derived from this software
-	   without specific prior written permission. 
-
-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
-	   POSSIBILITY OF SUCH DAMAGE. 
-
-
-    Cass Everitt - cass@r3.nu
-*/
-
-#ifndef NV_MANIPULATORS_H
-#define NV_MANIPULATORS_H
-
-
-#include <nvMath.h>
-//#include <GL/glut.h>	// @@ Do not include here!
-
-namespace nv {
-
-inline void applyRotation(const quaternionf & r)
-{
-	float angle;
-	vec3f axis;
-	r.get_value(axis, angle);
-	glRotatef( angle/3.1415926f * 180.0f, axis[0], axis[1], axis[2]);
-}
-
-//
-//
-//  Base manipulator class
-//
-//////////////////////////////////////////////////////////////////////
-class Manipulator{
-
-public:
-
-    enum Button {
-        ENoButton = 0x0,
-        ELeftButton = 0x1,
-        EMiddleButton = 0x2,
-        ERightButton = 0x4
-    };
-
-    enum Modifier {
-        ENoModifier = 0x0,
-        EShiftModifier = 0x1,
-        EControlModifier = 0x2,
-        EAltModifier = 0x3
-    };
-
-    Manipulator() : _width(0), _height(0) {}
-    virtual ~Manipulator() {}
-
-    //
-    //  reshape
-    //
-    //    This function should be called, whenever the region containing the control
-    //  has been resized. Typically, this is a window resize event.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void reshape( int width, int height) { _width = width; _height = height; }
-
-    //
-    //  mouse
-    //
-    //    This function should be invoked whenever the state of a mouse button
-    //  changes.
-    //    
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void mouse( Button button, Modifier mod, bool depressed, int x, int y) = 0;
-
-    //
-    //  motion
-    //
-    //    This function should be called whenever the mouse is moved
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void motion( int x, int y) = 0;
-
-    //
-    //  idle
-    //
-    //    This function should be called when no input is happening,
-    //  but the manipulator is likely to need to update.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void idle() = 0;
-
-    //
-    //  update
-    //
-    //    This function is called to apply the latest forces to the
-    //  manipulator.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void update() = 0;
-
-    //
-    //  applyTransform
-    //
-    ////////////////////////////////////////////////////////////////////////////
-    virtual void applyTransform() = 0;
-
-    //
-    //  getTransform
-    //
-    //    Compute the current transform based on the latest update, and
-    //  return it as a 4x4 matrix.
-    ////////////////////////////////////////////////////////////////////////////
-    virtual matrix4f getTransform() = 0;
-
-protected:
-
-    int _width, _height;
-};
-
-
-//
-// Trackball Manipulator
-//
-//////////////////////////////////////////////////////////////////////
-class TrackballManipulator : public Manipulator {
-
-public:
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    TrackballManipulator() : _activateButton(ELeftButton), _activateModifiers(ENoModifier),  _active(false) {
-        _r = quaternionf( 0.0f, 1.0f, 0.0f, 0.0f);
-        _scale = 1.0f;
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void mouse( Button button, Modifier mod, bool depressed, int x, int y) {
-        
-        //check to see if this click changes our activation state
-        if ( button == _activateButton && depressed && ( _activateModifiers != ENoModifier || (_activateModifiers == mod)) ) {
-            
-            _active = true;
-            _x = _x0 = x;
-            _y = _y0 = y;
-            _dx = _dy = 0;
-        }
-        else if ( button == _activateButton && !depressed) {
-            if(_dx == 0 && _dy == 0)
-                update();
-            _active = false;
-            _dx = _dy = 0;
-        }
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void motion( int x, int y) {
-        if ( _active) {
-            _dx = x - _x;   _dy = _y - y;
-            _x = x;   _y = y;
-            update();
-        }
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void idle() {
-        //simply increment the rotation
-        _r = _incr*_r;
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void update() {
-        float min = static_cast<float>(_width < _height ? _width : _height);
-        min *= 0.5f;
-        vec3f offset(_width/2.f, _height/2.f, 0);
-        vec3f a(static_cast<float>(_x-_dx), static_cast<float>(_height - (_y+_dy)), 0);
-        vec3f b(static_cast<float>(    _x), static_cast<float>(_height -      _y ), 0);
-        a -= offset;
-        b -= offset;
-        a /= min;
-        b /= min;
-
-        a[2] = powf(2.0f, -0.5f * length(a));
-        a = normalize(a);
-        b[2] = powf(2.0f, -0.5f * length(b));
-        b = normalize(b);
-
-        vec3f axis = cross( a, b);
-        axis = normalize(axis);
-
-        float angle = acos( dot( a, b));
-
-        //original glh version had an invert flag and a parent frame, do we need one?
-
-        _incr.set_value(axis, angle * _scale);
-
-        _r = _incr*_r;        
-        
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    void applyTransform() {
-        glTranslatef( _centroid[0], _centroid[1], _centroid[2]);
-        applyRotation(_r);
-        glTranslatef( -_centroid[0], -_centroid[1], -_centroid[2]);
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    matrix4f getTransform() {
-        matrix4f trans, invTrans, rotation;
-        _r.get_value( rotation);
-        trans.set_translate( _centroid);
-        invTrans.set_translate( -_centroid);
-        return trans * rotation * invTrans;
-    }
-
-    //
-    //  setTrackballActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballActivate( Button b, Modifier m = ENoModifier) {
-        _activateButton = b;
-        _activateModifiers = m;
-    }
-
-    //
-    //  setTrackballScale
-    //
-    //    Set the speed for the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballScale( float scale) {
-        _scale = scale;
-    }
-
-    //
-    //  setCenterOfRotation
-    //
-    //    Set the point around which the trackball will rotate.
-    //////////////////////////////////////////////////////////////////
-    void setCenterOfRotation( const vec3f& c) {
-        _centroid = c;
-    }
-
-	// get the rotation quaternion
-	quaternionf &getRotation() { return _r; }
-
-protected:
-
-    int _x, _y;
-    int _x0, _y0;
-    int _dx, _dy;
-
-    // UI commands that this trackball responds to (defaults to left mouse button with no modifier key)
-    Button _activateButton;
-    Modifier _activateModifiers;
-
-    // Variable used to determine if the manipulator is presently tracking the mouse
-    bool _active;
-
-    quaternionf _r;
-    
-    float _scale;
-    quaternionf _incr;
-    vec3f _centroid;
-};
-
-
-//
-// Examine Manipulator
-//
-//  Combines a trackball interface with pan and dolly operations
-//
-//////////////////////////////////////////////////////////////////////
-class ExamineManipulator : public Manipulator {
-
-public:
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    ExamineManipulator() : _tbActivateButton(ELeftButton), _dActivateButton(ERightButton), _pActivateButton(EMiddleButton),
-            _tbActivateModifiers(ENoModifier), _dActivateModifiers(ENoModifier), _pActivateModifiers(ENoModifier), _tbActive(false), _dActive(false), _pActive(false) {
-        _r = quaternionf( 0.0f, 1.0f, 0.0f, 0.0f);
-        _incr = quaternionf( 0.0f, 0.0f, 0.0f, 1.0f); //no rotation
-        _tbScale = 1.0f;
-        _dScale = 0.01f;
-        _pScale = 0.01f;
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void mouse( Button button, Modifier mod, bool depressed, int x, int y) {
-        
-        if ( button == _tbActivateButton && depressed && (_tbActivateModifiers == mod) ) {
-            
-            _tbActive = true;
-            _x = _x0 = x;
-            _y = _y0 = y;
-            _dx = _dy = 0;
-        }
-        else if ( button == _tbActivateButton && !depressed) {
-            if(_dx == 0 && _dy == 0)
-                update();
-            _tbActive = false;
-            _dx = _dy = 0;
-        }
-        
-        if ( button == _dActivateButton && depressed && (_dActivateModifiers == mod) ) {
-            
-            _dActive = true;
-            _x = _x0 = x;
-            _y = _y0 = y;
-            _dx = _dy = 0;
-        }
-        else if ( button == _dActivateButton && !depressed) {
-            if(_dx == 0 && _dy == 0)
-                update();
-            _dActive = false;
-            _dx = _dy = 0;
-        }
-        
-        if ( button == _pActivateButton && depressed && (_pActivateModifiers == mod) ) {
-            
-            _pActive = true;
-            _x = _x0 = x;
-            _y = _y0 = y;
-            _dx = _dy = 0;
-        }
-        else if ( button == _pActivateButton && !depressed) {
-            if(_dx == 0 && _dy == 0)
-                update();
-            _pActive = false;
-            _dx = _dy = 0;
-        }
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void motion( int x, int y) {
-        if ( _tbActive || _dActive || _pActive) {
-            _dx = x - _x;   _dy = _y - y;
-            _x = x;   _y = y;
-            update();
-        }
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void idle() {
-        //simply increment the rotation
-        _r = _incr*_r;
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    void updateTrackball() {
-        float min = static_cast<float>(_width < _height ? _width : _height);
-        min *= 0.5f;
-        vec3f offset(_width/2.f, _height/2.f, 0);
-        vec3f a(static_cast<float>(_x-_dx), static_cast<float>(_height - (_y+_dy)), 0);
-        vec3f b(static_cast<float>(    _x), static_cast<float>(_height -      _y ), 0);
-        a -= offset;
-        b -= offset;
-        a /= min;
-        b /= min;
-
-        a[2] = pow(2.0f, -0.5f * length(a));
-        a = normalize(a);
-        b[2] = pow(2.0f, -0.5f * length(b));
-        b = normalize(b);
-
-        vec3f axis = cross( a, b);
-        axis = normalize(axis);
-
-        float angle = acos( dot( a, b));
-
-        //original glh version had an invert flag and a parent frame, do we need one?
-
-        _incr.set_value(axis, angle * _tbScale);
-
-        _r = _incr*_r;
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    void rotate(const nv::vec3f& axis, float angle) {
-      nv::quaternionf q;
-      q.set_value(axis, angle);
-      _r = q * _r;
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    void updatePan() {
-        vec3f v(static_cast<float>(_dx), static_cast<float>(_dy), 0);
-	  
-        _pan += v * _pScale;
-	}
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    void updateDolly() {
-        vec3f v(0,0,static_cast<float>(_dy));
-
-        _dolly -= v * _dScale;
-	}
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    virtual void update() {
-        if (_tbActive)
-            updateTrackball();
-        if (_dActive)
-            updateDolly();
-        if (_pActive)
-            updatePan();
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    void applyTransform() {
-        glTranslatef( _pan[0], _pan[1], _pan[2]);
-        glTranslatef( _dolly[0], _dolly[1], _dolly[2]);
-        glTranslatef( _centroid[0], _centroid[1], _centroid[2]);
-        applyRotation(_r);
-        glTranslatef( -_centroid[0], -_centroid[1], -_centroid[2]);
-    }
-
-    //
-    //
-    //////////////////////////////////////////////////////////////////
-    matrix4f getTransform() {
-        matrix4f trans, invTrans, rotation;
-        matrix4f pan, dolly;
-
-        //create pan and dolly translations
-        pan.set_translate( _pan);
-        dolly.set_translate( _dolly);
-
-        //create the trackball rotation
-        _r.get_value( rotation);
-
-        //create the translations to move the center of rotation to the origin and back
-        trans.set_translate( _centroid);
-        invTrans.set_translate( -_centroid);
-
-        //concatenate all the tranforms
-        return pan * dolly * trans * rotation * invTrans;
-    }
-
-    //
-    //  setTrackballActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballActivate( Button b, Modifier m = ENoModifier) {
-        _tbActivateButton = b;
-        _tbActivateModifiers = m;
-    }
-
-    //
-    //  setTrackballScale
-    //
-    //    Set the speed for the trackball.
-    //////////////////////////////////////////////////////////////////
-    void setTrackballScale( float scale) {
-        _tbScale = scale;
-    }
-
-    //
-    //  setDollyActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the dolly operation.
-    //////////////////////////////////////////////////////////////////
-    void setDollyActivate( Button b, Modifier m = ENoModifier) {
-        _dActivateButton = b;
-        _dActivateModifiers = m;
-    }
-
-    //
-    //  setDollyScale
-    //
-    //    Set the speed for the dolly operation.
-    //////////////////////////////////////////////////////////////////
-    void setDollyScale( float scale) {
-        _dScale = scale;
-    }
-
-    //
-    //  setDollyPosition
-    //
-    //    Set the Dolly to a specified distance.
-    //////////////////////////////////////////////////////////////////
-    void setDollyPosition( float pos) {
-        _dolly.z = pos;
-    }
-
-    //
-    //  setPanActivate
-    //
-    //    Set the mouse button and optional modifiers that activate
-    //  the pan operation.
-    //////////////////////////////////////////////////////////////////
-    void setPanActivate( Button b, Modifier m = ENoModifier) {
-        _pActivateButton = b;
-        _pActivateModifiers = m;
-    }
-
-    //
-    //  setPanScale
-    //
-    //    Set the speed for panning.
-    //////////////////////////////////////////////////////////////////
-    void setPanScale( float scale) {
-        _pScale = scale;
-    }
-
-    //
-    //  setCenterOfRotation
-    //
-    //    Set the point around which the trackball will rotate.
-    //////////////////////////////////////////////////////////////////
-    void setCenterOfRotation( const vec3f& c) {
-        _centroid = c;
-    }
-
-	// get the rotation quaternion
-	quaternionf &getRotation() { return _r; }
-
-	// get the rotation increment
-	quaternionf &getIncrement() { return _incr; }
-
-protected:
-
-    int _x, _y;
-    int _x0, _y0;
-    int _dx, _dy;
-
-    // UI commands that this trackball responds to (defaults to left mouse button with no modifier key)
-    Button _tbActivateButton, _dActivateButton, _pActivateButton;
-    Modifier _tbActivateModifiers, _dActivateModifiers, _pActivateModifiers;
-
-    // Variable used to determine if the manipulator is presently tracking the mouse
-    bool _tbActive;
-    bool _dActive;
-    bool _pActive;
-
-    quaternionf _r;
-    vec3f _pan;
-    vec3f _dolly;
-    
-    float _tbScale; //trackball scale
-    float _dScale;  //dolly scale
-    float _pScale;   //pan scale
-    quaternionf _incr;
-    vec3f _centroid;
-};
-
-};
-
-#endif
diff --git a/nvcommon/include/nvMath.h b/nvcommon/include/nvMath.h
deleted file mode 100644
index cba1d14..0000000
--- a/nvcommon/include/nvMath.h
+++ /dev/null
@@ -1,77 +0,0 @@
-//
-// Template math library for common 3D functionality
-//
-// This code is in part deriver from glh, a cross platform glut helper library.
-// The copyright for glh follows this notice.
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-/*
-    Copyright (c) 2000 Cass Everitt
-	Copyright (c) 2000 NVIDIA Corporation
-    All rights reserved.
-
-    Redistribution and use in source and binary forms, with or
-	without modification, are permitted provided that the following
-	conditions are met:
-
-     * Redistributions of source code must retain the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer.
-
-     * Redistributions in binary form must reproduce the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer in the documentation and/or other materials
-	   provided with the distribution.
-
-     * The names of contributors to this software may not be used
-	   to endorse or promote products derived from this software
-	   without specific prior written permission. 
-
-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
-	   POSSIBILITY OF SUCH DAMAGE. 
-
-
-    Cass Everitt - cass@r3.nu
-*/
-
-#ifndef NV_MATH_H
-#define NV_MATH_H
-
-#include <math.h>
-
-#include <nvVector.h>
-#include <nvMatrix.h>
-#include <nvQuaternion.h>
-
-#define NV_PI   float(3.1415926535897932384626433832795)
-
-namespace nv {
-
-typedef vec2<float> vec2f;
-typedef vec2<int> vec2i;
-typedef vec2<unsigned int> vec2ui;
-typedef vec3<float> vec3f;
-typedef vec3<int> vec3i;
-typedef vec3<unsigned int> vec3ui;
-typedef vec4<float> vec4f;
-typedef vec4<int> vec4i;
-typedef vec4<unsigned int> vec4ui;
-typedef matrix4<float> matrix4f;
-typedef quaternion<float> quaternionf;
-
-};
-
-#endif
-
diff --git a/nvcommon/include/nvMatrix.h b/nvcommon/include/nvMatrix.h
deleted file mode 100644
index a5dad9c..0000000
--- a/nvcommon/include/nvMatrix.h
+++ /dev/null
@@ -1,378 +0,0 @@
-//
-// Template math library for common 3D functionality
-//
-// nvMatrix.h - template matrix code
-//
-// This code is in part deriver from glh, a cross platform glut helper library.
-// The copyright for glh follows this notice.
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-/*
-    Copyright (c) 2000 Cass Everitt
-	Copyright (c) 2000 NVIDIA Corporation
-    All rights reserved.
-
-    Redistribution and use in source and binary forms, with or
-	without modification, are permitted provided that the following
-	conditions are met:
-
-     * Redistributions of source code must retain the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer.
-
-     * Redistributions in binary form must reproduce the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer in the documentation and/or other materials
-	   provided with the distribution.
-
-     * The names of contributors to this software may not be used
-	   to endorse or promote products derived from this software
-	   without specific prior written permission. 
-
-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
-	   POSSIBILITY OF SUCH DAMAGE. 
-
-
-    Cass Everitt - cass@r3.nu
-*/
-
-#ifndef NV_MATRIX_H
-#define NV_MATRIX_H
-
-namespace nv {
-
-template <class T> class vec2;
-template <class T> class vec3;
-template <class T> class vec4;
-
-////////////////////////////////////////////////////////////////////////////////
-//
-//  Matrix
-//
-////////////////////////////////////////////////////////////////////////////////
-template<class T>
-class matrix4
-{
-
-public:
-
-    matrix4() { make_identity(); }
-
-    matrix4( T t ) 
-    { set_value(t); }
-
-    matrix4( const T * m )
-    { set_value(m); }
-
-    matrix4( T a00, T a01, T a02, T a03,
-        T a10, T a11, T a12, T a13,
-        T a20, T a21, T a22, T a23,
-        T a30, T a31, T a32, T a33 ) :
-    _11(a00), _12(a01), _13(a02), _14(a03),
-    _21(a10), _22(a11), _23(a12), _24(a13),
-    _31(a20), _32(a21), _33(a22), _34(a23),
-    _41(a30), _42(a31), _43(a32), _44(a33)
-    {}
-
-
-    void get_value( T * mp ) const {
-        int c = 0;
-        for(int j=0; j < 4; j++)
-            for(int i=0; i < 4; i++)
-                mp[c++] = element(i,j);
-    }
-
-    const T * get_value() const {
-        return _array;
-    }
-
-    void set_value( T * mp) {
-        int c = 0;
-        for(int j=0; j < 4; j++)
-            for(int i=0; i < 4; i++)
-                element(i,j) = mp[c++];
-    }
-
-    void set_value( T r ) {
-        for(int i=0; i < 4; i++)
-            for(int j=0; j < 4; j++)
-                element(i,j) = r;
-    }
-
-    void make_identity() {
-        element(0,0) = 1.0;
-        element(0,1) = 0.0;
-        element(0,2) = 0.0; 
-        element(0,3) = 0.0;
-
-        element(1,0) = 0.0;
-        element(1,1) = 1.0; 
-        element(1,2) = 0.0;
-        element(1,3) = 0.0;
-
-        element(2,0) = 0.0;
-        element(2,1) = 0.0;
-        element(2,2) = 1.0;
-        element(2,3) = 0.0;
-
-        element(3,0) = 0.0; 
-        element(3,1) = 0.0; 
-        element(3,2) = 0.0;
-        element(3,3) = 1.0;
-    }
-
-    // set a uniform scale
-    void set_scale( T s ) {
-        element(0,0) = s;
-        element(1,1) = s;
-        element(2,2) = s;
-    }
-
-    void set_scale( const vec3<T> & s ) {
-        for (int i = 0; i < 3; i++) element(i,i) = s[i];
-    }
-
-
-    void set_translate( const vec3<T> & t ) {
-        for (int i = 0; i < 3; i++) element(i,3) = t[i];
-    }
-
-    void set_row(int r, const vec4<T> & t) {
-        for (int i = 0; i < 4; i++) element(r,i) = t[i];
-    }
-
-    void set_column(int c, const vec4<T> & t) {
-        for (int i = 0; i < 4; i++) element(i,c) = t[i];
-    }
-
-    vec4<T> get_row(int r) const {
-        vec4<T> v;
-        for (int i = 0; i < 4; i++) v[i] = element(r,i);
-        return v;
-    }
-
-    vec4<T> get_column(int c) const {
-        vec4<T> v;
-        for (int i = 0; i < 4; i++) v[i] = element(i,c);
-        return v;
-    }
-
-    friend matrix4 inverse( const matrix4 & m) {
-        matrix4 minv;
-
-        T r1[8], r2[8], r3[8], r4[8];
-        T *s[4], *tmprow;
-
-        s[0] = &r1[0];
-        s[1] = &r2[0];
-        s[2] = &r3[0];
-        s[3] = &r4[0];
-
-        int i,j,p,jj;
-        for(i=0;i<4;i++) {
-            for(j=0;j<4;j++) {
-                s[i][j] = m.element(i,j);
-                if(i==j) s[i][j+4] = 1.0;
-                else     s[i][j+4] = 0.0;
-            }
-        }
-        T scp[4];
-        for(i=0;i<4;i++) {
-            scp[i] = T(fabs(s[i][0]));
-            for(j=1;j<4;j++)
-                if(T(fabs(s[i][j])) > scp[i]) scp[i] = T(fabs(s[i][j]));
-            if(scp[i] == 0.0) return minv; // singular matrix!
-        }
-
-        int pivot_to;
-        T scp_max;
-        for(i=0;i<4;i++) {
-            // select pivot row
-            pivot_to = i;
-            scp_max = T(fabs(s[i][i]/scp[i]));
-            // find out which row should be on top
-            for(p=i+1;p<4;p++)
-                if (T(fabs(s[p][i]/scp[p])) > scp_max) {
-                    scp_max = T(fabs(s[p][i]/scp[p]));
-                    pivot_to = p;
-                }
-            // Pivot if necessary
-            if(pivot_to != i) {
-                tmprow = s[i];
-                s[i] = s[pivot_to];
-                s[pivot_to] = tmprow;
-                T tmpscp;
-                tmpscp = scp[i];
-                scp[i] = scp[pivot_to];
-                scp[pivot_to] = tmpscp;
-            }
-
-            T mji;
-            // perform gaussian elimination
-            for(j=i+1;j<4;j++) {
-                mji = s[j][i]/s[i][i];
-                s[j][i] = 0.0;
-                for(jj=i+1;jj<8;jj++)
-                    s[j][jj] -= mji*s[i][jj];
-            }
-        }
-        if(s[3][3] == 0.0) return minv; // singular matrix!
-
-        //
-        // Now we have an upper triangular matrix.
-        //
-        //  x x x x | y y y y
-        //  0 x x x | y y y y 
-        //  0 0 x x | y y y y
-        //  0 0 0 x | y y y y
-        //
-        //  we'll back substitute to get the inverse
-        //
-        //  1 0 0 0 | z z z z
-        //  0 1 0 0 | z z z z
-        //  0 0 1 0 | z z z z
-        //  0 0 0 1 | z z z z 
-        //
-
-        T mij;
-        for(i=3;i>0;i--) {
-            for(j=i-1;j > -1; j--) {
-                mij = s[j][i]/s[i][i];
-                for(jj=j+1;jj<8;jj++)
-                    s[j][jj] -= mij*s[i][jj];
-            }
-        }
-
-        for(i=0;i<4;i++)
-            for(j=0;j<4;j++)
-                minv(i,j) = s[i][j+4] / s[i][i];
-
-        return minv;
-    }
-
-
-    friend matrix4 transpose( const matrix4 & m) {
-        matrix4 mtrans;
-
-        for(int i=0;i<4;i++)
-            for(int j=0;j<4;j++)
-                mtrans(i,j) = m.element(j,i);		
-        return mtrans;
-    }
-
-    matrix4 & operator *= ( const matrix4 & rhs ) {
-        matrix4 mt(*this);
-        set_value(T(0));
-
-        for(int i=0; i < 4; i++)
-            for(int j=0; j < 4; j++)
-                for(int c=0; c < 4; c++)
-                    element(i,j) += mt(i,c) * rhs(c,j);
-        return *this;
-    }
-
-    friend matrix4 operator * ( const matrix4 & lhs, const matrix4 & rhs ) {
-        matrix4 r(T(0));
-
-        for(int i=0; i < 4; i++)
-            for(int j=0; j < 4; j++)
-                for(int c=0; c < 4; c++)
-                    r.element(i,j) += lhs(i,c) * rhs(c,j);
-        return r;
-    }
-
-    // dst = M * src
-    vec4<T> operator *( const vec4<T> &src) const {
-        vec4<T> r;
-        for ( int i = 0; i < 4; i++)
-            r[i]  = ( src[0] * element(i,0) + src[1] * element(i,1) +
-                      src[2] * element(i,2) + src[3] * element(i,3));
-        return r;
-    }
-
-    // dst = src * M
-    friend vec4<T> operator *( const vec4<T> &lhs, const matrix4 &rhs) {
-        vec4<T> r;
-        for ( int i = 0; i < 4; i++)
-            r[i]  = ( lhs[0] * rhs.element(0,i) + lhs[1] * rhs.element(1,i) +
-                      lhs[2] * rhs.element(2,i) + lhs[3] * rhs.element(3,i));
-        return r;
-    }
-
-    T & operator () (int row, int col) {
-        return element(row,col);
-    }
-
-    const T & operator () (int row, int col) const {
-        return element(row,col);
-    }
-
-    T & element (int row, int col) {
-        return _array[row | (col<<2)];
-    }
-
-    const T & element (int row, int col) const {
-        return _array[row | (col<<2)];
-    }
-
-    matrix4 & operator *= ( const T & r ) {
-        for (int i = 0; i < 4; ++i) {
-            element(0,i) *= r;
-            element(1,i) *= r;
-            element(2,i) *= r;
-            element(3,i) *= r;
-        }
-        return *this;
-    }
-
-    matrix4 & operator += ( const matrix4 & mat ) {
-        for (int i = 0; i < 4; ++i) {
-            element(0,i) += mat.element(0,i);
-            element(1,i) += mat.element(1,i);
-            element(2,i) += mat.element(2,i);
-            element(3,i) += mat.element(3,i);
-        }
-        return *this;
-    }
-
-    
-    friend bool operator == ( const matrix4 & lhs, const matrix4 & rhs ) {
-        bool r = true;
-        for (int i = 0; i < 16; i++)
-            r &= lhs._array[i] == rhs._array[i];
-        return r;
-    }
-
-    friend bool operator != ( const matrix4 & lhs, const matrix4 & rhs )  {
-        bool r = true;
-        for (int i = 0; i < 16; i++)
-            r &= lhs._array[i] != rhs._array[i];
-        return r;
-    }
-
-    union {
-        struct {
-            T _11, _12, _13, _14;   // standard names for components
-            T _21, _22, _23, _24;   // standard names for components
-            T _31, _32, _33, _34;   // standard names for components
-            T _41, _42, _43, _44;   // standard names for components
-        };
-        T _array[16];     // array access
-    };
-};
-
-};
-
-#endif
diff --git a/nvcommon/include/nvQuaternion.h b/nvcommon/include/nvQuaternion.h
deleted file mode 100644
index 40f4a98..0000000
--- a/nvcommon/include/nvQuaternion.h
+++ /dev/null
@@ -1,457 +0,0 @@
-//
-// Template math library for common 3D functionality
-//
-// nvQuaterion.h - quaternion template and utility functions
-//
-// This code is in part deriver from glh, a cross platform glut helper library.
-// The copyright for glh follows this notice.
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-/*
-    Copyright (c) 2000 Cass Everitt
-	Copyright (c) 2000 NVIDIA Corporation
-    All rights reserved.
-
-    Redistribution and use in source and binary forms, with or
-	without modification, are permitted provided that the following
-	conditions are met:
-
-     * Redistributions of source code must retain the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer.
-
-     * Redistributions in binary form must reproduce the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer in the documentation and/or other materials
-	   provided with the distribution.
-
-     * The names of contributors to this software may not be used
-	   to endorse or promote products derived from this software
-	   without specific prior written permission. 
-
-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
-	   POSSIBILITY OF SUCH DAMAGE. 
-
-
-    Cass Everitt - cass@r3.nu
-*/
-#ifndef NV_QUATERNION_H
-#define NV_QUATERNION_H
-
-namespace nv {
-
-template <class T> class vec2;
-template <class T> class vec3;
-template <class T> class vec4;
-
-////////////////////////////////////////////////////////////////////////////////
-//
-//  Quaternion
-//
-////////////////////////////////////////////////////////////////////////////////
-
-template< class T>
-class quaternion
-{
-public:
-
-    quaternion() : x(0.0), y(0.0), z(0.0), w(0.0)
-    {
-    }
-
-    quaternion( const T v[4] )
-    {
-        set_value( v );
-    }
-
-
-    quaternion( T q0, T q1, T q2, T q3 )
-    {
-        set_value( q0, q1, q2, q3 );
-    }
-
-
-    quaternion( const matrix4<T> & m )
-    {
-        set_value( m );
-    }
-
-
-    quaternion( const vec3<T> &axis, T radians )
-    {
-        set_value( axis, radians );
-    }
-
-
-    quaternion( const vec3<T> &rotateFrom, const vec3<T> &rotateTo )
-    {
-        set_value( rotateFrom, rotateTo );
-    }
-
-    quaternion( const vec3<T> & from_look, const vec3<T> & from_up,
-        const vec3<T>& to_look, const vec3<T>& to_up)
-    {
-        set_value(from_look, from_up, to_look, to_up);
-    }
-
-    const T * get_value() const
-    {
-        return  &_array[0];
-    }
-
-    void get_value( T &q0, T &q1, T &q2, T &q3 ) const
-    {
-        q0 = x;
-        q1 = y;
-        q2 = z;
-        q3 = w;
-    }
-
-    quaternion & set_value( T q0, T q1, T q2, T q3 )
-    {
-        _array[0] = q0;
-        _array[1] = q1;
-        _array[2] = q2;
-        _array[3] = q3;
-        return *this;
-    }
-
-    void get_value( vec3<T> &axis, T &radians ) const
-    {
-        radians = T(acos( _array[3] ) * T(2.0));
-        if ( radians == T(0.0) )
-            axis = vec3<T>( 0.0, 0.0, 1.0 );
-        else
-        {
-            axis[0] = _array[0];
-            axis[1] = _array[1];
-            axis[2] = _array[2];
-            axis = normalize(axis);
-        }
-    }
-
-    void get_value( matrix4<T> & m ) const
-    {
-        T s, xs, ys, zs, wx, wy, wz, xx, xy, xz, yy, yz, zz;
-
-        T norm = _array[0] * _array[0] + _array[1] * _array[1] + _array[2] * _array[2] + _array[3] * _array[3];
-
-        s = ( norm == T(0.0)) ? T(0.0) : ( T(2.0) / norm );
-
-        xs = _array[0] * s;
-        ys = _array[1] * s;
-        zs = _array[2] * s;
-
-        wx = _array[3] * xs;
-        wy = _array[3] * ys;
-        wz = _array[3] * zs;
-
-        xx = _array[0] * xs;
-        xy = _array[0] * ys;
-        xz = _array[0] * zs;
-
-        yy = _array[1] * ys;
-        yz = _array[1] * zs;
-        zz = _array[2] * zs;
-
-        m(0,0) = T( T(1.0) - ( yy + zz ));
-        m(1,0) = T ( xy + wz );
-        m(2,0) = T ( xz - wy );
-
-        m(0,1) = T ( xy - wz );
-        m(1,1) = T ( T(1.0) - ( xx + zz ));
-        m(2,1) = T ( yz + wx );
-
-        m(0,2) = T ( xz + wy );
-        m(1,2) = T ( yz - wx );
-        m(2,2) = T ( T(1.0) - ( xx + yy ));
-
-        m(3,0) = m(3,1) = m(3,2) = m(0,3) = m(1,3) = m(2,3) = T(0.0);
-        m(3,3) = T(1.0);
-    }
-
-    quaternion & set_value( const T * qp )
-    {
-        for ( int i = 0; i < 4; i++) _array[i] = qp[i];
-
-        return *this;
-    }
-
-    quaternion & set_value( const matrix4<T> & m )
-    {
-        T tr, s;
-        int i, j, k;
-        const int nxt[3] = { 1, 2, 0 };
-
-        tr = m(0,0) + m(1,1) + m(2,2);
-
-        if ( tr > T(0) )
-        {
-            s = T(sqrt( tr + m(3,3) ));
-            _array[3] = T ( s * 0.5 );
-            s = T(0.5) / s;
-
-            _array[0] = T ( ( m(1,2) - m(2,1) ) * s );
-            _array[1] = T ( ( m(2,0) - m(0,2) ) * s );
-            _array[2] = T ( ( m(0,1) - m(1,0) ) * s );
-        }
-        else
-        {
-            i = 0;
-            if ( m(1,1) > m(0,0) )
-                i = 1;
-
-            if ( m(2,2) > m(i,i) )
-                i = 2;
-
-            j = nxt[i];
-            k = nxt[j];
-
-            s = T(sqrt( ( m(i,j) - ( m(j,j) + m(k,k) )) + T(1.0) ));
-
-            _array[i] = T ( s * 0.5 );
-            s = T(0.5 / s);
-
-            _array[3] = T ( ( m(j,k) - m(k,j) ) * s );
-            _array[j] = T ( ( m(i,j) + m(j,i) ) * s );
-            _array[k] = T ( ( m(i,k) + m(k,i) ) * s );
-        }
-
-        return *this;
-    }
-
-    quaternion & set_value( const vec3<T> &axis, T theta )
-    {
-        T sqnorm = square_norm(axis);
-
-        if (sqnorm == T(0.0))
-        {
-            // axis too small.
-            x = y = z = T(0.0);
-            w = T(1.0);
-        } 
-        else 
-        {
-            theta *= T(0.5);
-            T sin_theta = T(sin(theta));
-
-            if ( sqnorm != T(1)) 
-                sin_theta /= T(sqrt(sqnorm));
-            x = sin_theta * axis[0];
-            y = sin_theta * axis[1];
-            z = sin_theta * axis[2];
-            w = T(cos(theta));
-        }
-        return *this;
-    }
-
-    quaternion & set_value( const vec3<T> & rotateFrom, const vec3<T> & rotateTo )
-    {
-        vec3<T> p1, p2;
-        T alpha;
-
-        p1 = normalize(rotateFrom);
-        p2 = normalize(rotateTo);
-
-        alpha = dot( p1, p2);
-
-        if( alpha == T(1.0) ) {
-            *this = quaternion(); 
-            return *this; 
-        }
-
-        // ensures that the anti-parallel case leads to a positive dot
-        if( alpha == T(-1.0))
-        {
-            vec3<T> v;
-
-            if(p1[0] != p1[1] || p1[0] != p1[2])
-                v = vec3<T>(p1[1], p1[2], p1[0]);
-            else
-                v = vec3<T>(-p1[0], p1[1], p1[2]);
-
-            v -= p1 * dot( p1, v);
-            v = normalize(v);
-
-            set_value(v, T(3.1415926));
-            return *this;
-        }
-
-        p1 = normalize( cross( p1, p2));  
-        
-        set_value(p1,T(acos(alpha)));
-
-        return *this;
-    }
-
-    quaternion & set_value( const vec3<T> & from_look, const vec3<T> & from_up,
-        const vec3<T> & to_look, const vec3<T> & to_up)
-    {
-        quaternion r_look = quaternion(from_look, to_look);
-
-        vec3<T> rotated_from_up(from_up);
-        r_look.mult_vec(rotated_from_up);
-
-        quaternion r_twist = quaternion(rotated_from_up, to_up);
-
-        *this = r_twist;
-        *this *= r_look;
-        return *this;
-    }
-
-    quaternion & operator *= ( const quaternion<T> & qr ) {
-        quaternion ql(*this);
-
-        w = ql.w * qr.w - ql.x * qr.x - ql.y * qr.y - ql.z * qr.z;
-        x = ql.w * qr.x + ql.x * qr.w + ql.y * qr.z - ql.z * qr.y;
-        y = ql.w * qr.y + ql.y * qr.w + ql.z * qr.x - ql.x * qr.z;
-        z = ql.w * qr.z + ql.z * qr.w + ql.x * qr.y - ql.y * qr.x;
-
-        return *this;
-    }
-
-    friend quaternion normalize( const quaternion<T> &q) {
-        quaternion r(q);
-        T rnorm = T(1.0) / T(sqrt( q.w * q.w + q.x * q.x + q.y * q.y + q.z * q.z));
-        
-        r.x *= rnorm;
-        r.y *= rnorm;
-        r.z *= rnorm;
-        r.w *= rnorm;
-    }
-
-    friend quaternion<T> conjugate( const quaternion<T> & q) {
-        quaternion<T> r(q);
-        r._array[0] *= T(-1.0);
-        r._array[1] *= T(-1.0);
-        r._array[2] *= T(-1.0);
-        return r;
-    }
-
-    friend quaternion<T> inverse( const quaternion<T> & q) {
-        return conjugate(q);
-    }
-
-    //
-    // Quaternion multiplication with cartesian vector
-    // v' = q*v*q(star)
-    //
-    void mult_vec( const vec3<T> &src, vec3<T> &dst ) const
-    {
-        T v_coef = w * w - x * x - y * y - z * z;                     
-        T u_coef = T(2.0) * (src[0] * x + src[1] * y + src[2] * z);  
-        T c_coef = T(2.0) * w;                                       
-
-        dst.v[0] = v_coef * src.v[0] + u_coef * x + c_coef * (y * src.v[2] - z * src.v[1]);
-        dst.v[1] = v_coef * src.v[1] + u_coef * y + c_coef * (z * src.v[0] - x * src.v[2]);
-        dst.v[2] = v_coef * src.v[2] + u_coef * z + c_coef * (x * src.v[1] - y * src.v[0]);
-    }
-
-    void mult_vec( vec3<T> & src_and_dst) const
-    {
-        mult_vec(vec3<T>(src_and_dst), src_and_dst);
-    }
-
-    void scale_angle( T scaleFactor ) {
-        vec3<T> axis;
-        T radians;
-
-        get_value(axis, radians);
-        radians *= scaleFactor;
-        set_value(axis, radians);
-    }
-
-    friend quaternion<T> slerp( const quaternion<T> & p, const quaternion<T> & q, T alpha )
-    {
-        quaternion r;
-
-        T cos_omega = p.x * q.x + p.y * q.y + p.z * q.z + p.w * q.w;
-        // if B is on opposite hemisphere from A, use -B instead
-
-        int bflip;
-        if ( ( bflip = (cos_omega < T(0))) )
-            cos_omega = -cos_omega;
-
-        // complementary interpolation parameter
-        T beta = T(1) - alpha;     
-
-        if(cos_omega >= T(1))
-            return p;
-
-        T omega = T(acos(cos_omega));
-        T one_over_sin_omega = T(1.0) / T(sin(omega));
-
-        beta    = T(sin(omega*beta)  * one_over_sin_omega);
-        alpha   = T(sin(omega*alpha) * one_over_sin_omega);
-
-        if (bflip)
-            alpha = -alpha;
-
-        r.x = beta * p._array[0]+ alpha * q._array[0];
-        r.y = beta * p._array[1]+ alpha * q._array[1];
-        r.z = beta * p._array[2]+ alpha * q._array[2];
-        r.w = beta * p._array[3]+ alpha * q._array[3];
-        return r;
-    }
-
-    T & operator []( int i ) {
-        return _array[i];
-    }
-
-    const T & operator []( int i ) const {
-        return _array[i];
-    }
-
-    
-    friend bool operator == ( const quaternion<T> & lhs, const quaternion<T> & rhs ) {
-        bool r = true;
-        for (int i = 0; i < 4; i++)
-            r &= lhs._array[i] == rhs._array[i]; 
-        return r;
-    }
-
-    friend bool operator != ( const quaternion<T> & lhs, const quaternion<T> & rhs ) {
-        bool r = true;
-        for (int i = 0; i < 4; i++)
-            r &= lhs._array[i] == rhs._array[i]; 
-        return r;
-    }
-
-    friend quaternion<T> operator * ( const quaternion<T> & lhs, const quaternion<T> & rhs ) {	
-        quaternion r(lhs); 
-        r *= rhs; 
-        return r; 
-    }
-
-
-    union 
-    {
-        struct
-        {
-            T x;
-            T y;
-            T z;
-            T w;
-        };
-        T _array[4];
-    };
-
-};
-
-
-
-};
-
-#endif
diff --git a/nvcommon/include/nvSDKPath.h b/nvcommon/include/nvSDKPath.h
deleted file mode 100644
index 93dfe2f..0000000
--- a/nvcommon/include/nvSDKPath.h
+++ /dev/null
@@ -1,82 +0,0 @@
-//
-//
-//
-//
-//
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////////////////////////
-
-#ifndef NV_SDK_PATH_H
-#define NV_SDK_PATH_H
-
-#include <stdlib.h>
-#include <stdio.h>
-#include <vector>
-#include <string>
-
-namespace nv {
-
-    class SDKPath {
-    
-    public:
-        SDKPath() {
-            const char *env = getenv("NVSDK10OGL_ROOT");
-
-            //search local paths first, in-case someone has the SDK installed while hacking another copy 
-            _pathList.push_back("./");  // present directory
-            _pathList.push_back("../"); // back one
-            _pathList.push_back("../../"); // back two
-
-            if ( env) {
-                _pathList.push_back(std::string(env) + "/");  // Path lacks a terminating slash
-            }
-        }
-
-        void addPath( const std::string &path) {
-            _pathList.push_back(path);
-        }
-
-        void clearPaths() {
-            _pathList.clear();
-        }
-
-        bool getFilePath( const std::string &file, std::string &path) {
-            std::string pathString;
-            
-            for ( std::vector<std::string>::iterator it = _pathList.begin(); it != _pathList.end(); it++) {
-                pathString = *it + file;
-                FILE *fp = fopen( pathString.c_str(), "rb");
-                if (fp) {
-                    fclose(fp);
-                    path = pathString;
-                    return true;
-                }
-            }
-
-            return false;
-        }
-
-        bool getPath( const std::string &file, std::string &path) {
-            std::string pathString;
-            
-            for ( std::vector<std::string>::iterator it = _pathList.begin(); it != _pathList.end(); it++) {
-                pathString = *it + file;
-                FILE *fp = fopen( pathString.c_str(), "rb");
-                if (fp) {
-                    fclose(fp);
-                    path = *it;
-                    return true;
-                }
-            }
-
-            return false;
-        }
-
-    private:
-        std::vector<std::string> _pathList;
-
-    };
-};
-
-#endif 
diff --git a/nvcommon/include/nvShaderUtils.h b/nvcommon/include/nvShaderUtils.h
deleted file mode 100644
index 69862d9..0000000
--- a/nvcommon/include/nvShaderUtils.h
+++ /dev/null
@@ -1,223 +0,0 @@
-//
-// Utility functions for compiling shaders and programs
-//
-// Author: Evan Hart
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-
-#ifndef NV_SHADER_UTILS_H
-#define NV_SHADER_UTILS_H
-
-#include <stdio.h>
-#include <string.h>
-
-#include <GL/glew.h>
-
-namespace nv
-{
-
-
-//
-//
-////////////////////////////////////////////////////////////
-inline GLuint CompileGLSLShader( GLenum target, const char* shader)
-{
-    GLuint object;
-
-    object = glCreateShader( target);
-
-    if (!object)
-        return object;
-
-    glShaderSource( object, 1, &shader, NULL);
-
-    glCompileShader(object);
-
-    // check if shader compiled
-    GLint compiled = 0;
-    glGetShaderiv(object, GL_COMPILE_STATUS, &compiled);
-
-    if (!compiled)
-    {
-#ifdef NV_REPORT_COMPILE_ERRORS
-        char temp[256] = "";
-        glGetShaderInfoLog( object, 256, NULL, temp);
-        fprintf( stderr, "Compile failed:\n%s\n", temp);
-#endif
-        glDeleteShader( object);
-        return 0;
-    }
-
-    return object;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-inline GLuint CompileGLSLShaderFromFile( GLenum target, const char* filename)
-{
-    FILE *shaderFile;
-    char *text;
-    long size;
-
-    //must read files as binary to prevent problems from newline translation
-    shaderFile = fopen( filename, "rb");
-
-    if ( shaderFile == NULL)
-        return 0;
-
-    fseek( shaderFile, 0, SEEK_END);
-
-    size = ftell(shaderFile);
-
-    fseek( shaderFile, 0, SEEK_SET);
-
-    text = new char[size+1];
-
-    fread( text, size, 1, shaderFile);
-
-    fclose( shaderFile);
-
-    text[size] = '\0';
-
-    GLuint object = CompileGLSLShader( target, text);
-
-    delete []text;
-
-    return object;
-}
-
-
-// Create a program composed of vertex and fragment shaders.
-inline GLuint LinkGLSLProgram( GLuint vertexShader, GLuint fragmentShader)
-{
-    GLuint program = glCreateProgram();
-    glAttachShader(program, vertexShader);
-    glAttachShader(program, fragmentShader);
-    glLinkProgram(program);
-
-#ifdef NV_REPORT_COMPILE_ERRORS
-    // Get error log.
-    GLint charsWritten, infoLogLength;
-    glGetProgramiv(program, GL_INFO_LOG_LENGTH, &infoLogLength);
-
-    char * infoLog = new char[infoLogLength];
-    glGetProgramInfoLog(program, infoLogLength, &charsWritten, infoLog);
-    printf(infoLog);
-    delete [] infoLog;
-#endif
-
-    // Test linker result.
-    GLint linkSucceed = GL_FALSE;
-    glGetProgramiv(program, GL_LINK_STATUS, &linkSucceed);
-    
-    if (linkSucceed == GL_FALSE)
-    {
-        glDeleteProgram(program);
-        return 0;
-    }
-
-    return program;
-}
-
-
-// Create a program composed of vertex, geometry and fragment shaders.
-inline GLuint LinkGLSLProgram( GLuint vertexShader, GLuint geometryShader, GLint inputType, GLint vertexOut, GLint outputType, GLuint fragmentShader)
-{
-    GLuint program = glCreateProgram();
-    glAttachShader(program, vertexShader);
-    glAttachShader(program, geometryShader);
-	glProgramParameteriEXT(program, GL_GEOMETRY_INPUT_TYPE_EXT, inputType);
-    glProgramParameteriEXT(program, GL_GEOMETRY_VERTICES_OUT_EXT, vertexOut);
-    glProgramParameteriEXT(program, GL_GEOMETRY_OUTPUT_TYPE_EXT, outputType);
-    glAttachShader(program, fragmentShader);
-    glLinkProgram(program);
-
-#ifdef NV_REPORT_COMPILE_ERRORS
-    // Get error log.
-    GLint charsWritten, infoLogLength;
-    glGetProgramiv(program, GL_INFO_LOG_LENGTH, &infoLogLength);
-
-    char * infoLog = new char[infoLogLength];
-    glGetProgramInfoLog(program, infoLogLength, &charsWritten, infoLog);
-    printf(infoLog);
-    delete [] infoLog;
-#endif
-
-    // Test linker result.
-    GLint linkSucceed = GL_FALSE;
-    glGetProgramiv(program, GL_LINK_STATUS, &linkSucceed);
-    
-    if (linkSucceed == GL_FALSE)
-    {
-        glDeleteProgram(program);
-        return 0;
-    }
-
-    return program;
-}
-
-
-//
-//
-////////////////////////////////////////////////////////////
-inline GLuint CompileASMShader(GLenum program_type, const char *code)
-{
-    GLuint program_id;
-    glGenProgramsARB(1, &program_id);
-    glBindProgramARB(program_type, program_id);
-    glProgramStringARB(program_type, GL_PROGRAM_FORMAT_ASCII_ARB, (GLsizei) strlen(code), (GLubyte *) code);
-
-    GLint error_pos;
-    glGetIntegerv(GL_PROGRAM_ERROR_POSITION_ARB, &error_pos);
-    if (error_pos != -1) {
-#ifdef NV_REPORT_COMPILE_ERRORS
-        const GLubyte *error_string;
-        error_string = glGetString(GL_PROGRAM_ERROR_STRING_ARB);
-        fprintf(stderr, "Program error at position: %d\n%s\n", (int)error_pos, error_string);
-#endif
-        return 0;
-    }
-    return program_id;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-inline GLuint CompileASMShaderFromFile( GLenum target, const char* filename)
-{
-    FILE *shaderFile;
-    char *text;
-    long size;
-
-    //must read files as binary to prevent problems from newline translation
-    shaderFile = fopen( filename, "rb");
-
-    if ( shaderFile == NULL)
-        return 0;
-
-    fseek( shaderFile, 0, SEEK_END);
-
-    size = ftell(shaderFile);
-
-    fseek( shaderFile, 0, SEEK_SET);
-
-    text = new char[size+1];
-
-    fread( text, size, 1, shaderFile);
-
-    fclose( shaderFile);
-
-    text[size] = '\0';
-
-    GLuint program_id = CompileASMShader( target, text);
-
-    delete []text;
-
-    return program_id;
-}
-
-} // nv namespace
-
-#endif 
\ No newline at end of file
diff --git a/nvcommon/include/nvShape.h b/nvcommon/include/nvShape.h
deleted file mode 100644
index 958b3e9..0000000
--- a/nvcommon/include/nvShape.h
+++ /dev/null
@@ -1,177 +0,0 @@
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-
-#ifndef NV_SHAPE_H
-#define NV_SHAPE_H
-
-#include "nvVertexBuffer.h"
-
-class nvShape {
-public:
-	nvShape(GLenum prim, int nindices) : m_prim(prim) {
-		m_geom = new nvGeometryBuffer(nindices);
-	}
-
-	~nvShape() {
-		delete m_geom;
-	}
-
-	void Draw() {
-		m_geom->SetPointers();
-		m_geom->EnableArrays();
-		m_geom->DrawElements(m_prim);
-		m_geom->DisableArrays();
-	};
-
-	void DrawInstanced(int ninstances)
-	{
-		m_geom->SetPointers();
-		m_geom->EnableArrays();
-		m_geom->DrawElementsInstanced(m_prim, ninstances);
-		m_geom->DisableArrays();
-	}
-
-	GLenum m_prim;
-	nvGeometryBuffer *m_geom;
-};
-
-class nvTorusShape : public nvShape
-{
-public:
-	nvTorusShape(float r, float R, int nsides, int rings)
-		: nvShape(GL_QUADS, 4*rings*nsides)
-	{
-		int nverts = rings*(nsides+1)*2;
-		nvVertexAttribBuffer *position_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::POSITION, nverts, 3, GL_FLOAT);
-		nvVertexAttribBuffer *normal_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::NORMAL, nverts, 3, GL_FLOAT);
-		m_geom->AddAttribute(position_buffer);
-		m_geom->AddAttribute(normal_buffer);
-
-		float *vptr= (float *) position_buffer->Map(GL_WRITE_ONLY_ARB);
-        float *nptr= (float *) normal_buffer->Map(GL_WRITE_ONLY_ARB);
-
-        // generate vertex and normal data
-        int i, j;
-        float theta, phi, theta1;
-        float cosTheta, sinTheta;
-        float cosTheta1, sinTheta1;
-        float ringDelta, sideDelta;
-
-        ringDelta = 2.0 * NV_PI / rings;
-        sideDelta = 2.0 * NV_PI / nsides;
-
-        theta = 0.0;
-        cosTheta = 1.0;
-        sinTheta = 0.0;
-        for (i = rings - 1; i >= 0; i--) {
-            theta1 = theta + ringDelta;
-            cosTheta1 = cos(theta1);
-            sinTheta1 = sin(theta1);
-            phi = 0.0;
-            for (j = nsides; j >= 0; j--) {
-                float cosPhi, sinPhi, dist;
-
-                phi += sideDelta;
-                cosPhi = cos(phi);
-                sinPhi = sin(phi);
-                dist = R + r * cosPhi;
-
-                *nptr++ = cosTheta1 * cosPhi;
-                *nptr++ = -sinTheta1 * cosPhi;
-                *nptr++ = sinPhi;
-
-                *vptr++ = cosTheta1 * dist;
-                *vptr++ = -sinTheta1 * dist;
-                *vptr++ = r * sinPhi;
-
-                *nptr++ = cosTheta * cosPhi;
-                *nptr++ = -sinTheta * cosPhi;
-                *nptr++ = sinPhi;
-
-                *vptr++ = cosTheta * dist;
-                *vptr++ = -sinTheta * dist;
-                *vptr++ = r * sinPhi;
-            }
-            theta = theta1;
-            cosTheta = cosTheta1;
-            sinTheta = sinTheta1;
-        }
-
-        // unmap buffers
-	    position_buffer->Unmap();
-	    normal_buffer->Unmap();
-
-        // create indices
-        unsigned short *iptr= (unsigned short *) m_geom->GetIndexBuffer()->Map(GL_WRITE_ONLY_ARB);
-        int v = 0;
-        for (i = rings - 1; i >= 0; i--) {
-            for (j = nsides; j >= 0; j--) {
-                if (j > 0) {
-                    *iptr++ = v;
-                    *iptr++ = v+1;
-                    *iptr++ = v+3;
-                    *iptr++ = v+2;
-                }
-                v+=2;
-            }
-        }
-        m_geom->GetIndexBuffer()->Unmap();
-	}
-};
-
-
-class nvCubeShape : public nvShape
-{
-public:
-	nvCubeShape(float s)
-		: nvShape(GL_TRIANGLES, 6*2*3)
-    {
-        float v[][3] = {
-            -s, -s, -s,  // 0
-            s, -s, -s,   // 1
-            s,  s, -s,   // 2
-            -s,  s, -s,  // 3
-            -s, -s, s,   // 4
-            s, -s, s,    // 5
-            s,  s, s,    // 6
-            -s,  s, s,   // 7
-        };
-
-        float n[][3] = {
-            -1, -1, -1,  // 0
-            1, -1, -1,   // 1
-            1,  1, -1,   // 2
-            -1,  1, -1,  // 3
-            -1, -1, 1,   // 4
-            1, -1, 1,    // 5
-            1,  1, 1,    // 6
-            -1,  1, 1,   // 7
-        };
-
-        unsigned short indices[] = {
-            0, 1, 2,
-            2, 3, 0,
-            1, 5, 6,
-            6, 2, 1,
-            5, 4, 7,
-            7, 6, 5,
-            4, 0, 3,
-            3, 7, 4,
-            1, 0, 4, 
-            4, 5, 1,
-            3, 2, 6,
-            6, 7, 3,
-        };
-
-        int nverts = 8;
-		nvVertexAttribBuffer *position_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::POSITION, nverts, 3, GL_FLOAT);
-		nvVertexAttribBuffer *normal_buffer = new nvVertexAttribBuffer(nvVertexAttribBuffer::NORMAL, nverts, 3, GL_FLOAT);
-		m_geom->AddAttribute(position_buffer);
-		m_geom->AddAttribute(normal_buffer);
-
-		position_buffer->SetData(v);
-		normal_buffer->SetData(n);
-		m_geom->GetIndexBuffer()->SetData(indices);
-    }
-};
-
-#endif
diff --git a/nvcommon/include/nvTime.h b/nvcommon/include/nvTime.h
deleted file mode 100644
index bb9dafc..0000000
--- a/nvcommon/include/nvTime.h
+++ /dev/null
@@ -1,144 +0,0 @@
-//
-// nvTime.h - Timer and perf counter classes
-//
-//
-// Author: Samuel Gateau
-// Email: sdkfeedback@nvidia.com
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-#ifndef NV_TIME_H
-#define NV_TIME_H
-
-namespace nv
-{
-    //*************************************************************************
-    // Timer
-    class Timer 
-    {
-    public:
-        /******************************** METHODS *********************************/
-
-	    /**
-	     * Default constructor.
-	     */
-	    Timer();
-
-        /**
-	     * Destructor.
-	     */
-	    ~Timer();
-
-	    /**
-	     * Start the timer (Reset total elapsed time).
-	     * Stop the timer.
-	     * Check if the timer is started.
-	     */
-	    void start();
-	    void stop();
-	    bool isStarted() const { return mStartTime != -1.0; }
-
-	    /** 
-	     * Get the total timer elapsed time since start [s].
-	     */
-	    double getTotalElapsedTime() const;
-
-	    /** 
-	     * Get the timer elapsed time since last 
-	     * call to the same method or start [s].
-	     */
-	    double getElapsedTime() const;
-
-	    /**
-	     * Query the current Application time.
-	     * It's a date expressed in s.
-	     */
-	    static double queryAppTime();
-
-    private:
-        /******************************* ATTRIBUTES *******************************/
-
-	    /**
-	     * The start time
-	     * -1 if not started;
-	     */
-	    double mStartTime;
-    	
-	    /**
-	     * The last time queried.
-	     */
-	    mutable double mLastQueryTime;
-
-	    /**
-	     * The inverse frequency of the CPU on which the thread is running and used
-	     * to measure the elapsed time.
-	     */
-	    static double msInvFrequency;
-
-	    /******************************** METHODS *********************************/
-
-	    /**
-	     * initialize the inv frequency (done once on the first timer created.
-	     */
-	    static void initializeClass();
-    };
-
-
-    //*************************************************************************
-    // FrameTimer
-    class  FrameTimer : public Timer
-    {
-    public:
-        /******************************** METHODS *********************************/
-
-	    /**
-	     * Default constructor.
-	     */
-        FrameTimer() : 
-            Timer(),
-            mCurrentFrameNb(0),
-            mAverageFrameNb(0),
-            mCurrentFrameDuration(0.0)
-        {}
-
-        /**
-	     * Destructor.
-	     */
-        ~FrameTimer() {}
- 
-        /** 
-         * Notify a new frame
-         * Evaluate the current frame duration
-         */
-        void newFrame()
-        {
-            mCurrentFrameNb++;
-            mAverageFrameNb++;
-            if (mAverageFrameNb > 10)
-            {
-                mCurrentFrameDuration =  getElapsedTime() / ((double) mAverageFrameNb);
-                mAverageFrameNb = 0;
-            }
-        }
-
-        double getFrameDuration() const { return mCurrentFrameDuration; }
-        double getFramerate() const { return (1.0/mCurrentFrameDuration); }
-        int getFrameNb() const { return mCurrentFrameNb; }
- 
-    private:
-        /******************************* ATTRIBUTES *******************************/
-
-        /**
-         * The current frame nb
-         */
-        int mCurrentFrameNb;
-        int mAverageFrameNb;
-
-        /**
-         * The current frame duration
-         */
-        double mCurrentFrameDuration;
-    };
-};
-
-#endif  // NV_TIME_H
diff --git a/nvcommon/include/nvVector.h b/nvcommon/include/nvVector.h
deleted file mode 100644
index 1055415..0000000
--- a/nvcommon/include/nvVector.h
+++ /dev/null
@@ -1,744 +0,0 @@
-//
-// Template math library for common 3D functionality
-//
-// nvVector.h - 2-vector, 3-vector, and 4-vector templates and utilities
-//
-// This code is in part deriver from glh, a cross platform glut helper library.
-// The copyright for glh follows this notice.
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-/*
-    Copyright (c) 2000 Cass Everitt
-	Copyright (c) 2000 NVIDIA Corporation
-    All rights reserved.
-
-    Redistribution and use in source and binary forms, with or
-	without modification, are permitted provided that the following
-	conditions are met:
-
-     * Redistributions of source code must retain the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer.
-
-     * Redistributions in binary form must reproduce the above
-	   copyright notice, this list of conditions and the following
-	   disclaimer in the documentation and/or other materials
-	   provided with the distribution.
-
-     * The names of contributors to this software may not be used
-	   to endorse or promote products derived from this software
-	   without specific prior written permission. 
-
-       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-	   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
-	   FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
-	   REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-	   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
-	   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-	   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-	   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-	   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-	   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
-	   POSSIBILITY OF SUCH DAMAGE. 
-
-
-    Cass Everitt - cass@r3.nu
-*/
-#ifndef NV_VECTOR_H
-#define NV_VECTOR_H
-
-#include <algorithm>
-
-namespace nv {
-
-template <class T> class vec2;
-template <class T> class vec3;
-template <class T> class vec4;
-
-//////////////////////////////////////////////////////////////////////
-//
-// vec2 - template class for 2-tuple vector
-//
-//////////////////////////////////////////////////////////////////////
-template <class T>   
-class vec2 {
-public:
-
-    typedef T value_type;
-    int size() const { return 2;}
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Constructors
-    //
-    ////////////////////////////////////////////////////////
-
-    // Default/scalar constructor
-    vec2(const T & t = T()) {
-        for(int i = 0; i < size(); i++) _array[i] = t;
-    }
-
-    // Construct from array
-    vec2(const T * tp) {
-        for(int i = 0; i < size(); i++) _array[i] = tp[i];
-    }
-
-    // Construct from explicit values
-    vec2( const T v0, const T v1) {
-        x = v0;
-        y = v1;
-    }
-
-    explicit vec2( const vec3<T> &u) {
-        for(int i = 0; i < size(); i++) _array[i] = u._array[i];
-    }
-
-    explicit vec2( const vec4<T> &u) {
-        for(int i = 0; i < size(); i++) _array[i] = u._array[i];
-    }
-    
-    const T * get_value() const {
-        return _array;
-    }
-    
-    vec2<T> & set_value( const T * rhs ) {
-        for(int i = 0; i < size(); i++) _array[i] = rhs[i];
-        return *this;
-    }
-    
-    // indexing operators
-    T & operator [] ( int i ) {
-        return _array[i];
-    }
-    
-    const T & operator [] ( int i ) const {
-        return _array[i];
-    }
-
-    // type-cast operators
-    operator T * () {
-        return _array;
-    }
-
-    operator const T * () const {
-        return _array;
-    }
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Math operators
-    //
-    ////////////////////////////////////////////////////////
-
-    // scalar multiply assign
-    friend vec2<T> & operator *= ( vec2<T> &lhs, T d ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= d;
-        return lhs;
-    }
-
-    // component-wise vector multiply assign
-    friend vec2<T> & operator *= ( vec2<T> &lhs, const vec2<T> &rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= rhs[i];
-        return lhs;
-    }
-
-    // scalar divide assign
-    friend vec2<T> & operator /= ( vec2<T> &lhs, T d ) {
-        if(d == 0) return lhs;
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= d;
-        return lhs;
-    }
-
-    // component-wise vector divide assign
-    friend vec2<T> & operator /= ( vec2<T> &lhs, const vec2<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= rhs._array[i];
-        return lhs;
-    }
-
-    // component-wise vector add assign
-    friend vec2<T> & operator += ( vec2<T> &lhs, const vec2<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] += rhs._array[i];
-        return lhs;
-    }
-
-    // component-wise vector subtract assign
-    friend vec2<T> & operator -= ( vec2<T> &lhs, const vec2<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] -= rhs._array[i];
-        return lhs;
-    }
-
-    // unary negate
-    friend vec2<T> operator - ( const vec2<T> &rhs) {
-        vec2<T> rv;
-        for(int i = 0; i < rhs.size(); i++) rv._array[i] = -rhs._array[i];
-        return rv;
-    }
-
-    // vector add
-    friend vec2<T> operator + ( const vec2<T> & lhs, const vec2<T> & rhs) {
-        vec2<T> rt(lhs);
-        return rt += rhs;
-    }
-
-    // vector subtract 
-    friend vec2<T> operator - ( const vec2<T> & lhs, const vec2<T> & rhs) {
-        vec2<T> rt(lhs);
-        return rt -= rhs;
-    }
-
-    // scalar multiply
-    friend vec2<T> operator * ( const vec2<T> & lhs, T rhs) {
-        vec2<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // scalar multiply
-    friend vec2<T> operator * ( T lhs, const vec2<T> & rhs) {
-        vec2<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // vector component-wise multiply
-    friend vec2<T> operator * ( const vec2<T> & lhs, const vec2<T> & rhs){
-        vec2<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // scalar multiply
-    friend vec2<T> operator / ( const vec2<T> & lhs, T rhs) {
-        vec2<T> rt(lhs);
-        return rt /= rhs;
-    }
-
-    // vector component-wise multiply
-    friend vec2<T> operator / ( const vec2<T> & lhs, const vec2<T> & rhs){
-        vec2<T> rt(lhs);
-        return rt /= rhs;
-    }
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Comparison operators
-    //
-    ////////////////////////////////////////////////////////
-
-    // equality
-    friend bool operator == ( const vec2<T> &lhs, const vec2<T> &rhs ) {
-        bool r = true;
-        for (int i = 0; i < lhs.size(); i++)
-            r &= lhs._array[i] == rhs._array[i];
-        return r;
-    }
-
-    // inequality
-    friend bool operator != ( const vec2<T> &lhs, const vec2<T> &rhs ) {
-        bool r = true;
-        for (int i = 0; i < lhs.size(); i++)
-            r &= lhs._array[i] != rhs._array[i];
-        return r;
-    }
-   
-    //data intentionally left public to allow vec2.x
-    union {
-        struct {
-            T x,y;          // standard names for components
-        };
-        struct {
-            T s,t;          // standard names for components
-        };
-        T _array[2];     // array access
-    };
-};
-
-//////////////////////////////////////////////////////////////////////
-//
-// vec3 - template class for 3-tuple vector
-//
-//////////////////////////////////////////////////////////////////////
-template <class T>
-class vec3 {
-public:
-
-    typedef T value_type;
-    int size() const { return 3;}
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Constructors
-    //
-    ////////////////////////////////////////////////////////
-
-    // Default/scalar constructor
-    vec3(const T & t = T()) {
-        for(int i = 0; i < size(); i++) _array[i] = t;
-    }
-
-    // Construct from array
-    vec3(const T * tp) {
-        for(int i = 0; i < size(); i++) _array[i] = tp[i];
-    }
-
-    // Construct from explicit values
-    vec3( const T v0, const T v1, const T v2) {
-        x = v0;
-        y = v1;
-        z = v2;
-    }
-
-    explicit vec3( const vec4<T> &u) {
-        for(int i = 0; i < size(); i++) _array[i] = u._array[i];
-    }
-
-    explicit vec3( const vec2<T> &u, T v0) {
-        x = u.x;
-        y = u.y;
-        z = v0;
-    }
-    
-    const T * get_value() const {
-        return _array;
-    }
-    
-    vec3<T> & set_value( const T * rhs ) {
-        for(int i = 0; i < size(); i++) _array[i] = rhs[i];
-        return *this;
-    }
-    
-    // indexing operators
-    T & operator [] ( int i ) {
-        return _array[i];
-    }
-    
-    const T & operator [] ( int i ) const {
-        return _array[i];
-    }
-
-    // type-cast operators
-    operator T * () {
-        return _array;
-    }
-
-    operator const T * () const {
-        return _array;
-    }
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Math operators
-    //
-    ////////////////////////////////////////////////////////
-
-    // scalar multiply assign
-    friend vec3<T> & operator *= ( vec3<T> &lhs, T d ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= d;
-        return lhs;
-    }
-
-    // component-wise vector multiply assign
-    friend vec3<T> & operator *= ( vec3<T> &lhs, const vec3<T> &rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= rhs[i];
-        return lhs;
-    }
-
-    // scalar divide assign
-    friend vec3<T> & operator /= ( vec3<T> &lhs, T d ) {
-        if(d == 0) return lhs;
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= d;
-        return lhs;
-    }
-
-    // component-wise vector divide assign
-    friend vec3<T> & operator /= ( vec3<T> &lhs, const vec3<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= rhs._array[i];
-        return lhs;
-    }
-
-    // component-wise vector add assign
-    friend vec3<T> & operator += ( vec3<T> &lhs, const vec3<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] += rhs._array[i];
-        return lhs;
-    }
-
-    // component-wise vector subtract assign
-    friend vec3<T> & operator -= ( vec3<T> &lhs, const vec3<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] -= rhs._array[i];
-        return lhs;
-    }
-
-    // unary negate
-    friend vec3<T> operator - ( const vec3<T> &rhs) {
-        vec3<T> rv;
-        for(int i = 0; i < rhs.size(); i++) rv._array[i] = -rhs._array[i];
-        return rv;
-    }
-
-    // vector add
-    friend vec3<T> operator + ( const vec3<T> & lhs, const vec3<T> & rhs) {
-        vec3<T> rt(lhs);
-        return rt += rhs;
-    }
-
-    // vector subtract 
-    friend vec3<T> operator - ( const vec3<T> & lhs, const vec3<T> & rhs) {
-        vec3<T> rt(lhs);
-        return rt -= rhs;
-    }
-
-    // scalar multiply
-    friend vec3<T> operator * ( const vec3<T> & lhs, T rhs) {
-        vec3<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // scalar multiply
-    friend vec3<T> operator * ( T lhs, const vec3<T> & rhs) {
-        vec3<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // vector component-wise multiply
-    friend vec3<T> operator * ( const vec3<T> & lhs, const vec3<T> & rhs){
-        vec3<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // scalar multiply
-    friend vec3<T> operator / ( const vec3<T> & lhs, T rhs) {
-        vec3<T> rt(lhs);
-        return rt /= rhs;
-    }
-
-    // vector component-wise multiply
-    friend vec3<T> operator / ( const vec3<T> & lhs, const vec3<T> & rhs){
-        vec3<T> rt(lhs);
-        return rt /= rhs;
-    }
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Comparison operators
-    //
-    ////////////////////////////////////////////////////////
-
-    // equality
-    friend bool operator == ( const vec3<T> &lhs, const vec3<T> &rhs ) {
-        bool r = true;
-        for (int i = 0; i < lhs.size(); i++)
-            r &= lhs._array[i] == rhs._array[i];
-        return r;
-    }
-
-    // inequality
-    friend bool operator != ( const vec3<T> &lhs, const vec3<T> &rhs ) {
-        bool r = true;
-        for (int i = 0; i < lhs.size(); i++)
-            r &= lhs._array[i] != rhs._array[i];
-        return r;
-    }
-
-    ////////////////////////////////////////////////////////////////////////////////
-    //
-    // dimension specific operations
-    //
-    ////////////////////////////////////////////////////////////////////////////////
-
-    // cross product
-    friend vec3<T> cross( const vec3<T> & lhs, const vec3<T> & rhs) {
-        vec3<T> r;
-
-        r.x = lhs.y * rhs.z - lhs.z * rhs.y;
-        r.y = lhs.z * rhs.x - lhs.x * rhs.z;
-        r.z = lhs.x * rhs.y - lhs.y * rhs.x;
-
-        return r;
-    }
-   
-    //data intentionally left public to allow vec2.x
-    union {
-        struct {
-            T x, y, z;          // standard names for components
-        };
-        struct {
-            T s, t, r;          // standard names for components
-        };
-        T _array[3];     // array access
-    };
-};
-
-//////////////////////////////////////////////////////////////////////
-//
-// vec4 - template class for 4-tuple vector
-//
-//////////////////////////////////////////////////////////////////////
-template <class T>
-class vec4 {
-public:
-
-    typedef T value_type;
-    int size() const { return 4;}
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Constructors
-    //
-    ////////////////////////////////////////////////////////
-
-    // Default/scalar constructor
-    vec4(const T & t = T()) {
-        for(int i = 0; i < size(); i++) _array[i] = t;
-    }
-
-    // Construct from array
-    vec4(const T * tp) {
-        for(int i = 0; i < size(); i++) _array[i] = tp[i];
-    }
-
-    // Construct from explicit values
-    vec4( const T v0, const T v1, const T v2, const T v3) {
-        x = v0;
-        y = v1;
-        z = v2;
-        w = v3;
-    }
-
-    explicit vec4( const vec3<T> &u, T v0) {
-        x = u.x;
-        y = u.y;
-        z = u.z;
-        w = v0;
-    }
-
-    explicit vec4( const vec2<T> &u, T v0, T v1) {
-        x = u.x;
-        y = u.y;
-        z = v0;
-        w = v1;
-    }
-    
-    const T * get_value() const {
-        return _array;
-    }
-    
-    vec4<T> & set_value( const T * rhs ) {
-        for(int i = 0; i < size(); i++) _array[i] = rhs[i];
-        return *this;
-    }
-    
-    // indexing operators
-    T & operator [] ( int i ) {
-        return _array[i];
-    }
-    
-    const T & operator [] ( int i ) const {
-        return _array[i];
-    }
-
-    // type-cast operators
-    operator T * () {
-        return _array;
-    }
-
-    operator const T * () const {
-        return _array;
-    }
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Math operators
-    //
-    ////////////////////////////////////////////////////////
-
-    // scalar multiply assign
-    friend vec4<T> & operator *= ( vec4<T> &lhs, T d ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= d;
-        return lhs;
-    }
-
-    // component-wise vector multiply assign
-    friend vec4<T> & operator *= ( vec4<T> &lhs, const vec4<T> &rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] *= rhs[i];
-        return lhs;
-    }
-
-    // scalar divide assign
-    friend vec4<T> & operator /= ( vec4<T> &lhs, T d ) {
-        if(d == 0) return lhs;
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= d;
-        return lhs;
-    }
-
-    // component-wise vector divide assign
-    friend vec4<T> & operator /= ( vec4<T> &lhs, const vec4<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] /= rhs._array[i];
-        return lhs;
-    }
-
-    // component-wise vector add assign
-    friend vec4<T> & operator += ( vec4<T> &lhs, const vec4<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] += rhs._array[i];
-        return lhs;
-    }
-
-    // component-wise vector subtract assign
-    friend vec4<T> & operator -= ( vec4<T> &lhs, const vec4<T> & rhs ) {
-        for(int i = 0; i < lhs.size(); i++) lhs._array[i] -= rhs._array[i];
-        return lhs;
-    }
-
-    // unary negate
-    friend vec4<T> operator - ( const vec4<T> &rhs) {
-        vec4<T> rv;
-        for(int i = 0; i < rhs.size(); i++) rv._array[i] = -rhs._array[i];
-        return rv;
-    }
-
-    // vector add
-    friend vec4<T> operator + ( const vec4<T> & lhs, const vec4<T> & rhs) {
-        vec4<T> rt(lhs);
-        return rt += rhs;
-    }
-
-    // vector subtract 
-    friend vec4<T> operator - ( const vec4<T> & lhs, const vec4<T> & rhs) {
-        vec4<T> rt(lhs);
-        return rt -= rhs;
-    }
-
-    // scalar multiply
-    friend vec4<T> operator * ( const vec4<T> & lhs, T rhs) {
-        vec4<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // scalar multiply
-    friend vec4<T> operator * ( T lhs, const vec4<T> & rhs) {
-        vec4<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // vector component-wise multiply
-    friend vec4<T> operator * ( const vec4<T> & lhs, const vec4<T> & rhs){
-        vec4<T> rt(lhs);
-        return rt *= rhs;
-    }
-
-    // scalar multiply
-    friend vec4<T> operator / ( const vec4<T> & lhs, T rhs) {
-        vec4<T> rt(lhs);
-        return rt /= rhs;
-    }
-
-    // vector component-wise multiply
-    friend vec4<T> operator / ( const vec4<T> & lhs, const vec4<T> & rhs){
-        vec4<T> rt(lhs);
-        return rt /= rhs;
-    }
-
-    ////////////////////////////////////////////////////////
-    //
-    //  Comparison operators
-    //
-    ////////////////////////////////////////////////////////
-
-    // equality
-    friend bool operator == ( const vec4<T> &lhs, const vec4<T> &rhs ) {
-        bool r = true;
-        for (int i = 0; i < lhs.size(); i++)
-            r &= lhs._array[i] == rhs._array[i];
-        return r;
-    }
-
-    // inequality
-    friend bool operator != ( const vec4<T> &lhs, const vec4<T> &rhs ) {
-        bool r = true;
-        for (int i = 0; i < lhs.size(); i++)
-            r &= lhs._array[i] != rhs._array[i];
-        return r;
-    }
-   
-    //data intentionally left public to allow vec2.x
-    union {
-        struct {
-            T x, y, z, w;          // standard names for components
-        };
-        struct {
-            T s, t, r, q;          // standard names for components
-        };
-        T _array[4];     // array access
-    };
-};
-
-////////////////////////////////////////////////////////////////////////////////
-//
-// Generic vector operations
-//
-////////////////////////////////////////////////////////////////////////////////
-
-// compute the dot product of two vectors
-template<class T>
-inline typename T::value_type dot( const T & lhs, const T & rhs ) { 
-    typename T::value_type r = 0;
-    for(int i = 0; i < lhs.size(); i++) r += lhs._array[i] * rhs._array[i];
-    return r;
-}
-
-// return the length of the provided vector
-template< class T>
-  inline typename T::value_type length( const T & vec) {
-    typename T::value_type r = 0;
-    for(int i = 0; i < vec.size(); i++) r += vec._array[i]*vec._array[i]; 
-    return typename T::value_type(sqrt(r));
-}
-
-// return the squared norm
-template< class T>
-inline typename T::value_type square_norm( const T & vec) {
-    typename T::value_type r = 0;
-    for(int i = 0; i < vec.size(); i++) r += vec._array[i]*vec._array[i]; 
-    return r;
-}
-
-// return the normalized version of the vector
-template< class T>
-inline T normalize( const T & vec) { 
-    typename T::value_type sum = 0;
-    T r;
-    for(int i = 0; i < vec.size(); i++) 
-        sum += vec._array[i] * vec._array[i];
-    sum = typename T::value_type(sqrt(sum));
-    if (sum > 0)
-        for(int i = 0; i < vec.size(); i++) 
-            r._array[i] = vec._array[i] / sum;
-    return r;
-}
-
-// In VC8 : min and max are already defined by a #define...
-#ifdef min
-#undef min
-#endif
-#ifdef max
-#undef max
-#endif
-//componentwise min
-template< class T>
-inline T min( const T & lhs, const T & rhs ) {
-    T rt;
-    for (int i = 0; i < lhs.size(); i++) rt._array[i] = std::min( lhs._array[i], rhs._array[i]);
-    return rt;
-}
-
-// componentwise max
-template< class T>
-inline T max( const T & lhs, const T & rhs ) {
-    T rt;
-    for (int i = 0; i < lhs.size(); i++) rt._array[i] = std::max( lhs._array[i], rhs._array[i]);
-    return rt;
-}
-
-
-};
-
-#endif
diff --git a/nvcommon/include/nvVertexBuffer.h b/nvcommon/include/nvVertexBuffer.h
deleted file mode 100644
index 28d072b..0000000
--- a/nvcommon/include/nvVertexBuffer.h
+++ /dev/null
@@ -1,175 +0,0 @@
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-
-#ifndef NV_VERTEXBUFFER_H
-#define NV_VERTEXBUFFER_H
-
-#include <vector>
-
-// class representing a buffer object
-class nvBufferObject {
-public:
-	nvBufferObject(GLenum target, GLsizeiptrARB size, GLenum usage=GL_STATIC_DRAW_ARB)
-		: m_target(target),
-		  m_size(size),
-		  m_usage(usage)
-	{
-		glGenBuffersARB(1, &m_id);
-		Bind();
-        glBufferDataARB(m_target, m_size, 0, m_usage);
-	}
-
-	~nvBufferObject() {
-		glDeleteBuffersARB(1, &m_id);
-	}
-
-	void Bind() {
-		glBindBufferARB(m_target, m_id);
-	}
-
-	void Unbind() {
-		glBindBufferARB(m_target, 0);
-	}
-
-	void SetData(void *data) {
-		Bind();
-        glBufferDataARB(m_target, m_size, data, m_usage);
-	}
-
-	void *Map(GLenum access) {
-		Bind();
-        return glMapBufferARB(m_target, access);
-	}
-
-	bool Unmap() {
-		Bind();
-        return glUnmapBufferARB(m_target) == GL_TRUE;
-	}
-
-private:
-	GLenum m_target;
-	GLsizeiptrARB m_size;
-	GLenum m_usage;
-	GLuint m_id;
-};
-
-
-// extends nvBufferObject to represent a vertex array stored in a buffer object
-class nvVertexAttribBuffer : public nvBufferObject {
-public:
-	nvVertexAttribBuffer(GLuint index, GLuint nverts, GLint size, GLenum type, GLboolean normalized=GL_FALSE, GLsizei stride=0, GLenum usage=GL_STATIC_DRAW_ARB)
-		: m_index(index),
-		  m_size(size),
-		  m_type(type),
-		  m_normalized(normalized),
-		  m_stride(stride),
-		  nvBufferObject(GL_ARRAY_BUFFER_ARB, nverts*size*GetTypeSize(type), usage)
-	{
-	}
-
-	~nvVertexAttribBuffer()
-	{
-	}
-
-	enum Attribute { POSITION=0, WEIGHT, NORMAL, COLOR0, COLOR1, FOGCOORD, TEXCOORD0=8 };
-
-	int GetTypeSize(GLenum type) {
-		switch(type) {
-			case GL_FLOAT:
-				return sizeof(float);
-				break;
-			case GL_INT:
-				return sizeof(int);
-				break;
-			case GL_SHORT:
-				return sizeof(short);
-				break;
-			default:
-				fprintf(stderr, "Error: unsupported vertex type\n");
-				return 0;
-		}
-	}
-
-	void SetPointer() {
-		Bind();
-        glVertexAttribPointerARB(m_index, m_size, m_type, m_normalized, m_stride, 0);
-    }
-
-	void Enable() {
-        glEnableVertexAttribArrayARB(m_index);   
-	}
-
-	void Disable() {
-        glDisableVertexAttribArrayARB(m_index);   
-	}
-
-private:
-	GLuint m_index;
-	GLint m_size;
-	GLenum m_type;
-	GLboolean m_normalized;
-	GLsizei m_stride;
-};
-
-// geometry buffer is a collection of vertex attributes plus an index buffer
-class nvGeometryBuffer
-{
-public:
-	nvGeometryBuffer(int nindices)
-		: m_nindices(nindices)
-	{
-		m_index_buffer = new nvBufferObject(GL_ELEMENT_ARRAY_BUFFER_ARB, sizeof(short)*nindices);
-	}
-
-	~nvGeometryBuffer()
-	{
-		delete m_index_buffer;
-		for(unsigned int i=0; i<m_attrib.size(); i++) {
-			delete m_attrib[i];
-		}
-	}
-
-	void AddAttribute(nvVertexAttribBuffer *attrib) {
-		m_attrib.push_back(attrib);
-	}
-
-    void SetPointers() {
-		for(unsigned int i=0; i<m_attrib.size(); i++) {
-			m_attrib[i]->SetPointer();
-		}
-    }
-
-    void EnableArrays() {
-		for(unsigned int i=0; i<m_attrib.size(); i++) {
-			m_attrib[i]->Enable();
-		}
-    }
-
-    void DisableArrays() {
-		for(unsigned int i=0; i<m_attrib.size(); i++) {
-			m_attrib[i]->Disable();
-		}
-    }
-
-	void DrawElementsInstanced(GLenum mode, GLsizei instances)
-    {
-		m_index_buffer->Bind();
-        glDrawElementsInstancedEXT(mode, m_nindices, GL_UNSIGNED_SHORT, 0, instances);
-		m_index_buffer->Unbind();
-	}
-
-	void DrawElements(GLenum mode)
-    {
-		m_index_buffer->Bind();
-        glDrawElements(mode, m_nindices, GL_UNSIGNED_SHORT, 0);
-		m_index_buffer->Unbind();
-	}
-
-	nvBufferObject *GetIndexBuffer() { return m_index_buffer; }
-
-private:
-	int m_nverts, m_nindices;
-	nvBufferObject *m_index_buffer;
-	std::vector<nvVertexAttribBuffer *> m_attrib;
-};
-
-#endif
diff --git a/nvcommon/include/renderVertexArray.h b/nvcommon/include/renderVertexArray.h
deleted file mode 100644
index a67943f..0000000
--- a/nvcommon/include/renderVertexArray.h
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
-  Render to vertex array class
-  sgreen 2/2004
-
-  Copyright (c) NVIDIA Corporation. All rights reserved.
-*/
-
-#ifndef RENDERVERTEXARRAY_H
-#define RENDERVERTEXARRAY_H
-
-#ifdef WIN32
-#include <windows.h>
-#endif
-#include <gl/glew.h>
-
-class RenderVertexArray {
-public:
-  RenderVertexArray(int nverts, GLint size, GLenum type = GL_FLOAT);
-  ~RenderVertexArray();
-
-  void LoadData(void *data);                // load vertex data from memory
-  void Read(GLenum buffer, int w, int h, int offset=0);   // read vertex data from frame buffer
-  void SetPointer(GLuint index, GLsizei stride=0, GLuint offset=0);
-
-  GLuint getHandle() { return m_buffer; }
-
-private:
-    GLenum m_usage;     // vbo usage flag
-    GLuint m_buffer;
-    GLuint m_index;
-    GLuint m_nverts;
-    GLint m_size;       // size of attribute       
-    GLenum m_format;    // readpixels image format
-    GLenum m_type;      // FLOAT or HALF_FLOAT
-    int m_bytes_per_component;
-};
-
-#endif
diff --git a/nvcommon/include/renderbuffer.h b/nvcommon/include/renderbuffer.h
deleted file mode 100644
index ab739b6..0000000
--- a/nvcommon/include/renderbuffer.h
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
-  Copyright (c) 2005, 
-	  Aaron Lefohn	(lefohn@cs.ucdavis.edu)
-	  Adam Moerschell (atmoerschell@ucdavis.edu)
-  All rights reserved.
-
-  This software is licensed under the BSD open-source license. See
-  http://www.opensource.org/licenses/bsd-license.php for more detail.
-
-  *************************************************************
-  Redistribution and use in source and binary forms, with or 
-  without modification, are permitted provided that the following 
-  conditions are met:
-
-  Redistributions of source code must retain the above copyright notice, 
-  this list of conditions and the following disclaimer. 
-
-  Redistributions in binary form must reproduce the above copyright notice, 
-  this list of conditions and the following disclaimer in the documentation 
-  and/or other materials provided with the distribution. 
-
-  Neither the name of the University of Californa, Davis nor the names of 
-  the contributors may be used to endorse or promote products derived 
-  from this software without specific prior written permission.
-
-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
-  OF SUCH DAMAGE.
-*/
-
-#ifndef UCDAVIS_RENDER_BUFFER_H
-#define UCDAVIS_RENDER_BUFFER_H
-
-#include "framebufferObject.h"
-
-/*!
-Renderbuffer Class. This class encapsulates the Renderbuffer OpenGL
-object described in the FramebufferObject (FBO) OpenGL spec. 
-See the official spec at:
-	http://oss.sgi.com/projects/ogl-sample/registry/EXT/framebuffer_object.txt
-for complete details.
-
-A "Renderbuffer" is a chunk of GPU memory used by FramebufferObjects to
-represent "traditional" framebuffer memory (depth, stencil, and color buffers).
-By "traditional," we mean that the memory cannot be bound as a texture. 
-With respect to GPU shaders, Renderbuffer memory is "write-only." Framebuffer
-operations such as alpha blending, depth test, alpha test, stencil test, etc.
-read from this memory in post-fragement-shader (ROP) operations.
-
-The most common use of Renderbuffers is to create depth and stencil buffers.
-Note that as of 7/1/05, NVIDIA drivers to do not support stencil Renderbuffers.
-
-Usage Notes:
-  1) "internalFormat" can be any of the following:
-      Valid OpenGL internal formats beginning with:
-        RGB, RGBA, DEPTH_COMPONENT
-
-      or a stencil buffer format (not currently supported 
-      in NVIDIA drivers as of 7/1/05).
-        STENCIL_INDEX1_EXT 
-        STENCIL_INDEX4_EXT     
-        STENCIL_INDEX8_EXT     
-        STENCIL_INDEX16_EXT
-*/
-class Renderbuffer
-{
-public:
-  /// Ctors/Dtors
-  Renderbuffer();
-  Renderbuffer(GLenum internalFormat, int width, int height);
-  ~Renderbuffer();
-
-  void   Bind();
-  void   Unbind();
-  void   Set(GLenum internalFormat, int width, int height);
-  GLuint GetId() const;
-
-  static GLint GetMaxSize();
-
-private:
-  GLuint m_bufId;
-  static GLuint _CreateBufferId();
-};
-
-#endif
-
diff --git a/nvcommon/nvModel/CMakeLists.txt b/nvcommon/nvModel/CMakeLists.txt
deleted file mode 100644
index 1965581..0000000
--- a/nvcommon/nvModel/CMakeLists.txt
+++ /dev/null
@@ -1,29 +0,0 @@
-
-#
-#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
-#
-#  NVIDIA Corporation and its licensors retain all intellectual property and proprietary
-#  rights in and to this software, related documentation and any modifications thereto.
-#  Any use, reproduction, disclosure or distribution of this software and related
-#  documentation without an express license agreement from NVIDIA Corporation is strictly
-#  prohibited.
-#
-#  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
-#  AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
-#  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
-#  PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
-#  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
-#  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
-#  BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
-#  INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
-#  SUCH DAMAGES
-#
-
-include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
-
-add_library( nvModel STATIC
-  src/nvModel.cpp
-  src/nvModelObj.cpp
-  src/nvModelQuery.cpp
-  )
-set_property(TARGET nvModel PROPERTY FOLDER "${OPTIX_IDE_FOLDER}")
diff --git a/nvcommon/nvModel/include/nvModel.h b/nvcommon/nvModel/include/nvModel.h
deleted file mode 100644
index 5a98c38..0000000
--- a/nvcommon/nvModel/include/nvModel.h
+++ /dev/null
@@ -1,247 +0,0 @@
-//
-// nvModel.h - Model support class
-//
-// The nvModel class implements an interface for a multipurpose model
-// object. This class is useful for loading and formatting meshes
-// for use by OpenGL. It can compute face normals, tangents, and
-// adjacency information. The class supports the obj file format.
-//
-// Author: Evan Hart
-// Email: sdkfeedback@nvidia.com
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-#ifndef NV_MODEL_H
-#define NV_MODEL_H
-
-// #ifdef WIN32
-// #ifdef NVMODEL_EXPORTS
-// #define NVSDKENTRY __declspec(dllexport)
-// #else
-// #define NVSDKENTRY __declspec(dllimport)
-// #endif
-// #else
-// #define NVSDKENTRY
-// #endif
-#define NVSDKENTRY
-
-#include <vector>
-#include <assert.h>
-
-#ifdef __APPLE__
-#include <OpenGL/gl.h>
-#else
-#include <GL/glew.h>
-#endif
-#include <nvMath.h>
-
-namespace nv {
-
-    class Model {
-    public:
-
-        //
-        // Enumeration of primitive types
-        //
-        //////////////////////////////////////////////////////////////
-        enum PrimType {
-            eptNone = 0x0,
-            eptPoints = 0x1,
-            eptEdges = 0x2,
-            eptTriangles = 0x4,
-            eptTrianglesWithAdjacency = 0x8,
-            eptAll = 0xf
-        };
-
-        static const int NumPrimTypes = 4;
-
-		NVSDKENTRY static Model* CreateModel();
-
-        NVSDKENTRY Model();
-        NVSDKENTRY virtual ~Model();
-
-        //
-        // loadModelFromFile
-        //
-        //    This function attempts to determine the type of
-        //  the filename passed as a parameter. If it understands
-        //  that file type, it attempts to parse and load the file
-        //  into its raw data structures. If the file type is
-        //  recognized and successfully parsed, the function returns
-        //  true, otherwise it returns false.
-        //
-        //////////////////////////////////////////////////////////////
-        NVSDKENTRY bool loadModelFromFile( const char* file);
-
-        //
-        //  compileModel
-        //
-        //    This function takes the raw model data in the internal
-        //  structures, and attempts to bring it to a format directly
-        //  accepted for vertex array style rendering. This means that
-        //  a unique compiled vertex will exist for each unique
-        //  combination of position, normal, tex coords, etc that are
-        //  used in the model. The prim parameter, tells the model
-        //  what type of index list to compile. By default it compiles
-        //  a simple triangle mesh with no connectivity. 
-        //
-        //////////////////////////////////////////////////////////////
-        NVSDKENTRY void compileModel( PrimType prim = eptTriangles);
-
-        //
-        //  computeBoundingBox
-        //
-        //    This function returns the points defining the axis-
-        //  aligned bounding box containing the model.
-        //
-        //////////////////////////////////////////////////////////////
-        NVSDKENTRY void computeBoundingBox( vec3f &minVal, vec3f &maxVal);
-
-        //
-        //  rescale
-        //
-        //  rescales object based on bounding box
-        //
-        //////////////////////////////////////////////////////////////
-        NVSDKENTRY void rescale( float radius);
-
-        //
-        //  buildTangents
-        //
-        //    This function computes tangents in the s direction on
-        //  the model. It operates on the raw data, so it should only
-        //  be used before compiling a model into a HW friendly form.
-        //
-        //////////////////////////////////////////////////////////////
-        NVSDKENTRY void computeTangents();
-
-        //
-        //  computeNormals
-        //
-        //    This function computes vertex normals for a model
-        //  which did not have them. It computes them on the raw
-        //  data, so it should be done before compiling the model
-        //  into a HW friendly format.
-        //
-        //////////////////////////////////////////////////////////////
-        NVSDKENTRY void computeNormals();
-
-        NVSDKENTRY void removeDegeneratePrims();
-
-        //
-        //general query functions
-        //
-        NVSDKENTRY bool hasNormals() const;
-        NVSDKENTRY bool hasTexCoords() const;
-        NVSDKENTRY bool hasTangents() const;
-        NVSDKENTRY bool hasColors() const;
-
-        NVSDKENTRY int getPositionSize() const;
-        NVSDKENTRY int getNormalSize() const;
-        NVSDKENTRY int getTexCoordSize() const;
-        NVSDKENTRY int getTangentSize() const;
-        NVSDKENTRY int getColorSize() const;
-
-        //
-        //  Functions for the management of raw data
-        //
-        NVSDKENTRY void clearNormals();
-        NVSDKENTRY void clearTexCoords();
-        NVSDKENTRY void clearTangents();
-        NVSDKENTRY void clearColors();
-
-        //
-        //raw data access functions
-        //  These are to be used to get the raw array data from the file, each array has its own index
-        //
-        NVSDKENTRY const float* getPositions() const;
-        NVSDKENTRY const float* getNormals() const;
-        NVSDKENTRY const float* getTexCoords() const;
-        NVSDKENTRY const float* getTangents() const;
-        NVSDKENTRY const float* getColors() const;
-
-        NVSDKENTRY const GLuint* getPositionIndices() const;
-        NVSDKENTRY const GLuint* getNormalIndices() const;
-        NVSDKENTRY const GLuint* getTexCoordIndices() const;
-        NVSDKENTRY const GLuint* getTangentIndices() const;
-        NVSDKENTRY const GLuint* getColorIndices() const;
-
-        NVSDKENTRY int getPositionCount() const;
-        NVSDKENTRY int getNormalCount() const;
-        NVSDKENTRY int getTexCoordCount() const;
-        NVSDKENTRY int getTangentCount() const;
-        NVSDKENTRY int getColorCount() const;
-
-        NVSDKENTRY int getIndexCount() const;
-
-        //
-        //compiled data access functions
-        //
-        NVSDKENTRY const float* getCompiledVertices() const;
-        NVSDKENTRY const GLuint* getCompiledIndices( PrimType prim = eptTriangles) const;
-
-        NVSDKENTRY int getCompiledPositionOffset() const;
-        NVSDKENTRY int getCompiledNormalOffset() const;
-        NVSDKENTRY int getCompiledTexCoordOffset() const;
-        NVSDKENTRY int getCompiledTangentOffset() const;
-        NVSDKENTRY int getCompiledColorOffset() const;
-
-        // returns the size of the merged vertex in # of floats
-        NVSDKENTRY int getCompiledVertexSize() const;
-
-        NVSDKENTRY int getCompiledVertexCount() const;
-        NVSDKENTRY int getCompiledIndexCount( PrimType prim = eptTriangles) const;
-
-        NVSDKENTRY int getOpenEdgeCount() const;
-
-    protected:
-
-        //Would all this be better done as a channel abstraction to handle more arbitrary data?
-
-        //data structures for model data, not optimized for rendering
-        std::vector<float> _positions;
-        std::vector<float> _normals;
-        std::vector<float> _texCoords;
-        std::vector<float> _sTangents;
-        std::vector<float> _colors;
-        int _posSize;
-        int _tcSize;
-        int _cSize;
-
-        std::vector<GLuint> _pIndex;
-        std::vector<GLuint> _nIndex;
-        std::vector<GLuint> _tIndex;
-        std::vector<GLuint> _tanIndex;
-        std::vector<GLuint> _cIndex;
-
-        //data structures optimized for rendering, compiled model
-        std::vector<GLuint> _indices[NumPrimTypes];
-        std::vector<float> _vertices;
-        int _pOffset;
-        int _nOffset;
-        int _tcOffset;
-        int _sTanOffset;
-        int _cOffset;
-        int _vtxSize;
-
-        int _openEdges;
-
-        //
-        // Static elements used to dispatch to proper sub-readers
-        //
-        //////////////////////////////////////////////////////////////
-        struct FormatInfo {
-            const char* extension;
-            bool (*reader)( const char* file, Model& i);
-        };
-
-        static FormatInfo formatTable[]; 
-
-        NVSDKENTRY static bool loadObjFromFile( const char *file, Model &m);
-    };
-};
-
-
-#endif
-
diff --git a/nvcommon/nvModel/src/nvModel.cpp b/nvcommon/nvModel/src/nvModel.cpp
deleted file mode 100644
index 4f4a51d..0000000
--- a/nvcommon/nvModel/src/nvModel.cpp
+++ /dev/null
@@ -1,738 +0,0 @@
-//
-// nvModel.cpp - Model support class
-//
-// The nvModel class implements an interface for a multipurpose model
-// object. This class is useful for loading and formatting meshes
-// for use by OpenGL. It can compute face normals, tangents, and
-// adjacency information. The class supports the obj file format.
-//
-// This file implements the fomat independent part of the code.
-//
-// Author: Evan Hart
-// Email: sdkfeedback@nvidia.com
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-#include <stdio.h>
-
-#include <set>
-#include <map>
-#include <algorithm>
-#include <string.h>
-
-#include "nvModel.h"
-
-#include <nvMath.h>
-
-
-//fix for non-standard naming
-#ifdef WIN32
-#define strcasecmp _stricmp
-#endif
-
-using std::vector;
-using std::set;
-using std::map;
-using std::min;
-using std::max;
-
-namespace nv {
-
-//////////////////////////////////////////////////////////////////////
-//
-// Local data structures
-//
-//////////////////////////////////////////////////////////////////////
-
-//
-//  Index gathering and ordering structure
-////////////////////////////////////////////////////////////
-struct IdxSet {
-    GLuint pIndex;
-    GLuint nIndex;
-    GLuint tIndex;
-    GLuint tanIndex;
-    GLuint cIndex;
-
-    bool operator< ( const IdxSet &rhs) const {
-        if (pIndex < rhs.pIndex)
-            return true;
-        else if (pIndex == rhs.pIndex) {
-            if (nIndex < rhs.nIndex)
-                return true;
-            else if (nIndex == rhs.nIndex) {
-            
-                if ( tIndex < rhs.tIndex)
-                    return true;
-                else if ( tIndex == rhs.tIndex) {
-                    if (tanIndex < rhs.tanIndex)
-                        return true;
-                    else if (tanIndex == rhs.tanIndex)
-                        return (cIndex < rhs.cIndex);
-                }
-            }
-        }
-
-        return false;
-    }
-};
-
-//
-//  Edge connectivity structure 
-////////////////////////////////////////////////////////////
-struct Edge {
-    GLuint pIndex[2]; //position indices
-
-    bool operator< (const Edge &rhs) const {
-        return ( pIndex[0] == rhs.pIndex[0]) ? ( pIndex[1] < rhs.pIndex[1]) : pIndex[0] < rhs.pIndex[0];
-    }
-
-    Edge( GLuint v0, GLuint v1) {
-        pIndex[0] = std::min( v0, v1);
-        pIndex[1] = std::max( v0, v1);
-    }
-
-private:
-    Edge() {} // disallow the default constructor
-};
-
-//////////////////////////////////////////////////////////////////////
-//
-//  Static data
-//
-//////////////////////////////////////////////////////////////////////
-Model::FormatInfo Model::formatTable[] = {
-    { "obj", Model::loadObjFromFile }
-};
-
-Model* Model::CreateModel() {
-	return new Model;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-Model::Model() : _posSize(0), _tcSize(0), _cSize(0), _pOffset(-1), _nOffset(-1), _tcOffset(-1), _sTanOffset(-1), _cOffset(-1), _vtxSize(0), _openEdges(0) {
-    //nv::vec2<float> val;
-}
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-Model::~Model() {
-    //dynamic allocations presently all handled via stl
-}
-
-//
-//initialize a model from a file
-//////////////////////////////////////////////////////////////////////
-bool Model::loadModelFromFile( const char* file) {
-    const char* extension;
-    extension = strrchr( file, '.');
-
-    if (extension)
-        extension++; //start looking after the .
-    else
-        return false; //don't try to place guess the file type
-
-    int formatCount = sizeof(Model::formatTable) / sizeof(Model::FormatInfo);
-
-    //try to match by format first
-    for ( int ii = 0; ii < formatCount; ii++) {
-        if ( ! strcasecmp( formatTable[ii].extension, extension)) {
-            //extension matches, load it
-            return formatTable[ii].reader( file, *this);
-        }
-    }
-
-
-    return false;
-}
-
-//
-// compile the model to an acceptable format
-//////////////////////////////////////////////////////////////////////
-void Model::compileModel( Model::PrimType prim) {
-    bool needsTriangles = false;
-    bool needsTrianglesWithAdj = false;
-    bool needsEdges = false;
-    bool needsPoints = false;
-
-    if ( (prim & Model::eptPoints) == Model::eptPoints)
-        needsPoints = true;
-
-    if ( (prim & Model::eptTriangles) == Model::eptTriangles)
-        needsTriangles = true;
-
-    if ( (prim & Model::eptTrianglesWithAdjacency) == Model::eptTrianglesWithAdjacency) {
-        needsTriangles = true;
-        needsTrianglesWithAdj = true;
-    }
-
-    if ( (prim & Model::eptEdges) == Model::eptEdges) {
-        needsTriangles = true;
-        needsEdges = true;
-    }
-
-
-    //merge the points
-    map<IdxSet, GLuint> pts;
-
-    //find whether a position is unique
-    set<GLuint> ptSet;
-    
-    {
-        vector<GLuint>::iterator pit = _pIndex.begin();
-        vector<GLuint>::iterator nit = _nIndex.begin();
-        vector<GLuint>::iterator tit = _tIndex.begin();
-        vector<GLuint>::iterator tanit = _tanIndex.begin();
-        vector<GLuint>::iterator cit = _cIndex.begin();
-
-        while ( pit < _pIndex.end()) {
-            IdxSet idx;
-            idx.pIndex = *pit;
-
-            if ( _normals.size() > 0)
-                idx.nIndex = *nit;
-            else
-                idx.nIndex = 0;
-
-            if ( _tIndex.size() > 0)
-                idx.tIndex = *tit;
-            else
-                idx.tIndex = 0;
-
-            if ( _tanIndex.size() > 0)
-                idx.tanIndex = *tanit;
-            else
-                idx.tanIndex = 0;
-
-            if ( _cIndex.size() > 0)
-                idx.cIndex = *cit;
-            else
-                idx.cIndex = 0;
-
-            map<IdxSet,GLuint>::iterator mit = pts.find(idx);
-
-            if (mit == pts.end()) {
-
-                if (needsTriangles)
-                    _indices[2].push_back( (GLuint)pts.size());
-
-                //since this one is a new vertex, check to see if this position is already referenced
-                if (needsPoints && ptSet.find(idx.pIndex) != ptSet.end()) {
-                    ptSet.insert( idx.pIndex);
-                }
-
-                pts.insert( map<IdxSet,GLuint>::value_type(idx, (GLuint)pts.size()));
-
-                //position
-                _vertices.push_back( _positions[idx.pIndex*_posSize]);
-                _vertices.push_back( _positions[idx.pIndex*_posSize + 1]);
-                _vertices.push_back( _positions[idx.pIndex*_posSize + 2]);
-                if (_posSize == 4)
-                    _vertices.push_back( _positions[idx.pIndex*_posSize + 3]);
-
-                //normal
-                if (_normals.size() > 0) {
-                    _vertices.push_back( _normals[idx.nIndex*3]);
-                    _vertices.push_back( _normals[idx.nIndex*3 + 1]);
-                    _vertices.push_back( _normals[idx.nIndex*3 + 2]);
-                }
-
-                //texture coordinate
-                if (_texCoords.size() > 0) {
-                    _vertices.push_back( _texCoords[idx.tIndex*_tcSize]);
-                    _vertices.push_back( _texCoords[idx.tIndex*_tcSize + 1]);
-                    if (_tcSize == 3)
-                        _vertices.push_back( _texCoords[idx.tIndex*_tcSize + 2]);
-                }
-
-                //tangents
-                if (_sTangents.size() > 0) {
-                    _vertices.push_back( _sTangents[idx.tanIndex*3]);
-                    _vertices.push_back( _sTangents[idx.tanIndex*3 + 1]);
-                    _vertices.push_back( _sTangents[idx.tanIndex*3 + 2]);
-                }
-
-                //colors
-                if (_colors.size() > 0) {
-                    _vertices.push_back( _colors[idx.cIndex*_cSize]);
-                    _vertices.push_back( _colors[idx.cIndex*_cSize + 1]);
-                    _vertices.push_back( _colors[idx.cIndex*_cSize + 2]);
-                    if (_cSize == 4)
-                        _vertices.push_back( _colors[idx.cIndex*_cSize + 3]);
-                }
-            }
-            else {
-                if (needsTriangles)
-                    _indices[2].push_back( mit->second);
-            }
-
-            //advance the iterators if the components are present
-            pit++;
-
-            if (hasNormals())
-                nit++;
-
-            if (hasTexCoords())
-                tit++;
-
-            if (hasTangents())
-                tanit++;
-
-            if (hasColors())
-                cit++;
-        }
-    }
-
-    //create an edge list, if necessary
-    if (needsEdges || needsTrianglesWithAdj) {
-        std::multimap<Edge, GLuint> edges;
-
-
-        //edges are only based on positions only
-        for (int ii = 0; ii < (int)_pIndex.size(); ii += 3) {
-            for (int jj = 0; jj < 3; jj++) {
-                Edge w( _pIndex[ii + jj], _pIndex[ii + (jj +1) % 3]);
-                std::multimap<Edge, GLuint>::iterator it = edges.find(w);
-
-                //if we are storing edges, make sure we store only one copy
-                if (needsEdges && it == edges.end()) {
-                    _indices[1].push_back( _indices[2][ii+jj]);
-                    _indices[1].push_back( _indices[2][ii + (jj +1) % 3]);
-                }
-                edges.insert( std::multimap<Edge, GLuint>::value_type( w, ii / 3));
-            }
-        }
-
-
-        //now handle triangles with adjacency
-        if (needsTrianglesWithAdj) {
-            for (unsigned int ii = 0; ii < _pIndex.size(); ii += 3) {
-                for (int jj = 0; jj < 3; jj++) {
-                    Edge w( _pIndex[ii + jj], _pIndex[ii + (jj + 1) % 3]);
-                    std::multimap<Edge, GLuint>::iterator it = edges.lower_bound(w);
-                    std::multimap<Edge, GLuint>::iterator limit = edges.upper_bound(w);
-                    GLuint adjVertex = 0;
-
-                    while ( it != edges.end() && it->second == ii /3 && it != limit)
-                        it++;
-
-                    if ( it == edges.end() || it == limit || it->first.pIndex[0] != w.pIndex[0] || it->first.pIndex[1] != w.pIndex[1] ) {
-                        //no adjacent triangle found, duplicate the vertex
-                        adjVertex = _indices[2][ii + jj];
-                        _openEdges++;
-                        
-                    }
-                    else {
-                        GLuint triOffset = it->second * 3; //compute the starting index of the triangle
-                        adjVertex = _indices[2][triOffset]; //set the vertex to a default, in case the adjacent triangle it a degenerate
-
-                        //find the unshared vertex
-                        for ( int kk=0; kk<3; kk++) {
-                            if ( _pIndex[triOffset + kk] != w.pIndex[0] && _pIndex[triOffset + kk] != w.pIndex[1] ) {
-                                adjVertex = _indices[2][triOffset + kk];
-                                break;
-                            }
-                        }
-                    }
-
-                    //store the vertices for this edge
-                    _indices[3].push_back( _indices[2][ii + jj]);
-                    _indices[3].push_back( adjVertex);
-                }
-            }
-        }
-
-    }
-
-    //create selected prim
-
-    //set the offsets and vertex size
-    _pOffset = 0; //always first
-    _vtxSize = _posSize;
-    if ( hasNormals()) {
-        _nOffset = _vtxSize;
-        _vtxSize += 3;
-    }
-    else {
-        _nOffset = -1;
-    }
-    if ( hasTexCoords()) {
-        _tcOffset = _vtxSize;
-        _vtxSize += _tcSize;
-    }
-    else {
-        _tcOffset = -1;
-    }
-    if ( hasTangents()) {
-        _sTanOffset = _vtxSize;
-        _vtxSize += 3;
-    }
-    else {
-        _sTanOffset = -1;
-    }
-    if ( hasColors()) {
-        _cOffset = _vtxSize;
-        _vtxSize += _cSize;
-    }
-    else {
-        _cOffset = -1;
-    }
-
-    
-}
-
-//
-// compute tangents in the S direction
-//
-//////////////////////////////////////////////////////////////////////
-void Model::computeTangents() {
-
-    //make sure tangents don't already exist
-    if ( hasTangents()) 
-        return;
-
-    //make sure that the model has texcoords
-    if ( !hasTexCoords())
-        return;
-
-    //alloc memory and initialize to 0
-    _tanIndex.reserve( _pIndex.size());
-    _sTangents.resize( (_texCoords.size() / _tcSize) * 3, 0.0f);
-
-    // the collision map records any alternate locations for the tangents
-    std::multimap< GLuint, GLuint> collisionMap;
-
-    //process each face, compute the tangent and try to add it
-    for (int ii = 0; ii < (int)_pIndex.size(); ii += 3) {
-        vec3f p0(&_positions[_pIndex[ii]*_posSize]);
-        vec3f p1(&_positions[_pIndex[ii+1]*_posSize]);
-        vec3f p2(&_positions[_pIndex[ii+2]*_posSize]);
-        vec2f st0(&_texCoords[_tIndex[ii]*_tcSize]);
-        vec2f st1(&_texCoords[_tIndex[ii+1]*_tcSize]);
-        vec2f st2(&_texCoords[_tIndex[ii+2]*_tcSize]);
-
-        //compute the edge and tc differentials
-        vec3f dp0 = p1 - p0;
-        vec3f dp1 = p2 - p0;
-        vec2f dst0 = st1 - st0;
-        vec2f dst1 = st2 - st0;
-
-        float factor = 1.0f / (dst0[0] * dst1[1] - dst1[0] * dst0[1]);
-
-        //compute sTangent
-        vec3f sTan;
-        sTan[0] = dp0[0] * dst1[1] - dp1[0] * dst0[1];
-        sTan[1] = dp0[1] * dst1[1] - dp1[1] * dst0[1];
-        sTan[2] = dp0[2] * dst1[1] - dp1[2] * dst0[1];
-        sTan *= factor;
-
-        //should this really renormalize?
-        sTan =normalize( sTan);
-
-        //loop over the vertices, to update the tangents
-        for (int jj = 0; jj < 3; jj++) {
-            //get the present accumulated tangnet
-            vec3f curTan(&_sTangents[_tIndex[ii + jj]*3]);
-
-            //check to see if it is uninitialized, if so, insert it
-            if (curTan[0] == 0.0f && curTan[1] == 0.0f && curTan[2] == 0.0f) {
-                _sTangents[_tIndex[ii + jj]*3] = sTan[0];
-                _sTangents[_tIndex[ii + jj]*3+1] = sTan[1];
-                _sTangents[_tIndex[ii + jj]*3+2] = sTan[2];
-                _tanIndex.push_back(_tIndex[ii + jj]);
-            }
-            else {
-                //check for agreement
-                curTan = normalize( curTan);
-
-                if ( dot( curTan, sTan) >= cosf( 3.1415926f * 0.333333f)) {
-                    //tangents are in agreement
-                    _sTangents[_tIndex[ii + jj]*3] += sTan[0];
-                    _sTangents[_tIndex[ii + jj]*3+1] += sTan[1];
-                    _sTangents[_tIndex[ii + jj]*3+2] += sTan[2];
-                    _tanIndex.push_back(_tIndex[ii + jj]);
-                }
-                else {
-                    //tangents disagree, this vertex must be split in tangent space 
-                    std::multimap< GLuint, GLuint>::iterator it = collisionMap.find( _tIndex[ii + jj]);
-
-                    //loop through all hits on this index, until one agrees
-                    while ( it != collisionMap.end() && it->first == _tIndex[ii + jj]) {
-                        curTan = vec3f( &_sTangents[it->second*3]);
-
-                        curTan = normalize(curTan);
-                        if ( dot( curTan, sTan) >= cosf( 3.1415926f * 0.333333f))
-                            break;
-
-                        it++;
-                    }
-
-                    //check for agreement with an earlier collision
-                    if ( it != collisionMap.end() && it->first == _tIndex[ii + jj]) {
-                        //found agreement with an earlier collision, use that one
-                        _sTangents[it->second*3] += sTan[0];
-                        _sTangents[it->second*3+1] += sTan[1];
-                        _sTangents[it->second*3+2] += sTan[2];
-                        _tanIndex.push_back(it->second);
-                    }
-                    else {
-                        //we have a new collision, create a new tangent
-                        GLuint target = (GLuint)_sTangents.size() / 3;
-                        _sTangents.push_back( sTan[0]);
-                        _sTangents.push_back( sTan[1]);
-                        _sTangents.push_back( sTan[2]);
-                        _tanIndex.push_back( target);
-                        collisionMap.insert( std::multimap< GLuint, GLuint>::value_type( _tIndex[ii + jj], target));
-                    }
-                } // else ( if tangent agrees)
-            } // else ( if tangent is uninitialized )
-        } // for jj = 0 to 2 ( iteration of triangle verts)
-    } // for ii = 0 to numFaces *3 ( iterations over triangle faces
-
-    //normalize all the tangents
-    for (int ii = 0; ii < (int)_sTangents.size(); ii += 3) {
-        vec3f tan(&_sTangents[ii]);
-        tan = normalize(tan);
-        _sTangents[ii] = tan[0];
-        _sTangents[ii+1] = tan[1];
-        _sTangents[ii+2] = tan[2];
-    }
-}
-//
-//compute vertex normals
-//////////////////////////////////////////////////////////////////////
-void Model::computeNormals() {
-
-    // don't recompute normals
-    if (hasNormals())
-        return;
-
-    //allocate and initialize the normal values
-    _normals.resize( (_positions.size() / _posSize) * 3, 0.0f);
-    _nIndex.reserve( _pIndex.size());
-
-    // the collision map records any alternate locations for the normals
-    std::multimap< GLuint, GLuint> collisionMap;
-
-    //iterate over the faces, computing the face normal and summing it them
-    for ( int ii = 0; ii < (int)_pIndex.size(); ii += 3) {
-        vec3f p0(&_positions[_pIndex[ii]*_posSize]);
-        vec3f p1(&_positions[_pIndex[ii+1]*_posSize]);
-        vec3f p2(&_positions[_pIndex[ii+2]*_posSize]);
-
-        //compute the edge vectors
-        vec3f dp0 = p1 - p0;
-        vec3f dp1 = p2 - p0;
-
-        vec3f fNormal = cross( dp0, dp1); // compute the face normal
-        vec3f nNormal = normalize(fNormal);  // compute a normalized normal
-
-        //iterate over the vertices, adding the face normal influence to each
-        for ( int jj = 0; jj < 3; jj++) {
-            // get the current normal from the default location (index shared with position) 
-            vec3f cNormal( &_normals[_pIndex[ii + jj]*3]);
-
-            // check to see if this normal has not yet been touched 
-            if ( cNormal[0] == 0.0f && cNormal[1] == 0.0f && cNormal[2] == 0.0f) {
-                // first instance of this index, just store it as is
-                _normals[_pIndex[ii + jj]*3] = fNormal[0];
-                _normals[_pIndex[ii + jj]*3 + 1] = fNormal[1];
-                _normals[_pIndex[ii + jj]*3 + 2] = fNormal[2];
-                _nIndex.push_back( _pIndex[ii + jj]); 
-            }
-            else {
-                // check for agreement
-                cNormal = normalize( cNormal);
-
-                if ( dot( cNormal, nNormal) >= cosf( 3.1415926f * 0.333333f)) {
-                    //normal agrees, so add it
-                    _normals[_pIndex[ii + jj]*3] += fNormal[0];
-                    _normals[_pIndex[ii + jj]*3 + 1] += fNormal[1];
-                    _normals[_pIndex[ii + jj]*3 + 2] += fNormal[2];
-                    _nIndex.push_back( _pIndex[ii + jj]);
-                }
-                else {
-                    //normals disagree, this vertex must be along a facet edge 
-                    std::multimap< GLuint, GLuint>::iterator it = collisionMap.find( _pIndex[ii + jj]);
-
-                    //loop through all hits on this index, until one agrees
-                    while ( it != collisionMap.end() && it->first == _pIndex[ii + jj]) {
-                        cNormal = normalize(vec3f( &_normals[it->second*3]));
-
-                        if ( dot( cNormal, nNormal) >= cosf( 3.1415926f * 0.333333f))
-                            break;
-
-                        it++;
-                    }
-
-                    //check for agreement with an earlier collision
-                    if ( it != collisionMap.end() && it->first == _pIndex[ii + jj]) {
-                        //found agreement with an earlier collision, use that one
-                        _normals[it->second*3] += fNormal[0];
-                        _normals[it->second*3+1] += fNormal[1];
-                        _normals[it->second*3+2] += fNormal[2];
-                        _nIndex.push_back(it->second);
-                    }
-                    else {
-                        //we have a new collision, create a new normal
-                        GLuint target = (GLuint)_normals.size() / 3;
-                        _normals.push_back( fNormal[0]);
-                        _normals.push_back( fNormal[1]);
-                        _normals.push_back( fNormal[2]);
-                        _nIndex.push_back( target);
-                        collisionMap.insert( std::multimap< GLuint, GLuint>::value_type( _pIndex[ii + jj], target));
-                    }
-                } // else ( if normal agrees)
-            } // else (if normal is uninitialized)
-        } // for each vertex in triangle
-    } // for each face
-
-    //now normalize all the normals
-    for ( int ii = 0; ii < (int)_normals.size(); ii += 3) {
-        vec3f norm(&_normals[ii]);
-        norm =normalize(norm);
-        _normals[ii] = norm[0];
-        _normals[ii+1] = norm[1];
-        _normals[ii+2] = norm[2];
-    }
-
-}
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-void Model::computeBoundingBox( vec3f &minVal, vec3f &maxVal) {
-
-    if ( _positions.empty())
-        return;
-
-    minVal = vec3f( 1e10f, 1e10f, 1e10f);
-    maxVal = -minVal;
-
-    for ( vector<float>::iterator pit = _positions.begin() + _posSize; pit < _positions.end(); pit += _posSize) {
-        minVal = min( minVal, vec3f( &pit[0]));
-        maxVal = max( maxVal, vec3f( &pit[0]));
-    }
-}
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-void Model::rescale( float radius) {
-
-    if ( _positions.empty())
-        return;
-
-    vec3f minVal, maxVal;
-    computeBoundingBox(minVal, maxVal);
-
-    vec3f r = 0.5f*(maxVal - minVal);
-    vec3f center = minVal + r;
-//    float oldRadius = length(r);
-    float oldRadius = std::max(r.x, std::max(r.y, r.z));
-    float scale = radius / oldRadius;
-
-    for ( vector<float>::iterator pit = _positions.begin(); pit < _positions.end(); pit += _posSize) {
-        vec3f np = scale*(vec3f(&pit[0]) - center);
-        pit[0] = np.x;
-        pit[1] = np.y;
-        pit[2] = np.z;
-    }
-}
-
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-void Model::clearNormals(){
-    _normals.clear();
-    _nIndex.clear();
-}
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-void Model::clearTexCoords(){
-    _texCoords.clear();
-    _tIndex.clear();
-}
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-void Model::clearTangents(){
-    _sTangents.clear();
-    _tanIndex.clear();
-}
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-void Model::clearColors(){
-    _colors.clear();
-    _cIndex.clear();
-}
-
-//
-//
-//////////////////////////////////////////////////////////////////////
-void Model::removeDegeneratePrims() {
-    GLuint *pSrc = 0, *pDst = 0, *tSrc = 0, *tDst = 0, *nSrc = 0, *nDst = 0, *cSrc = 0, *cDst = 0;
-    int degen = 0;
-
-    pSrc = &_pIndex[0];
-    pDst = pSrc;
-
-    if (hasTexCoords()) {
-        tSrc = &_tIndex[0];
-        tDst = tSrc;
-    }
-
-    if (hasNormals()) {
-        nSrc = &_nIndex[0];
-        nDst = nSrc;
-    }
-
-    if (hasColors()) {
-        cSrc =&_cIndex[0];
-        cDst = cSrc;
-    }
-
-    for (int ii = 0; ii < (int)_pIndex.size(); ii += 3, pSrc += 3, tSrc += 3, nSrc += 3, cSrc += 3) {
-        if ( pSrc[0] == pSrc[1] || pSrc[0] == pSrc[2] || pSrc[1] == pSrc[2]) {
-            degen++;
-            continue; //skip updating the dest
-        }
-
-        for (int jj = 0; jj < 3; jj++) {
-            *pDst++ = pSrc[jj];
-
-            if (hasTexCoords())
-                *tDst++ = tSrc[jj];
-
-            if (hasNormals())
-                *nDst++ = nSrc[jj];
-
-            if (hasColors())
-                *cDst++ = cSrc[jj];
-        }
-    }
-
-    _pIndex.resize( _pIndex.size() - degen * 3);
-
-    if (hasTexCoords())
-        _tIndex.resize( _tIndex.size() - degen * 3);
-
-    if (hasNormals())
-        _nIndex.resize( _nIndex.size() - degen * 3);
-
-    if (hasColors())
-        _cIndex.resize( _cIndex.size() - degen * 3);
-
-}
-
-};
diff --git a/nvcommon/nvModel/src/nvModelObj.cpp b/nvcommon/nvModel/src/nvModelObj.cpp
deleted file mode 100644
index 8f9c717..0000000
--- a/nvcommon/nvModel/src/nvModelObj.cpp
+++ /dev/null
@@ -1,314 +0,0 @@
-//
-// nvModelObj.cpp - Model support class
-//
-// The nvModel class implements an interface for a multipurpose model
-// object. This class is useful for loading and formatting meshes
-// for use by OpenGL. It can compute face normals, tangents, and
-// adjacency information. The class supports the obj file format.
-//
-// This file implements the obj file parser and translator.
-//
-// Author: Evan Hart
-// Email: sdkfeedback@nvidia.com
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-#include "nvModel.h"
-
-#include <stdio.h>
-
-#define BUF_SIZE 256
-
-using std::vector;
-
-static void skipLine(char * buf, int size, FILE * fp)
-{
-	do {
-		buf[size-1] = '$';
-		char* s = fgets(buf, size, fp);
-                (void)s;
-	} while (buf[size-1] != '$');
-}
-
-
-namespace nv {
-
-bool Model::loadObjFromFile( const char *file, Model &m) {
-    FILE *fp;
-
-    fp = fopen( file, "r");
-    if (!fp) {
-        return false;
-    }
-
-    char buf[BUF_SIZE];
-    float val[4];
-    int idx[3][3];
-    int match;
-    bool vtx4Comp = false;
-    bool tex3Comp = false;
-    bool hasTC = false;
-    bool hasNormals = false;
-    int ret;
-
-    while ( fscanf( fp, "%s", buf) != EOF ) {
-
-        switch (buf[0]) {
-            case '#':
-                //comment line, eat the remainder
-				skipLine( buf, BUF_SIZE, fp);
-                break;
-
-            case 'v':
-                switch (buf[1]) {
-                
-                    case '\0':
-                        //vertex, 3 or 4 components
-                        val[3] = 1.0f;  //default w coordinate
-                        match = fscanf( fp, "%f %f %f %f", &val[0], &val[1], &val[2], &val[3]);
-                        m._positions.push_back( val[0]);
-                        m._positions.push_back( val[1]);
-                        m._positions.push_back( val[2]);
-                        m._positions.push_back( val[3]);
-                        vtx4Comp |= ( match == 4);
-                        assert( match > 2 && match < 5);
-                        break;
-
-                    case 'n':
-                        //normal, 3 components
-                        match = fscanf( fp, "%f %f %f", &val[0], &val[1], &val[2]);
-                        m._normals.push_back( val[0]);
-                        m._normals.push_back( val[1]);
-                        m._normals.push_back( val[2]);
-                        assert( match == 3);
-                        break;
-
-                    case 't':
-                        //texcoord, 2 or 3 components
-                        val[2] = 0.0f;  //default r coordinate
-                        val[3] = 0.0f;  //default q coordinate
-                        match = fscanf( fp, "%f %f %f %f", &val[0], &val[1], &val[2], &val[3]);
-                        m._texCoords.push_back( val[0]);
-                        m._texCoords.push_back( val[1]);
-                        m._texCoords.push_back( val[2]);
-                        tex3Comp |= ( match == 3);
-                        assert( match > 1 && match < 4);
-                        break;
-                }
-                break;
-
-            case 'f':
-                //face
-                ret = fscanf( fp, "%s", buf);
-
-                //determine the type, and read the initial vertex, all entries in a face must have the same format
-                if ( sscanf( buf, "%d//%d", &idx[0][0], &idx[0][1]) == 2) {
-                    //This face has vertex and normal indices
-
-                    //remap them to the right spot
-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
-                    idx[0][1] = (idx[0][1] > 0) ? (idx[0][1] - 1) : ((int)m._normals.size() - idx[0][1]);
-
-                    //grab the second vertex to prime
-                    ret = fscanf( fp, "%d//%d", &idx[1][0], &idx[1][1]);
-
-                    //remap them to the right spot
-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
-                    idx[1][1] = (idx[1][1] > 0) ? (idx[1][1] - 1) : ((int)m._normals.size() - idx[1][1]);
-
-                    //create the fan
-                    while ( fscanf( fp, "%d//%d", &idx[2][0], &idx[2][1]) == 2) {
-                        //remap them to the right spot
-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
-                        idx[2][1] = (idx[2][1] > 0) ? (idx[2][1] - 1) : ((int)m._normals.size() - idx[2][1]);
-
-                        //add the indices
-                        for (int ii = 0; ii < 3; ii++) {
-                            m._pIndex.push_back( idx[ii][0]);
-                            m._nIndex.push_back( idx[ii][1]);
-                            m._tIndex.push_back(0); // dummy index, to ensure that the buffers are of identical size
-                        }
-                        
-                        //prepare for the next iteration
-                        idx[1][0] = idx[2][0];
-                        idx[1][1] = idx[2][1];
-                    }
-                    hasNormals = true;
-                }
-                else if ( sscanf( buf, "%d/%d/%d", &idx[0][0], &idx[0][1], &idx[0][2]) == 3) {
-                    //This face has vertex, texture coordinate, and normal indices
-
-                    //remap them to the right spot
-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
-                    idx[0][1] = (idx[0][1] > 0) ? (idx[0][1] - 1) : ((int)m._texCoords.size() - idx[0][1]);
-                    idx[0][2] = (idx[0][2] > 0) ? (idx[0][2] - 1) : ((int)m._normals.size() - idx[0][2]);
-
-                    //grab the second vertex to prime
-                    ret = fscanf( fp, "%d/%d/%d", &idx[1][0], &idx[1][1], &idx[1][2]);
-
-                    //remap them to the right spot
-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
-                    idx[1][1] = (idx[1][1] > 0) ? (idx[1][1] - 1) : ((int)m._texCoords.size() - idx[1][1]);
-                    idx[1][2] = (idx[1][2] > 0) ? (idx[1][2] - 1) : ((int)m._normals.size() - idx[1][2]);
-
-                    //create the fan
-                    while ( fscanf( fp, "%d/%d/%d", &idx[2][0], &idx[2][1], &idx[2][2]) == 3) {
-                        //remap them to the right spot
-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
-                        idx[2][1] = (idx[2][1] > 0) ? (idx[2][1] - 1) : ((int)m._texCoords.size() - idx[2][1]);
-                        idx[2][2] = (idx[2][2] > 0) ? (idx[2][2] - 1) : ((int)m._normals.size() - idx[2][2]);
-
-                        //add the indices
-                        for (int ii = 0; ii < 3; ii++) {
-                            m._pIndex.push_back( idx[ii][0]);
-                            m._tIndex.push_back( idx[ii][1]);
-                            m._nIndex.push_back( idx[ii][2]);
-                        }
-                        
-                        //prepare for the next iteration
-                        idx[1][0] = idx[2][0];
-                        idx[1][1] = idx[2][1];
-                        idx[1][2] = idx[2][2];
-                    }
-
-                    hasTC = true;
-                    hasNormals = true;
-                }
-                else if ( sscanf( buf, "%d/%d", &idx[0][0], &idx[0][1]) == 2) {
-                    //This face has vertex and texture coordinate indices
-
-                    //remap them to the right spot
-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
-                    idx[0][1] = (idx[0][1] > 0) ? (idx[0][1] - 1) : ((int)m._texCoords.size() - idx[0][1]);
-
-                    //grab the second vertex to prime
-                    ret = fscanf( fp, "%d/%d", &idx[1][0], &idx[1][1]);
-
-                    //remap them to the right spot
-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
-                    idx[1][1] = (idx[1][1] > 0) ? (idx[1][1] - 1) : ((int)m._texCoords.size() - idx[1][1]);
-
-                    //create the fan
-                    while ( fscanf( fp, "%d/%d", &idx[2][0], &idx[2][1]) == 2) {
-                        //remap them to the right spot
-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
-                        idx[2][1] = (idx[2][1] > 0) ? (idx[2][1] - 1) : ((int)m._texCoords.size() - idx[2][1]);
-
-                        //add the indices
-                        for (int ii = 0; ii < 3; ii++) {
-                            m._pIndex.push_back( idx[ii][0]);
-                            m._tIndex.push_back( idx[ii][1]);
-                            m._nIndex.push_back( 0); //dummy normal index to keep everything in synch
-                        }
-                        
-                        //prepare for the next iteration
-                        idx[1][0] = idx[2][0];
-                        idx[1][1] = idx[2][1];
-                    }
-                    hasTC = true;
-                }
-                else if ( sscanf( buf, "%d", &idx[0][0]) == 1) {
-                    //This face has only vertex indices
-
-                    //remap them to the right spot
-                    idx[0][0] = (idx[0][0] > 0) ? (idx[0][0] - 1) : ((int)m._positions.size() - idx[0][0]);
-
-                    //grab the second vertex to prime
-                    ret = fscanf( fp, "%d", &idx[1][0]);
-
-                    //remap them to the right spot
-                    idx[1][0] = (idx[1][0] > 0) ? (idx[1][0] - 1) : ((int)m._positions.size() - idx[1][0]);
-
-                    //create the fan
-                    while ( fscanf( fp, "%d", &idx[2][0]) == 1) {
-                        //remap them to the right spot
-                        idx[2][0] = (idx[2][0] > 0) ? (idx[2][0] - 1) : ((int)m._positions.size() - idx[2][0]);
-
-                        //add the indices
-                        for (int ii = 0; ii < 3; ii++) {
-                            m._pIndex.push_back( idx[ii][0]);
-                            m._tIndex.push_back( 0); //dummy index to keep things in synch
-                            m._nIndex.push_back( 0); //dummy normal index to keep everything in synch
-                        }
-                        
-                        //prepare for the next iteration
-                        idx[1][0] = idx[2][0];
-                    }
-                }
-                else {
-                    //bad format
-                    assert(0);
-                    skipLine( buf, BUF_SIZE, fp);
-                }
-                break;
-
-            case 's':
-            case 'g':
-            case 'u':
-                //all presently ignored
-            default:
-				skipLine( buf, BUF_SIZE, fp);
-
-        }
-        (void)ret;
-    }
-
-    fclose(fp);
-
-    //post-process data
-
-    //free anything that ended up being unused
-    if (!hasNormals) {
-        m._normals.clear();
-        m._nIndex.clear();
-    }
-
-    if (!hasTC) {
-        m._texCoords.clear();
-        m._tIndex.clear();
-    }
-
-    //set the defaults as the worst-case for an obj file
-    m._posSize = 4;
-    m._tcSize = 3;
-
-    //compact to 3 component vertices if possible
-    if (!vtx4Comp) {
-        vector<float>::iterator src = m._positions.begin();
-        vector<float>::iterator dst = m._positions.begin();
-
-        for ( ; src < m._positions.end(); ) {
-            *(dst++) = *(src++);
-            *(dst++) = *(src++);
-            *(dst++) = *(src++);
-            src++;
-        }
-
-        m._positions.resize( (m._positions.size() / 4) * 3);
-
-        m._posSize = 3;
-    }
-
-    //compact to 2 component tex coords if possible
-    if (!tex3Comp) {
-        vector<float>::iterator src = m._texCoords.begin();
-        vector<float>::iterator dst = m._texCoords.begin();
-
-        for ( ; src < m._texCoords.end(); ) {
-            *(dst++) = *(src++);
-            *(dst++) = *(src++);
-            src++;
-        }
-
-        m._texCoords.resize( (m._texCoords.size() / 3) * 2);
-
-        m._tcSize = 2; 
-    }
-
-    return true;
-}
-
-
-};
-
diff --git a/nvcommon/nvModel/src/nvModelQuery.cpp b/nvcommon/nvModel/src/nvModelQuery.cpp
deleted file mode 100644
index c0b3e08..0000000
--- a/nvcommon/nvModel/src/nvModelQuery.cpp
+++ /dev/null
@@ -1,314 +0,0 @@
-//
-// nvModelQuery.h - Model support class
-//
-// The nvModel class implements an interface for a multipurpose model
-// object. This class is useful for loading and formatting meshes
-// for use by OpenGL. It can compute face normals, tangents, and
-// adjacency information. The class supports the obj file format.
-//
-// This function implements the query functions. (number of vertices, etc)
-//
-// Author: Evan Hart
-// Email: sdkfeedback@nvidia.com
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-
-#include "nvModel.h"
-
-//fix for non-standard naming
-#ifdef WIN32
-#define strcasecmp _stricmp
-#endif
-
-using std::vector;
-
-namespace nv {
-
-//
-//
-////////////////////////////////////////////////////////////
-bool Model::hasNormals() const {
-    return _normals.size() > 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-bool Model::hasTexCoords() const {
-    return _texCoords.size() > 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-bool Model::hasTangents() const {
-    return _sTangents.size() > 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-bool Model::hasColors() const {
-    return _colors.size() > 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getPositionSize() const {
-    return _posSize;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getNormalSize() const {
-    return 3;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getTexCoordSize() const {
-    return _tcSize;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getTangentSize() const {
-    return 3;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getColorSize() const {
-    return _cSize;
-}
-
-
-//raw data access functions
-//  These are to be used to get the raw array data from the file, each array has its own index
-
-//
-//
-////////////////////////////////////////////////////////////
-const float* Model::getPositions() const {
-    return ( _positions.size() > 0) ? &(_positions[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const float* Model::getNormals() const {
-    return ( _normals.size() > 0) ? &(_normals[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const float* Model::getTexCoords() const {
-    return ( _texCoords.size() > 0) ? &(_texCoords[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const float* Model::getTangents() const {
-    return ( _sTangents.size() > 0) ? &(_sTangents[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const float* Model::getColors() const {
-    return ( _colors.size() > 0) ? &(_colors[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const GLuint* Model::getPositionIndices() const {
-    return ( _pIndex.size() > 0) ? &(_pIndex[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const GLuint* Model::getNormalIndices() const {
-    return ( _nIndex.size() > 0) ? &(_nIndex[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const GLuint* Model::getTexCoordIndices() const {
-    return ( _tIndex.size() > 0) ? &(_tIndex[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const GLuint* Model::getTangentIndices() const {
-    return ( _tanIndex.size() > 0) ? &(_tanIndex[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const GLuint* Model::getColorIndices() const {
-    return ( _cIndex.size() > 0) ? &(_cIndex[0]) : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getPositionCount() const {
-    return (_posSize > 0) ? (int)_positions.size() / _posSize : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getNormalCount() const {
-    return (int)_normals.size() / 3;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getTexCoordCount() const {
-    return (_tcSize > 0) ? (int)_texCoords.size() / _tcSize : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getTangentCount() const {
-    return (int)_sTangents.size() / 3;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getColorCount() const {
-    return (_cSize > 0) ? (int)_colors.size() / _cSize : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getIndexCount() const {
-    return (int)_pIndex.size();
-}
-
-//compiled data access functions
-
-//
-//
-////////////////////////////////////////////////////////////
-const float* Model::getCompiledVertices() const {
-    return (_vertices.size() > 0) ? &_vertices[0] : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-const GLuint* Model::getCompiledIndices( Model::PrimType prim) const {
-    switch (prim) {
-        case Model::eptPoints:
-            return (_indices[0].size() > 0) ? &_indices[0][0] : 0;
-        case Model::eptEdges:
-            return (_indices[1].size() > 0) ? &_indices[1][0] : 0;
-        case Model::eptTriangles:
-            return (_indices[2].size() > 0) ? &_indices[2][0] : 0;
-        case Model::eptTrianglesWithAdjacency:
-            return (_indices[3].size() > 0) ? &_indices[3][0] : 0;
-        default:
-            break;
-    }
-
-    return 0; 
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledPositionOffset() const {
-    return _pOffset;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledNormalOffset() const {
-    return _nOffset;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledTexCoordOffset() const {
-    return _tcOffset;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledTangentOffset() const {
-    return _sTanOffset;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledColorOffset() const {
-    return _cOffset;
-}
-
-// returns the size of the merged vertex in # of floats
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledVertexSize() const {
-    return _vtxSize;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledVertexCount() const {
-    return (_vtxSize > 0) ? (int)_vertices.size() / _vtxSize : 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getCompiledIndexCount( Model::PrimType prim) const {
-    switch (prim) {
-        case Model::eptPoints:
-            return (int)_indices[0].size();
-        case Model::eptEdges:
-            return (int)_indices[1].size();
-        case Model::eptTriangles:
-            return (int)_indices[2].size();
-        case Model::eptTrianglesWithAdjacency:
-            return (int)_indices[3].size();
-        default:
-            break;
-    }
-
-    return 0;
-}
-
-//
-//
-////////////////////////////////////////////////////////////
-int Model::getOpenEdgeCount() const {
-    return _openEdges;
-}
-
-};
-
diff --git a/nvcommon/src/framebufferObject.cpp b/nvcommon/src/framebufferObject.cpp
deleted file mode 100644
index 4de6734..0000000
--- a/nvcommon/src/framebufferObject.cpp
+++ /dev/null
@@ -1,342 +0,0 @@
-/*
-  Copyright (c) 2005, 
-      Aaron Lefohn    (lefohn@cs.ucdavis.edu)
-      Robert Strzodka (strzodka@stanford.edu)
-      Adam Moerschell (atmoerschell@ucdavis.edu)
-  All rights reserved.
-
-  This software is licensed under the BSD open-source license. See
-  http://www.opensource.org/licenses/bsd-license.php for more detail.
-
-  *************************************************************
-  Redistribution and use in source and binary forms, with or 
-  without modification, are permitted provided that the following 
-  conditions are met:
-
-  Redistributions of source code must retain the above copyright notice, 
-  this list of conditions and the following disclaimer. 
-
-  Redistributions in binary form must reproduce the above copyright notice, 
-  this list of conditions and the following disclaimer in the documentation 
-  and/or other materials provided with the distribution. 
-
-  Neither the name of the University of Californa, Davis nor the names of 
-  the contributors may be used to endorse or promote products derived 
-  from this software without specific prior written permission.
-
-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
-  OF SUCH DAMAGE.
-*/
-
-#include "framebufferObject.h"
-#include <iostream>
-using namespace std;
-
-FramebufferObject::FramebufferObject()
-  : m_fboId(_GenerateFboId()),
-    m_savedFboId(0)
-{
-  // Bind this FBO so that it actually gets created now
-  _GuardedBind();
-  _GuardedUnbind();
-}
-
-FramebufferObject::~FramebufferObject() 
-{
-  glDeleteFramebuffersEXT(1, &m_fboId);
-}
-
-void FramebufferObject::Bind() 
-{
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_fboId);
-}
-
-void FramebufferObject::Disable() 
-{
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
-}
-
-void
-FramebufferObject::AttachTexture( GLenum texTarget, GLuint texId, 
-                                  GLenum attachment, int mipLevel, int zSlice )
-{
-  _GuardedBind();
-
-  /*
-#ifndef NDEBUG
-  if( GetAttachedId(attachment) != texId ) {
-#endif
-  */
-
-    _FramebufferTextureND( attachment, texTarget,
-                           texId, mipLevel, zSlice );
-
-/*
-#ifndef NDEBUG
-  }
-  else {
-    cerr << "FramebufferObject::AttachTexture PERFORMANCE WARNING:\n"
-      << "\tRedundant bind of texture (id = " << texId << ").\n"
-      << "\tHINT : Compile with -DNDEBUG to remove this warning.\n";
-  }
-#endif
-*/
-
-  _GuardedUnbind();
-}
-
-void
-FramebufferObject::AttachTextures( int numTextures, GLenum texTarget[], GLuint texId[],
-                                  GLenum attachment[], int mipLevel[], int zSlice[] )
-{
-  for(int i = 0; i < numTextures; ++i) {
-    AttachTexture( texTarget[i], texId[i], 
-                   attachment ? attachment[i] : (GL_COLOR_ATTACHMENT0_EXT + i), 
-                   mipLevel ? mipLevel[i] : 0, 
-                   zSlice ? zSlice[i] : 0 );
-  }
-}
-
-void
-FramebufferObject::AttachRenderBuffer( GLuint buffId, GLenum attachment )
-{
-  _GuardedBind();
-
-#ifndef NDEBUG
-  if( GetAttachedId(attachment) != buffId ) {
-#endif
-
-    glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, attachment, 
-                                 GL_RENDERBUFFER_EXT, buffId);
-
-#ifndef NDEBUG
-  }
-  else {
-    cerr << "FramebufferObject::AttachRenderBuffer PERFORMANCE WARNING:\n"
-      << "\tRedundant bind of Renderbuffer (id = " << buffId << ")\n"
-      << "\tHINT : Compile with -DNDEBUG to remove this warning.\n";
-  }
-#endif
-
-  _GuardedUnbind();
-}
-
-void
-FramebufferObject::AttachRenderBuffers( int numBuffers, GLuint buffId[], GLenum attachment[] )
-{
-  for(int i = 0; i < numBuffers; ++i) {
-    AttachRenderBuffer( buffId[i], 
-                        attachment ? attachment[i] : (GL_COLOR_ATTACHMENT0_EXT + i) );
-  }
-}
-
-void
-FramebufferObject::Unattach( GLenum attachment )
-{
-  _GuardedBind();
-  GLenum type = GetAttachedType(attachment);
-
-  switch(type) {
-  case GL_NONE:
-    break;
-  case GL_RENDERBUFFER_EXT:
-    AttachRenderBuffer( 0, attachment );
-    break;
-  case GL_TEXTURE:
-    AttachTexture( GL_TEXTURE_2D, 0, attachment );
-    break;
-  default:
-    cerr << "FramebufferObject::unbind_attachment ERROR: Unknown attached resource type\n";
-  }
-  _GuardedUnbind();
-}
-
-void
-FramebufferObject::UnattachAll()
-{
-  int numAttachments = GetMaxColorAttachments();
-  for(int i = 0; i < numAttachments; ++i) {
-    Unattach( GL_COLOR_ATTACHMENT0_EXT + i );
-  }
-}
-
-GLint FramebufferObject::GetMaxColorAttachments()
-{
-  GLint maxAttach = 0;
-  glGetIntegerv( GL_MAX_COLOR_ATTACHMENTS_EXT, &maxAttach );
-  return maxAttach;
-}
-
-GLuint FramebufferObject::_GenerateFboId()
-{
-  GLuint id = 0;
-  glGenFramebuffersEXT(1, &id);
-  return id;
-}
-
-void FramebufferObject::_GuardedBind() 
-{
-  // Only binds if m_fboId is different than the currently bound FBO
-  glGetIntegerv( GL_FRAMEBUFFER_BINDING_EXT, &m_savedFboId );
-  if (m_fboId != (GLuint)m_savedFboId) {
-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_fboId);
-  }
-}
-
-void FramebufferObject::_GuardedUnbind() 
-{
-  // Returns FBO binding to the previously enabled FBO
-  if (m_fboId != (GLuint)m_savedFboId) {
-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, (GLuint)m_savedFboId);
-  }
-}
-
-void
-FramebufferObject::_FramebufferTextureND( GLenum attachment, GLenum texTarget,
-                                         GLuint texId, int mipLevel,
-                                         int zSlice )
-{
-  if (texTarget == GL_TEXTURE_1D) {
-    glFramebufferTexture1DEXT( GL_FRAMEBUFFER_EXT, attachment,
-                               GL_TEXTURE_1D, texId, mipLevel );
-  }
-  else if (texTarget == GL_TEXTURE_3D) {
-    glFramebufferTexture3DEXT( GL_FRAMEBUFFER_EXT, attachment,
-                               GL_TEXTURE_3D, texId, mipLevel, zSlice );
-  }
-  else {
-    // Default is GL_TEXTURE_2D, GL_TEXTURE_RECTANGLE_ARB, or cube faces
-    glFramebufferTexture2DEXT( GL_FRAMEBUFFER_EXT, attachment,
-                               texTarget, texId, mipLevel );
-  }
-}
-
-#ifndef NDEBUG
-bool FramebufferObject::IsValid( ostream& ostr )
-{
-  _GuardedBind();
-
-  bool isOK = false;
-
-  GLenum status;                                            
-  status = glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT);
-  switch(status) {                                          
-  case GL_FRAMEBUFFER_COMPLETE_EXT: // Everything's OK
-    isOK = true;
-    break;
-  case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT\n";
-    isOK = false;
-    break;
-  case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT\n";
-    isOK = false;
-    break;
-  case GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT\n";
-    isOK = false;
-    break;
-  case GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT\n";
-    isOK = false;
-    break;
-  case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT\n";
-    isOK = false;
-    break;
-  case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT\n";
-    isOK = false;
-    break;
-  case GL_FRAMEBUFFER_UNSUPPORTED_EXT:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "GL_FRAMEBUFFER_UNSUPPORTED_EXT\n";
-    isOK = false;
-    break;
-  default:
-    ostr << "glift::CheckFramebufferStatus() ERROR:\n\t"
-      << "Unknown ERROR\n";
-    isOK = false;
-  }
-
-  _GuardedUnbind();
-  return isOK;
-}
-#endif // NDEBUG
-
-/// Accessors
-GLenum FramebufferObject::GetAttachedType( GLenum attachment )
-{
-  // Returns GL_RENDERBUFFER_EXT or GL_TEXTURE
-  _GuardedBind();
-  GLint type = 0;
-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
-                                           GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT, 
-                                           &type);
-  _GuardedUnbind();
-  return GLenum(type);
-}
-
-GLuint FramebufferObject::GetAttachedId( GLenum attachment )
-{
-  _GuardedBind();
-  GLint id = 0;
-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
-                                           GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT,
-                                           &id);
-  _GuardedUnbind();
-  return GLuint(id);
-}
-
-GLint FramebufferObject::GetAttachedMipLevel( GLenum attachment )
-{
-  _GuardedBind();
-  GLint level = 0;
-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
-                                           GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT, 
-                                           &level);
-  _GuardedUnbind();
-  return level;
-}
-
-GLint FramebufferObject::GetAttachedCubeFace( GLenum attachment )
-{
-  _GuardedBind();
-  GLint level = 0;
-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
-                                           GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT,
-                                           &level);
-  _GuardedUnbind();
-  return level;
-}
-
-GLint FramebufferObject::GetAttachedZSlice( GLenum attachment )
-{
-  _GuardedBind();
-  GLint slice = 0;
-  glGetFramebufferAttachmentParameterivEXT(GL_FRAMEBUFFER_EXT, attachment,
-                                           GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT,
-                                           &slice);
-  _GuardedUnbind();
-  return slice;
-}
-
-
-
diff --git a/nvcommon/src/nvTime.cpp b/nvcommon/src/nvTime.cpp
deleted file mode 100644
index 9eca5bf..0000000
--- a/nvcommon/src/nvTime.cpp
+++ /dev/null
@@ -1,115 +0,0 @@
-//
-// nvTime.cpp - Timer and perf counter classes
-//
-//
-// Author: Samuel Gateau
-// Email: sdkfeedback@nvidia.com
-//
-// Copyright (c) NVIDIA Corporation. All rights reserved.
-////////////////////////////////////////////////////////////////////////////////
-#include "nvTime.h"
-
-#ifdef WIN32
-#include <windows.h>
-#else
-#include <sys/time.h>
-#endif
-
-using namespace nv;
-
-/**
- * The inverse frequency of the CPU on which the thread is running and used
- * to measure the elapsed time.
- */
-double Timer::msInvFrequency = 0.0;
-	
-/**
- * initialize the inv frequency (done once on the first timer created.
- */
-void Timer::initializeClass()
-{
-	if (!msInvFrequency )
-	{
-#ifdef WIN32
-		LARGE_INTEGER lFreq;
-		QueryPerformanceFrequency(&lFreq);
-		msInvFrequency = 1.0 / double(lFreq.QuadPart);
-#else
-                msInvFrequency = 1.0;
-#endif
-	}
-}
-
-/**
- * Default constructor.
- */
-Timer::Timer() :
-	mStartTime(-1),
-	mLastQueryTime(-1)
-{
-	initializeClass();
-}
-
-/**
- * Destructor.
- */
-Timer::~Timer()
-{
-}
-
-/**
- * Start the timer (Reset total elapsed time).
- * Stop the timer.
- */
-void Timer::start()
-{
-	mStartTime = mLastQueryTime = queryAppTime();
-}
-
-void Timer::stop()
-{
-	mStartTime = mLastQueryTime = 0.0;
-}
-
-/** 
- * Get the total timer elapsed time since start [s].
- */
-double Timer::getTotalElapsedTime() const
-{
-	return queryAppTime() - mStartTime;
-}
-
-/** 
- * Get the timer elapsed time since last 
- * call to the same method or start [s].
- */
-double Timer::getElapsedTime() const
-{
-	if (isStarted())
-	{
-		double lTime = mLastQueryTime;
-		mLastQueryTime = queryAppTime();
-		return mLastQueryTime - lTime;
-	}
-	return 0.0;
-}
-
-/**
- * Query the current Application time.
- * It's a date expressed in s.
- */
-double Timer::queryAppTime()
-{
-#ifdef WIN32
-		LARGE_INTEGER lCount;
-		QueryPerformanceCounter(&lCount);
-		return (lCount.QuadPart * msInvFrequency);
-#else
-                double seconds;
-                timeval time;
-                gettimeofday(&time,0);
-                seconds = time.tv_sec + (time.tv_usec/1e6f);
-                return seconds;
-#endif
-}
-
diff --git a/nvcommon/src/renderVertexArray.cpp b/nvcommon/src/renderVertexArray.cpp
deleted file mode 100644
index 02c8e31..0000000
--- a/nvcommon/src/renderVertexArray.cpp
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
-  Render to vertex array
-
-  This class implements "render to vertex array" functionality using vertex and pixel buffer objects (VBO and PBO).
-
-  Operation:
-  1. A buffer object is created
-  2. The buffer object is bound to the pixel pack (destination) buffer
-  3. glReadPixels is used to read from the frame buffer to the buffer object
-  4. The buffer object is bound to the vertex array
-  5. Vertex array pointers are set
-  
-  Usage:
-  1. Create a floating point pbuffer
-  2. Create a RenderVertexArray object for each vertex attribute you want to render to
-  3. Render vertex data to pbuffer using a fragment program (could use multiple draw buffers here)
-  4. Call Read() method to read data from pbuffer to vertex array
-  5. Call SetPointer() method to set vertex array pointers
-  6. Set any other other static vertex array attribute pointers
-  6. Render geometry as usual using glDrawArrays or glDrawElements
-
-  sgreen 2/2004
-
-  Copyright (c) NVIDIA Corporation. All rights reserved.
-*/
-
-#include <stdio.h>
-#include <GL/glew.h>
-
-#include "renderVertexArray.h"
-
-RenderVertexArray::RenderVertexArray(int nverts, GLint size, GLenum type) :
-    m_nverts(nverts), m_size(size), m_usage(GL_STREAM_COPY), m_type(type)
-{
-    switch(m_type) {
-        case GL_HALF_FLOAT_NV:
-            m_bytes_per_component = 2; break;
-        case GL_FLOAT:
-            m_bytes_per_component = sizeof(float); break;
-        default:
-            fprintf(stderr, "Error: unsupported RenderVertexArray type\n");
-            return;
-    }
-
-    // create the buffer object
-    glGenBuffersARB(1, &m_buffer);
-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, m_buffer);
-    glBufferDataARB(GL_PIXEL_PACK_BUFFER_EXT, m_nverts*m_size*m_bytes_per_component, 0, m_usage); // undefined data
-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, 0);
-
-    // set equivalent image format
-    switch(m_size) {
-        case 1:
-            m_format = GL_LUMINANCE; break;
-        case 3:
-            m_format = GL_RGB; break;
-        case 4:
-            m_format = GL_RGBA; break;
-        default:
-            fprintf(stderr, "Error: unsupported RenderVertexArray size\n");
-            return;
-    }
-}
-
-RenderVertexArray::~RenderVertexArray()
-{
-    glDeleteBuffersARB(1, &m_buffer);
-}
-
-void
-RenderVertexArray::LoadData(void *data)
-{
-    // load data to buffer object
-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, m_buffer);
-    glBufferDataARB(GL_PIXEL_PACK_BUFFER_EXT, m_nverts*m_size*m_bytes_per_component, data, m_usage);
-
-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, 0);
-}
-
-void
-RenderVertexArray::Read(GLenum buffer, int w, int h, int offset)
-{
-    // bind buffer object to pixel pack buffer
-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, m_buffer);
-    // read from frame buffer to buffer object
-    glReadBuffer(buffer);
-    glReadPixels(0, 0, w, h, m_format, m_type, (GLvoid*)offset);
-
-    glBindBufferARB(GL_PIXEL_PACK_BUFFER_EXT, 0);
-}
-
-void
-RenderVertexArray::SetPointer(GLuint index, GLsizei stride, GLuint offset)
-{
-#ifdef _WIN32
-#  pragma warning( disable : 4312)
-#endif
-    // bind buffer object to vertex array 
-    glBindBufferARB(GL_ARRAY_BUFFER, m_buffer);
-    glVertexAttribPointerARB(index, m_size, m_type, GL_FALSE, stride, (GLvoid *) offset);
-#ifdef _WIN32
-#  pragma warning( default : 4312)
-#endif
-
-    glBindBufferARB(GL_ARRAY_BUFFER, 0);
-}
diff --git a/nvcommon/src/renderbuffer.cpp b/nvcommon/src/renderbuffer.cpp
deleted file mode 100644
index 7277e81..0000000
--- a/nvcommon/src/renderbuffer.cpp
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
-  Copyright (c) 2005, 
-	  Aaron Lefohn	(lefohn@cs.ucdavis.edu)
-	  Adam Moerschell (atmoerschell@ucdavis.edu)
-  All rights reserved.
-
-  This software is licensed under the BSD open-source license. See
-  http://www.opensource.org/licenses/bsd-license.php for more detail.
-
-  *************************************************************
-  Redistribution and use in source and binary forms, with or 
-  without modification, are permitted provided that the following 
-  conditions are met:
-
-  Redistributions of source code must retain the above copyright notice, 
-  this list of conditions and the following disclaimer. 
-
-  Redistributions in binary form must reproduce the above copyright notice, 
-  this list of conditions and the following disclaimer in the documentation 
-  and/or other materials provided with the distribution. 
-
-  Neither the name of the University of Californa, Davis nor the names of 
-  the contributors may be used to endorse or promote products derived 
-  from this software without specific prior written permission.
-
-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
-  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
-  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
-  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
-  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
-  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
-  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
-  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
-  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
-  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
-  OF SUCH DAMAGE.
-*/
-
-#include "renderbuffer.h"
-#include <iostream>
-using namespace std;
-
-Renderbuffer::Renderbuffer()
-  : m_bufId(_CreateBufferId())
-{}
-
-Renderbuffer::Renderbuffer(GLenum internalFormat, int width, int height)
-  : m_bufId(_CreateBufferId())
-{
-  Set(internalFormat, width, height);
-}
-
-Renderbuffer::~Renderbuffer()
-{
-  glDeleteRenderbuffersEXT(1, &m_bufId);
-}
-
-void Renderbuffer::Bind() 
-{
-  glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, m_bufId);
-}
-
-void Renderbuffer::Unbind() 
-{
-  glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, 0);
-}
-
-void Renderbuffer::Set(GLenum internalFormat, int width, int height)
-{
-  int maxSize = Renderbuffer::GetMaxSize();
-  if (width > maxSize || height > maxSize ) {
-    cerr << "Renderbuffer::Renderbuffer() ERROR:\n\t"
-         << "Size too big (" << width << ", " << height << ")\n";
-    return;
-  }
-
-  // Guarded bind
-  GLint savedId = 0;
-  glGetIntegerv( GL_RENDERBUFFER_BINDING_EXT, &savedId );
-  if (savedId != (GLint)m_bufId) {
-    Bind();
-  }
-
-  // Allocate memory for renderBuffer
-  glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, internalFormat, width, height );
-
-  // Guarded unbind
-  if (savedId != (GLint)m_bufId) {
-    glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, savedId);
-  }
-}
-
-GLuint Renderbuffer::GetId() const 
-{
-  return m_bufId;
-}
-
-GLint Renderbuffer::GetMaxSize()
-{
-  GLint maxAttach = 0;
-  glGetIntegerv( GL_MAX_RENDERBUFFER_SIZE_EXT, &maxAttach );
-  return maxAttach;
-}
-
-GLuint Renderbuffer::_CreateBufferId() 
-{
-  GLuint id = 0;
-  glGenRenderbuffersEXT(1, &id);
-  return id;
-}
-
diff --git a/progressivePhotonMap/CMakeLists.txt b/progressivePhotonMap/CMakeLists.txt
index d8e9d87..bf1a734 100644
--- a/progressivePhotonMap/CMakeLists.txt
+++ b/progressivePhotonMap/CMakeLists.txt
@@ -30,8 +30,6 @@ if(GLUT_FOUND AND OPENGL_FOUND)
     ppm.cpp
     ppm.h
     select.h
-    PpmObjLoader.h
-    PpmObjLoader.cpp
     ppm_rtpass.cu
     ppm_ppass.cu
     ppm_gather.cu
diff --git a/progressivePhotonMap/HitRecordInitialize.cu b/progressivePhotonMap/HitRecordInitialize.cu
index 2a3a036..8b92c66 100644
--- a/progressivePhotonMap/HitRecordInitialize.cu
+++ b/progressivePhotonMap/HitRecordInitialize.cu
@@ -5,7 +5,7 @@
 
 using namespace optix;
 
-rtBuffer<HitRecord, 2>           rtpass_output_buffer;
+rtBuffer<HitRecord, 3>           rtpass_output_buffer;
 rtDeclareVariable(float,         rtpass_default_radius2, , );
 
 rtDeclareVariable(uint2, launchIndex, rtLaunchIndex, );
@@ -22,5 +22,6 @@ RT_PROGRAM void kernel()
     rec.flux = make_float3(0.0f, 0.0f, 0.0f);
     rec.accum_atten = 0.0f;
     rec.volumetricRadiance = make_float3(0.0f);
-    rtpass_output_buffer[launchIndex] = rec;
+	for (int i = 0; i < TOTAL_FRAME; ++i)
+		rtpass_output_buffer[make_uint3(launchIndex, i)] = rec;
 }
\ No newline at end of file
diff --git a/progressivePhotonMap/ParticipatingMedium.cu b/progressivePhotonMap/ParticipatingMedium.cu
index 158c3cf..07872ab 100644
--- a/progressivePhotonMap/ParticipatingMedium.cu
+++ b/progressivePhotonMap/ParticipatingMedium.cu
@@ -66,6 +66,7 @@ RT_PROGRAM void closestHitRadiance()
         hitPrd.volumetricRadiance *= transmittance;
         hitPrd.volumetricRadiance += attenSaved*volRadiancePrd.radiance;
         hitPrd.attenuation *= transmittance;
+		hitPrd.frame = volRadiancePrd.frame;
 
         //rtPrintf("%f\n", volRadiancePrd.radiance.x);
         //if (volRadiancePrd.numHits>0) rtPrintf("%f %f %f %d \n", distance , transmittance, hitPrd.volumetricRadiance.x, volRadiancePrd.numHits);
diff --git a/progressivePhotonMap/PpmObjLoader.cpp b/progressivePhotonMap/PpmObjLoader.cpp
deleted file mode 100644
index 605aa58..0000000
--- a/progressivePhotonMap/PpmObjLoader.cpp
+++ /dev/null
@@ -1,376 +0,0 @@
-
-/*
- * Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
- *
- * NVIDIA Corporation and its licensors retain all intellectual property and proprietary
- * rights in and to this software, related documentation and any modifications thereto.
- * Any use, reproduction, disclosure or distribution of this software and related
- * documentation without an express license agreement from NVIDIA Corporation is strictly
- * prohibited.
- *
- * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
- * AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
- * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
- * PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
- * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
- * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
- * BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
- * INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGES
- */
-
-#include "PpmObjLoader.h"
-#include "ppm.h"
-
-#include <optixu/optixu_math_namespace.h>
-#include <ImageLoader.h>
-
-#include <cassert>
-#include <fstream>
-#include <iostream>
-#include <sstream>
-#include <vector>
-#include <string.h>
-
-using namespace optix;
-
-
-//------------------------------------------------------------------------------
-// 
-//  Helper functions
-//
-//------------------------------------------------------------------------------
-
-namespace 
-{
-  std::string getExtension( const std::string& filename )
-  {
-    // Get the filename extension
-    std::string::size_type extension_index = filename.find_last_of( "." );
-    return extension_index != std::string::npos ?
-           filename.substr( extension_index+1 ) :
-           std::string();
-  }
-}
-
-
-//------------------------------------------------------------------------------
-// 
-//  PpmObjLoader class definition 
-//
-//------------------------------------------------------------------------------
-
-PpmObjLoader::PpmObjLoader( const std::string& filename,
-                            Context context,
-                            GeometryGroup geometrygroup,
-                            const AccelDescriptor& accel_desc,
-                            Material material )
-: m_filename( filename ),
-  m_context( context ),
-  m_geometrygroup( geometrygroup ),
-  m_vbuffer( 0 ),
-  m_nbuffer( 0 ),
-  m_tbuffer( 0 ),
-  m_material( material ),
-  m_have_default_material( true ),
-  m_aabb(),
-  m_accel_desc( accel_desc )
-{
-  m_pathname = m_filename.substr(0,m_filename.find_last_of("/\\")+1);
-}
-
-
-PpmObjLoader::PpmObjLoader( const std::string& filename,
-                            Context context,
-                            GeometryGroup geometrygroup,
-                            const AccelDescriptor& accel_desc )
-: m_filename( filename ),
-  m_context( context ),
-  m_geometrygroup( geometrygroup ),
-  m_vbuffer( 0 ),
-  m_nbuffer( 0 ),
-  m_tbuffer( 0 ),
-  m_material( 0 ),
-  m_have_default_material( false ),
-  m_aabb(),
-  m_accel_desc( accel_desc )
-{
-  m_pathname = m_filename.substr(0,m_filename.find_last_of("/\\")+1);
-}
-
-
-void PpmObjLoader::load() 
-{
-  // parse the OBJ file
-  GLMmodel* model = glmReadOBJ( m_filename.c_str() );
-  if ( !model ) {
-    std::stringstream ss;
-    ss << "PpmObjLoader::loadImpl - glmReadOBJ( '" << m_filename << "' ) failed" << std::endl;
-    throw Exception( ss.str() );
-  }
-
-  // Create a single material to be shared by all GeometryInstances
-  createMaterial(); 
-  
-  // Create vertex data buffers to be shared by all Geometries
-  loadVertexData( model );
-
-  // Load triangle_mesh programs
-  std::string path = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_triangle_mesh.cu.ptx";
-  Program mesh_intersect = m_context->createProgramFromPTXFile( path, "mesh_intersect" );
-  Program mesh_bbox      = m_context->createProgramFromPTXFile( path, "mesh_bounds" );
-
-  // Create a GeometryInstance and Geometry for each obj group
-  createMaterialParams( model );
-  createGeometryInstances( model, mesh_intersect, mesh_bbox );
-
-  glmDelete( model );
-}
-
-
-void PpmObjLoader::createMaterial() 
-{
-  if ( m_have_default_material ) return;
-
-  std::string path1 = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_ppm_rtpass.cu.ptx";
-  std::string path2 = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_ppm_ppass.cu.ptx";
-  std::string path3 = std::string(sutilSamplesPtxDir()) + "/progressivePhotonMap_generated_ppm_gather.cu.ptx";
-
-  Program closest_hit1 = m_context->createProgramFromPTXFile( path1, "rtpass_closest_hit" );
-  Program closest_hit2 = m_context->createProgramFromPTXFile( path2, "ppass_closest_hit" );
-  Program any_hit      = m_context->createProgramFromPTXFile( path3, "gather_any_hit" );
-  m_material           = m_context->createMaterial();
-  m_material->setClosestHitProgram( rtpass_ray_type, closest_hit1 );
-  m_material->setClosestHitProgram( ppass_and_gather_ray_type, closest_hit2 );
-  m_material->setAnyHitProgram( shadow_ray_type, any_hit );
-
-  m_material->setClosestHitProgram(radiance_in_participating_medium, closest_hit1);
-  m_material->setClosestHitProgram(photon_in_participating_medium, closest_hit2);
-}
-
-
-void PpmObjLoader::loadVertexData( GLMmodel* model ) 
-{
-  unsigned int num_vertices  = model->numvertices;
-  unsigned int num_texcoords = model->numtexcoords;
-  unsigned int num_normals   = model->numnormals;
-
-  // Create vertex buffer
-  m_vbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_FLOAT3, num_vertices );
-  float3* vbuffer_data = static_cast<float3*>( m_vbuffer->map() );
-
-  // Create normal buffer
-  m_nbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_FLOAT3, num_normals );
-  float3* nbuffer_data = static_cast<float3*>( m_nbuffer->map() );
-
-  // Create texcoord buffer
-  m_tbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_FLOAT2, num_texcoords );
-  float2* tbuffer_data = static_cast<float2*>( m_tbuffer->map() );
-
-  // Copy vertex, normal and texcoord arrays into buffers 
-  memcpy( static_cast<void*>( vbuffer_data ),
-          static_cast<void*>( &(model->vertices[3]) ),
-          sizeof( float )*num_vertices*3 ); 
-  memcpy( static_cast<void*>( nbuffer_data ),
-          static_cast<void*>( &(model->normals[3]) ),
-          sizeof( float )*num_normals*3 ); 
-  memcpy( static_cast<void*>( tbuffer_data ),
-          static_cast<void*>( &(model->texcoords[2]) ),
-          sizeof( float )*num_texcoords*2 ); 
-
-  m_vbuffer->unmap();
-  m_nbuffer->unmap();
-  m_tbuffer->unmap();
-
-  // Calculate bbox of model
-  for ( unsigned int i = 1u; i <= num_vertices; ++i )
-  {
-    unsigned int index = i*3u;
-    float3 t;
-    t.x = model->vertices[ index + 0u ];
-    t.y = model->vertices[ index + 1u ];
-    t.z = model->vertices[ index + 2u ];
-
-    m_aabb.include( t );
-  }
-}
-
-
-void PpmObjLoader::createGeometryInstances( GLMmodel* model,
-                                           Program mesh_intersect,
-                                           Program mesh_bbox)
-{
-  std::vector<GeometryInstance> instances;
-
-  // Loop over all groups -- grab the triangles and material props from each group
-  unsigned int triangle_count = 0u;
-  unsigned int group_count = 0u;
-  for ( GLMgroup* obj_group = model->groups;
-        obj_group != 0;
-        obj_group = obj_group->next, group_count++ ) {
-
-    unsigned int num_triangles = obj_group->numtriangles;
-    if ( num_triangles == 0 ) continue; 
-
-    // Create vertex index buffers
-    Buffer vindex_buffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_INT3, num_triangles );
-    int3* vindex_buffer_data = static_cast<int3*>( vindex_buffer->map() );
-
-    Buffer tindex_buffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_INT3, num_triangles );
-    int3* tindex_buffer_data = static_cast<int3*>( tindex_buffer->map() );
-
-    Buffer nindex_buffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_INT3, num_triangles );
-    int3* nindex_buffer_data = static_cast<int3*>( nindex_buffer->map() );
-
-    // TODO: Create empty buffer for mat indices, have obj_material check for zero length
-    Buffer mbuffer = m_context->createBuffer( RT_BUFFER_INPUT, RT_FORMAT_UNSIGNED_INT, num_triangles );
-    uint* mbuffer_data = static_cast<uint*>( mbuffer->map() );
-
-    // Create the mesh object
-    Geometry mesh = m_context->createGeometry();
-    mesh->setPrimitiveCount( num_triangles );
-    mesh->setIntersectionProgram( mesh_intersect);
-    mesh->setBoundingBoxProgram( mesh_bbox );
-    mesh[ "vertex_buffer" ]->setBuffer( m_vbuffer );
-    mesh[ "normal_buffer" ]->setBuffer( m_nbuffer );
-    mesh[ "texcoord_buffer" ]->setBuffer( m_tbuffer );
-    mesh[ "vindex_buffer" ]->setBuffer( vindex_buffer );
-    mesh[ "tindex_buffer" ]->setBuffer( tindex_buffer );
-    mesh[ "nindex_buffer" ]->setBuffer( nindex_buffer );
-    mesh[ "material_buffer" ]->setBuffer( mbuffer );
-
-    // Create the geom instance to hold mesh and material params
-    GeometryInstance instance = m_context->createGeometryInstance( mesh, &m_material, &m_material+1 );
-    loadMaterialParams( instance, obj_group->material );
-    instances.push_back( instance );
-
-    for ( unsigned int i = 0; i < obj_group->numtriangles; ++i, ++triangle_count ) {
-
-      unsigned int tindex = obj_group->triangles[i];
-      int3 vindices;
-      vindices.x = model->triangles[ tindex ].vindices[0] - 1; 
-      vindices.y = model->triangles[ tindex ].vindices[1] - 1; 
-      vindices.z = model->triangles[ tindex ].vindices[2] - 1; 
-      
-      int3 nindices;
-      nindices.x = model->triangles[ tindex ].nindices[0] - 1; 
-      nindices.y = model->triangles[ tindex ].nindices[1] - 1; 
-      nindices.z = model->triangles[ tindex ].nindices[2] - 1; 
-
-      int3 tindices;
-      tindices.x = model->triangles[ tindex ].tindices[0] - 1; 
-      tindices.y = model->triangles[ tindex ].tindices[1] - 1; 
-      tindices.z = model->triangles[ tindex ].tindices[2] - 1; 
-
-      vindex_buffer_data[ i ] = vindices;
-      nindex_buffer_data[ i ] = nindices;
-      tindex_buffer_data[ i ] = tindices;
-      mbuffer_data[ i ] = 0; // See above TODO
-    }
-
-    vindex_buffer->unmap();
-    tindex_buffer->unmap();
-    nindex_buffer->unmap();
-    mbuffer->unmap();
-  }
-
-  assert( triangle_count == model->numtriangles );
-  
-  // Set up group 
-  m_geometrygroup->setChildCount( static_cast<unsigned int>(instances.size()) );
-  Acceleration acceleration = m_context->createAcceleration(m_accel_desc.builder.c_str(), m_accel_desc.traverser.c_str());
-  acceleration->setProperty( "vertex_buffer_name", "vertex_buffer" );
-  acceleration->setProperty( "index_buffer_name", "vindex_buffer" );
-  m_geometrygroup->setAcceleration( acceleration );
-  acceleration->markDirty();
-
-
-  for ( unsigned int i = 0; i < instances.size(); ++i )
-    m_geometrygroup->setChild( i, instances[i] );
-}
-
-
-bool PpmObjLoader::isMyFile( const std::string& filename )
-{
-  return getExtension( filename ) == "obj";
-}
-
-
-void PpmObjLoader::loadMaterialParams( GeometryInstance gi, unsigned int index )
-{
-  // We dont need any material params if we have default material
-  if ( m_have_default_material ) {
-    return;
-  }
-
-  // If no materials were given in model use reasonable defaults
-  if ( m_material_params.empty() ) {
-    std::cerr << " PpmPpmObjLoader not setup to use material override yet! " << std::endl;
-    gi[ "emissive" ]->setFloat( 0.0f, 0.0f, 0.0f );
-    gi[ "phong_exp" ]->setFloat( 32.0f );
-    gi[ "reflectivity" ]->setFloat( 0.3f, 0.3f, 0.3f );
-    gi[ "illum" ]->setInt( 2 );
-
-    gi["ambient_map"]->setTextureSampler( loadTexture( m_context, "", make_float3( 0.2f, 0.2f, 0.2f ) ) );
-    gi["diffuse_map"]->setTextureSampler( loadTexture( m_context, "", make_float3( 0.8f, 0.8f, 0.8f ) ) );
-    gi["specular_map"]->setTextureSampler( loadTexture( m_context, "", make_float3( 0.0f, 0.0f, 0.0f ) ) );
-    return;
-  }
-
-  // Load params from this material into the GI 
-  if ( index < m_material_params.size() ) {
-    MatParams& mp = m_material_params[index];
-    gi[ "emitted" ]->setFloat( 0.0f, 0.0f, 0.0f );
-    gi[ "Kd"  ]->setFloat( mp.Kd );
-    gi[ "Ks"  ]->setFloat( mp.Ks );
-    gi[ "grid_color"  ]->setFloat( 0.5f, 0.5f, 0.5f );
-    gi[ "use_grid"  ]->setUint( mp.name == "01_-_Default" ? 1u : 0 );
-    return;
-  }
-
-  // Should never reach this point
-  std::cerr << "WARNING -- PpmObjLoader::loadMaterialParams given index out of range: "
-            << index << std::endl;
-}
-
-
-void PpmObjLoader::createMaterialParams( GLMmodel* model )
-{
-  m_material_params.resize( model->nummaterials );
-  for ( unsigned int i = 0; i < model->nummaterials; ++i ) {
-
-    GLMmaterial& mat = model->materials[i];
-    MatParams& params = m_material_params[i];
-
-    /*
-    params.emissive     = make_float3( mat.emmissive[0], mat.emmissive[1], mat.emmissive[2] );
-    params.reflectivity = make_float3( mat.specular[0], mat.specular[1], mat.specular[2] );
-    params.phong_exp    = mat.shininess; 
-    params.illum        = ( (mat.shader > 3) ? 2 : mat.shader ); // use 2 as default if out-of-range
-    */
-
-    float3 Kd = make_float3( mat.diffuse[0],
-                             mat.diffuse[1],
-                             mat.diffuse[2] );
-    //float3 Ka = make_float3( mat.ambient[0],
-    //                         mat.ambient[1],
-    //                         mat.ambient[2] );
-    float3 Ks = make_float3( mat.specular[0],
-                             mat.specular[1],
-                             mat.specular[2] );
-    params.Kd = Kd;
-    params.Ks = Ks;
-    params.name = mat.name;
-
-    /*
-    // load textures relatively to OBJ main file
-    std::string ambient_map  = strlen(mat.ambient_map)  ? m_pathname + mat.ambient_map  : "";
-    std::string diffuse_map  = strlen(mat.diffuse_map)  ? m_pathname + mat.diffuse_map  : "";
-    std::string specular_map = strlen(mat.specular_map) ? m_pathname + mat.specular_map : "";
-
-    params.ambient_map = loadTexture( m_context, ambient_map, Ka );
-    params.diffuse_map = loadTexture( m_context, diffuse_map, Kd );
-    params.specular_map = loadTexture( m_context, specular_map, Ks );
-    */
-  }
-}
diff --git a/progressivePhotonMap/PpmObjLoader.h b/progressivePhotonMap/PpmObjLoader.h
deleted file mode 100644
index 50f95eb..0000000
--- a/progressivePhotonMap/PpmObjLoader.h
+++ /dev/null
@@ -1,94 +0,0 @@
-
-/*
- * Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
- *
- * NVIDIA Corporation and its licensors retain all intellectual property and proprietary
- * rights in and to this software, related documentation and any modifications thereto.
- * Any use, reproduction, disclosure or distribution of this software and related
- * documentation without an express license agreement from NVIDIA Corporation is strictly
- * prohibited.
- *
- * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
- * AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
- * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
- * PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS BE LIABLE FOR ANY
- * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
- * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
- * BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS) ARISING OUT OF THE USE OF OR
- * INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGES
- */
-
-#pragma once
-
-#include "AccelDescriptor.h"
-#include <sutil.h>
-#include <optixu/optixpp_namespace.h>
-#include <optixu/optixu_aabb_namespace.h>
-#include <glm.h>
-#include <string>
-
-
-//-----------------------------------------------------------------------------
-// 
-//  PpmObjLoader class declaration 
-//
-//-----------------------------------------------------------------------------
-
-class PpmObjLoader
-{
-public:
-  PpmObjLoader( const std::string& filename,          // Model filename
-                optix::Context context,               // Context for RT object creation
-                optix::GeometryGroup geometrygroup,   // Empty geom group to hold model
-                const AccelDescriptor& accel_desc);   // Acceleration structure preferences
-
-  PpmObjLoader( const std::string& filename,
-                optix::Context context,
-                optix::GeometryGroup geometrygroup,
-                const AccelDescriptor& accel_desc,
-                optix::Material material );           // Material override
-
-  void load();
-
-  optix::Aabb getSceneBBox()const { return m_aabb; }
-
-  static bool isMyFile( const std::string& filename );
-
-private:
-
-  struct MatParams
-  {
-    std::string name;
-    optix::float3 emissive;
-    optix::float3 reflectivity;
-    float  phong_exp;
-    int    illum;
-    optix::float3 Kd;
-    optix::float3 Ks;
-    optix::TextureSampler ambient_map;
-    optix::TextureSampler diffuse_map;
-    optix::TextureSampler specular_map;
-  };
-
-  void createMaterial();
-  void createGeometryInstances( GLMmodel* model,
-                                optix::Program mesh_intersect,
-                                optix::Program mesh_bbox );
-  void loadVertexData( GLMmodel* model );
-  void createMaterialParams( GLMmodel* model );
-  void loadMaterialParams( optix::GeometryInstance gi, unsigned int index );
-
-  std::string            m_pathname;
-  std::string            m_filename;
-  optix::Context         m_context;
-  optix::GeometryGroup   m_geometrygroup;
-  optix::Buffer          m_vbuffer;
-  optix::Buffer          m_nbuffer;
-  optix::Buffer          m_tbuffer;
-  optix::Material        m_material;
-  bool                   m_have_default_material;
-  optix::Aabb            m_aabb;
-  std::vector<MatParams> m_material_params;
-  AccelDescriptor        m_accel_desc;
-};
diff --git a/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu b/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu
index 5bed80e..6587d4a 100644
--- a/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu
+++ b/progressivePhotonMap/VolumetricPhotonSphereRadiance.cu
@@ -19,12 +19,16 @@ rtDeclareVariable(float, volumetricRadius, ,);
 RT_PROGRAM void anyHitRadiance()
 {
     float t = dot(photonPosition-ray.origin, ray.direction)/100;
-
+	float3 dist3 = photonPosition - make_float3(343.0f, 548.6f, 227.0f);
+	float dist = dist3.x * dist3.x + dist3.y * dist3.y + dist3.z * dist3.z;
+	float totalDist = 1000000;
+	unsigned int frame = floor(dist * TOTAL_FRAME / totalDist);
     if(t < ray.tmax && t > ray.tmin)
     {
         volRadiancePrd.radiance += (1/(M_PIf*volumetricRadius*volumetricRadius)) * photonPower * exp(-volRadiancePrd.sigma_t*t) * (1.f/(4.f*M_PIf));
         //rtPrintf("%f %f %f %f\n", t, volumetricRadius, photonPower.x, (1/(M_PIf*volumetricRadius*volumetricRadius)) * photonPower.x * exp(-volRadiancePrd.sigma_t*t) * (1.f/(4.f*M_PIf)));
         volRadiancePrd.numHits++;
+		volRadiancePrd.frame = frame;
     }
     rtIgnoreIntersection();
 }
\ No newline at end of file
diff --git a/progressivePhotonMap/glass.cu b/progressivePhotonMap/glass.cu
index bc111fb..b835e21 100644
--- a/progressivePhotonMap/glass.cu
+++ b/progressivePhotonMap/glass.cu
@@ -66,7 +66,7 @@ RT_PROGRAM void gather_any_hit_glass()
 }
 
 rtDeclareVariable(HitPRD, hit_prd, rtPayload, );
-rtBuffer<HitRecord, 2>           rtpass_output_buffer;
+rtBuffer<HitRecord, 3>           rtpass_output_buffer;
 
 rtTextureSampler<float4, 2>      diffuse_map;
 rtDeclareVariable(float, diffuse_map_scale, , );
@@ -107,7 +107,7 @@ RT_PROGRAM void rtpass_closest_hit_glass()
 		float v     = 0.5f * ( 1.0f + sin(phi) );
 		float3 result = make_float3(tex2D(envmap, u, v));
 
-		HitRecord rec = rtpass_output_buffer[launch_index];
+		HitRecord rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
 		// We hit a diffuse surface; record hit and return
 		rec.position = hit_point;
 		rec.normal = ffnormal;
@@ -119,7 +119,7 @@ RT_PROGRAM void rtpass_closest_hit_glass()
 		rec.attenuated_Kd += result*2;
 		//rtPrintf("%f %f %f\n", result.x, result.y, result.z);
 		//rtPrintf("%f %f %f\n", rec.attenuated_Kd.x, rec.attenuated_Kd.y, rec.attenuated_Kd.z);
-		rtpass_output_buffer[launch_index] = rec;
+		rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)] = rec;
 	}
 	hit_prd.lastTHit = tHitStack;
 }
diff --git a/progressivePhotonMap/ppm.cpp b/progressivePhotonMap/ppm.cpp
index 3a81001..b547973 100644
--- a/progressivePhotonMap/ppm.cpp
+++ b/progressivePhotonMap/ppm.cpp
@@ -37,7 +37,6 @@
 #include <limits>
 #include "ppm.h"
 #include "select.h"
-#include "PpmObjLoader.h"
 #include "random.h"
 #include "model.h"
 #include <fstream>
@@ -183,6 +182,7 @@ private:
 	Material      m_glass_material;
 
 	Buffer        m_display_buffer;
+	std::vector<Buffer> m_display_buffer_frames;
 	Buffer        m_photons;
 	Buffer        m_photon_map;
 	Buffer        m_debug_buffer;
@@ -295,6 +295,7 @@ void ProgressivePhotonScene::initScene(InitialCameraData& camera_data)
 	m_display_buffer = createOutputBuffer(RT_FORMAT_FLOAT4, WIDTH, HEIGHT);
 	m_context["output_buffer"]->set(m_display_buffer);
 
+
 	// Debug output buffer
 	m_debug_buffer = m_context->createBuffer(RT_BUFFER_OUTPUT);
 	m_debug_buffer->setFormat(RT_FORMAT_FLOAT4);
@@ -305,7 +306,7 @@ void ProgressivePhotonScene::initScene(InitialCameraData& camera_data)
 	Buffer output_buffer = m_context->createBuffer(RT_BUFFER_OUTPUT);
 	output_buffer->setFormat(RT_FORMAT_USER);
 	output_buffer->setElementSize(sizeof(HitRecord));
-	output_buffer->setSize(WIDTH, HEIGHT);
+	output_buffer->setSize(WIDTH, HEIGHT, TOTAL_FRAME);
 	m_context["rtpass_output_buffer"]->set(output_buffer);
 
 	// RTPass pixel sample buffers
@@ -671,8 +672,8 @@ void ProgressivePhotonScene::createPhotonMap()
 void ProgressivePhotonScene::trace(const RayGenCameraData& camera_data)
 {
 	Buffer output_buffer = m_context["rtpass_output_buffer"]->getBuffer();
-	RTsize buffer_width, buffer_height;
-	output_buffer->getSize(buffer_width, buffer_height);
+	RTsize buffer_width, buffer_height, buffer_frame;
+	output_buffer->getSize(buffer_width, buffer_height, buffer_frame);
 
 	m_frame_number = m_camera_changed ? 0u : m_frame_number + 1;
 
@@ -829,7 +830,7 @@ void ProgressivePhotonScene::trace(const RayGenCameraData& camera_data)
 void ProgressivePhotonScene::doResize(unsigned int width, unsigned int height)
 {
 	// display buffer resizing handled in base class
-	m_context["rtpass_output_buffer"]->getBuffer()->setSize(width, height);
+	m_context["rtpass_output_buffer"]->getBuffer()->setSize(width, height, TOTAL_FRAME);
 	m_context["output_buffer"]->getBuffer()->setSize(width, height);
 	m_context["image_rnd_seeds"]->getBuffer()->setSize(width, height);
 	m_context["debug_buffer"]->getBuffer()->setSize(width, height);
diff --git a/progressivePhotonMap/ppm.h b/progressivePhotonMap/ppm.h
index b9b560d..44ea52e 100644
--- a/progressivePhotonMap/ppm.h
+++ b/progressivePhotonMap/ppm.h
@@ -30,6 +30,7 @@
 #define  PPM_IN_SHADOW ( 1 << 5 )
 #define  PPM_OVERFLOW  ( 1 << 6 )
 #define  PPM_HIT       ( 1 << 7 )
+#define TOTAL_FRAME 4
 
 enum RayTypes
 {
@@ -92,6 +93,7 @@ struct HitPRD
     optix::uint   ray_depth;
     optix::float3 volumetricRadiance;
     float lastTHit;
+	optix::uint frame;
 };
 
 
@@ -136,6 +138,7 @@ struct VolumetricRadiancePRD
     float sigma_s;
     optix::float3 radiance;
     unsigned int numHits;
+	optix::uint frame;
 };
 
 struct Photon
diff --git a/progressivePhotonMap/ppm_gather.cu b/progressivePhotonMap/ppm_gather.cu
index bfa4120..0e3b44b 100644
--- a/progressivePhotonMap/ppm_gather.cu
+++ b/progressivePhotonMap/ppm_gather.cu
@@ -36,7 +36,7 @@ rtDeclareVariable(rtObject,      top_object, , );
 rtBuffer<float4, 2>              output_buffer;
 rtBuffer<float4, 2>              debug_buffer;
 rtBuffer<PackedPhotonRecord, 1>  photon_map;
-rtBuffer<PackedHitRecord, 2>     rtpass_output_buffer;
+rtBuffer<PackedHitRecord, 3>     rtpass_output_buffer;
 rtBuffer<uint2, 2>               image_rnd_seeds;
 rtDeclareVariable(float,         scene_epsilon, , );
 rtDeclareVariable(float,         alpha, , );
@@ -82,7 +82,7 @@ void accumulatePhoton( const PackedPhotonRecord& photon,
 RT_PROGRAM void gather()
 {
   clock_t start = clock();
-  PackedHitRecord rec = rtpass_output_buffer[launch_index];
+  PackedHitRecord rec = rtpass_output_buffer[make_uint3(launch_index, 1)];
   float3 rec_position = make_float3( rec.a.x, rec.a.y, rec.a.z );
   float3 rec_normal   = make_float3( rec.a.w, rec.b.x, rec.b.y );
   float3 rec_atten_Kd = make_float3( rec.b.z, rec.b.w, rec.c.x );
@@ -226,7 +226,7 @@ RT_PROGRAM void gather()
 
   //rec_atten_Kd += make_float3(tex2D(diffuse_map, texcoord.x*diffuse_map_scale, texcoord.y*diffuse_map_scale));
   float3 direct_flux = light.power * avg_atten *rec_atten_Kd;
-  rtpass_output_buffer[launch_index] = rec;
+  rtpass_output_buffer[make_uint3(launch_index, 1)] = rec;
   //float3 final_color = indirect_flux;
   float3 final_color = direct_flux + indirect_flux + rec_volumetricRadiance / total_emitted + ambient_light*rec_atten_Kd;
   //float3 final_color = indirect_flux ;
diff --git a/progressivePhotonMap/ppm_rtpass.cu b/progressivePhotonMap/ppm_rtpass.cu
index edb06da..4f2aa5e 100644
--- a/progressivePhotonMap/ppm_rtpass.cu
+++ b/progressivePhotonMap/ppm_rtpass.cu
@@ -36,7 +36,7 @@ rtDeclareVariable(rtObject,      top_object, , );
 //
 // Ray generation program
 //
-rtBuffer<HitRecord, 2>           rtpass_output_buffer;
+rtBuffer<HitRecord, 3>           rtpass_output_buffer;
 rtBuffer<uint2, 2>               image_rnd_seeds;
 rtDeclareVariable(float,         rtpass_default_radius2, , );
 rtDeclareVariable(float3,        rtpass_eye, , );
@@ -47,7 +47,8 @@ rtDeclareVariable(uint2,      launch_index, rtLaunchIndex, );
 
 RT_PROGRAM void rtpass_camera()
 {
-  float2 screen = make_float2( rtpass_output_buffer.size() );
+
+  float2 screen = make_float2(rtpass_output_buffer.size().x, rtpass_output_buffer.size().y);
   /*
   uint   seed   = image_rnd_seeds[index];                       // If we start writing into this buffer here we will
   float2 sample = make_float2( rnd(seed.x), rnd(seed.y) );      // need to make it an INPUT_OUTPUT buffer.  For now it
@@ -66,9 +67,9 @@ RT_PROGRAM void rtpass_camera()
   prd.attenuation = make_float3( 1.0f );
   prd.ray_depth   = 0u;
   prd.volumetricRadiance = make_float3(0.0f);
+  prd.frame=0;
   rtTrace( top_object, ray, prd );
-  rtpass_output_buffer[launch_index].volumetricRadiance += prd.volumetricRadiance;
-
+  rtpass_output_buffer[make_uint3(launch_index, prd.frame)].volumetricRadiance += prd.volumetricRadiance;
 }
 
 // 
@@ -96,7 +97,7 @@ RT_PROGRAM void rtpass_closest_hit()
 {
   // Check if this is a light source
   if( fmaxf( emitted ) > 0.0f ) {
-    HitRecord& rec = rtpass_output_buffer[ launch_index ];
+	  HitRecord& rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
     rec.attenuated_Kd = emitted*hit_prd.attenuation; 
     rec.flags = 0u;
     return;
@@ -111,7 +112,7 @@ RT_PROGRAM void rtpass_closest_hit()
   double tHitStack = t_hit + 0.1 - 0.1; // Important, prevents compiler optimization on variable
   if( fmaxf( Kd ) > 0.0f ) {
     // We hit a diffuse surface; record hit and return
-    HitRecord rec = rtpass_output_buffer[ launch_index ];;
+	  HitRecord rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
     rec.position = hit_point; 
     rec.normal = ffnormal;
     if( !use_grid ) {
@@ -131,7 +132,7 @@ RT_PROGRAM void rtpass_closest_hit()
     rec.flags = PPM_HIT;
 	rec.attenuated_Kd *= make_float3(tex2D(diffuse_map, texcoord.x*diffuse_map_scale, texcoord.y*diffuse_map_scale));
     //rtPrintf("%f %f %f\n", rec.attenuated_Kd.x, rec.attenuated_Kd.y, rec.attenuated_Kd.z);
-    rtpass_output_buffer[launch_index] = rec;
+	rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)] = rec;
   } else {
     // Make reflection ray
     hit_prd.attenuation = hit_prd.attenuation * Ks;
@@ -155,7 +156,7 @@ RT_PROGRAM void rtpass_miss()
   float v     = 0.5f * ( 1.0f + sin(phi) );
   float3 result = make_float3(tex2D(envmap, u, v));
 
-  HitRecord& rec = rtpass_output_buffer[launch_index];
+  HitRecord& rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
   rec.flags = 0u;
   rec.attenuated_Kd = hit_prd.attenuation * result;
 }
@@ -179,7 +180,7 @@ RT_PROGRAM void rtpass_miss()
 rtDeclareVariable(float3, rtpass_bad_color, , );
 RT_PROGRAM void rtpass_exception()
 {
-  HitRecord& rec = rtpass_output_buffer[launch_index];
+	HitRecord& rec = rtpass_output_buffer[make_uint3(launch_index, hit_prd.frame)];
 
   rec.flags = PPM_OVERFLOW;
   rec.attenuated_Kd = rtpass_bad_color;
